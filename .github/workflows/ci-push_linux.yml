name: CI Linux

on: [push]

jobs:

# Build jobs
# These jobs build each Racket component separately and tests on the component start as soon as each
# component finishes building.

  build-racketcgc:
    runs-on: ubuntu-18.04
    container:
      image: racket/racket-ci:latest

    strategy:
      fail-fast: false
      matrix:
        cify: [cify, nocify]      
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100
    - name: Setup cify if enabled
      if: matrix.cify == 'cify'
      run: echo "::set-env name=CIFY_OPTION::--enable-cify"
    - name: Setup cify if disabled
      if: matrix.cify == 'nocify'
      run: echo "::set-env name=CIFY_OPTION::--disable-cify"
    - name: Configuring Racket CGC
      working-directory: ./racket/src
      run: >
        ./configure
        --prefix=/usr/local/racketcgc
        --enable-werror
        --enable-cgcdefault
        --enable-jit
        --enable-foreign
        --enable-places
        --enable-futures
        --enable-float
        $CIFY_OPTION
        --enable-pthread
        --disable-docs
    - name: Building
      working-directory: ./racket/src
      run: |
        export cpus=$(nproc)
        make -l $cpus -j $((cpus+1))
    - name: Installing
      working-directory: ./racket/src
      run: make -j  $((cpus+1)) install
    - name: Tarballing
      working-directory: /usr/local
      run: tar -cvjf /tmp/racketcgc-debian10-${{ matrix.cify }}-x64_git${{ github.sha }}.tar.bz2 racketcgc
    - uses: actions/upload-artifact@v2
      with:
        name: racketcgc-debian10-${{ matrix.cify }}-x64_git${{ github.sha }}
        path: /tmp/racketcgc-debian10-${{ matrix.cify }}-x64_git${{ github.sha }}.tar.bz2

  build-racket3m:
    runs-on: ubuntu-18.04
    container:
      image: racket/racket-ci:latest
                
    needs: build-racketcgc
      
    strategy:
      fail-fast: false
      matrix:
        cify: [cify, nocify]
        cc: [gcc, clang]
        jit: [jit, nojit]
        efp: [efp, noefp]
        exclude:
          - jit: nojit
            efp: efp
  
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100
    - name: Setup cify if enabled
      if: matrix.cify == 'cify'
      run: echo "::set-env name=CIFY_OPTION::--enable-cify"
    - name: Setup cify if disabled
      if: matrix.cify == 'nocify'
      run: echo "::set-env name=CIFY_OPTION::--disable-cify"
    - name: Setup jit if enabled
      if: matrix.jit == 'jit'
      run: echo "::set-env name=JIT_OPTION::--enable-jit"
    - name: Setup jit if disabled
      if: matrix.jit == 'nojit'
      run: echo "::set-env name=JIT_OPTION::--disable-jit"
    - name: Setup efp if enabled
      if: matrix.efp == 'efp'
      run: echo "::set-env name=EFP_OPTIONS::--enable-extflonums --enable-places --enable-futures"
    - name: Setup efp if disabled
      if: matrix.efp == 'noefp'
      run: echo "::set-env name=EFP_OPTIONS::--disable-extflonums --disable-places --disable-futures"
    - uses: actions/download-artifact@v2
      with:
        name: racketcgc-debian10-nocify-x64_git${{ github.sha }}
        path: /tmp
    - name: Untar
      working-directory: /usr/local
      run: tar -xvjf /tmp/racketcgc-debian10-nocify-x64_git${{ github.sha }}.tar.bz2
    - name: Configuring Racket 3m
      working-directory: ./racket/src
      env:
        CC: ${{ matrix.cc }}
      run: >
        ./configure
        --prefix=/usr/local/racket3m
        --enable-werror
        --enable-racket=/usr/local/racketcgc/bin/racket
        --enable-foreign
        --enable-float
        --disable-docs
        $CIFY_OPTION
        $JIT_OPTION
        $EFP_OPTIONS
        --enable-pthread
    - name: Building
      working-directory: ./racket/src
      run: |
        export cpus=$(nproc)
        make -l $cpus -j $((cpus+1))
    - name: Installing
      working-directory: ./racket/src
      run: make -j $((cpus+1)) install
    # We build on Linux with clang and gcc and on MacOS with clang only.
    # However, it makes little sense to test both builds on Linux so we tarball the
    # gcc build only. Therefore this condition ensure we only perform the tarball
    # and artifact upload on MacOS or (on Linux) if we are building with gcc.
    - name: Tarballing
      working-directory: /usr/local
      run: tar -cvjf /tmp/racket3m-debian10-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha}}.tar.bz2 racket3m
    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'gcc'
      with:
        name: racket3m-debian10-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha }}
        path: /tmp/racket3m-debian10-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha }}.tar.bz2

  build-racketcs:
    runs-on: ubuntu-18.04
    container:
      image: racket/racket-ci:latest

    needs: build-racketcgc
    
    strategy:
      fail-fast: false
      matrix:
        cc: [gcc, clang]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100
    - uses: actions/download-artifact@v2
      with:
        name: racketcgc-debian10-nocify-x64_git${{ github.sha }}
        path: /tmp
    - name: Untar
      working-directory: /usr/local
      run: tar -xvjf /tmp/racketcgc-debian10-nocify-x64_git${{ github.sha}}.tar.bz2
    - name: Checking out ChezScheme
      working-directory: ./racket/src
      run: git clone --depth=1 --recurse-submodules -j3 https://github.com/racket/ChezScheme
    - name: Configuring Racket CS
      working-directory: ./racket/src
      env:
        CC: ${{ matrix.cc }}
      run: >
        ./configure
        --prefix=/usr/local/racketcs
        $RACKET_EXTRA_CONFIGURE_ARGS
        --enable-racket=/usr/local/racketcgc/bin/racket
        --enable-compress
        --disable-docs
        --enable-pthread
        --enable-csdefault
        --enable-csonly
    - name: Building
      working-directory: ./racket/src
      run: |
        export cpus=$(nproc)
        make -l $cpus -j $((cpus+1))
    - name: Installing
      working-directory: ./racket/src
      run: make -j  $((cpus+1)) install
    - name: Tarballing
      working-directory: /usr/local
      run: tar -cvjf /tmp/racketcs-debian10-x64_git${{ github.sha}}.tar.bz2 racketcs
    - uses: actions/upload-artifact@v2
      with:
        name: racketcs-debian10-x64_git${{ github.sha }}
        path: /tmp/racketcs-debian10-x64_git${{ github.sha }}.tar.bz2

  # Tests
  # Unfortunately Actions does not support atm yaml anchors
  # otherwise all the following jobs could be simplified
  # Note: the reason we cannot transform this into a matrix
  # build is because we cannot use variables in the needs keyword.
  test-cgc:
    runs-on: ubuntu-18.04
    container:
      image: racket/racket-ci:latest
      options: --init

    needs: build-racketcgc

    strategy:
      fail-fast: false
      matrix:
        cify: [cify, nocify]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: racketcgc-debian10-${{ matrix.cify }}-x64_git${{ github.sha }}
          path: /tmp
      - name: Untar
        working-directory: /usr/local
        run: tar -xvjf /tmp/racketcgc-debian10-${{ matrix.cify }}-x64_git${{ github.sha }}.tar.bz2
      - name: Extend PATH with Racket executable
        run: echo "::set-env name=PATH::/usr/local/racketcgc/bin:$PATH"
      - name: Check for Racket
        run: racket --version
      - name: Install catalog
        run: |
          racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
          raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
      - name: Install racket-test dependency
        run: raco pkg install --auto racket-test
      - name: Run tests/racket/test
        run: raco test -l tests/racket/test
      - name: Run tests/racket/contract/all
        run: racket -l tests/racket/contract/all
      - name: Run tests/json/json
        run: raco test -l tests/json/json
      - name: Run tests/file/main
        run: raco test -l tests/file/main
      - name: Run tests/net/head
        run: raco test -l tests/net/head
      - name: Run tests/net/uri-codec
        run: raco test -l tests/net/uri-codec
      - name: Run tests/net/url
        run: raco test -l tests/net/url
      - name: Run tests/net/url-port
        run: raco test -l tests/net/url-port
      - name: Run tests/net/encoders
        run: raco test -l tests/net/encoders
      - name: Run tests/openssl/basic
        run: raco test -l tests/openssl/basic
      - name: Run tests/openssl/https
        run: raco test -l tests/openssl/https
      - name: Run tests/match/main
        run: raco test -l tests/match/main
      - name: Run tests/zo-path
        run: raco test -l tests/zo-path
      - name: Run tests/xml
        run: raco test -c tests/xml
      - name: Run tests/future
        run: raco test -c tests/future
      - name: Run tests/stxparse
        run: raco test -c tests/stxparse
      - name: Install db tests dependency
        run: raco pkg install --auto db-test
      - name: Run db tests
        run: raco test -l tests/db/all-tests
      - name: Run syntax tests
        run: raco test -c tests/syntax

  test-3m:
    runs-on: ubuntu-18.04
    container:
      image: racket/racket-ci:latest
      options: --init

    needs: build-racket3m

    strategy:
      fail-fast: false
      matrix:
        cify: [cify, nocify]
        jit: [jit, nojit]
        efp: [efp, noefp]
        exclude:
          - jit: nojit
            efp: efp

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: racket3m-debian10-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha }}
          path: /tmp
      - name: Untar
        working-directory: /usr/local
        run: tar -xvjf /tmp/racket3m-debian10-${{ matrix.cify }}-${{ matrix.jit }}-${{ matrix.efp }}-x64_git${{ github.sha }}.tar.bz2
      - name: Extend PATH with Racket executable
        run: echo "::set-env name=PATH::/usr/local/racket3m/bin:$PATH"
      - name: Check for Racket
        run: racket --version
      - name: Install catalog and required packages
        run: |
          racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
          raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
      - name: Install racket-test dependency
        run: raco pkg install --auto racket-test
      - name: Run tests/racket/test
        run: raco test -l tests/racket/test
      - name: Run tests/racket/contract/all
        run: racket -l tests/racket/contract/all
      - name: Run tests/json/json
        run: raco test -l tests/json/json
      - name: Run tests/file/main
        run: raco test -l tests/file/main
      - name: Run tests/net/head
        run: raco test -l tests/net/head
      - name: Run tests/net/uri-codec
        run: raco test -l tests/net/uri-codec
      - name: Run tests/net/url
        run: raco test -l tests/net/url
      - name: Run tests/net/url-port
        run: raco test -l tests/net/url-port
      - name: Run tests/net/encoders
        run: raco test -l tests/net/encoders
      - name: Run tests/openssl/basic
        run: raco test -l tests/openssl/basic
      - name: Run tests/openssl/https
        run: raco test -l tests/openssl/https
      - name: Run tests/match/main
        run: raco test -l tests/match/main
      - name: Run tests/zo-path
        run: raco test -l tests/zo-path
      - name: Run tests/xml
        run: raco test -c tests/xml
      - name: Run tests/future
        run: raco test -c tests/future
      - name: Run tests/stxparse
        run: raco test -c tests/stxparse
      - name: Install db tests dependency
        run: raco pkg install --auto db-test
      - name: Run db tests
        run: raco test -l tests/db/all-tests

  test-cs:
    runs-on: ubuntu-18.04
    container:
      image: racket/racket-ci:latest
      options: --init

    needs: build-racketcs

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: racketcs-debian10-x64_git${{ github.sha }}
          path: /tmp
      - name: Untar
        working-directory: /usr/local
        run: tar -xvjf /tmp/racketcs-debian10-x64_git${{ github.sha }}.tar.bz2
      - name: Extend PATH with Racket executable
        run: echo "::set-env name=PATH::/usr/local/racketcs/bin:$PATH"
      - name: Check for Racket
        run: racket --version
      - name: Install catalog and required packages
        run: |
          racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
          raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
      - name: Install racket-test dependency
        run: raco pkg install --auto racket-test
      - name: Run tests/racket/test
        run: raco test -l tests/racket/test
      - name: Run tests/racket/contract/all
        run: racket -l tests/racket/contract/all
      - name: Run tests/json/json
        run: raco test -l tests/json/json
      - name: Run tests/file/main
        run: raco test -l tests/file/main
      - name: Run tests/net/head
        run: raco test -l tests/net/head
      - name: Run tests/net/uri-codec
        run: raco test -l tests/net/uri-codec
      - name: Run tests/net/url
        run: raco test -l tests/net/url
      - name: Run tests/net/url-port
        run: raco test -l tests/net/url-port
      - name: Run tests/net/encoders
        run: raco test -l tests/net/encoders
      - name: Run tests/openssl/basic
        run: raco test -l tests/openssl/basic
      - name: Run tests/openssl/https
        run: raco test -l tests/openssl/https
      - name: Run tests/match/main
        run: raco test -l tests/match/main
      - name: Run tests/zo-path
        run: raco test -l tests/zo-path
      - name: Run tests/xml
        run: raco test -c tests/xml
      - name: Run tests/future
        run: raco test -c tests/future
      - name: Run tests/stxparse
        run: raco test -c tests/stxparse
      - name: Install db tests dependency
        run: raco pkg install --auto db-test
      - name: Run db tests
        run: raco test -l tests/db/all-tests
