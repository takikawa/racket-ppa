((3) 0 () 0 () () (q require slideshow/code))
((3) 0 () 0 () () (void))
((3) 0 () 0 () () (q code (circle 10)))
((3) 1 (((lib "scribble/core.rkt") . deserialize-info:image-element-v0)) 0 () () (0 #f (q "[image]") (u . "images/img0") (q ".pdf" ".png") 1.0))
((3) 0 () 0 () () (q define-syntax pict+code (syntax-rules () ((pict+code expr) (hc-append 10 expr (code expr))))))
((3) 0 () 0 () () (void))
((3) 0 () 0 () () (q pict+code (circle 10)))
((3) 1 (((lib "scribble/core.rkt") . deserialize-info:image-element-v0)) 0 () () (0 #f (q "[image]") (u . "images/img1") (q ".pdf" ".png") 1.0))
((3) 0 () 0 () () (q require racket/class racket/gui/base))
((3) 0 () 0 () () (void))
((3) 0 () 0 () () (q define f (new frame% (label "My Art") (width 300) (height 300) (alignment (quote (center center))))))
((3) 0 () 0 () () (void))
((3) 0 () 0 () () (q send f show #t))
((3) 0 () 0 () () (void))
((3) 0 () 0 () () (q send f show #f))
((3) 0 () 0 () () (void))
((3) 0 () 0 () () (q require pict/flash))
((3) 0 () 0 () () (void))
((3) 0 () 0 () () (q define (add-drawing p) (let ((drawer (make-pict-drawer p))) (new canvas% (parent f) (style (quote (border))) (paint-callback (lambda (self dc) (drawer dc 0 0)))))))
((3) 0 () 0 () () (void))
((3) 0 () 0 () () (q add-drawing (pict+code (circle 10))))
((3) 1 (((lib "scribble/core.rkt") . deserialize-info:element-v0)) 0 () () (0 #f (c (u . "#(struct:object:canvas% ...)"))))
((3) 0 () 0 () () (q add-drawing (colorize (filled-flash 50 30) "yellow")))
((3) 1 (((lib "scribble/core.rkt") . deserialize-info:element-v0)) 0 () () (0 #f (c (u . "#(struct:object:canvas% ...)"))))
((3) 0 () 0 () () (q scale (bitmap (build-path (collection-path "scribblings/quick") "art.png")) 0.5))
((3) 1 (((lib "scribble/core.rkt") . deserialize-info:image-element-v0)) 0 () () (0 #f (q "[image]") (u . "images/img2") (q ".pdf" ".png") 1.0))
