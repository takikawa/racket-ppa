stages:
  - stage1
  - stage2
  - stage3
  - stage4
  - stage5
  - stage6

# Workaround to gitlab#30361
noNeeds:
  image: alpine:latest 
  stage: stage1
  script:
    - echo "This build is a workaround for 'https://gitlab.com/gitlab-org/gitlab/issues/30631'"
  dependencies: []
  
# ---------------------------------------------------------------------------------------------------
# Using debian:stable-slim to perform an llvm build with Z3 support
# The reason this is necessary is that we need Z3 support in scan-build
# to be able to crosscheck errors with z3 which decreases the false positives
# rate by around 5%.
#
# Also, this should only be performed once. Once in cache llvm won't be build anymore
# until we force it.
prepare-cache:llvm:
  image: debian:stable-slim
  stage: stage1
  tags:
    - linux
    - x86_64
  variables:
    INSTALL_DIR: $CI_PROJECT_DIR/install/llvm
  script:
    - if [ -d $INSTALL_DIR ]; then exit 0; fi
    - apt-get update && apt-get install -y gcc git cmake wget unzip g++ python libxml2-dev
    - wget https://github.com/Z3Prover/z3/releases/download/Z3-4.8.5/z3-4.8.5-x64-debian-8.11.zip
    - unzip z3-4.8.5-x64-debian-8.11.zip
    - mkdir $INSTALL_DIR
    - mv z3-4.8.5-x64-debian-8.11/bin z3-4.8.5-x64-debian-8.11/include $INSTALL_DIR
    - export PATH=$INSTALL_DIR/bin:$PATH
    - git clone --depth=1 -b release/8.x https://github.com/llvm/llvm-project.git
    - cd llvm-project
    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCLANG_ANALYZER_ENABLE_Z3_SOLVER=ON -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_PROJECTS=clang -DZ3_INCLUDE_DIR=$INSTALL_DIR/include/ -DCMAKE_BUILD_TYPE=MinSizeRel ../llvm/
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - echo "Detected $cpus cpus"
    - make -j$((cpus + 1)) -l$cpus
    - make -j$((cpus + 1)) -l$cpus install
  cache:
    key: llvm-8x-HEAD
    paths:
      - $INSTALL_DIR
  artifacts:
    name: "llvm-8x-HEAD"
    paths:
      - $INSTALL_DIR
    expire_in: 1 week

# Build cgc
build:racket:cgc:
  stage: stage2
  image: pmatos/racket-ci:builddeps
  needs: ["noNeeds"]
  tags:
    - linux
    - x86_64
  variables:
    INSTALL_DIR: $CI_PROJECT_DIR/install/racketcgc
  script:
    - cd racket/src
    - ./configure --prefix=$INSTALL_DIR --enable-cgcdefault --enable-jit --enable-foreign --enable-places --enable-futures --enable-float --disable-docs --enable-cify --enable-pthread
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - make -l $cpus -j $((cpus+1))
    - make -j  $((cpus+1)) install
  artifacts:
    paths:
      - $INSTALL_DIR

build:racket:3m:
  stage: stage3
  image: pmatos/racket-ci:builddeps
  needs: ["build:racket:cgc"]
  tags:
    - linux
    - x86_64
  variables:
    CGC_INSTALL_DIR: $CI_PROJECT_DIR/install/racketcgc
    INSTALL_DIR: $CI_PROJECT_DIR/install/racket3m
  script:
    - cd racket/src
    - ./configure --prefix=$INSTALL_DIR --enable-jit --enable-foreign --enable-places --enable-futures --enable-float --disable-docs --enable-cify --enable-pthread --enable-racket=$CGC_INSTALL_DIR/bin/racket
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - make -l $cpus -j $((cpus+1))
    - make -j  $((cpus+1)) install
  dependencies:
    - build:racket:cgc
  artifacts:
    paths:
      - $INSTALL_DIR

build:racket:cs:
  stage: stage4
  image: pmatos/racket-ci:builddeps
  needs: ["build:racket:3m"]
  tags:
    - linux
    - x86_64
  variables:
    MMM_INSTALL_DIR: $CI_PROJECT_DIR/install/racket3m
    INSTALL_DIR: $CI_PROJECT_DIR/install/racketcs
  script:
    - cd racket/src
    - rm -r ChezScheme || true
    - git clone --depth=1 --recurse-submodules -j8 https://github.com/racket/ChezScheme
    - ./configure --prefix=$INSTALL_DIR --enable-compress --disable-docs --enable-pthread --enable-racket=$MMM_INSTALL_DIR/bin/racket --enable-csdefault --enable-csonly
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - make -l $cpus -j $((cpus+1))
    - make -j  $((cpus+1)) install
  dependencies:
    - build:racket:3m
  artifacts:
    paths:
      - $INSTALL_DIR

# Build racket with scan-build
scan:racket:cgc:
  stage: stage2
  needs: ["prepare-cache:llvm"]
  tags:
    - linux
    - x86_64
  variables:
    LLVM_INSTALL_DIR: $CI_PROJECT_DIR/install/llvm
    REPORT_DIR: $CI_PROJECT_DIR/scan-report_cgc
  before_script:
    - apt-get update && apt-get install -y unzip python libxml2-dev libfindbin-libs-perl make gcc g++
  script:
    - export PATH=$LLVM_INSTALL_DIR/bin:$PATH
    - export LD_LIBRARY_PATH=$LLVM_INSTALL_DIR/bin:$LD_LIBRARY_PATH
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - echo "Detected $cpus cpus"
    - cd racket/src
    - CFLAGS="-O0 -g" ./configure --disable-strip --enable-cgcdefault --enable-jit --enable-foreign --enable-places --enable-futures --enable-float --disable-docs --enable-cify --enable-pthread
    - scan-build -o $REPORT_DIR -analyzer-config 'crosscheck-with-z3=true' make -l $cpus  -j $((cpus + 1))
  dependencies:
    - prepare-cache:llvm
  artifacts:
    paths:
      - $REPORT_DIR

scan:racket:3m:
  stage: stage3
  needs: ["prepare-cache:llvm", "build:racket:cgc"]
  tags:
    - linux
    - x86_64
  variables:
    CGC_INSTALL_DIR: $CI_PROJECT_DIR/install/racketcgc
    LLVM_INSTALL_DIR: $CI_PROJECT_DIR/install/llvm
    REPORT_DIR: $CI_PROJECT_DIR/scan-report_mmm
  before_script:
    - apt-get update && apt-get install -y unzip python libxml2-dev libfindbin-libs-perl make gcc g++
  script:
    - export PATH=$LLVM_INSTALL_DIR/bin:$PATH
    - export LD_LIBRARY_PATH=$LLVM_INSTALL_DIR/bin:$LD_LIBRARY_PATH
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - echo "Detected $cpus cpus"
    - cd racket/src
    - CFLAGS="-O0 -g" ./configure --disable-strip --enable-cgcdefault --enable-jit --enable-foreign --enable-places --enable-futures --enable-float --disable-docs --enable-cify --enable-pthread --enable-racket=$CGC_INSTALL_DIR/bin/racket
    - scan-build -o $REPORT_DIR -analyzer-config 'crosscheck-with-z3=true' make -l $cpus  -j $((cpus + 1))
  dependencies:
    - prepare-cache:llvm
    - build:racket:cgc
  artifacts:
    paths:
      - $REPORT_DIR

scan:racket:cs:
  stage: stage4
  needs: ["prepare-cache:llvm", "build:racket:3m"]
  tags:
    - linux
    - x86_64
  variables:
    MMM_INSTALL_DIR: $CI_PROJECT_DIR/install/racket3m
    LLVM_INSTALL_DIR: $CI_PROJECT_DIR/install/llvm
    REPORT_DIR: $CI_PROJECT_DIR/scan-report_cs
  before_script:
    - apt-get update && apt-get install -y unzip python libxml2-dev libfindbin-libs-perl make gcc g++ uuid-dev git
  script:
    - export PATH=$LLVM_INSTALL_DIR/bin:$PATH
    - export LD_LIBRARY_PATH=$LLVM_INSTALL_DIR/bin:$LD_LIBRARY_PATH
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - echo "Detected $cpus cpus"
    - cd racket/src
    - rm -r ChezScheme || true
    - git clone --depth=1 --recurse-submodules -j8 https://github.com/racket/ChezScheme
    - CFLAGS="-O0 -g" ./configure --disable-strip  --enable-compress --disable-docs --enable-pthread --enable-racket=$MMM_INSTALL_DIR/bin/racket --enable-csdefault --enable-csonly 
    - scan-build -o $REPORT_DIR -analyzer-config 'crosscheck-with-z3=true' make -l $cpus  -j $((cpus + 1))
  dependencies:
    - prepare-cache:llvm
    - build:racket:3m
  artifacts:
    paths:
      - $REPORT_DIR

#
# Split testing jobs
# Jobs starting with . are templates to be used as extensions to real jobs
#
.test:racket:test:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - sed -i 's/(sleep 1200)/(sleep 3600)/' pkgs/racket-test-core/tests/racket/quiet.rktl
    - raco test -l tests/racket/test 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log
      
.test:racket:contract:all:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - racket -l tests/racket/contract/all 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:json:json:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/json/json 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:file:main:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/file/main 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:net:head:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/net/head 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log
    
.test:net:uri-codec:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/net/uri-codec 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:net:url:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/net/url 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:net:url-port:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/net/url-port 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log
      
.test:net:encoders:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/net/encoders 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:openssl:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -c tests/openssl 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:match:main:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/match/main 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:zo-path:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/zo-path 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:xml:test:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/xml/test 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:db:all-tests:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -l tests/db/all-tests 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

.test:stxparse:
  image: pmatos/racket-ci:testdeps
  tags:
    - linux
    - x86_64
  script:
    - raco test -c tests/stxparse 2>&1 | tee test.log
  artifacts:
    when: always
    paths:
      - test.log

# All of the above tests now need to run for cgc, 3m and cs built above

# Test: test:racket:test
test:racket:test:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:racket:test
  allow_failure: true
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test 

test:racket:test:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  allow_failure: true
  extends: .test:racket:test
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:racket:test:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  allow_failure: true
  extends: .test:racket:test
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:racket:contract:all
test:racket:contract:all:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:racket:contract:all
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:racket:contract:all:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:racket:contract:all
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:racket:contract:all:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:racket:contract:all
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:json:json
test:json:json:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:json:json
  dependencies:
    - build:racket:cgc
  before_script:
    - apt-get update && apt-get install -y openssl ca-certificates libfontconfig1-dev libpango1.0-dev libcairo2-dev libjpeg-dev libturbojpeg0-dev
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:json:json:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:json:json
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:json:json:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:json:json
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:file:main
test:file:main:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:file:main
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:file:main:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:file:main
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:file:main:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:file:main
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:net:head
test:net:head:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:net:head
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - raco pkg install pkgs/base pkgs/racket-lib
    - raco pkg install --auto racket-test

test:net:head:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:net:head
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:net:head:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:net:head
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:net:uri-codec
test:net:uri-codec:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:net:uri-codec
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:net:uri-codec:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:net:uri-codec
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:net:uri-codec:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:net:uri-codec
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:net:url
test:net:url:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:net:url
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:net:url:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  allow_failure: true
  extends: .test:net:url
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:net:url:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:net:url
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:net:url-port
test:net:url-port:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:net:url-port
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:net:url-port:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  allow_failure: true
  extends: .test:net:url-port
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:net:url-port:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:net:url-port
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:net:encoders
test:net:encoders:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:net:encoders
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:net:encoders:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:net:encoders
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:net:encoders:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:net:encoders
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:openssl ca-certificates libfontconfig1-dev libpango1.0-dev libcairo2-dev libjpeg-dev libturbojpeg0-dev:basic
test:openssl:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  allow_failure: true
  extends: .test:openssl
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:openssl:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  allow_failure: true
  extends: .test:openssl
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:openssl:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  allow_failure: true
  extends: .test:openssl
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:match:main
test:match:main:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:match:main
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:match:main:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:match:main
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:match:main:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:match:main
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:zo-path
test:zo-path:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:zo-path
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:zo-path:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:zo-path
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:zo-path:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:zo-path
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:xml:test
test:xml:test:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:xml:test
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:xml:test:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:xml:test
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:xml:test:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:xml:test
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

# Test: test:db:all-tests
test:db:all-tests:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:db:all-tests
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test db-test

test:db:all-tests:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:db:all-tests
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test db-test

test:db:all-tests:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:db:all-tests
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test db-test

# Test: test:stxparse
test:stxparse:cgc:
  stage: stage3
  needs: ["build:racket:cgc"]
  extends: .test:stxparse
  dependencies:
    - build:racket:cgc
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcgc/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:stxparse:3m:
  stage: stage4
  needs: ["build:racket:3m"]
  extends: .test:stxparse
  dependencies:
    - build:racket:3m
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racket3m/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test

test:stxparse:cs:
  stage: stage5
  needs: ["build:racket:cs"]
  extends: .test:stxparse
  dependencies:
    - build:racket:cs
  before_script:
    - export PATH=$CI_PROJECT_DIR/install/racketcs/bin:$PATH
    - racket -l- pkg/dirs-catalog --immediate $PWD/rktcat $PWD/pkgs/
    - raco pkg config --set catalogs $PWD/rktcat/ https://pkgs.racket-lang.org https://planet-compats.racket-lang.org
    - raco pkg config
    - raco pkg install --auto racket-test


# ---------------------------------------------------------------------------------------------------
##
## The following jobs build/test racket and racketcs with ubsan enabled
## 
.prepare:
  stage: stage5
  image: ubuntu:18.04
  needs: ["noNeeds"]
  before_script:
    - apt-get update && apt-get install -y git lsb-release gcc gcc-8 g++ g++-8 make libfontconfig1-dev libcairo2-dev openssl libpango1.0-dev libjpeg-turbo8-dev libncurses5-dev uuid-dev
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 700 --slave /usr/bin/g++ g++ /usr/bin/g++-7
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    - export PATH=$PWD/racket/bin:$PATH

test:ubsan:
  extends: .prepare
  script:
    - mkdir logs
    - make CPUS="2" PKGS="racket-test db-test unstable-flonum-lib net-test" CONFIGURE_ARGS_qq='CFLAGS="-fno-var-tracking-assignments" --enable-ubsan' in-place 2>&1 | tee logs/build.log
    - sed -i 's/(sleep 1200)/(sleep 3600)/' pkgs/racket-test-core/tests/racket/quiet.rktl
    - raco test -l tests/racket/test 2>&1 | tee logs/test.log
    - racket -l tests/racket/contract/all 2>&1 | tee logs/contract-test.log
    - raco test -l tests/json/json 2>&1 | tee logs/json-test.log
    - raco test -l tests/file/main 2>&1 | tee logs/file-test.log
    - raco test -l tests/net/head 2>&1 | tee logs/net-head-test.log
    - raco test -l tests/net/uri-codec 2>&1 | tee logs/net-uri-codec-test.log
    - raco test -l tests/net/url 2>&1 | tee logs/net-url-test.log
    - raco test -l tests/net/url-port 2>&1 | tee logs/net-url-port-test.log
    - raco test -l tests/net/encoders 2>&1 | tee logs/net-encoders-test.log
    - raco test -l tests/openssl/basic 2>&1 | tee logs/openssl-basic-test.log
    - raco test -l tests/openssl/https 2>&1 | tee logs/openssl-https-test.log
    - raco test -l tests/match/main 2>&1 | tee logs/match-main-test.log
    - raco test -l tests/zo-path 2>&1 | tee logs/zo-path-test.log
    - raco test -l tests/xml/test 2>&1 | tee logs/xml-test.log
    - raco test -l tests/db/all-tests 2>&1 | tee logs/db-test.log
    - raco test -c tests/stxparse 2>&1 | tee logs/stxparse-test.log
  after_script:
    - grep 'runtime error' logs/*.log > runtime-errors.log
  artifacts:
    when: always
    paths:
      - logs/
      - runtime-errors.log
    
# Currently there are still some failures in racketcs so we allow failure 
# at the moment but should be removed later on.
test:ubsan:cs:
  extends: .prepare
  allow_failure: true
  script:
    - mkdir cs-logs
    - make CPUS="2" PKGS="racket-test db-test unstable-flonum-lib net-test" CONFIGURE_ARGS_qq='CFLAGS="-fno-var-tracking-assignments" --enable-ubsan' cs 2>&1 | tee cs-logs/build.log
    - sed -i 's/(sleep 1200)/(sleep 3600)/' pkgs/racket-test-core/tests/racket/quiet.rktl
    - racocs test -l tests/racket/test 2>&1 | tee cs-logs/test.log
    - racketcs -l tests/racket/contract/all 2>&1 | tee cs-logs/contract-test.log
    - racocs test -l tests/json/json 2>&1 | tee cs-logs/json-test.log
    - racocs test -l tests/file/main 2>&1 | tee cs-logs/file-test.log
    - racocs test -l tests/net/head 2>&1 | tee cs-logs/net-head-test.log
    - racocs test -l tests/net/uri-codec 2>&1 | tee cs-logs/net-uri-codec-test.log
    - racocs test -l tests/net/url 2>&1 | tee cs-logs/net-url-test.log
    - racocs test -l tests/net/url-port 2>&1 | tee cs-logs/net-url-port-test.log
    - racocs test -l tests/net/encoders 2>&1 | tee cs-logs/net-encoders-test.log
    - racocs test -l tests/openssl/basic 2>&1 | tee cs-logs/openssl-basic-test.log
    - racocs test -l tests/openssl/https 2>&1 | tee cs-logs/openssl-https-test.log
    - racocs test -l tests/match/main 2>&1 | tee cs-logs/match-main-test.log
    - racocs test -l tests/zo-path 2>&1 | tee cs-logs/zo-path-test.log
    - racocs test -l tests/xml/test 2>&1 | tee cs-logs/xml-test.log
    - racocs test -l tests/db/all-tests 2>&1 | tee cs-logs/db-test.log
    - racocs test -c tests/stxparse 2>&1 | tee cs-logs/stxparse-test.log
  after_script:
    - grep 'runtime error' cs-logs/*.log > runtime-errors.log
  artifacts:
    when: always
    paths:
      - cs-logs/
      - runtime-errors.log

# ---------------------------------------------------------------------------------------------------
# Runs a cross compilation and testing using qemu chrooted into the correct architecture
# Each of the test:<arch>: will extend .preparearch which run the proper script
# Currently testing:
# * arm64
# * armel
# * armhf
# * i386
# * mips
# * mipsel
# * mips64el
# * s390x
# * ppc64el

prepare-cache:qemu:
  image: ubuntu:18.04
  stage: stage1
  tags:
    - linux
    - x86_64
    - privileged
  variables:
    INSTALL_DIR: $CI_PROJECT_DIR/install
  script:
    - if [ -d $INSTALL_DIR ]; then exit 0; fi
    - apt-get update && apt-get install -y gcc make bison flex git wget xz-utils python pkg-config libglib2.0-dev libpixman-1-dev
    - wget https://download.qemu.org/qemu-3.1.0.tar.xz
    - tar -xvJf qemu-3.1.0.tar.xz
    - mkdir qemu-build
    - cd qemu-build
    - ../qemu-3.1.0/configure --static --disable-kvm --disable-xen --disable-spice --target-list='i386-linux-user aarch64-linux-user arm-linux-user mips-linux-user mipsel-linux-user mips64el-linux-user s390x-linux-user ppc64le-linux-user riscv64-linux-user' --prefix=$INSTALL_DIR
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - echo "Detected $cpus cpus"
    - make -j$((cpus + 1)) --load-average=$cpus
    - make -j$((cpus + 1)) --load-average=$cpus install
  cache:
    key: qemu-3.1.0
    paths:
      - $INSTALL_DIR
  artifacts:
    name: "qemu-3.1.0"
    paths:
      - $INSTALL_DIR
    expire_in: 1 week
      
.preparearch:
  image: ubuntu:18.04
  stage: stage6
  needs: ["prepare-cache:qemu"]
  tags:
    - x86_64
    - privileged
    - linux
  before_script:
    - ls -la
    - find $INSTALL_DIR -type f
    - export PATH=$INSTALL_DIR/bin:$PATH
    - apt-get update
  script:
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - echo "Detected $cpus cpus"
    - .gitlab/build-test.sh --jobs $((cpus + 1)) --maxload ${cpus} --with-arch ${ARCH} --with-debian stretch --with-debian-mirror http://ftp.de.debian.org/debian/ --with-project-path ${CI_PROJECT_DIR} --with-chroot-path /tmp/racket-${ARCH}-${CI_COMMIT_SHORT_SHA}-chroot --with-qemu-path $INSTALL_DIR
  dependencies:
    - prepare-cache:qemu

test:native:armv7l:
  image: ubuntu:18.04
  stage: stage6  
  needs: ["noNeeds"]
  allow_failure: true
  variables:
    ARCH: "armv7l"
    INSTALL_DIR: $CI_PROJECT_DIR/install
  tags:
    - armv7l
    - linux
  before_script:
    - ls -la
    - find $INSTALL_DIR -type f
    - export PATH=$INSTALL_DIR/bin:$PATH
    - apt-get update
  script:
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - echo "Detected $cpus cpus"
    - .gitlab/build-test.sh --jobs $((cpus + 1)) --maxload ${cpus} --with-arch ${ARCH} --with-debian stretch --with-debian-mirror http://ftp.de.debian.org/debian/ --with-project-path ${CI_PROJECT_DIR} --with-chroot-path /tmp/racket-${ARCH}-${CI_COMMIT_SHORT_SHA}-chroot --with-qemu-path $INSTALL_DIR

# Emulation targets
test:emulation:arm64:
  extends: .preparearch
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "arm64"
    INSTALL_DIR: $CI_PROJECT_DIR/install

test:emulation:armel:
  extends: .preparearch
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "armel"
    INSTALL_DIR: $CI_PROJECT_DIR/install

test:emulation:armhf:
  extends: .preparearch
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "armhf"
    INSTALL_DIR: $CI_PROJECT_DIR/install

test:emulation:i386:
  extends: .preparearch
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "i386"
    INSTALL_DIR: $CI_PROJECT_DIR/install
    
test:emulation:mips:
  extends: .preparearch
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "mips"
    INSTALL_DIR: $CI_PROJECT_DIR/install
  
test:emulation:mipsel:
  extends: .preparearch
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "mipsel"
    INSTALL_DIR: $CI_PROJECT_DIR/install

test:emulation:mips64el:
  extends: .preparearch
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "mips64el"
    INSTALL_DIR: $CI_PROJECT_DIR/install
    
test:emulation:s390x:
  extends: .preparearch
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "s390x"
    INSTALL_DIR: $CI_PROJECT_DIR/install

test:emulation:ppc64el:
  extends: .preparearch
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "ppc64el"
    INSTALL_DIR: $CI_PROJECT_DIR/install

# Emulation targets with --disable-generations

.preparearch:nogenerations:
  image: ubuntu:18.04
  needs: ["prepare-cache:qemu"]
  stage: stage6
  only:
    - schedules
  tags:
    - x86_64
    - privileged
    - linux
  before_script:
    - ls -la
    - find $INSTALL_DIR -type f
    - export PATH=$INSTALL_DIR/bin:$PATH
    - apt-get update
  script:
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - echo "Detected $cpus cpus"
    - .gitlab/build-test.sh --jobs $((cpus + 1)) --maxload ${cpus} --with-arch ${ARCH} --with-debian stretch --with-debian-mirror http://ftp.de.debian.org/debian/ --with-project-path ${CI_PROJECT_DIR} --with-chroot-path /tmp/racket-${ARCH}-${CI_COMMIT_SHORT_SHA}-chroot --with-qemu-path $INSTALL_DIR --with-configure-args '--disable-generations'
  dependencies:
    - prepare-cache:qemu

test:emulation:nogenerations:arm64:
  extends: .preparearch:nogenerations
  allow_failure: true
  variables:
    ARCH: "arm64"
    INSTALL_DIR: $CI_PROJECT_DIR/install

test:emulation:nogenerations:armel:
  extends: .preparearch:nogenerations
  allow_failure: true
  variables:
    ARCH: "armel"
    INSTALL_DIR: $CI_PROJECT_DIR/install

test:emulation:nogenerations:armhf:
  extends: .preparearch:nogenerations
  allow_failure: true
  variables:
    ARCH: "armhf"
    INSTALL_DIR: $CI_PROJECT_DIR/install
    
test:emulation:nogenerations:mips:
  extends: .preparearch:nogenerations
  allow_failure: true
  variables:
    ARCH: "mips"
    INSTALL_DIR: $CI_PROJECT_DIR/install
  
test:emulation:nogenerations:mipsel:
  extends: .preparearch:nogenerations
  allow_failure: true
  variables:
    ARCH: "mipsel"
    INSTALL_DIR: $CI_PROJECT_DIR/install

test:emulation:nogenerations:mips64el:
  extends: .preparearch:nogenerations
  allow_failure: true
  variables:
    ARCH: "mips64el"
    INSTALL_DIR: $CI_PROJECT_DIR/install
    
test:emulation:nogenerations:s390x:
  extends: .preparearch:nogenerations
  allow_failure: true
  variables:
    ARCH: "s390x"
    INSTALL_DIR: $CI_PROJECT_DIR/install

test:emulation:nogenerations:ppc64el:
  extends: .preparearch:nogenerations
  allow_failure: true
  variables:
    ARCH: "ppc64el"
    INSTALL_DIR: $CI_PROJECT_DIR/install

# CS
.preparearch:cs:
  image: ubuntu:18.04
  needs: ["prepare-cache:qemu"]
  stage: stage5
  tags:
    - x86_64
    - privileged
    - linux
  before_script:
    - export PATH=$INSTALL_DIR:$PATH
    - apt-get update
  script:
    - export cpus=$(grep -c ^processor /proc/cpuinfo)
    - echo "Detected $cpus cpus"
    - .gitlab/build-test.sh --jobs $((cpus + 1)) --maxload ${cpus} --with-arch ${ARCH} --with-debian stretch --with-debian-mirror http://ftp.de.debian.org/debian/ --with-project-path ${CI_PROJECT_DIR} --with-chroot-path /tmp/racket-${ARCH}-${CI_COMMIT_SHORT_SHA}-chroot --enable-cs --with-qemu-path $INSTALL_DIR
  dependencies:
    - prepare-cache:qemu

test:emulation:i386:cs:
  extends: .preparearch:cs
  allow_failure: true
  only:
    - schedules
  variables:
    ARCH: "i386"
    INSTALL_DIR: $CI_PROJECT_DIR/install

