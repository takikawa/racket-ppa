/* >>>> Generated by mkmark.rkt from mzmarksrc.c <<<< */

static int mark_resolve_info_SIZE(void *p, struct NewGC *gc) {
#ifndef GC_NO_SIZE_NEEDED_FROM_PROCS
  gcBYTES_TO_WORDS(sizeof(Resolve_Info));
#else
  return 0;
#endif
}

static int mark_resolve_info_MARK(void *p, struct NewGC *gc) {
#ifndef GC_NO_MARK_PROCEDURE_NEEDED
  Resolve_Info *i = (Resolve_Info *)p;
  
  gcMARK2(i->linklet, gc);
  gcMARK2(i->tl_map, gc);
  gcMARK2(i->redirects, gc);
  gcMARK2(i->lifts, gc);
  gcMARK2(i->top, gc);
  gcMARK2(i->next, gc);
  gcMARK2(i->toplevel_starts, gc);
  gcMARK2(i->toplevel_deltas, gc);
  gcMARK2(i->toplevel_defns, gc);
  gcMARK2(i->static_mode, gc);

# ifdef GC_NO_SIZE_NEEDED_FROM_PROCS
  return 0;
# else
  return
  gcBYTES_TO_WORDS(sizeof(Resolve_Info));
# endif
#endif
}

static int mark_resolve_info_FIXUP(void *p, struct NewGC *gc) {
#ifndef GC_NO_FIXUP_PROCEDURE_NEEDED
  Resolve_Info *i = (Resolve_Info *)p;
  
  gcFIXUP2(i->linklet, gc);
  gcFIXUP2(i->tl_map, gc);
  gcFIXUP2(i->redirects, gc);
  gcFIXUP2(i->lifts, gc);
  gcFIXUP2(i->top, gc);
  gcFIXUP2(i->next, gc);
  gcFIXUP2(i->toplevel_starts, gc);
  gcFIXUP2(i->toplevel_deltas, gc);
  gcFIXUP2(i->toplevel_defns, gc);
  gcFIXUP2(i->static_mode, gc);

# ifdef GC_NO_SIZE_NEEDED_FROM_PROCS
  return 0;
# else
  return
  gcBYTES_TO_WORDS(sizeof(Resolve_Info));
# endif
#endif
}

#define mark_resolve_info_IS_ATOMIC 0
#define mark_resolve_info_IS_CONST_SIZE 1


static int mark_unresolve_info_SIZE(void *p, struct NewGC *gc) {
#ifndef GC_NO_SIZE_NEEDED_FROM_PROCS
  gcBYTES_TO_WORDS(sizeof(Unresolve_Info));
#else
  return 0;
#endif
}

static int mark_unresolve_info_MARK(void *p, struct NewGC *gc) {
#ifndef GC_NO_MARK_PROCEDURE_NEEDED
  Unresolve_Info *i = (Unresolve_Info *)p;
  
  gcMARK2(i->vars, gc);
  gcMARK2(i->linklet, gc);
  gcMARK2(i->linklet_key, gc);
  gcMARK2(i->opt_info, gc);
  gcMARK2(i->closures, gc);
  gcMARK2(i->toplevels, gc);
  gcMARK2(i->definitions, gc);
  gcMARK2(i->ref_lifts, gc);

# ifdef GC_NO_SIZE_NEEDED_FROM_PROCS
  return 0;
# else
  return
  gcBYTES_TO_WORDS(sizeof(Unresolve_Info));
# endif
#endif
}

static int mark_unresolve_info_FIXUP(void *p, struct NewGC *gc) {
#ifndef GC_NO_FIXUP_PROCEDURE_NEEDED
  Unresolve_Info *i = (Unresolve_Info *)p;
  
  gcFIXUP2(i->vars, gc);
  gcFIXUP2(i->linklet, gc);
  gcFIXUP2(i->linklet_key, gc);
  gcFIXUP2(i->opt_info, gc);
  gcFIXUP2(i->closures, gc);
  gcFIXUP2(i->toplevels, gc);
  gcFIXUP2(i->definitions, gc);
  gcFIXUP2(i->ref_lifts, gc);

# ifdef GC_NO_SIZE_NEEDED_FROM_PROCS
  return 0;
# else
  return
  gcBYTES_TO_WORDS(sizeof(Unresolve_Info));
# endif
#endif
}

#define mark_unresolve_info_IS_ATOMIC 0
#define mark_unresolve_info_IS_CONST_SIZE 1


