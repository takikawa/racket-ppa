srcdir = @srcdir@
builddir = @builddir@

PACKAGE = racket

SCHEME_SRC = @SCHEME_SRC@
MAKE_BUILD_SCHEME = @MAKE_BUILD_SCHEME@
MACH = @MACH@
SCHEME_BIN = $(SCHEME_SRC)/$(MACH)/bin/$(MACH)/scheme
SCHEME_INC = $(SCHEME_SRC)/$(MACH)/boot/$(MACH)
SCHEME = $(SCHEME_BIN) -b $(SCHEME_INC)/petite.boot -b $(SCHEME_INC)/scheme.boot

CC = @CC@
BASE_CFLAGS = @CFLAGS@ @CPPFLAGS@
CFLAGS = $(BASE_CFLAGS) -I$(SCHEME_INC) -I$(srcdir)/../../rktio -Irktio -I.
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@

STRIP_DEBUG = @STRIP_DEBUG@
STRIP_LIB_DEBUG = @STRIP_LIB_DEBUG@

DEFAULT_RACKET = ../../racket/racket3m
RACKET = @RACKET@

CS_INSTALLED = @CS_INSTALLED@

prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
bindir = @bindir@
libdir = @libdir@
includepltdir = @includepltdir@
libpltdir = @libpltdir@
libpltdir_rel = @libpltdir_rel@
etcpltdir = @etcpltdir@
sharepltdir = @sharepltdir@
collectsdir = @collectsdir@

ALLDIRINFO = "$(DESTDIR)$(bindir)" \
             "$(DESTDIR)$(libpltdir)"

# Defines FWVERSION:
mainsrcdir = @srcdir@/../..
@INCLUDEDEP@ @srcdir@/../../racket/version.mak

cs:
	$(MAKE) scheme
	$(MAKE) racket-so
	cd rktio; $(MAKE)
	$(MAKE) racketcs
	$(MAKE) gracketcs
	$(MAKE) starter

SETUP_BOOT_MODE = --chain
SETUP_COMMON_BOOT = -l- setup $(SETUP_BOOT_MODE) $(srcdir)/../../setup-go.rkt $(builddir)/compiled

ABS_BOOT = $(SETUP_COMMON_BOOT) ignored $(builddir)/ignored.d
ABS_RACKET = "`$(RACKET) $(ABS_BOOT) $(srcdir)/../absify.rkt --exec $(RACKET)`"
ABS_SCHEME_SRC = "`$(RACKET) $(ABS_BOOT) $(srcdir)/../absify.rkt $(SCHEME_SRC)`"
ABS_SRCDIR = "`$(RACKET) $(ABS_BOOT) $(srcdir)/../absify.rkt --no-trailing-sep $(srcdir)`"
ABS_BUILDDIR = "`$(RACKET) $(ABS_BOOT) $(srcdir)/../absify.rkt --no-trailing-sep $(builddir)`"

SETUP_BOOT = -O 'info@compiler/cm' $(SETUP_COMMON_BOOT)

# We don't try to track dependencies through makefiles for things
# built with the expander extractor, hence "ignored"
BOOTSTRAP_RACKET = $(RACKET) $(SETUP_BOOT) ignored $(builddir)/ignored.d

RKTIO_RACKET = $(RACKET) $(SETUP_BOOT) '(GENERATED_RKTIO_RKTL)' $(builddir)/rktio.d
CONVERT_RACKET = $(RACKET) $(SETUP_BOOT)

racket-so:
	$(MAKE) bounce TARGET=build-racket-so

RACKET_SO_ENV = @CONFIGURE_RACKET_SO_COMPILE@ env COMPILED_SCM_DIR="$(builddir)/compiled/"

CS_PROGS = RACKET="$(RACKET)" SCHEME="$(SCHEME)" CONVERT_RACKET="$(CONVERT_RACKET)"
CS_OPTS = COMPRESS_COMP=@COMPRESS_COMP@

build-racket-so:
	$(MAKE) @RKTL_PRE@expander@RKTL_POST@
	$(MAKE) @RKTL_PRE@thread@RKTL_POST@
	$(MAKE) @RKTL_PRE@io@RKTL_POST@
	$(MAKE) @RKTL_PRE@regexp@RKTL_POST@
	$(MAKE) @RKTL_PRE@schemify@RKTL_POST@
	$(MAKE) @RKTL_PRE@known@RKTL_POST@
	cd $(srcdir)/.. && $(RACKET_SO_ENV) $(MAKE) "$(builddir)/racket.so" $(CS_PROGS) $(CS_OPTS) BUILDDIR="$(builddir)/"

bounce:
	$(RACKET) -O 'info@compiler/cm' $(ABS_BOOT) $(srcdir)/../absify.rkt just-to-compile-absify
	$(MAKE) RACKET="$(ABS_RACKET)" SCHEME_SRC="$(ABS_SCHEME_SRC)" srcdir="$(ABS_SRCDIR)" builddir="$(ABS_BUILDDIR)" $(TARGET)

# You can't make `expander`, `thread`, etc., directly, because
# `builddir` and `srcdir` are not necessarily absolute. But you can
# `make bounce TARGET=expander`, etc.

# This sequence essentially duplicates the handling of layers that is
# in "../Makefile", but it does so to swap in `BOOTSTRAP_RACKET` in
# place of `raco make` (to avoid a dependency on a package for `raco
# make`).

@RKTL_PRE@expander@RKTL_POST@:
	cd $(srcdir)/../../expander && $(MAKE) expander-src-generate RACKET="$(BOOTSTRAP_RACKET)" BUILDDIR="$(builddir)/"

@RKTL_PRE@thread@RKTL_POST@:
	cd $(srcdir)/../../thread && $(MAKE) thread-src-generate RACKET="$(BOOTSTRAP_RACKET)" BUILDDIR="$(builddir)/"

@RKTL_PRE@io@RKTL_POST@:
	cd $(srcdir)/../../io && $(MAKE) io-src-generate RACKET="$(BOOTSTRAP_RACKET)" BUILDDIR="$(builddir)/"

@RKTL_PRE@regexp@RKTL_POST@:
	cd $(srcdir)/../../regexp && $(MAKE) regexp-src-generate RACKET="$(BOOTSTRAP_RACKET)" BUILDDIR="$(builddir)/"

@RKTL_PRE@schemify@RKTL_POST@:
	cd $(srcdir)/../../schemify && $(MAKE) schemify-src-generate RACKET="$(BOOTSTRAP_RACKET)" BUILDDIR="$(builddir)/"

@RKTL_PRE@known@RKTL_POST@:
	cd $(srcdir)/../../schemify && $(MAKE) known-src-generate RACKET="$(BOOTSTRAP_RACKET)" BUILDDIR="$(builddir)/"

scheme:
	if [ "$(MAKE_BUILD_SCHEME)" = "y" ] ; \
         then $(MAKE) scheme-make ; fi

scheme-make:
	cd @SCHEME_SRC@ && ./configure @SCHEME_CONFIG_ARGS@ CC="$(CC)" CFLAGS="$(BASE_CFLAGS)" LDFLAGS="$(LDFLAGS)"
	mkdir -p @SCHEME_SRC@/@MACH@/boot/@MACH@
	$(MAKE) @SCHEME_SRC@/@MACH@/boot/@MACH@/equates.h
	$(MAKE) @SCHEME_SRC@/@MACH@/boot/@MACH@/petite.boot
	$(MAKE) @SCHEME_SRC@/@MACH@/boot/@MACH@/scheme.boot
	cd @SCHEME_SRC@ && $(MAKE)

# Replace "equates.h", etc., if they seem to be out of date.
# Otherwise, `make` on Chez Scheme cna fail.
@SCHEME_SRC@/@MACH@/boot/@MACH@/equates.h: @SCHEME_SRC@/boot/@MACH@/equates.h
	cp @SCHEME_SRC@/boot/@MACH@/equates.h @SCHEME_SRC@/@MACH@/boot/@MACH@/equates.h
@SCHEME_SRC@/@MACH@/boot/@MACH@/petite.boot: @SCHEME_SRC@/boot/@MACH@/petite.boot
	cp @SCHEME_SRC@/boot/@MACH@/petite.boot @SCHEME_SRC@/@MACH@/boot/@MACH@/petite.boot
@SCHEME_SRC@/@MACH@/boot/@MACH@/scheme.boot: @SCHEME_SRC@/boot/@MACH@/scheme.boot
	cp @SCHEME_SRC@/boot/@MACH@/scheme.boot @SCHEME_SRC@/@MACH@/boot/@MACH@/scheme.boot

racket.boot: racket.so
	$(SCHEME) --script $(srcdir)/convert-to-boot.ss @COMPRESS_COMP@ racket.so racket.boot

@INCLUDEDEP@ compiled/expander.d
@INCLUDEDEP@ compiled/thread.d
@INCLUDEDEP@ compiled/io.d
@INCLUDEDEP@ compiled/regexp.d
@INCLUDEDEP@ compiled/schemify.d
@INCLUDEDEP@ compiled/known.d

# ----------------------------------------
# Unix

EMBED_DEPS = $(srcdir)/embed-boot.rkt

racketcs@NOT_OSX@: raw_racketcs petite-v.boot scheme-v.boot racket-v.boot $(EMBED_DEPS)
	$(BOOTSTRAP_RACKET) $(srcdir)/embed-boot.rkt @ELF_COMP@ @COMPRESS_COMP@ raw_racketcs racketcs petite-v.boot scheme-v.boot racket-v.boot

gracketcs@NOT_OSX@: raw_gracketcs petite-v.boot scheme-v.boot racket-v.boot $(EMBED_DEPS)
	$(BOOTSTRAP_RACKET) $(srcdir)/embed-boot.rkt @ELF_COMP@ @COMPRESS_COMP@ raw_gracketcs gracketcs petite-v.boot scheme-v.boot racket-v.boot

BOOT_OBJS = boot.o $(SCHEME_INC)/kernel.o rktio/librktio.a

raw_racketcs: main.o boot.o $(BOOT_OBJS)
	$(CC) $(CFLAGS) -o raw_racketcs main.o $(BOOT_OBJS) $(LDFLAGS) $(LIBS)

raw_gracketcs: grmain.o boot.o $(BOOT_OBJS)
	$(CC) $(CFLAGS) -o raw_gracketcs grmain.o $(BOOT_OBJS) $(LDFLAGS) $(LIBS)

petite-v.boot: $(SCHEME_INC)/petite.boot
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @COMPRESS_COMP@ $(SCHEME_INC)/petite.boot petite-v.boot

scheme-v.boot: $(SCHEME_INC)/scheme.boot
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @COMPRESS_COMP@ $(SCHEME_INC)/scheme.boot scheme-v.boot petite

racket-v.boot: racket.boot
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @COMPRESS_COMP@ racket.boot racket-v.boot petite scheme

# ----------------------------------------
# Mac OS

RKTFWDIR = Racket.framework/Versions/$(FWVERSION)_CS
RKTFW = $(RKTFWDIR)/Racket
GRAPPSKEL = GRacketCS.app/Contents/Info.plist

racketcs@OSX@: main.o $(RKTFW)
	$(CC) $(CFLAGS) -o racketcs main.o -F. -framework Racket
	/usr/bin/install_name_tool -change "Racket.framework/Versions/$(FWVERSION)_CS/Racket" "@executable_path/Racket.framework/Versions/$(FWVERSION)_CS/Racket" racketcs

GRACKET_BIN = GRacketCS.app/Contents/MacOS/GracketCS

gracketcs@OSX@:
	$(MAKE) $(GRACKET_BIN)

$(GRACKET_BIN): grmain.o $(RKTFW) $(GRAPPSKEL)
	$(CC) $(CFLAGS) -o $(GRACKET_BIN) grmain.o -F. -framework Racket
	/usr/bin/install_name_tool -change "Racket.framework/Versions/$(FWVERSION)_CS/Racket" "@executable_path/../../../Racket.framework/Versions/$(FWVERSION)_CS/Racket" $(GRACKET_BIN)

$(GRAPPSKEL): $(srcdir)/../../mac/osx_appl.rkt  $(srcdir)/../../racket/src/schvers.h $(srcdir)/../../mac/icon/GRacket.icns
	$(BOOTSTRAP_RACKET) $(srcdir)/../../mac/osx_appl.rkt $(srcdir)/../.. "CS"

BOOT_FILES = $(SCHEME_INC)/petite.boot $(SCHEME_INC)/scheme.boot racket.boot
FW_BOOT_DEST = Racket.framework/Versions/$(FWVERSION)_CS/boot

$(RKTFW): $(BOOT_OBJS) $(BOOT_FILES)
	mkdir -p  Racket.framework/Versions/$(FWVERSION)_CS
	@RKTLINKER@ -o $(RKTFW) @LDFLAGS@ -dynamiclib -all_load $(BOOT_OBJS) $(LDFLAGS) $(LIBS)
	rm -f Racket.framework/Racket
	ln -s Versions/$(FWVERSION)_CS/Racket Racket.framework/Racket
	mkdir -p Racket.framework/Versions/$(FWVERSION)_CS/boot
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @COMPRESS_COMP@ $(SCHEME_INC)/petite.boot $(FW_BOOT_DEST)/petite.boot
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @COMPRESS_COMP@ $(SCHEME_INC)/scheme.boot $(FW_BOOT_DEST)/scheme.boot petite
	$(SCHEME) --script $(srcdir)/to-vfasl.ss @COMPRESS_COMP@ racket.boot $(FW_BOOT_DEST)/racket.boot petite scheme
	$(BOOTSTRAP_RACKET) $(srcdir)/adjust-compress.rkt @COMPRESS_COMP@ $(FW_BOOT_DEST)/petite.boot $(FW_BOOT_DEST)/scheme.boot $(FW_BOOT_DEST)/racket.boot

# ----------------------------------------
# Common

DEF_COLLECTS_DIR = -DINITIAL_COLLECTS_DIRECTORY='"'"`cd $(srcdir)/../../../collects; pwd`"'"'
DEF_CONFIG_DIR = -DINITIAL_CONFIG_DIRECTORY='"'"`cd $(srcdir)/../../..; pwd`/etc"'"'
DEF_C_DIRS = $(DEF_COLLECTS_DIR) $(DEF_CONFIG_DIR)
COMP_SUBDIR = -DCS_COMPILED_SUBDIR=@CS_COMPILED_SUBDIR@

MAIN_DEPS = $(srcdir)/main.c $(srcdir)/boot.h $(srcdir)/../../start/config.inc

main.o: $(MAIN_DEPS)
	$(CC) $(CFLAGS) $(DEF_C_DIRS) $(COMP_SUBDIR) -c -o main.o $(srcdir)/main.c

grmain.o: $(srcdir)/grmain.c $(MAIN_DEPS) $(srcdir)/../../start/gui_filter.inc
	$(CC) $(CFLAGS) $(DEF_C_DIRS) $(COMP_SUBDIR) -c -o grmain.o $(srcdir)/grmain.c

boot.o: $(srcdir)/boot.c $(srcdir)/../../rktio/rktio.inc $(srcdir)/boot.h
	$(CC) $(CFLAGS) -c -o boot.o $(srcdir)/boot.c

starter: $(srcdir)/../../start/ustart.c
	$(CC) $(CFLAGS) -o starter $(srcdir)/../../start/ustart.c

# ----------------------------------------
# Install

ICP=@ICP@

install:
	$(MAKE) plain-install
	$(MAKE) setup-install

setup-install:
	$(DESTDIR)$(bindir)/racket$(CS_INSTALLED) $(SELF_RACKET_FLAGS) -N raco -l- raco setup $(PLT_SETUP_OPTIONS)

no-setup-install:
	echo done

plain-install@NOT_OSX@:
	$(MAKE) unix-install

plain-install@OSX@:
	$(MAKE) macos-install

common-install:
	mkdir -p $(ALLDIRINFO)
	rm -f "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	rm -f "$(DESTDIR)$(libpltdir)/starter"
	rm -f "$(DESTDIR)$(libpltdir)/starter-sh"
	$(ICP) racketcs "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(STRIP_DEBUG) "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)"
	$(ICP) starter "$(DESTDIR)$(libpltdir)/starter"
	$(STRIP_DEBUG) "$(DESTDIR)$(libpltdir)/starter"
	$(ICP) $(srcdir)/../../start/starter-sh "$(DESTDIR)$(libpltdir)/starter-sh"
	$(RACKET) -cu "$(srcdir)/../../racket/collects-path.rkt" "$(DESTDIR)$(libpltdir)/starter" $(DESTDIR)@COLLECTS_PATH@ $(DESTDIR)@CONFIG_PATH@
	$(RACKET) -cu "$(srcdir)/gen-system.rkt" $(DESTDIR)$(libpltdir)/system$(CS_INSTALLED).rktd $(MACH) @CROSS_COMPILE_TARGET_KIND@

unix-install:
	$(MAKE) common-install
	rm -f "$(DESTDIR)$(libpltdir)/gracket$(CS_INSTALLED)"
	$(ICP) gracketcs "$(DESTDIR)$(libpltdir)/gracket$(CS_INSTALLED)"
	$(RACKET) -cu "$(srcdir)/../../racket/collects-path.rkt" "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)" $(DESTDIR)@COLLECTS_PATH@ $(DESTDIR)@CONFIG_PATH@
	$(RACKET) -cu "$(srcdir)/../../racket/collects-path.rkt" "$(DESTDIR)$(libpltdir)/gracket$(CS_INSTALLED)" $(DESTDIR)@COLLECTS_PATH@ $(DESTDIR)@CONFIG_PATH@

RKTFWDEST = @FRAMEWORK_INSTALL_DIR@/Racket.framework
FRAMEWORK_REL_PREFIX = "@executable_path/../$(libpltdir_rel)/"
FRAMEWORK_ABS_PREFIX = "$(libpltdir)/"

macos-install:
	$(MAKE) common-install
	rm -f $(DESTDIR)$(RKTFWDEST)/Racket
	rm -rf $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS
	mkdir -p $(DESTDIR)"$(RKTFWDEST)/Versions/$(FWVERSION)_CS"
	cp $(RKTFW) $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/
	mkdir -p $(DESTDIR)"$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot"
	rm -f $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/petite.boot
	rm -f $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/scheme.boot
	rm -f $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/racket.boot
	cp $(RKTFWDIR)/boot/petite.boot $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/
	cp $(RKTFWDIR)/boot/scheme.boot $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/
	cp $(RKTFWDIR)/boot/racket.boot $(DESTDIR)$(RKTFWDEST)/Versions/$(FWVERSION)_CS/boot/
	$(RACKET) -cu "$(srcdir)/../../racket/collects-path.rkt" "$(DESTDIR)$(bindir)/racket$(CS_INSTALLED)" $(DESTDIR)@COLLECTS_PATH@ $(DESTDIR)@CONFIG_PATH@
	$(MAKE) macos-install-gracket CS_GR_INSTALLED="`echo $(CS_INSTALLED) | tr a-z A-Z`"

macos-install-gracket:
	/usr/bin/install_name_tool -change "@executable_path/Racket.framework/Versions/$(FWVERSION)_CS/Racket" "@FRAMEWORK_PREFIX@Racket.framework/Versions/$(FWVERSION)_CS/Racket" $(DESTDIR)"$(bindir)/racket$(CS_INSTALLED)"
	rm -rf $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app"
	$(ICP) -r "GRacketCS.app" $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app"
	$(BOOTSTRAP_RACKET) "$(srcdir)/../../mac/rename-app.rkt" $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app" "GRacketCS" "GRacket$(CS_GR_INSTALLED)" no-up
	/usr/bin/install_name_tool -change "@executable_path/../../../../racket/Racket.framework/Versions/$(FWVERSION)_CS/Racket" "@FRAMEWORK_PREFIX@Racket.framework/Versions/$(FWVERSION)_CS/Racket" $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app/Contents/MacOS/GRacket$(CS_GR_INSTALLED)"
	$(RACKET) -cu "$(srcdir)/../../racket/collects-path.rkt" $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app/Contents/MacOS/GRacket$(CS_GR_INSTALLED)" ../../../../collects ../../../../etc
	$(STRIP_DEBUG) $(DESTDIR)"$(libpltdir)/GRacket$(CS_GR_INSTALLED).app/Contents/MacOS/GRacket$(CS_GR_INSTALLED)"
