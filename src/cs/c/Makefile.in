# This makefile template is instantiated in a build directory to
# communicate configuration decisions from "configure" to "build.zuo".
# Most variables here are optional, so a "Makefile" could be created
# directly (such as by "winfig.bat"). The main required ones are
# `srcdir` and `MACH`. For non-Windows, `bindir`, `libdir`, etc., are
# also required. `OSX` is required for Mac OS (and not `--enable-xonx`).

# How to reach the source directory from the build directory (can be
# relative):
srcdir = @srcdir@

# The host machine type:
MACH = @MACH@

# The machine type to build, which is the same as `MACH` unless cross
# building:
TARGET_MACH = @TARGET_MACH@

# Whether the build is intended as a cross build ("cross") or not
# (empty):
CROSS_MODE = @CROSS_MODE@

# For a pb build, we want `system-type` to return information about
# the specific machine, if possible, not just "pb"
KERNEL_TARGET_MACH = @KERNEL_TARGET_MACH@

# If `RACKET` is set to something different than empty or `auto`, it
# must be a compatible Racket to the curent build in the sense that
# `require`s here to collection-based modules will work; the Racket
# built here will never be run, so it's suitable as a part of a
# cross-compile setup
RACKET = @RACKET@

# If `BOOTFILE_RACKET` is set, then it needs only to be a Racket that
# is recent enough to run "../../ChezScheme/rktboot/main.rkt"; it
# doesn't replace the Racket build here for other purposes
BOOTFILE_RACKET = @BOOTFILE_RACKET@

# If `SCHEME` is set, it must be compatible to the curren build;
# if `SCHEME_DIR` is set and `SCHEME` is not, then `SCHEME_DIR` refers
# to an existing build directory;
# if `RACKET` is "auto", then an auto-generated Scheme is used and
# both of these are ignored
SCHEME = @SCHEME@
SCHEME_DIR = @SCHEME_DIR@

# C compiler, etc.
CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
AR = @AR@
ARFLAGS = @ARFLAGS@
RANLIB = @RANLIB@

# Extra `LDFLAGS` when linking a Racket executable
LINK_DYNAMIC = @LINK_DYNAMIC@

# Alternative to `CC` for an invocation that links a Racket executable
RKTLINKER = @RKTLINKER@

# Windows resource compiler
WINDRES = @WINDRES@

# Debugging-info stripping commands for executables and libraries
STRIP_DEBUG = @STRIP_DEBUG@
STRIP_LIB_DEBUG = @STRIP_LIB_DEBUG@

# Replacements for `cp` for installing executables and libraries;
# if libtool is used, for example, these might be libtool installation
# commands
ICP=@ICP@
ICP_LIB=@ICP_LIB@

# Arguments to pass along to "../../rktio/configure"
RKTIO_CONFIGURE_ARGS = @RKTIO_CONFIGURE_ARGS@

# For running a bootstraping Racket with "../../setup-go.rkt", use
# `--boot` or `--chain` as the mode
SETUP_BOOT_MODE = @SETUP_BOOT_MODE@

# Configuration to record in the executable:
COLLECTS_PATH = @COLLECTS_PATH@
CONFIG_PATH = @CONFIG_PATH@

# Communicate certain configuration choices to ".so" compilation via
# environment variables:
CONFIGURE_RACKET_SO_COMPILE = @CONFIGURE_RACKET_SO_COMPILE@

# Configuration about how boot files are generated:
BOOT_COMPRESS_COMP = @BOOT_COMPRESS_COMP@
COMPRESS_COMP = @COMPRESS_COMP@
DISABLE_WPO = @DISABLE_WPO@

# Potentially a suffix like "cs" to add to the end of installed
# executables:
CS_INSTALLED = @CS_INSTALLED@

# Whether to configure the installation for machine-specific
# bytecode ("machine") or machine-independent ("any"); this
# configuration happens via "system.rktd"
CROSS_COMPILE_TARGET_KIND = @CROSS_COMPILE_TARGET_KIND@

# Suffix to add to `system-library-subpath` result
PLT_CS_SLSP_SUFFIX = @PLT_CS_SLSP_SUFFIX@

# Whether to install "libkernel.a", etc. ("install") or omit
# them ("no-install")
INSTALL_LIBS_ENABLE = @INSTALL_LIBS_ENABLE@

# Whether building for Mac OS ("t" or "f")
OSX=@OSX@
# Link executable to framework ("fw") or everything in the
# executable ("static")
MACLIBRKT_LINK_MODE = @MACLIBRKT_LINK_MODE@
# Install framework relative to executable ("yes") or at
# an absolute path ("no")
FRAMEWORK_REL_INSTALL = @FRAMEWORK_REL_INSTALL@
# Supplies the path for install, using "${libpltdir}" for relative
# or an absolute path otherwise
FRAMEWORK_INSTALL_DIR = @FRAMEWORK_INSTALL_DIR@

# This might be set to a directory that narrows installation actions
# to just the main collects (no packages), for example; when non-empty
# this configuration is applied after a default that points at the
# installation "etc" directory
SELF_ROOT_CONFIG_DIR =

# Typically "--no-user":
INSTALL_SETUP_FLAGS = @INSTALL_SETUP_FLAGS@

# Flags supplied to `racket` when running `raco` to set up
# packages and collections; the intent is to allow flags
# like `-MRC` to compile machine-independent bytecode
# while redirecting machine-specific bytecode to a separate
# filesystem tree, and/or `--cross-compiler` to support
# corss compilation
SETUP_MACHINE_FLAGS = 

# Shell command to run after building an executable, where the
# just-built executable is added to the end of the command
POST_LINKER = @POST_LINKER@

# If these are empty, the corresponding libraries are built out of
# sources that are with Chez Scheme:
Z_LIB=@Z_LIB@
LZ4_LIB=@LZ4_LIB@

# Propagated to Chez Scheme build ("yes" or "no")
DISABLE_ICONV=@DISABLE_ICONV@
DISABLE_CURSES=@DISABLE_CURSES@

# Whether pb Chez Scheme should link to libffi ("yes" or "no")
SCHEME_LIBFFI = @SCHEME_LIBFFI@

# Whether pb boot files should be "chunked" to C form ("pbchunk") or
# not ("normal"); this needs to be "normal" for a non-pb build
PBCHUNK_MODE = @PBCHUNK_MODE@

# Installation destination configuration; these can expand to
# references to each other, such as `${prefix}` or `${PACKAGE}`.
# which in principle allows customization of the install step
# in the style `zuo . install prefix=...`.
PACKAGE = racket
prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
bindir = @bindir@
libdir = @libdir@
includepltdir = @includepltdir@
libpltdir = @libpltdir@
libpltdir_rel = @libpltdir_rel@
etcpltdir = @etcpltdir@
sharepltdir = @sharepltdir@
collectsdir = @collectsdir@
configdir = @etcpltdir@
pkgsdir = @pkgsdir@
docdir = @docdir@
appsdir = @appsdir@
mandir = @mandir@

# Whether `setup/unixstyle-install.rkt copytree` is needed for
# installation ("yes" or "no")
MAKE_COPYTREE = @MAKE_COPYTREE@

# Whether copytree should preserve the source shape ("yes")
# or use a convential Unix filesystem structure ("no")
INSTALL_ORIG_TREE = @INSTALL_ORIG_TREE@

# Whether the default package scope should be set on installation
# ("adjust" or "preserve")
MAKE_INSTALL_PKGSCOPE = @MAKE_INSTALL_PKGSCOPE@

# The value to install as the default installation scope
# (e.g., "user")
INSTALL_PKGSCOPE = @INSTALL_PKGSCOPE@

# Whether ".zo" files should be moved to "lib" instead of "share"
# for a Unix-style installation ("yes" or "no")
INSTALL_LIBZO = @INSTALL_LIBZO@


# ------------------------------------------------------------

CC_FOR_BUILD=@CC_FOR_BUILD@
upsrcdir=@upsrcdir@

ZUO=bin/zuo

cs: $(ZUO)
	$(ZUO) . build

install: $(ZUO)
	$(ZUO) . install

plain-install: $(ZUO)
	$(ZUO) . plain-install

$(ZUO): $(srcdir)/../../zuo/zuo.c
	mkdir -p bin
	$(CC_FOR_BUILD) -DZUO_LIB_PATH='"'"$(upsrcdir)/../../zuo/lib"'"' -o $(ZUO) $(srcdir)/../../zuo/zuo.c
