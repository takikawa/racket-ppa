#define EVAL_STARTUP EVAL_ONE_STR(startup_source)
static const char *startup_source =
"(linklet"
"()"
"((boot boot)"
"(1/bound-identifier=? bound-identifier=?)"
"(1/compile compile)"
"(compile-to-linklets compile-to-linklets)"
"(1/current-compile current-compile)"
"(1/current-compiled-file-roots current-compiled-file-roots)"
"(1/current-eval current-eval)"
"(1/current-library-collection-links current-library-collection-links)"
"(1/current-library-collection-paths current-library-collection-paths)"
"(1/current-load current-load)"
"(1/current-load/use-compiled current-load/use-compiled)"
"(1/current-namespace current-namespace)"
"(datum->kernel-syntax datum->kernel-syntax)"
"(1/datum->syntax datum->syntax)"
"(declare-primitive-module! declare-primitive-module!)"
"(1/dynamic-require dynamic-require)"
"(embedded-load embedded-load)"
"(1/eval eval)"
"(eval$1 eval-top-level)"
"(expand$1 expand)"
"(1/find-library-collection-links find-library-collection-links)"
"(1/find-library-collection-paths find-library-collection-paths)"
"(find-main-config find-main-config)"
"(1/identifier-binding identifier-binding)"
"(identifier? identifier?)"
"(1/load load)"
"(1/load-extension load-extension)"
"(1/load/use-compiled load/use-compiled)"
"(make-namespace make-namespace)"
"(maybe-raise-missing-module maybe-raise-missing-module)"
"(maybe-syntax->datum maybe-syntax->datum)"
"(1/module->language-info module->language-info)"
"(1/module-compiled-exports module-compiled-exports)"
"(1/module-compiled-indirect-exports module-compiled-indirect-exports)"
"(1/module-declared? module-declared?)"
"(1/module-path-index-join module-path-index-join)"
"(1/module-path-index? module-path-index?)"
"(1/module-path? module-path?)"
"(1/module-predefined? module-predefined?)"
"(namespace->instance namespace->instance)"
"(1/namespace-attach-module namespace-attach-module)"
"(1/namespace-attach-module-declaration namespace-attach-module-declaration)"
"(namespace-datum-introduce namespace-datum-introduce)"
"(1/namespace-mapped-symbols namespace-mapped-symbols)"
"(1/namespace-module-identifier namespace-module-identifier)"
"(1/namespace-require namespace-require)"
"(1/namespace-syntax-introduce namespace-syntax-introduce)"
"(1/read read)"
"(1/read-accept-compiled read-accept-compiled)"
"(1/read-syntax read-syntax)"
"(1/resolved-module-path? resolved-module-path?)"
"(seal seal)"
"(1/syntax->datum syntax->datum)"
"(1/syntax-debug-info syntax-debug-info)"
"(1/syntax-e syntax-e)"
"(syntax-property$1 syntax-property)"
"(1/syntax-shift-phase-level syntax-shift-phase-level)"
"(syntax?$1 syntax?)"
"(1/use-collection-link-paths use-collection-link-paths)"
"(1/use-compiled-file-check use-compiled-file-check)"
"(1/use-compiled-file-paths use-compiled-file-paths)"
"(1/use-user-specific-search-paths use-user-specific-search-paths))"
"(define-values"
"(qq-append)"
"  (lambda (a_0 b_0) (begin (if (list? a_0) (append a_0 b_0) (raise-argument-error 'unquote-splicing \"list?\" a_0)))))"
"(define-values(call/ec) call-with-escape-continuation)"
"(define-values"
"(bad-list$1)"
"  (lambda (who_0 orig-l_0) (begin 'bad-list (raise-mismatch-error who_0 \"not a proper list: \" orig-l_0))))"
"(define-values"
"(memq memv member)"
"(let-values()"
"(let-values()"
"(values"
"(let-values(((memq_0)"
"(lambda(v_0 orig-l_1)"
"(begin"
" 'memq"
"((letrec-values(((loop_0)"
"(lambda(ls_0)"
"(begin"
" 'loop"
"(if(null? ls_0)"
"(let-values() #f)"
"(if(not(pair? ls_0))"
"(let-values()(bad-list$1 'memq orig-l_1))"
"(if(eq? v_0(car ls_0))"
"(let-values() ls_0)"
"(let-values()(loop_0(cdr ls_0))))))))))"
" loop_0)"
" orig-l_1)))))"
" memq_0)"
"(let-values(((memv_0)"
"(lambda(v_1 orig-l_2)"
"(begin"
" 'memv"
"((letrec-values(((loop_1)"
"(lambda(ls_1)"
"(begin"
" 'loop"
"(if(null? ls_1)"
"(let-values() #f)"
"(if(not(pair? ls_1))"
"(let-values()(bad-list$1 'memv orig-l_2))"
"(if(eqv? v_1(car ls_1))"
"(let-values() ls_1)"
"(let-values()(loop_1(cdr ls_1))))))))))"
" loop_1)"
" orig-l_2)))))"
" memv_0)"
"(let-values(((default_0)"
"(let-values(((member_0)"
"(lambda(v_2 orig-l_3)"
"(begin"
" 'member"
"((letrec-values(((loop_2)"
"(lambda(ls_2)"
"(begin"
" 'loop"
"(if(null? ls_2)"
"(let-values() #f)"
"(if(not(pair? ls_2))"
"(let-values()(bad-list$1 'member orig-l_3))"
"(if(equal? v_2(car ls_2))"
"(let-values() ls_2)"
"(let-values()(loop_2(cdr ls_2))))))))))"
" loop_2)"
" orig-l_3)))))"
" member_0)))"
"(let-values(((member_1)"
"(case-lambda"
"((v_3 orig-l_4)(begin 'member(default_0 v_3 orig-l_4)))"
"((v_4 orig-l_5 eq?_0)"
"(begin"
"(if(if(procedure? eq?_0)(procedure-arity-includes? eq?_0 2) #f)"
"(void)"
"                             (raise-argument-error 'member \"(procedure-arity-includes/c 2)\" eq?_0))"
"((let-values(((member_2)"
"(lambda(v_5 orig-l_6)"
"(begin"
" 'member"
"((letrec-values(((loop_3)"
"(lambda(ls_3)"
"(begin"
" 'loop"
"(if(null? ls_3)"
"(let-values() #f)"
"(if(not(pair? ls_3))"
"(let-values()(bad-list$1 'member orig-l_6))"
"(if(eq?_0 v_5(car ls_3))"
"(let-values() ls_3)"
"(let-values()(loop_3(cdr ls_3))))))))))"
" loop_3)"
" orig-l_6)))))"
" member_2)"
" v_4"
" orig-l_5))))))"
" member_1))))))"
"(define-values"
"(current-parameterization)"
"(lambda()(begin(extend-parameterization(continuation-mark-set-first #f parameterization-key)))))"
"(define-values"
"(call-with-parameterization)"
"(lambda(paramz_0 thunk_0)"
"(begin"
"(begin"
"(if(parameterization? paramz_0)"
"(void)"
"          (let-values () (raise-argument-error 'call-with-parameterization \"parameterization?\" 0 paramz_0 thunk_0)))"
"(if(if(procedure? thunk_0)(procedure-arity-includes? thunk_0 0) #f)"
"(void)"
"          (let-values () (raise-argument-error 'call-with-parameterization \"(-> any)\" 1 paramz_0 thunk_0)))"
"(with-continuation-mark parameterization-key paramz_0(thunk_0))))))"
"(define-values"
"(struct:break-paramz make-break-paramz break-paramz? break-paramz-ref break-paramz-set!)"
"(make-struct-type 'break-parameterization #f 1 0 #f))"
"(define-values"
"(current-break-parameterization)"
"(lambda()(begin(make-break-paramz(continuation-mark-set-first #f break-enabled-key)))))"
"(define-values"
"(call-with-break-parameterization)"
"(lambda(paramz_1 thunk_1)"
"(begin"
"(begin"
"(if(break-paramz? paramz_1)"
"(void)"
"(let-values()"
"            (raise-argument-error 'call-with-break-parameterization \"break-parameterization?\" 0 paramz_1 thunk_1)))"
"(if(if(procedure? thunk_1)(procedure-arity-includes? thunk_1 0) #f)"
"(void)"
"          (let-values () (raise-argument-error 'call-with-parameterization \"(-> any)\" 1 paramz_1 thunk_1)))"
"(begin0"
"(with-continuation-mark break-enabled-key(break-paramz-ref paramz_1 0)(begin(check-for-break)(thunk_1)))"
"(check-for-break))))))"
"(define-values"
"(select-handler/no-breaks)"
"(lambda(e_0 bpz_0 l_0)"
"(begin"
"(with-continuation-mark"
" break-enabled-key"
"(make-thread-cell #f)"
"((letrec-values(((loop_4)"
"(lambda(l_1)"
"(begin"
" 'loop"
"(if(null? l_1)"
"(let-values()(raise e_0))"
"(if((caar l_1) e_0)"
"(let-values()"
"(begin0"
"((cdar l_1) e_0)"
"(with-continuation-mark break-enabled-key bpz_0(check-for-break))))"
"(let-values()(loop_4(cdr l_1)))))))))"
" loop_4)"
" l_0)))))"
"(define-values(false-thread-cell)(make-thread-cell #f))"
"(define-values(handler-prompt-key)(make-continuation-prompt-tag 'handler-prompt-tag))"
"(define-values"
"(call-handled-body)"
"(lambda(bpz_1 handle-proc_0 body-thunk_0)"
"(begin"
"(with-continuation-mark"
" break-enabled-key"
" false-thread-cell"
"(call-with-continuation-prompt"
"(lambda(bpz_2 body-thunk_1)"
"(with-continuation-mark"
" break-enabled-key"
" bpz_2"
"(with-continuation-mark"
" exception-handler-key"
"(lambda(e_1)(abort-current-continuation handler-prompt-key e_1))"
"(body-thunk_1))))"
" handler-prompt-key"
" handle-proc_0"
" bpz_1"
" body-thunk_0)))))"
"(define-values"
"(call-with-exception-handler)"
"(lambda(exnh_0 thunk_2)(begin(begin0(with-continuation-mark exception-handler-key exnh_0(thunk_2))(void)))))"
"(define-values(not-there)(gensym))"
"(define-values"
"(do-hash-update)"
"(lambda(who_1 mut?_0 set_0 ht_0 key_0 xform_0 default_1)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()"
"(begin"
"(if(if(hash? ht_0)(if mut?_0(not(immutable? ht_0))(immutable? ht_0)) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_1"
"                   (if mut?_0 \"(and/c hash? (not/c immutable?))\" \"(and/c hash? immutable?)\")"
" ht_0)))"
"(if(if(procedure? xform_0)(procedure-arity-includes? xform_0 1) #f)"
"(void)"
"                (let-values () (raise-argument-error who_1 \"(any/c . -> . any/c)\" xform_0))))))"
"(let-values(((v_6)(hash-ref ht_0 key_0 default_1)))"
"(if(eq? v_6 not-there)"
"            (raise-mismatch-error who_1 \"no value found for key: \" key_0)"
"(set_0 ht_0 key_0(xform_0 v_6))))))))"
"(define-values"
"(hash-update)"
"(case-lambda"
"((ht_1 key_1 xform_1 default_2)(begin(do-hash-update 'hash-update #f hash-set ht_1 key_1 xform_1 default_2)))"
"((ht_2 key_2 xform_2)(hash-update ht_2 key_2 xform_2 not-there))))"
"(define-values"
"(hash-update!)"
"(case-lambda"
"((ht_3 key_3 xform_3 default_3)(begin(do-hash-update 'hash-update! #t hash-set! ht_3 key_3 xform_3 default_3)))"
"((ht_4 key_4 xform_4)(hash-update! ht_4 key_4 xform_4 not-there))))"
"(define-values"
"(hash-ref!)"
"(lambda(ht_5 key_5 new_0)"
"(begin"
"(begin"
"(if(if(hash? ht_5)(not(immutable? ht_5)) #f)"
"(void)"
"          (let-values () (raise-argument-error 'hash-ref! \"(and/c hash? (not/c immutable?))\" 0 ht_5 key_5 new_0)))"
"(let-values(((v_7)(hash-ref ht_5 key_5 not-there)))"
"(if(eq? not-there v_7)"
"(let-values(((n_0)(if(procedure? new_0)(new_0) new_0)))(begin(hash-set! ht_5 key_5 n_0) n_0))"
" v_7))))))"
"(define-values"
"(path-string?)"
"(lambda(s_0)"
"(begin"
"(let-values(((or-part_0)(path? s_0)))"
"(if or-part_0"
" or-part_0"
"(if(string? s_0)"
"(let-values(((or-part_1)(relative-path? s_0)))(if or-part_1 or-part_1(absolute-path? s_0)))"
" #f))))))"
"(define-values(bsbs)(string '#\\\\ '#\\\\))"
"(define-values"
"(normal-case-path)"
"(lambda(s_1)"
"(begin"
"(begin"
"(if(let-values(((or-part_2)(path-for-some-system? s_1)))(if or-part_2 or-part_2(path-string? s_1)))"
"(void)"
"          (let-values () (raise-argument-error 'normal-path-case \"(or/c path-for-some-system? path-string?)\" s_1)))"
"(if(if(path-for-some-system? s_1)(eq?(path-convention-type s_1) 'windows)(eq?(system-type) 'windows))"
"(let-values()"
"(let-values(((str_0)(if(string? s_1) s_1(bytes->string/locale(path->bytes s_1)))))"
"              (if (regexp-match? '#rx\"^[\\\\][\\\\][?][\\\\]\" str_0)"
"(if(string? s_1)(string->path s_1) s_1)"
"(let-values(((s_2)(string-locale-downcase str_0)))"
"(bytes->path"
"(string->bytes/locale"
"(regexp-replace*"
"                     '#rx\"/\""
"                     (if (regexp-match? '#rx\"[/\\\\][. ]+[/\\\\]*$\" s_2)"
" s_2"
"                       (regexp-replace* '#rx\"[ .]+([/\\\\]*)$\" s_2 \"\\\\1\"))"
" bsbs))"
" 'windows)))))"
"(if(string? s_1)(let-values()(string->path s_1))(let-values() s_1)))))))"
"(define-values"
"(check-extension-call)"
"(lambda(s_3 sfx_0 who_2 sep_0 trust-sep?_0)"
"(begin"
"(begin"
"(let-values(((err-msg_0 err-index_0)"
"(if(not"
"(let-values(((or-part_3)(path-for-some-system? s_3)))"
"(if or-part_3 or-part_3(path-string? s_3))))"
"                        (let-values () (values \"(or/c path-for-some-system? path-string?)\" 0))"
"(if(not(let-values(((or-part_4)(string? sfx_0)))(if or-part_4 or-part_4(bytes? sfx_0))))"
"                          (let-values () (values \"(or/c string? bytes?)\" 1))"
"(if(not"
"(let-values(((or-part_5) trust-sep?_0))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(string? sep_0)))"
"(if or-part_6 or-part_6(bytes? sep_0))))))"
"                            (let-values () (values \"(or/c string? bytes?)\" 2))"
"(let-values()(values #f #f)))))))"
"(if err-msg_0"
"(let-values()"
"(if trust-sep?_0"
"(raise-argument-error who_2 err-msg_0 err-index_0 s_3 sfx_0)"
"(raise-argument-error who_2 err-msg_0 err-index_0 s_3 sfx_0 sep_0)))"
"(void)))"
"(let-values(((base_0 name_0 dir?_0)(split-path s_3)))"
"(begin"
"(if(not base_0)"
"              (let-values () (raise-mismatch-error who_2 \"cannot add an extension to a root path: \" s_3))"
"(void))"
"(values base_0 name_0)))))))"
"(define-values"
"(path-adjust-extension)"
"(lambda(name_1 sep_1 rest-bytes_0 s_4 sfx_1 trust-sep?_1)"
"(begin"
"(let-values(((base_1 name_2)(check-extension-call s_4 sfx_1 name_1 sep_1 trust-sep?_1)))"
"(let-values(((bs_0)(path-element->bytes name_2)))"
"(let-values(((finish_0)"
"(lambda(i_0 sep_2 i2_0)"
"(begin"
" 'finish"
"(bytes->path-element"
"(bytes-append"
"(subbytes bs_0 0 i_0)"
"(if(string? sep_2)(string->bytes/locale sep_2(char->integer '#\\?)) sep_2)"
"(rest-bytes_0 bs_0 i2_0)"
"(if(string? sfx_1)(string->bytes/locale sfx_1(char->integer '#\\?)) sfx_1))"
"(if(path-for-some-system? s_4)"
"(path-convention-type s_4)"
"(system-path-convention-type)))))))"
"(let-values(((new-name_0)"
"(letrec-values(((loop_5)"
"(lambda(i_1)"
"(begin"
" 'loop"
"(if(zero? i_1)"
"                                                 (finish_0 (bytes-length bs_0) #\"\" (bytes-length bs_0))"
"(let-values(((i_2)(sub1 i_1)))"
"(if(if(not(zero? i_2))"
"(eq?(char->integer '#\\.)(bytes-ref bs_0 i_2))"
" #f)"
"(finish_0 i_2 sep_1(add1 i_2))"
"(loop_5 i_2))))))))"
"(loop_5(bytes-length bs_0)))))"
"(if(path-for-some-system? base_1)(build-path base_1 new-name_0) new-name_0))))))))"
"(define-values"
"(path-replace-extension)"
"  (lambda (s_5 sfx_2) (begin (path-adjust-extension 'path-replace-extension #\"\" (lambda (bs_1 i_3) #\"\") s_5 sfx_2 #t))))"
"(define-values"
"(path-add-extension)"
"(case-lambda"
"   ((s_6 sfx_3) (begin (path-adjust-extension 'path-add-extension #\"_\" subbytes s_6 sfx_3 #t)))"
"((s_7 sfx_4 sep_3)(path-adjust-extension 'path-add-extension sep_3 subbytes s_7 sfx_4 #f))))"
"(define-values"
"(reroot-path)"
"(lambda(p_0 root_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_7)(path-string? p_0)))"
"(if or-part_7 or-part_7(path-for-some-system? p_0)))"
"(void)"
"(let-values()"
"                          (raise-argument-error 'reroot-path \"(or/c path-string? path-for-some-system?)\" 0 p_0 root_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_8)(path-string? root_0)))"
"(if or-part_8 or-part_8(path-for-some-system? root_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'reroot-path"
"                             \"(or/c path-string? path-for-some-system?)\""
" 1"
" p_0"
" root_0)))"
"(values))))"
"(let-values(((conv_0)"
"(if(path-for-some-system? p_0)(path-convention-type p_0)(system-path-convention-type))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_9)(complete-path? p_0)))"
"(if or-part_9 or-part_9(eq?(system-path-convention-type) conv_0)))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                 \"path is not complete and not the platform's convention\""
"                                 \"path\""
" p_0"
"                                 \"platform convention type\""
"(system-path-convention-type))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?"
"(if(path-for-some-system? root_0)"
"(path-convention-type root_0)"
"(system-path-convention-type))"
" conv_0)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'reroot-path"
"                                   \"given paths use different conventions\""
"                                   \"path\""
" p_0"
"                                   \"root path\""
" root_0)))"
"(values))))"
"(let-values(((c-p_0)"
"(normal-case-path"
"(cleanse-path(if(complete-path? p_0) p_0(path->complete-path p_0))))))"
"(let-values(((bstr_0)(path->bytes c-p_0)))"
"(if(eq? conv_0 'unix)"
"(let-values()"
"                        (if (bytes=? bstr_0 #\"/\")"
"(if(path-for-some-system? root_0) root_0(string->path root_0))"
"(build-path root_0(bytes->path(subbytes(path->bytes c-p_0) 1) conv_0))))"
"(if(eq? conv_0 'windows)"
"(let-values()"
"(build-path"
" root_0"
"(bytes->path"
"                            (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\[a-z]:\" bstr_0)"
"(let-values()"
"                                (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_0 4 5) #\"\\\\\" (subbytes bstr_0 6)))"
"                              (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_0)"
"                                (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_0 4)))"
"                                (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\[?]\\\\\\\\UNC\\\\\\\\\" bstr_0)"
"                                  (let-values () (bytes-append #\"\\\\\\\\?\\\\REL\\\\\" (subbytes bstr_0 4)))"
"                                  (if (regexp-match? '#rx\"^\\\\\\\\\\\\\\\\\" bstr_0)"
"                                    (let-values () (bytes-append #\"UNC\\\\\" (subbytes bstr_0 2)))"
"                                    (if (regexp-match? '#rx\"^[a-z]:\" bstr_0)"
"(let-values()(bytes-append(subbytes bstr_0 0 1)(subbytes bstr_0 2)))"
"(void))))))"
" conv_0)))"
"(void)))))))))))))"
"(define-values"
"(path-list-string->path-list)"
"(let-values(((r_0) #f)"
"((cons-path_0)"
"(lambda(default_4 s_1 l_2)"
"(begin"
" 'cons-path"
"                    (let-values (((s_8) (if (eq? (system-type) 'windows) (regexp-replace* '#rx#\"\\\"\" s_1 #\"\") s_1)))"
"                      (if (bytes=? s_8 #\"\") (append default_4 l_2) (cons (bytes->path s_8) l_2)))))))"
"(lambda(s_2 default_5)"
"(begin"
"(begin"
"(if r_0"
"(void)"
"(let-values()"
"(set! r_0"
"(byte-regexp"
"(string->bytes/utf-8"
"                  (let-values (((sep_4) (if (eq? (system-type) 'windows) \";\" \":\")))"
"                    (format \"([^~a]*)~a(.*)\" sep_4 sep_4)))))))"
"(if(let-values(((or-part_10)(bytes? s_2)))(if or-part_10 or-part_10(string? s_2)))"
"(void)"
"            (let-values () (raise-argument-error 'path-list-string->path-list \"(or/c bytes? string?)\" s_2)))"
"(if(if(list? default_5)(andmap path? default_5) #f)"
"(void)"
"            (let-values () (raise-argument-error 'path-list-string->path-list \"(listof path?)\" default_5)))"
"((letrec-values(((loop_6)"
"(lambda(s_9)"
"(begin"
" 'loop"
"(let-values(((m_0)(regexp-match r_0 s_9)))"
"(if m_0"
"(cons-path_0 default_5(cadr m_0)(loop_6(caddr m_0)))"
"(cons-path_0 default_5 s_9 null)))))))"
" loop_6)"
"(if(string? s_2)(string->bytes/utf-8 s_2) s_2)))))))"
"(define-values"
"(find-executable-path)"
"(case-lambda"
"((program_0 libpath_0 reverse?_0)"
"(begin"
"(begin"
"(if(path-string? program_0)"
"(void)"
"          (let-values () (raise-argument-error 'find-executable-path \"path-string?\" program_0)))"
"(if(let-values(((or-part_11)(not libpath_0)))"
"(if or-part_11 or-part_11(if(path-string? libpath_0)(relative-path? libpath_0) #f)))"
"(void)"
"(let-values()"
"            (raise-argument-error 'find-executable-path \"(or/c #f (and/c path-string? relative-path?))\" libpath_0)))"
"(letrec-values(((found-exec_0)"
"(lambda(exec-name_0)"
"(begin"
" 'found-exec"
"(if libpath_0"
"(let-values(((base_2 name_3 isdir?_0)(split-path exec-name_0)))"
"(let-values(((next_0)"
"(lambda()"
"(begin"
" 'next"
"(let-values(((resolved_0)(resolve-path exec-name_0)))"
"(if(equal? resolved_0 exec-name_0)"
"(let-values() #f)"
"(if(relative-path? resolved_0)"
"(let-values()(found-exec_0(build-path base_2 resolved_0)))"
"(let-values()(found-exec_0 resolved_0)))))))))"
"(let-values(((or-part_12)(if reverse?_0(next_0) #f)))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)"
"(if(path? base_2)"
"(let-values(((lib_0)(build-path base_2 libpath_0)))"
"(if(let-values(((or-part_3)(directory-exists? lib_0)))"
"(if or-part_3 or-part_3(file-exists? lib_0)))"
" lib_0"
" #f))"
" #f)))"
"(if or-part_13 or-part_13(if(not reverse?_0)(next_0) #f)))))))"
" exec-name_0)))))"
"(if(if(relative-path? program_0)"
"(let-values(((base_3 name_4 dir?_1)(split-path program_0)))(eq? base_3 'relative))"
" #f)"
"            (let-values (((paths-str_0) (environment-variables-ref (current-environment-variables) #\"PATH\"))"
"((win-add_0)"
"(lambda(s_10)"
"                            (begin 'win-add (if (eq? (system-type) 'windows) (cons (bytes->path #\".\") s_10) s_10)))))"
"((letrec-values(((loop_7)"
"(lambda(paths_0)"
"(begin"
" 'loop"
"(if(null? paths_0)"
" #f"
"(let-values(((base_4)(path->complete-path(car paths_0))))"
"(let-values(((name_5)(build-path base_4 program_0)))"
"(if(file-exists? name_5)(found-exec_0 name_5)(loop_7(cdr paths_0))))))))))"
" loop_7)"
"(win-add_0"
"(if paths-str_0(path-list-string->path-list(bytes->string/locale paths-str_0 '#\\?) null) null))))"
"(let-values(((p_1)(path->complete-path program_0)))(if(file-exists? p_1)(found-exec_0 p_1) #f)))))))"
"((program_1 libpath_1)(find-executable-path program_1 libpath_1 #f))"
"((program_2)(find-executable-path program_2 #f #f))))"
"(define-values"
"(call-with-default-reading-parameterization)"
"(lambda(thunk_3)"
"(begin"
"(if(if(procedure? thunk_3)(procedure-arity-includes? thunk_3 0) #f)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-case-sensitive"
" #t"
" 1/read-square-bracket-as-paren"
" #t"
" 1/read-curly-brace-as-paren"
" #t"
" 1/read-square-bracket-with-tag"
" #f"
" 1/read-curly-brace-with-tag"
" #f"
" 1/read-accept-box"
" #t"
" 1/read-accept-compiled"
" #f"
" read-accept-bar-quote"
" #t"
" 1/read-accept-graph"
" #t"
" 1/read-decimal-as-inexact"
" #t"
" 1/read-cdot"
" #f"
" 1/read-accept-dot"
" #t"
" 1/read-accept-infix-dot"
" #t"
" 1/read-accept-quasiquote"
" #t"
" 1/read-accept-reader"
" #f"
" 1/read-accept-lang"
" #t"
" 1/current-readtable"
" #f)"
"(let-values()(thunk_3)))"
"        (raise-argument-error 'call-with-default-reading-parameterization \"(procedure-arity-includes/c 0)\" thunk_3)))))"
"(define-values"
"(prop:keyword-impersonator keyword-impersonator? keyword-impersonator-ref)"
"(make-struct-type-property 'keyword-impersonator))"
"(define-values"
"(keyword-procedure-impersonator-of)"
"(lambda(v_8)"
"(begin(if(keyword-impersonator? v_8)(let-values()((keyword-impersonator-ref v_8) v_8))(let-values() #f)))))"
"(define-values"
"(struct:keyword-procedure mk-kw-proc keyword-procedure? keyword-procedure-ref keyword-procedure-set!)"
"(make-struct-type"
" 'keyword-procedure"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:checked-procedure #t)(cons prop:impersonator-of keyword-procedure-impersonator-of))"
"(current-inspector)"
" #f"
" '(0 1 2 3)))"
"(define-values(keyword-procedure-required)(make-struct-field-accessor keyword-procedure-ref 2))"
"(define-values(keyword-procedure-allowed)(make-struct-field-accessor keyword-procedure-ref 3))"
"(define-values"
"(prop:procedure-accessor procedure-accessor? procedure-accessor-ref)"
"(make-struct-type-property"
" 'procedure"
"(lambda(v_9 info-l_0)(if(exact-integer? v_9)(make-struct-field-accessor(list-ref info-l_0 3) v_9) #f))))"
"(define-values"
"(new-prop:procedure new-procedure? new-procedure-ref)"
"(make-struct-type-property"
" 'procedure"
" #f"
"(list(cons prop:procedure values)(cons prop:procedure-accessor values))"
" #t))"
"(define-values"
"(procedure-keywords)"
"(lambda(p_2)"
"(begin"
"(if(keyword-procedure? p_2)"
"(let-values()(values(keyword-procedure-required p_2)(keyword-procedure-allowed p_2)))"
"(if(procedure? p_2)"
"(let-values()"
"(if(new-procedure? p_2)"
"(let-values(((v_10)(new-procedure-ref p_2)))"
"(if(procedure? v_10)"
"(procedure-keywords v_10)"
"(let-values(((a_1)(procedure-accessor-ref p_2)))"
"(if a_1(procedure-keywords(a_1 p_2))(values null null)))))"
"(values null null)))"
"          (let-values () (raise-argument-error 'procedure-keywords \"procedure?\" p_2)))))))"
"(define-values"
"(reverse$1)"
"(lambda(l_3)"
"(begin"
" 'reverse"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"          (if (list? l_3) (void) (raise-argument-error 'reverse \"list?\" l_3)))"
"(letrec-values(((loop_8)"
"(lambda(a_2 l_4)(begin 'loop(if(null? l_4) a_2(loop_8(cons(car l_4) a_2)(cdr l_4)))))))"
"(loop_8 null l_3))))))"
"(define-values"
"(sort vector-sort vector-sort!)"
"(let-values()"
"(let-values(((generic-sort_0)"
"(lambda(A_0 less-than?_0 n_1)"
"(begin"
" 'generic-sort"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_0)(unsafe-fxrshift n_1 1)))"
"(let-values(((n/2+_0)(unsafe-fx- n_1 n/2-_0)))"
"(letrec-values(((copying-mergesort_0)"
"(lambda(Alo_0 Blo_0 n_2)"
"(begin"
" 'copying-mergesort"
"(if(unsafe-fx= n_2 1)"
"(let-values()"
"(unsafe-vector-set! A_0 Blo_0(unsafe-vector-ref A_0 Alo_0)))"
"(if(unsafe-fx= n_2 2)"
"(let-values()"
"(let-values(((x_0)(unsafe-vector-ref A_0 Alo_0))"
"((y_0)"
"(unsafe-vector-ref A_0(unsafe-fx+ Alo_0 1))))"
"(if(less-than?_0 y_0 x_0)"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 y_0)"
"(unsafe-vector-set! A_0(unsafe-fx+ Blo_0 1) x_0))"
"(begin"
"(unsafe-vector-set! A_0 Blo_0 x_0)"
"(unsafe-vector-set! A_0(unsafe-fx+ Blo_0 1) y_0)))))"
"(if(unsafe-fx< n_2 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" Blo_0"
"(unsafe-vector-ref A_0 Alo_0))"
"((letrec-values(((iloop_0)"
"(lambda(i_4)"
"(begin"
" 'iloop"
"(if(unsafe-fx< i_4 n_2)"
"(let-values()"
"(let-values(((ref-i_0)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx+"
" Alo_0"
" i_4))))"
"((letrec-values(((jloop_0)"
"(lambda(j_0)"
"(begin"
" 'jloop"
"(let-values(((ref-j-1_0)"
"(unsafe-vector-ref"
" A_0"
"(unsafe-fx-"
" j_0"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_0"
" j_0)"
"(less-than?_0"
" ref-i_0"
" ref-j-1_0)"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-j-1_0)"
"(jloop_0"
"(unsafe-fx-"
" j_0"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" j_0"
" ref-i_0)"
"(iloop_0"
"(unsafe-fx+"
" i_4"
" 1)))))))))"
" jloop_0)"
"(unsafe-fx+ Blo_0 i_4))))"
"(void))))))"
" iloop_0)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_1)(unsafe-fxrshift n_2 1)))"
"(let-values(((n/2+_1)(unsafe-fx- n_2 n/2-_1)))"
"(let-values(((Amid1_0)(unsafe-fx+ Alo_0 n/2-_1))"
"((Amid2_0)(unsafe-fx+ Alo_0 n/2+_1))"
"((Bmid1_0)(unsafe-fx+ Blo_0 n/2-_1)))"
"(begin"
"(copying-mergesort_0 Amid1_0 Bmid1_0 n/2+_1)"
"(copying-mergesort_0 Alo_0 Amid2_0 n/2-_1)"
"(let-values(((b2_0)(unsafe-fx+ Blo_0 n_2)))"
"((letrec-values(((loop_9)"
"(lambda(a1_0 b1_0 c1_0)"
"(begin"
" 'loop"
"(let-values(((x_1)"
"(unsafe-vector-ref"
" A_0"
" a1_0))"
"((y_1)"
"(unsafe-vector-ref"
" A_0"
" b1_0)))"
"(if(not"
"(less-than?_0"
" y_1"
" x_1))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" x_1)"
"(let-values(((a1_1)"
"(unsafe-fx+"
" a1_0"
" 1))"
"((c1_1)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<"
" c1_1"
" b1_0)"
"(let-values()"
"(loop_9"
" a1_1"
" b1_0"
" c1_1))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_0"
" y_1)"
"(let-values(((b1_1)"
"(unsafe-fx+"
" b1_0"
" 1))"
"((c1_2)"
"(unsafe-fx+"
" c1_0"
" 1)))"
"(if(unsafe-fx<="
" b2_0"
" b1_1)"
"((letrec-values(((loop_10)"
"(lambda(a1_2"
" c1_3)"
"(begin"
" 'loop"
"(if(unsafe-fx<"
" c1_3"
" b1_1)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_3"
"(unsafe-vector-ref"
" A_0"
" a1_2))"
"(loop_10"
"(unsafe-fx+"
" a1_2"
" 1)"
"(unsafe-fx+"
" c1_3"
" 1))))"
"(void))))))"
" loop_10)"
" a1_0"
" c1_2)"
"(loop_9"
" a1_0"
" b1_1"
" c1_2))))))))))"
" loop_9)"
" Amid2_0"
" Bmid1_0"
" Blo_0))))))))))))))"
"(let-values(((Alo_1) 0)"
"((Amid1_1) n/2-_0)"
"((Amid2_1) n/2+_0)"
"((Ahi_0) n_1)"
"((B1lo_0) n_1))"
"(begin"
"(copying-mergesort_0 Amid1_1 B1lo_0 n/2+_0)"
"(if(zero? n/2-_0)"
"(void)"
"(let-values()(copying-mergesort_0 Alo_1 Amid2_1 n/2-_0)))"
"(let-values(((b2_1) Ahi_0))"
"((letrec-values(((loop_11)"
"(lambda(a1_3 b1_2 c1_4)"
"(begin"
" 'loop"
"(let-values(((x_2)(unsafe-vector-ref A_0 a1_3))"
"((y_2)(unsafe-vector-ref A_0 b1_2)))"
"(if(less-than?_0 x_2 y_2)"
"(begin"
"(unsafe-vector-set! A_0 c1_4 x_2)"
"(let-values(((a1_4)(unsafe-fx+ a1_3 1))"
"((c1_5)(unsafe-fx+ c1_4 1)))"
"(if(unsafe-fx< c1_5 b1_2)"
"(let-values()(loop_11 a1_4 b1_2 c1_5))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_0 c1_4 y_2)"
"(let-values(((b1_3)(unsafe-fx+ b1_2 1))"
"((c1_6)(unsafe-fx+ c1_4 1)))"
"(if(unsafe-fx<= b2_1 b1_3)"
"((letrec-values(((loop_12)"
"(lambda(a1_5 c1_7)"
"(begin"
" 'loop"
"(if(unsafe-fx< c1_7 b1_3)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_0"
" c1_7"
"(unsafe-vector-ref"
" A_0"
" a1_5))"
"(loop_12"
"(unsafe-fx+ a1_5 1)"
"(unsafe-fx+"
" c1_7"
" 1))))"
"(void))))))"
" loop_12)"
" a1_3"
" c1_6)"
"(loop_11 a1_3 b1_3 c1_6))))))))))"
" loop_11)"
" B1lo_0"
" Amid2_1"
" Alo_1)))))))))))))"
"(let-values(((generic-sort/key_0)"
"(lambda(A_1 less-than?_1 n_3 key_6)"
"(begin"
" 'generic-sort/key"
"(let-values()"
"(let-values()"
"(let-values(((n/2-_2)(unsafe-fxrshift n_3 1)))"
"(let-values(((n/2+_2)(unsafe-fx- n_3 n/2-_2)))"
"(letrec-values(((copying-mergesort_1)"
"(lambda(Alo_2 Blo_1 n_4)"
"(begin"
" 'copying-mergesort"
"(if(unsafe-fx= n_4 1)"
"(let-values()"
"(unsafe-vector-set! A_1 Blo_1(unsafe-vector-ref A_1 Alo_2)))"
"(if(unsafe-fx= n_4 2)"
"(let-values()"
"(let-values(((x_3)(unsafe-vector-ref A_1 Alo_2))"
"((y_3)"
"(unsafe-vector-ref A_1(unsafe-fx+ Alo_2 1))))"
"(if(if key_6"
"(less-than?_1(key_6 y_3)(key_6 x_3))"
"(less-than?_1 y_3 x_3))"
"(begin"
"(unsafe-vector-set! A_1 Blo_1 y_3)"
"(unsafe-vector-set! A_1(unsafe-fx+ Blo_1 1) x_3))"
"(begin"
"(unsafe-vector-set! A_1 Blo_1 x_3)"
"(unsafe-vector-set! A_1(unsafe-fx+ Blo_1 1) y_3)))))"
"(if(unsafe-fx< n_4 16)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1"
" Blo_1"
"(unsafe-vector-ref A_1 Alo_2))"
"((letrec-values(((iloop_1)"
"(lambda(i_5)"
"(begin"
" 'iloop"
"(if(unsafe-fx< i_5 n_4)"
"(let-values()"
"(let-values(((ref-i_1)"
"(unsafe-vector-ref"
" A_1"
"(unsafe-fx+"
" Alo_2"
" i_5))))"
"((letrec-values(((jloop_1)"
"(lambda(j_1)"
"(begin"
" 'jloop"
"(let-values(((ref-j-1_1)"
"(unsafe-vector-ref"
" A_1"
"(unsafe-fx-"
" j_1"
" 1))))"
"(if(if(unsafe-fx<"
" Blo_1"
" j_1)"
"(if key_6"
"(less-than?_1"
"(key_6"
" ref-i_1)"
"(key_6"
" ref-j-1_1))"
"(less-than?_1"
" ref-i_1"
" ref-j-1_1))"
" #f)"
"(begin"
"(unsafe-vector-set!"
" A_1"
" j_1"
" ref-j-1_1)"
"(jloop_1"
"(unsafe-fx-"
" j_1"
" 1)))"
"(begin"
"(unsafe-vector-set!"
" A_1"
" j_1"
" ref-i_1)"
"(iloop_1"
"(unsafe-fx+"
" i_5"
" 1)))))))))"
" jloop_1)"
"(unsafe-fx+ Blo_1 i_5))))"
"(void))))))"
" iloop_1)"
" 1)))"
"(let-values()"
"(let-values(((n/2-_3)(unsafe-fxrshift n_4 1)))"
"(let-values(((n/2+_3)(unsafe-fx- n_4 n/2-_3)))"
"(let-values(((Amid1_2)(unsafe-fx+ Alo_2 n/2-_3))"
"((Amid2_2)(unsafe-fx+ Alo_2 n/2+_3))"
"((Bmid1_1)(unsafe-fx+ Blo_1 n/2-_3)))"
"(begin"
"(copying-mergesort_1 Amid1_2 Bmid1_1 n/2+_3)"
"(copying-mergesort_1 Alo_2 Amid2_2 n/2-_3)"
"(let-values(((b2_2)(unsafe-fx+ Blo_1 n_4)))"
"((letrec-values(((loop_13)"
"(lambda(a1_6 b1_4 c1_8)"
"(begin"
" 'loop"
"(let-values(((x_4)"
"(unsafe-vector-ref"
" A_1"
" a1_6))"
"((y_4)"
"(unsafe-vector-ref"
" A_1"
" b1_4)))"
"(if(not"
"(if key_6"
"(less-than?_1"
"(key_6 y_4)"
"(key_6 x_4))"
"(less-than?_1"
" y_4"
" x_4)))"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_8"
" x_4)"
"(let-values(((a1_7)"
"(unsafe-fx+"
" a1_6"
" 1))"
"((c1_9)"
"(unsafe-fx+"
" c1_8"
" 1)))"
"(if(unsafe-fx<"
" c1_9"
" b1_4)"
"(let-values()"
"(loop_13"
" a1_7"
" b1_4"
" c1_9))"
"(void))))"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_8"
" y_4)"
"(let-values(((b1_5)"
"(unsafe-fx+"
" b1_4"
" 1))"
"((c1_10)"
"(unsafe-fx+"
" c1_8"
" 1)))"
"(if(unsafe-fx<="
" b2_2"
" b1_5)"
"((letrec-values(((loop_14)"
"(lambda(a1_8"
" c1_11)"
"(begin"
" 'loop"
"(if(unsafe-fx<"
" c1_11"
" b1_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_11"
"(unsafe-vector-ref"
" A_1"
" a1_8))"
"(loop_14"
"(unsafe-fx+"
" a1_8"
" 1)"
"(unsafe-fx+"
" c1_11"
" 1))))"
"(void))))))"
" loop_14)"
" a1_6"
" c1_10)"
"(loop_13"
" a1_6"
" b1_5"
" c1_10))))))))))"
" loop_13)"
" Amid2_2"
" Bmid1_1"
" Blo_1))))))))))))))"
"(let-values(((Alo_3) 0)"
"((Amid1_3) n/2-_2)"
"((Amid2_3) n/2+_2)"
"((Ahi_1) n_3)"
"((B1lo_1) n_3))"
"(begin"
"(copying-mergesort_1 Amid1_3 B1lo_1 n/2+_2)"
"(if(zero? n/2-_2)"
"(void)"
"(let-values()(copying-mergesort_1 Alo_3 Amid2_3 n/2-_2)))"
"(let-values(((b2_3) Ahi_1))"
"((letrec-values(((loop_15)"
"(lambda(a1_9 b1_6 c1_12)"
"(begin"
" 'loop"
"(let-values(((x_5)(unsafe-vector-ref A_1 a1_9))"
"((y_5)(unsafe-vector-ref A_1 b1_6)))"
"(if(if key_6"
"(less-than?_1(key_6 x_5)(key_6 y_5))"
"(less-than?_1 x_5 y_5))"
"(begin"
"(unsafe-vector-set! A_1 c1_12 x_5)"
"(let-values(((a1_10)(unsafe-fx+ a1_9 1))"
"((c1_13)(unsafe-fx+ c1_12 1)))"
"(if(unsafe-fx< c1_13 b1_6)"
"(let-values()(loop_15 a1_10 b1_6 c1_13))"
"(void))))"
"(begin"
"(unsafe-vector-set! A_1 c1_12 y_5)"
"(let-values(((b1_7)(unsafe-fx+ b1_6 1))"
"((c1_14)(unsafe-fx+ c1_12 1)))"
"(if(unsafe-fx<= b2_3 b1_7)"
"((letrec-values(((loop_16)"
"(lambda(a1_11 c1_15)"
"(begin"
" 'loop"
"(if(unsafe-fx<"
" c1_15"
" b1_7)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" A_1"
" c1_15"
"(unsafe-vector-ref"
" A_1"
" a1_11))"
"(loop_16"
"(unsafe-fx+"
" a1_11"
" 1)"
"(unsafe-fx+"
" c1_15"
" 1))))"
"(void))))))"
" loop_16)"
" a1_9"
" c1_14)"
"(loop_15 a1_9 b1_7 c1_14))))))))))"
" loop_15)"
" B1lo_1"
" Amid2_3"
" Alo_3)))))))))))))"
"(values"
"(case-lambda"
"((lst_0 less-than?_2)"
"(let-values(((n_5)(length lst_0)))"
"(let-values()"
"(if(unsafe-fx= n_5 0)"
"(let-values() lst_0)"
"(if((letrec-values(((loop_17)"
"(lambda(last_0 next_1)"
"(begin"
" 'loop"
"(let-values(((or-part_14)(null? next_1)))"
"(if or-part_14"
" or-part_14"
"(if(not(less-than?_2(unsafe-car next_1) last_0))"
"(loop_17(unsafe-car next_1)(unsafe-cdr next_1))"
" #f)))))))"
" loop_17)"
"(car lst_0)"
"(cdr lst_0))"
"(let-values() lst_0)"
"(if(unsafe-fx<= n_5 3)"
"(let-values()"
"(if(unsafe-fx= n_5 1)"
"(let-values() lst_0)"
"(if(unsafe-fx= n_5 2)"
"(let-values()(list(cadr lst_0)(car lst_0)))"
"(let-values()"
"(let-values(((a_3)(car lst_0))((b_1)(cadr lst_0))((c_0)(caddr lst_0)))"
"(if(less-than?_2 b_1 a_3)"
"(if(less-than?_2 c_0 b_1)"
"(list c_0 b_1 a_3)"
"(if(less-than?_2 c_0 a_3)(list b_1 c_0 a_3)(list b_1 a_3 c_0)))"
"(if(less-than?_2 c_0 a_3)(list c_0 a_3 b_1)(list a_3 c_0 b_1))))))))"
"(let-values()"
"(let-values(((vec_0)(make-vector(+ n_5(ceiling(/ n_5 2))))))"
"(begin"
"((letrec-values(((loop_18)"
"(lambda(i_6 lst_1)"
"(begin"
" 'loop"
"(if(pair? lst_1)"
"(let-values()"
"(begin"
"(vector-set! vec_0 i_6(car lst_1))"
"(loop_18(add1 i_6)(cdr lst_1))))"
"(void))))))"
" loop_18)"
" 0"
" lst_0)"
"(generic-sort_0 vec_0 less-than?_2 n_5)"
"((letrec-values(((loop_19)"
"(lambda(i_7 r_1)"
"(begin"
" 'loop"
"(let-values(((i_8)(sub1 i_7)))"
"(if(< i_8 0)"
" r_1"
"(loop_19 i_8(cons(vector-ref vec_0 i_8) r_1))))))))"
" loop_19)"
" n_5"
" '()))))))))))"
"((lst_2 less-than?_3 getkey_0)"
"(if(if getkey_0(not(eq? values getkey_0)) #f)"
"(sort lst_2 less-than?_3 getkey_0 #f)"
"(sort lst_2 less-than?_3)))"
"((lst_3 less-than?_4 getkey_1 cache-keys?_0)"
"(if(if getkey_1(not(eq? values getkey_1)) #f)"
"(let-values(((n_6)(length lst_3)))"
"(let-values()"
"(if(unsafe-fx= n_6 0)"
"(let-values() lst_3)"
"(if cache-keys?_0"
"(let-values()"
"(let-values(((vec_1)(make-vector(+ n_6(ceiling(/ n_6 2))))))"
"(begin"
"((letrec-values(((loop_20)"
"(lambda(i_9 lst_4)"
"(begin"
" 'loop"
"(if(pair? lst_4)"
"(let-values()"
"(let-values(((x_6)(car lst_4)))"
"(begin"
"(unsafe-vector-set! vec_1 i_9(cons(getkey_1 x_6) x_6))"
"(loop_20(unsafe-fx+ i_9 1)(cdr lst_4)))))"
"(void))))))"
" loop_20)"
" 0"
" lst_3)"
"(generic-sort/key_0 vec_1 less-than?_4 n_6 unsafe-car)"
"((letrec-values(((loop_21)"
"(lambda(i_10 r_2)"
"(begin"
" 'loop"
"(let-values(((i_11)(unsafe-fx- i_10 1)))"
"(if(unsafe-fx< i_11 0)"
" r_2"
"(loop_21"
" i_11"
"(cons(unsafe-cdr(unsafe-vector-ref vec_1 i_11)) r_2))))))))"
" loop_21)"
" n_6"
" '()))))"
"(if((letrec-values(((loop_22)"
"(lambda(last_1 next_2)"
"(begin"
" 'loop"
"(let-values(((or-part_15)(null? next_2)))"
"(if or-part_15"
" or-part_15"
"(if(not"
"(if getkey_1"
"(less-than?_4"
"(getkey_1(unsafe-car next_2))"
"(getkey_1 last_1))"
"(less-than?_4(unsafe-car next_2) last_1)))"
"(loop_22(unsafe-car next_2)(unsafe-cdr next_2))"
" #f)))))))"
" loop_22)"
"(car lst_3)"
"(cdr lst_3))"
"(let-values() lst_3)"
"(if(unsafe-fx<= n_6 3)"
"(let-values()"
"(if(unsafe-fx= n_6 1)"
"(let-values() lst_3)"
"(if(unsafe-fx= n_6 2)"
"(let-values()(list(cadr lst_3)(car lst_3)))"
"(let-values()"
"(let-values(((a_4)(car lst_3))((b_2)(cadr lst_3))((c_1)(caddr lst_3)))"
"(if(if getkey_1(less-than?_4(getkey_1 b_2)(getkey_1 a_4))(less-than?_4 b_2 a_4))"
"(if(if getkey_1"
"(less-than?_4(getkey_1 c_1)(getkey_1 b_2))"
"(less-than?_4 c_1 b_2))"
"(list c_1 b_2 a_4)"
"(if(if getkey_1"
"(less-than?_4(getkey_1 c_1)(getkey_1 a_4))"
"(less-than?_4 c_1 a_4))"
"(list b_2 c_1 a_4)"
"(list b_2 a_4 c_1)))"
"(if(if getkey_1"
"(less-than?_4(getkey_1 c_1)(getkey_1 a_4))"
"(less-than?_4 c_1 a_4))"
"(list c_1 a_4 b_2)"
"(list a_4 c_1 b_2))))))))"
"(let-values()"
"(let-values(((vec_2)(make-vector(+ n_6(ceiling(/ n_6 2))))))"
"(begin"
"((letrec-values(((loop_23)"
"(lambda(i_12 lst_5)"
"(begin"
" 'loop"
"(if(pair? lst_5)"
"(let-values()"
"(begin"
"(vector-set! vec_2 i_12(car lst_5))"
"(loop_23(add1 i_12)(cdr lst_5))))"
"(void))))))"
" loop_23)"
" 0"
" lst_3)"
"(generic-sort/key_0 vec_2 less-than?_4 n_6 getkey_1)"
"((letrec-values(((loop_24)"
"(lambda(i_13 r_3)"
"(begin"
" 'loop"
"(let-values(((i_14)(sub1 i_13)))"
"(if(< i_14 0)"
" r_3"
"(loop_24 i_14(cons(vector-ref vec_2 i_14) r_3))))))))"
" loop_24)"
" n_6"
" '()))))))))))"
"(sort lst_3 less-than?_4))))"
"(case-lambda"
"((vec_3 less-than?_5 start_0 end_0)"
"(let-values(((n_7)(- end_0 start_0)))"
"(let-values(((dst-vec_0)(make-vector n_7)))"
"(let-values(((dst-start_0) 0))"
"(begin"
"(if(unsafe-fx= n_7 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_25)"
"(lambda(prev-val_0 next-index_0)"
"(begin"
" 'loop"
"(let-values(((or-part_16)(unsafe-fx= next-index_0 end_0)))"
"(if or-part_16"
" or-part_16"
"(let-values(((next-val_0)(unsafe-vector-ref vec_3 next-index_0)))"
"(if(not(less-than?_5 next-val_0 prev-val_0))"
"(loop_25 next-val_0(unsafe-fx+ next-index_0 1))"
" #f))))))))"
" loop_25)"
"(unsafe-vector-ref vec_3 start_0)"
"(unsafe-fx+ start_0 1))"
"(let-values()(let-values()(vector-copy! dst-vec_0 dst-start_0 vec_3 start_0 end_0)))"
"(if(unsafe-fx<= n_7 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_0 dst-start_0 vec_3 start_0 end_0))"
"(if(unsafe-fx= n_7 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_7 2)"
"(let-values()"
"(let-values(((tmp_0)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_0"
"(unsafe-fx+ dst-start_0 0)"
"(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 1)))"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) tmp_0))))"
"(let-values()"
"(let-values(((a_5)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 0)))"
"((b_3)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 1)))"
"((c_2)(unsafe-vector-ref dst-vec_0(unsafe-fx+ dst-start_0 2))))"
"(if(less-than?_5 b_3 a_5)"
"(let-values()"
"(if(less-than?_5 c_2 b_3)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) c_2)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) a_5)))"
"(if(less-than?_5 c_2 a_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) b_3)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) c_2)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) a_5)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) b_3)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) a_5))))))"
"(if(less-than?_5 c_2 a_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 0) c_2)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) a_5)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) b_3)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 1) c_2)"
"(unsafe-vector-set! dst-vec_0(unsafe-fx+ dst-start_0 2) b_3)))))))))))"
"(let-values()"
"(let-values(((work-vec_0)(make-vector(+ n_7(ceiling(/ n_7 2))) #f)))"
"(begin"
"(vector-copy! work-vec_0 0 vec_3 start_0 end_0)"
"(generic-sort_0 work-vec_0 less-than?_5 n_7)"
"(vector-copy! dst-vec_0 dst-start_0 work-vec_0 0 n_7)))))))"
" dst-vec_0)))))"
"((vec_4 less-than?_6 start_1 end_1 getkey_2 cache-keys?_1)"
"(if(if getkey_2(not(eq? values getkey_2)) #f)"
"(let-values(((n_8)(- end_1 start_1)))"
"(let-values(((dst-vec_1)(make-vector n_8)))"
"(let-values(((dst-start_1) 0))"
"(begin"
"(if(unsafe-fx= n_8 0)"
"(let-values()(void))"
"(if cache-keys?_1"
"(let-values()"
"(let-values(((work-vec_1)(make-vector(+ n_8(ceiling(/ n_8 2))) #t)))"
"(begin"
"((letrec-values(((loop_26)"
"(lambda(i_15)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_15 n_8)"
"(let-values()"
"(begin"
"(let-values(((x_7)"
"(unsafe-vector-ref"
" vec_4"
"(unsafe-fx+ i_15 start_1))))"
"(unsafe-vector-set!"
" work-vec_1"
" i_15"
"(cons(getkey_2 x_7) x_7)))"
"(loop_26(unsafe-fx+ i_15 1))))"
"(void))))))"
" loop_26)"
" 0)"
"(generic-sort/key_0 work-vec_1 less-than?_6 n_8 unsafe-car)"
"((letrec-values(((loop_27)"
"(lambda(i_16)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_16 n_8)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_1"
"(unsafe-fx+ i_16 dst-start_1)"
"(unsafe-cdr(unsafe-vector-ref work-vec_1 i_16)))"
"(loop_27(unsafe-fx+ i_16 1))))"
"(void))))))"
" loop_27)"
" 0))))"
"(if((letrec-values(((loop_28)"
"(lambda(prev-val_1 next-index_1)"
"(begin"
" 'loop"
"(let-values(((or-part_17)(unsafe-fx= next-index_1 end_1)))"
"(if or-part_17"
" or-part_17"
"(let-values(((next-val_1)"
"(unsafe-vector-ref vec_4 next-index_1)))"
"(if(not"
"(if getkey_2"
"(less-than?_6"
"(getkey_2 next-val_1)"
"(getkey_2 prev-val_1))"
"(less-than?_6 next-val_1 prev-val_1)))"
"(loop_28 next-val_1(unsafe-fx+ next-index_1 1))"
" #f))))))))"
" loop_28)"
"(unsafe-vector-ref vec_4 start_1)"
"(unsafe-fx+ start_1 1))"
"(let-values()(let-values()(vector-copy! dst-vec_1 dst-start_1 vec_4 start_1 end_1)))"
"(if(unsafe-fx<= n_8 3)"
"(let-values()"
"(begin"
"(let-values()(vector-copy! dst-vec_1 dst-start_1 vec_4 start_1 end_1))"
"(if(unsafe-fx= n_8 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_8 2)"
"(let-values()"
"(let-values(((tmp_1)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_1"
"(unsafe-fx+ dst-start_1 0)"
"(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 1)))"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) tmp_1))))"
"(let-values()"
"(let-values(((a_6)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 0)))"
"((b_4)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 1)))"
"((c_3)(unsafe-vector-ref dst-vec_1(unsafe-fx+ dst-start_1 2))))"
"(if(if getkey_2"
"(less-than?_6(getkey_2 b_4)(getkey_2 a_6))"
"(less-than?_6 b_4 a_6))"
"(let-values()"
"(if(if getkey_2"
"(less-than?_6(getkey_2 c_3)(getkey_2 b_4))"
"(less-than?_6 c_3 b_4))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) c_3)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) a_6)))"
"(if(if getkey_2"
"(less-than?_6(getkey_2 c_3)(getkey_2 a_6))"
"(less-than?_6 c_3 a_6))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) b_4)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) c_3)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) a_6)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) b_4)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) a_6))))))"
"(if(if getkey_2"
"(less-than?_6(getkey_2 c_3)(getkey_2 a_6))"
"(less-than?_6 c_3 a_6))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 0) c_3)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) a_6)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) b_4)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 1) c_3)"
"(unsafe-vector-set! dst-vec_1(unsafe-fx+ dst-start_1 2) b_4)))))))))))"
"(let-values()"
"(let-values(((work-vec_2)(make-vector(+ n_8(ceiling(/ n_8 2))) #f)))"
"(begin"
"(vector-copy! work-vec_2 0 vec_4 start_1 end_1)"
"(generic-sort/key_0 work-vec_2 less-than?_6 n_8 getkey_2)"
"(vector-copy! dst-vec_1 dst-start_1 work-vec_2 0 n_8))))))))"
" dst-vec_1))))"
"(vector-sort vec_4 less-than?_6 start_1 end_1))))"
"(case-lambda"
"((vec_5 less-than?_7 start_2 end_2)"
"(let-values(((n_9)(- end_2 start_2)))"
"(let-values(((dst-vec_2) vec_5))"
"(let-values(((dst-start_2) start_2))"
"(begin"
"(if(unsafe-fx= n_9 0)"
"(let-values()(void))"
"(if((letrec-values(((loop_29)"
"(lambda(prev-val_2 next-index_2)"
"(begin"
" 'loop"
"(let-values(((or-part_18)(unsafe-fx= next-index_2 end_2)))"
"(if or-part_18"
" or-part_18"
"(let-values(((next-val_2)(unsafe-vector-ref vec_5 next-index_2)))"
"(if(not(less-than?_7 next-val_2 prev-val_2))"
"(loop_29 next-val_2(unsafe-fx+ next-index_2 1))"
" #f))))))))"
" loop_29)"
"(unsafe-vector-ref vec_5 start_2)"
"(unsafe-fx+ start_2 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_9 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_9 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_9 2)"
"(let-values()"
"(let-values(((tmp_2)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_2"
"(unsafe-fx+ dst-start_2 0)"
"(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 1)))"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) tmp_2))))"
"(let-values()"
"(let-values(((a_7)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 0)))"
"((b_5)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 1)))"
"((c_4)(unsafe-vector-ref dst-vec_2(unsafe-fx+ dst-start_2 2))))"
"(if(less-than?_7 b_5 a_7)"
"(let-values()"
"(if(less-than?_7 c_4 b_5)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) c_4)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) a_7)))"
"(if(less-than?_7 c_4 a_7)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) b_5)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) c_4)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) a_7)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) b_5)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) a_7))))))"
"(if(less-than?_7 c_4 a_7)"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 0) c_4)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) a_7)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) b_5)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 1) c_4)"
"(unsafe-vector-set! dst-vec_2(unsafe-fx+ dst-start_2 2) b_5)))))))))))"
"(let-values()"
"(let-values(((work-vec_3)(make-vector(+ n_9(ceiling(/ n_9 2))) #f)))"
"(begin"
"(vector-copy! work-vec_3 0 vec_5 start_2 end_2)"
"(generic-sort_0 work-vec_3 less-than?_7 n_9)"
"(vector-copy! dst-vec_2 dst-start_2 work-vec_3 0 n_9)))))))"
"(void))))))"
"((vec_6 less-than?_8 start_3 end_3 getkey_3 cache-keys?_2)"
"(if(if getkey_3(not(eq? values getkey_3)) #f)"
"(let-values(((n_10)(- end_3 start_3)))"
"(let-values(((dst-vec_3) vec_6))"
"(let-values(((dst-start_3) start_3))"
"(begin"
"(if(unsafe-fx= n_10 0)"
"(let-values()(void))"
"(if cache-keys?_2"
"(let-values()"
"(let-values(((work-vec_4)(make-vector(+ n_10(ceiling(/ n_10 2))) #t)))"
"(begin"
"((letrec-values(((loop_30)"
"(lambda(i_17)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_17 n_10)"
"(let-values()"
"(begin"
"(let-values(((x_8)"
"(unsafe-vector-ref"
" vec_6"
"(unsafe-fx+ i_17 start_3))))"
"(unsafe-vector-set!"
" work-vec_4"
" i_17"
"(cons(getkey_3 x_8) x_8)))"
"(loop_30(unsafe-fx+ i_17 1))))"
"(void))))))"
" loop_30)"
" 0)"
"(generic-sort/key_0 work-vec_4 less-than?_8 n_10 unsafe-car)"
"((letrec-values(((loop_31)"
"(lambda(i_18)"
"(begin"
" 'loop"
"(if(unsafe-fx< i_18 n_10)"
"(let-values()"
"(begin"
"(unsafe-vector-set!"
" dst-vec_3"
"(unsafe-fx+ i_18 dst-start_3)"
"(unsafe-cdr(unsafe-vector-ref work-vec_4 i_18)))"
"(loop_31(unsafe-fx+ i_18 1))))"
"(void))))))"
" loop_31)"
" 0))))"
"(if((letrec-values(((loop_32)"
"(lambda(prev-val_3 next-index_3)"
"(begin"
" 'loop"
"(let-values(((or-part_19)(unsafe-fx= next-index_3 end_3)))"
"(if or-part_19"
" or-part_19"
"(let-values(((next-val_3)"
"(unsafe-vector-ref vec_6 next-index_3)))"
"(if(not"
"(if getkey_3"
"(less-than?_8"
"(getkey_3 next-val_3)"
"(getkey_3 prev-val_3))"
"(less-than?_8 next-val_3 prev-val_3)))"
"(loop_32 next-val_3(unsafe-fx+ next-index_3 1))"
" #f))))))))"
" loop_32)"
"(unsafe-vector-ref vec_6 start_3)"
"(unsafe-fx+ start_3 1))"
"(let-values()(void))"
"(if(unsafe-fx<= n_10 3)"
"(let-values()"
"(begin"
"(void)"
"(if(unsafe-fx= n_10 1)"
"(let-values()(void))"
"(if(unsafe-fx= n_10 2)"
"(let-values()"
"(let-values(((tmp_3)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 0))))"
"(begin"
"(unsafe-vector-set!"
" dst-vec_3"
"(unsafe-fx+ dst-start_3 0)"
"(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 1)))"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) tmp_3))))"
"(let-values()"
"(let-values(((a_8)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 0)))"
"((b_6)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 1)))"
"((c_5)(unsafe-vector-ref dst-vec_3(unsafe-fx+ dst-start_3 2))))"
"(if(if getkey_3"
"(less-than?_8(getkey_3 b_6)(getkey_3 a_8))"
"(less-than?_8 b_6 a_8))"
"(let-values()"
"(if(if getkey_3"
"(less-than?_8(getkey_3 c_5)(getkey_3 b_6))"
"(less-than?_8 c_5 b_6))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) c_5)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) a_8)))"
"(if(if getkey_3"
"(less-than?_8(getkey_3 c_5)(getkey_3 a_8))"
"(less-than?_8 c_5 a_8))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) b_6)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) c_5)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) a_8)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) b_6)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) a_8))))))"
"(if(if getkey_3"
"(less-than?_8(getkey_3 c_5)(getkey_3 a_8))"
"(less-than?_8 c_5 a_8))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 0) c_5)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) a_8)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) b_6)))"
"(let-values()"
"(begin"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 1) c_5)"
"(unsafe-vector-set! dst-vec_3(unsafe-fx+ dst-start_3 2) b_6)))))))))))"
"(let-values()"
"(let-values(((work-vec_5)(make-vector(+ n_10(ceiling(/ n_10 2))) #f)))"
"(begin"
"(vector-copy! work-vec_5 0 vec_6 start_3 end_3)"
"(generic-sort/key_0 work-vec_5 less-than?_8 n_10 getkey_3)"
"(vector-copy! dst-vec_3 dst-start_3 work-vec_5 0 n_10))))))))"
"(void)))))"
"(vector-sort! vec_6 less-than?_8 start_3 end_3)))))))))"
"(define-values"
"(prop:stream stream-via-prop? stream-ref)"
"(make-struct-type-property"
" 'stream"
"(lambda(v_11 si_0)"
"(begin"
"(if(if(vector? v_11)"
"(if(= 3(vector-length v_11))"
"(if(procedure?(vector-ref v_11 0))"
"(if(procedure-arity-includes?(vector-ref v_11 0) 1)"
"(if(procedure?(vector-ref v_11 1))"
"(if(procedure-arity-includes?(vector-ref v_11 1) 1)"
"(if(procedure?(vector-ref v_11 2))(procedure-arity-includes?(vector-ref v_11 2) 1) #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:stream"
"(string-append"
"             \"(vector/c (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1)\\n\""
"             \"          (procedure-arity-includes/c 1))\")"
" v_11)))"
"(vector->immutable-vector v_11)))))"
"(define-values"
"(prop:gen-sequence sequence-via-prop? sequence-ref)"
"(make-struct-type-property"
" 'sequence"
"(lambda(v_12 si_1)"
"(begin"
"(if(if(procedure? v_12)(procedure-arity-includes? v_12 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'guard-for-prop:sequence \"(procedure-arity-includes/c 1)\" v_12)))"
" v_12))))"
"(define-values"
"(struct:range make-range range? range-ref range-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_13)(let-values(((cont?_0)(range-ref v_13 2)))(if cont?_0(not(cont?_0(range-ref v_13 0))) #f)))"
"(lambda(v_14)(range-ref v_14 0))"
"(lambda(v_15)(make-range((range-ref v_15 1)(range-ref v_15 0))(range-ref v_15 1)(range-ref v_15 2)))))"
"(cons"
" prop:gen-sequence"
"(lambda(v_16)(values values #f(range-ref v_16 1)(range-ref v_16 0)(range-ref v_16 2) #f #f))))))"
"(define-values"
"(check-range)"
"(lambda(a_9 b_7 step_0)"
"(begin"
"(begin"
"        (if (real? a_9) (void) (let-values () (raise-argument-error 'in-range \"real?\" a_9)))"
"        (if (real? b_7) (void) (let-values () (raise-argument-error 'in-range \"real?\" b_7)))"
"        (if (real? step_0) (void) (let-values () (raise-argument-error 'in-range \"real?\" step_0)))))))"
"(define-values"
"(check-naturals)"
"(lambda(n_11)"
"(begin"
"(if(if(integer? n_11)(if(exact? n_11)(>= n_11 0) #f) #f)"
"(void)"
"        (let-values () (raise-argument-error 'in-naturals \"exact-nonnegative-integer?\" n_11))))))"
"(define-values"
"(struct:list-stream make-list-stream list-stream? list-stream-ref list-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_17)(not(pair?(list-stream-ref v_17 0))))"
"(lambda(v_18)(car(list-stream-ref v_18 0)))"
"(lambda(v_19)(make-list-stream(cdr(list-stream-ref v_19 0))))))"
"(cons prop:gen-sequence(lambda(v_20)(values car cdr values(list-stream-ref v_20 0) pair? #f #f))))))"
"(define-values"
"(check-list)"
"  (lambda (l_5) (begin (if (list? l_5) (void) (let-values () (raise-argument-error 'in-list \"list?\" l_5))))))"
"(define-values"
"(check-in-hash)"
"(lambda(ht_6)"
"(begin"
"      (if ((lambda (ht_7) (hash? ht_7)) ht_6) (void) (let-values () (raise-argument-error 'in-hash \"hash?\" ht_6))))))"
"(define-values"
"(check-in-immutable-hash)"
"(lambda(ht_8)"
"(begin"
"(if((lambda(ht_9)(if(hash? ht_9)(immutable? ht_9) #f)) ht_8)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash \"(and/c hash? immutable?)\" ht_8))))))"
"(define-values"
"(check-in-hash-keys)"
"(lambda(ht_10)"
"(begin"
"(if((lambda(ht_11)(hash? ht_11)) ht_10)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-keys \"hash?\" ht_10))))))"
"(define-values"
"(check-in-immutable-hash-keys)"
"(lambda(ht_12)"
"(begin"
"(if((lambda(ht_13)(if(hash? ht_13)(immutable? ht_13) #f)) ht_12)"
"(void)"
"        (let-values () (raise-argument-error 'in-immutable-hash-keys \"(and/c hash? immutable?)\" ht_12))))))"
"(define-values"
"(check-in-hash-values)"
"(lambda(ht_14)"
"(begin"
"(if((lambda(ht_15)(hash? ht_15)) ht_14)"
"(void)"
"        (let-values () (raise-argument-error 'in-hash-values \"hash?\" ht_14))))))"
"(define-values"
"(check-ranges)"
"(lambda(who_3 vec_7 start_4 stop_0 step_1 len_0)"
"(begin"
"(begin"
"(if(if(exact-nonnegative-integer? start_4)"
"(let-values(((or-part_20)(< start_4 len_0)))(if or-part_20 or-part_20(= len_0 start_4 stop_0)))"
" #f)"
"(void)"
"          (let-values () (raise-range-error who_3 \"vector\" \"starting \" start_4 vec_7 0 (sub1 len_0))))"
"(if(if(exact-integer? stop_0)(if(<= -1 stop_0)(<= stop_0 len_0) #f) #f)"
"(void)"
"          (let-values () (raise-range-error who_3 \"vector\" \"stopping \" stop_0 vec_7 -1 len_0)))"
"(if(if(exact-integer? step_1)(not(zero? step_1)) #f)"
"(void)"
"          (let-values () (raise-argument-error who_3 \"(and/c exact-integer? (not/c zero?))\" step_1)))"
"(if(if(< start_4 stop_0)(< step_1 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_3"
"             \"starting index less than stopping index, but given a negative step\""
"             \"starting index\""
" start_4"
"             \"stopping index\""
" stop_0"
"             \"step\""
" step_1))"
"(void))"
"(if(if(< stop_0 start_4)(> step_1 0) #f)"
"(let-values()"
"(raise-arguments-error"
" who_3"
"             \"starting index more than stopping index, but given a positive step\""
"             \"starting index\""
" start_4"
"             \"stopping index\""
" stop_0"
"             \"step\""
" step_1))"
"(void))))))"
"(define-values"
"(normalise-inputs)"
"(lambda(who_4 type-name_0 vector?_0 unsafe-vector-length_0 vec_8 start_5 stop_1 step_2)"
"(begin"
"(begin"
"(if(vector?_0 vec_8)(void)(let-values()(raise-argument-error who_4 type-name_0 vec_8)))"
"(let-values(((len_1)(unsafe-vector-length_0 vec_8)))"
"(let-values(((stop*_0)(if stop_1 stop_1 len_1)))"
"(begin(check-ranges who_4 vec_8 start_5 stop*_0 step_2 len_1)(values vec_8 start_5 stop*_0 step_2))))))))"
"(define-values"
"(check-vector)"
"  (lambda (v_21) (begin (if (vector? v_21) (void) (let-values () (raise-argument-error 'in-vector \"vector\" v_21))))))"
"(define-values"
"(check-string)"
"  (lambda (v_22) (begin (if (string? v_22) (void) (let-values () (raise-argument-error 'in-string \"string\" v_22))))))"
"(define-values"
"(check-bytes)"
"  (lambda (v_23) (begin (if (bytes? v_23) (void) (let-values () (raise-argument-error 'in-bytes \"bytes\" v_23))))))"
"(define-values"
"(struct:do-stream make-do-stream do-stream? do-stream-ref do-stream-set!)"
"(make-struct-type"
" 'stream"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons"
" prop:stream"
"(vector"
"(lambda(v_24)((do-stream-ref v_24 0)))"
"(lambda(v_25)((do-stream-ref v_25 1)))"
"(lambda(v_26)((do-stream-ref v_26 2))))))))"
"(define-values(empty-stream)(make-do-stream(lambda() #t) void void))"
"(define-values"
"(grow-vector)"
"(lambda(vec_9)"
"(begin"
"(let-values(((n_12)(vector-length vec_9)))"
"(let-values(((new-vec_0)(make-vector(* 2 n_12))))"
"(begin(vector-copy! new-vec_0 0 vec_9 0 n_12) new-vec_0))))))"
"(define-values"
"(shrink-vector)"
"(lambda(vec_10 i_19)"
"(begin(let-values(((new-vec_1)(make-vector i_19)))(begin(vector-copy! new-vec_1 0 vec_10 0 i_19) new-vec_1)))))"
"(define-values"
"(map2)"
"(let-values(((map_0)"
"(case-lambda"
"((f_0 l_6)"
"(begin"
" 'map"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_0)(if(procedure-arity-includes? f_0 1)(list? l_6) #f) #f))"
"((letrec-values(((loop_33)"
"(lambda(l_7)"
"(begin"
" 'loop"
"(if(null? l_7)"
"(let-values() null)"
"(let-values()"
"(let-values(((r_4)(cdr l_7)))"
"(cons(f_0(car l_7))(loop_33 r_4)))))))))"
" loop_33)"
" l_6)"
"(gen-map f_0(list l_6)))))"
"((f_1 l1_0 l2_0)"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_1)"
"(if(procedure-arity-includes? f_1 2)"
"(if(list? l1_0)(if(list? l2_0)(=(length l1_0)(length l2_0)) #f) #f)"
" #f)"
" #f))"
"((letrec-values(((loop_34)"
"(lambda(l1_1 l2_1)"
"(begin"
" 'loop"
"(if(null? l1_1)"
"(let-values() null)"
"(let-values()"
"(let-values(((r1_0)(cdr l1_1))((r2_0)(cdr l2_1)))"
"(cons(f_1(car l1_1)(car l2_1))(loop_34 r1_0 r2_0)))))))))"
" loop_34)"
" l1_0"
" l2_0)"
"(gen-map f_1(list l1_0 l2_0))))"
"((f_2 l_8 . args_0)(gen-map f_2(cons l_8 args_0))))))"
" map_0))"
"(define-values"
"(for-each2)"
"(let-values(((for-each_0)"
"(case-lambda"
"((f_3 l_9)"
"(begin"
" 'for-each"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_3)(if(procedure-arity-includes? f_3 1)(list? l_9) #f) #f))"
"((letrec-values(((loop_35)"
"(lambda(l_10)"
"(begin"
" 'loop"
"(if(null? l_10)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r_5)(cdr l_10)))"
"(begin(f_3(car l_10))(loop_35 r_5)))))))))"
" loop_35)"
" l_9)"
"(gen-for-each f_3(list l_9)))))"
"((f_4 l1_2 l2_2)"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_4)"
"(if(procedure-arity-includes? f_4 2)"
"(if(list? l1_2)(if(list? l2_2)(=(length l1_2)(length l2_2)) #f) #f)"
" #f)"
" #f))"
"((letrec-values(((loop_36)"
"(lambda(l1_3 l2_3)"
"(begin"
" 'loop"
"(if(null? l1_3)"
"(let-values()(void))"
"(let-values()"
"(let-values(((r1_1)(cdr l1_3))((r2_1)(cdr l2_3)))"
"(begin(f_4(car l1_3)(car l2_3))(loop_36 r1_1 r2_1)))))))))"
" loop_36)"
" l1_2"
" l2_2)"
"(gen-for-each f_4(list l1_2 l2_2))))"
"((f_5 l_11 . args_1)(gen-for-each f_5(cons l_11 args_1))))))"
" for-each_0))"
"(define-values"
"(andmap2)"
"(let-values(((andmap_0)"
"(case-lambda"
"((f_6 l_12)"
"(begin"
" 'andmap"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_6)(if(procedure-arity-includes? f_6 1)(list? l_12) #f) #f))"
"(if(null? l_12)"
" #t"
"((letrec-values(((loop_37)"
"(lambda(l_13)"
"(begin"
" 'loop"
"(if(null?(cdr l_13))"
"(let-values()(f_6(car l_13)))"
"(let-values()"
"(let-values(((r_6)(cdr l_13)))"
"(if(f_6(car l_13))(loop_37 r_6) #f))))))))"
" loop_37)"
" l_12))"
"(gen-andmap f_6(list l_12)))))"
"((f_7 l1_4 l2_4)"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_7)"
"(if(procedure-arity-includes? f_7 2)"
"(if(list? l1_4)(if(list? l2_4)(=(length l1_4)(length l2_4)) #f) #f)"
" #f)"
" #f))"
"(if(null? l1_4)"
" #t"
"((letrec-values(((loop_38)"
"(lambda(l1_5 l2_5)"
"(begin"
" 'loop"
"(if(null?(cdr l1_5))"
"(let-values()(f_7(car l1_5)(car l2_5)))"
"(let-values()"
"(let-values(((r1_2)(cdr l1_5))((r2_2)(cdr l2_5)))"
"(if(f_7(car l1_5)(car l2_5))(loop_38 r1_2 r2_2) #f))))))))"
" loop_38)"
" l1_4"
" l2_4))"
"(gen-andmap f_7(list l1_4 l2_4))))"
"((f_8 l_14 . args_2)(gen-andmap f_8(cons l_14 args_2))))))"
" andmap_0))"
"(define-values"
"(ormap2)"
"(let-values(((ormap_0)"
"(case-lambda"
"((f_9 l_15)"
"(begin"
" 'ormap"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_9)(if(procedure-arity-includes? f_9 1)(list? l_15) #f) #f))"
"(if(null? l_15)"
" #f"
"((letrec-values(((loop_39)"
"(lambda(l_16)"
"(begin"
" 'loop"
"(if(null?(cdr l_16))"
"(let-values()(f_9(car l_16)))"
"(let-values()"
"(let-values(((r_7)(cdr l_16)))"
"(let-values(((or-part_21)(f_9(car l_16))))"
"(if or-part_21 or-part_21(loop_39 r_7))))))))))"
" loop_39)"
" l_15))"
"(gen-ormap f_9(list l_15)))))"
"((f_10 l1_6 l2_6)"
"(if(if(variable-reference-from-unsafe?(#%variable-reference))"
" #t"
"(if(procedure? f_10)"
"(if(procedure-arity-includes? f_10 2)"
"(if(list? l1_6)(if(list? l2_6)(=(length l1_6)(length l2_6)) #f) #f)"
" #f)"
" #f))"
"(if(null? l1_6)"
" #f"
"((letrec-values(((loop_40)"
"(lambda(l1_7 l2_7)"
"(begin"
" 'loop"
"(if(null?(cdr l1_7))"
"(let-values()(f_10(car l1_7)(car l2_7)))"
"(let-values()"
"(let-values(((r1_3)(cdr l1_7))((r2_3)(cdr l2_7)))"
"(let-values(((or-part_22)(f_10(car l1_7)(car l2_7))))"
"(if or-part_22 or-part_22(loop_40 r1_3 r2_3))))))))))"
" loop_40)"
" l1_6"
" l2_6))"
"(gen-ormap f_10(list l1_6 l2_6))))"
"((f_11 l_17 . args_3)(gen-ormap f_11(cons l_17 args_3))))))"
" ormap_0))"
"(define-values"
"(check-args)"
"(lambda(who_5 f_12 ls_4)"
"(begin"
"(begin"
"        (if (procedure? f_12) (void) (let-values () (raise-argument-error who_5 \"procedure?\" f_12)))"
"((letrec-values(((loop_41)"
"(lambda(prev-len_0 ls_5 i_20)"
"(begin"
" 'loop"
"(if(null? ls_5)"
"(void)"
"(let-values()"
"(let-values(((l_18)(car ls_5)))"
"(begin"
"                                      (if (list? l_18) (void) (let-values () (raise-argument-error who_5 \"list?\" l_18)))"
"(let-values(((len_2)(length l_18)))"
"(begin"
"(if(if prev-len_0(not(= len_2 prev-len_0)) #f)"
"(let-values()"
"(raise-arguments-error"
" who_5"
"                                               \"all lists must have same size\""
"                                               \"first list length\""
" prev-len_0"
"                                               \"other list length\""
" len_2"
"                                               \"procedure\""
" f_12))"
"(void))"
"(loop_41 len_2(cdr ls_5)(add1 i_20))))))))))))"
" loop_41)"
" #f"
" ls_4"
" 1)"
"(if(procedure-arity-includes? f_12(length ls_4))"
"(void)"
"(let-values()"
"(let-values(((required-keywords_0 optional-keywords_0)(procedure-keywords f_12)))"
"(apply"
" raise-arguments-error"
" who_5"
"(if(pair? required-keywords_0)"
"                 (string-append \"argument mismatch;\\n\" \" the given procedure expects keyword arguments\")"
"(string-append"
"                  \"argument mismatch;\\n\""
"                  \" the given procedure's expected number of arguments does not match\""
"                  \" the given number of lists\"))"
"               \"given procedure\""
"(unquoted-printing-string"
"(let-values(((or-part_23)"
"(let-values(((n_13)(object-name f_12)))(if(symbol? n_13)(symbol->string n_13) #f))))"
"                  (if or-part_23 or-part_23 \"#<procedure>\")))"
"(append"
"(let-values(((a_10)(procedure-arity f_12)))"
"(if(pair? required-keywords_0)"
"(let-values() null)"
"(if(integer? a_10)"
"                      (let-values () (list \"expected\" a_10))"
"(if(arity-at-least? a_10)"
"(let-values()"
"(list"
"                           \"expected\""
"(unquoted-printing-string"
"                            (string-append \"at least \" (number->string (arity-at-least-value a_10))))))"
"(let-values() null)))))"
"                (if (pair? required-keywords_0) (let-values () null) (let-values () (list \"given\" (length ls_4))))"
"(if(pair? required-keywords_0)"
"(let-values()"
"(list"
"                     \"required keywords\""
"(unquoted-printing-string"
"(apply"
" string-append"
"(cdr"
"((letrec-values(((loop_42)"
"(lambda(kws_0)"
"(begin"
" 'loop"
"(if(null? kws_0)"
"(let-values() null)"
"(let-values()"
"(list*"
"                                                   \" \""
"                                                   (string-append \"#:\" (keyword->string (car kws_0)))"
"(loop_42(cdr kws_0)))))))))"
" loop_42)"
" required-keywords_0))))))"
"(let-values() null))"
"(let-values(((w_0)(quotient(error-print-width)(length ls_4))))"
"(if(> w_0 10)"
"(list"
"                     \"argument lists...\""
"(unquoted-printing-string"
"(apply"
" string-append"
"((letrec-values(((loop_43)"
"(lambda(ls_6)"
"(begin"
" 'loop"
"(if(null? ls_6)"
"(let-values() null)"
"(let-values()"
"(cons"
"                                                  (string-append \"\\n   \" ((error-value->string-handler) (car ls_6) w_0))"
"(loop_43(cdr ls_6)))))))))"
" loop_43)"
" ls_4))))"
" null)))))))))))"
"(define-values"
"(gen-map)"
"(lambda(f_13 ls_7)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference)) #t(check-args 'map f_13 ls_7))"
"((letrec-values(((loop_44)"
"(lambda(ls_8)"
"(begin"
" 'loop"
"(if(null?(car ls_8))"
"(let-values() null)"
"(let-values()"
"(let-values(((next-ls_0)(map2 cdr ls_8)))"
"(cons(apply f_13(map2 car ls_8))(loop_44 next-ls_0)))))))))"
" loop_44)"
" ls_7)))))"
"(define-values"
"(gen-for-each)"
"(lambda(f_14 ls_9)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference)) #t(check-args 'for-each f_14 ls_9))"
"((letrec-values(((loop_45)"
"(lambda(ls_10)"
"(begin"
" 'loop"
"(if(null?(car ls_10))"
"(void)"
"(let-values()"
"(let-values(((next-ls_1)(map2 cdr ls_10)))"
"(begin(apply f_14(map2 car ls_10))(loop_45 next-ls_1)))))))))"
" loop_45)"
" ls_9)))))"
"(define-values"
"(gen-andmap)"
"(lambda(f_15 ls_11)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference)) #t(check-args 'andmap f_15 ls_11))"
"((letrec-values(((loop_46)"
"(lambda(ls_12)"
"(begin"
" 'loop"
"(if(null?(car ls_12))"
"(let-values() #t)"
"(if(null?(cdar ls_12))"
"(let-values()(apply f_15(map2 car ls_12)))"
"(let-values()"
"(let-values(((next-ls_2)(map2 cdr ls_12)))"
"(if(apply f_15(map2 car ls_12))(loop_46 next-ls_2) #f)))))))))"
" loop_46)"
" ls_11)))))"
"(define-values"
"(gen-ormap)"
"(lambda(f_16 ls_13)"
"(begin"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference)) #t(check-args 'ormap f_16 ls_13))"
"((letrec-values(((loop_47)"
"(lambda(ls_14)"
"(begin"
" 'loop"
"(if(null?(car ls_14))"
"(let-values() #f)"
"(if(null?(cdar ls_14))"
"(let-values()(apply f_16(map2 car ls_14)))"
"(let-values()"
"(let-values(((next-ls_3)(map2 cdr ls_14)))"
"(let-values(((or-part_24)(apply f_16(map2 car ls_14))))"
"(if or-part_24 or-part_24(loop_47 next-ls_3)))))))))))"
" loop_47)"
" ls_13)))))"
"(define-values"
"(hash-keys)"
"(lambda(h_0)"
"(begin"
"((letrec-values(((loop_8)"
"(lambda(pos_0)"
"(begin"
" 'loop"
"(if pos_0"
"(cons(hash-iterate-key h_0 pos_0)(loop_8(hash-iterate-next h_0 pos_0)))"
" null)))))"
" loop_8)"
"(hash-iterate-first h_0)))))"
"(define-values"
"(sort7.1)"
"(lambda(cache-keys?2_0 key1_0 lst5_0 less?6_0)"
"(begin"
" 'sort7"
"(let-values(((lst_6) lst5_0))"
"(let-values(((less?_0) less?6_0))"
"(let-values(((getkey_4) key1_0))"
"(let-values(((cache-keys?_3) cache-keys?2_0))"
"(let-values()"
"(begin"
"                  (if (list? lst_6) (void) (let-values () (raise-argument-error 'sort \"list?\" lst_6)))"
"(if(if(procedure? less?_0)(procedure-arity-includes? less?_0 2) #f)"
"(void)"
"                    (let-values () (raise-argument-error 'sort \"(any/c any/c . -> . any/c)\" less?_0)))"
"(if(if getkey_4(not(if(procedure? getkey_4)(procedure-arity-includes? getkey_4 1) #f)) #f)"
"                    (let-values () (raise-argument-error 'sort \"(any/c . -> . any/c)\" getkey_4))"
"(void))"
"(if getkey_4(sort lst_6 less?_0 getkey_4 cache-keys?_3)(sort lst_6 less?_0)))))))))))"
"(define-values"
"(bad-list)"
"  (lambda (who_5 orig-l_7) (begin (raise-mismatch-error who_5 \"not a proper list: \" orig-l_7))))"
"(define-values"
"(bad-item)"
"  (lambda (who_6 a_11 orig-l_8) (begin (raise-mismatch-error who_6 \"non-pair found in list: \" a_11 \" in \" orig-l_8))))"
"(define-values"
"(1/assq 1/assv 1/assoc assf)"
"(let-values()"
"(let-values()"
"(let-values(((assq_0)"
"(lambda(x_9 l_19)"
"(begin"
" 'assq"
"((letrec-values(((loop_48)"
"(lambda(l_20 t_0)"
"(begin"
" 'loop"
"(if(pair? l_20)"
"(let-values()"
"(let-values(((a_12)(unsafe-car l_20)))"
"(if(pair? a_12)"
"(if(eq? x_9(unsafe-car a_12))"
" a_12"
"(let-values(((l_21)(unsafe-cdr l_20)))"
"(if(pair? l_21)"
"(let-values()"
"(let-values(((a_0)(unsafe-car l_21)))"
"(if(pair? a_0)"
"(if(eq? x_9(unsafe-car a_0))"
" a_0"
"(let-values(((t_1)(unsafe-cdr t_0))"
"((l_22)(unsafe-cdr l_21)))"
"(if(eq? l_22 t_1)"
"(bad-list 'assq l_19)"
"(loop_48 l_22 t_1))))"
"(bad-item 'assq a_0 l_19))))"
"(if(null? l_21)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_19))))))"
"(bad-item 'assq a_12 l_19))))"
"(if(null? l_20)"
"(let-values() #f)"
"(let-values()(bad-list 'assq l_19))))))))"
" loop_48)"
" l_19"
" l_19))))"
"((assv_0)"
"(lambda(x_10 l_23)"
"(begin"
" 'assv"
"((letrec-values(((loop_49)"
"(lambda(l_24 t_2)"
"(begin"
" 'loop"
"(if(pair? l_24)"
"(let-values()"
"(let-values(((a_13)(unsafe-car l_24)))"
"(if(pair? a_13)"
"(if(eqv? x_10(unsafe-car a_13))"
" a_13"
"(let-values(((l_25)(unsafe-cdr l_24)))"
"(if(pair? l_25)"
"(let-values()"
"(let-values(((a_14)(unsafe-car l_25)))"
"(if(pair? a_14)"
"(if(eqv? x_10(unsafe-car a_14))"
" a_14"
"(let-values(((t_3)(unsafe-cdr t_2))"
"((l_26)(unsafe-cdr l_25)))"
"(if(eq? l_26 t_3)"
"(bad-list 'assv l_23)"
"(loop_49 l_26 t_3))))"
"(bad-item 'assv a_14 l_23))))"
"(if(null? l_25)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_23))))))"
"(bad-item 'assv a_13 l_23))))"
"(if(null? l_24)"
"(let-values() #f)"
"(let-values()(bad-list 'assv l_23))))))))"
" loop_49)"
" l_23"
" l_23))))"
"((assoc_0)"
"(case-lambda"
"((x_11 l_27)"
"(begin"
" 'assoc"
"((letrec-values(((loop_50)"
"(lambda(l_28 t_4)"
"(begin"
" 'loop"
"(if(pair? l_28)"
"(let-values()"
"(let-values(((a_15)(unsafe-car l_28)))"
"(if(pair? a_15)"
"(if(equal? x_11(unsafe-car a_15))"
" a_15"
"(let-values(((l_29)(unsafe-cdr l_28)))"
"(if(pair? l_29)"
"(let-values()"
"(let-values(((a_16)(unsafe-car l_29)))"
"(if(pair? a_16)"
"(if(equal? x_11(unsafe-car a_16))"
" a_16"
"(let-values(((t_5)(unsafe-cdr t_4))"
"((l_30)(unsafe-cdr l_29)))"
"(if(eq? l_30 t_5)"
"(bad-list 'assoc l_27)"
"(loop_50 l_30 t_5))))"
"(bad-item 'assoc a_16 l_27))))"
"(if(null? l_29)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_27))))))"
"(bad-item 'assoc a_15 l_27))))"
"(if(null? l_28)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_27))))))))"
" loop_50)"
" l_27"
" l_27)))"
"((x_12 l_31 is-equal?_0)"
"(begin"
"(if(if(procedure? is-equal?_0)(procedure-arity-includes? is-equal?_0 2) #f)"
"(void)"
"                          (let-values () (raise-argument-error 'assoc \"(any/c any/c . -> . any/c)\" is-equal?_0)))"
"((letrec-values(((loop_51)"
"(lambda(l_32 t_6)"
"(begin"
" 'loop"
"(if(pair? l_32)"
"(let-values()"
"(let-values(((a_17)(unsafe-car l_32)))"
"(if(pair? a_17)"
"(if(is-equal?_0 x_12(unsafe-car a_17))"
" a_17"
"(let-values(((l_33)(unsafe-cdr l_32)))"
"(if(pair? l_33)"
"(let-values()"
"(let-values(((a_18)(unsafe-car l_33)))"
"(if(pair? a_18)"
"(if(is-equal?_0 x_12(unsafe-car a_18))"
" a_18"
"(let-values(((t_7)(unsafe-cdr t_6))"
"((l_34)(unsafe-cdr l_33)))"
"(if(eq? l_34 t_7)"
"(bad-list 'assoc l_31)"
"(loop_51 l_34 t_7))))"
"(bad-item 'assoc a_18 l_31))))"
"(if(null? l_33)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_31))))))"
"(bad-item 'assoc a_17 l_31))))"
"(if(null? l_32)"
"(let-values() #f)"
"(let-values()(bad-list 'assoc l_31))))))))"
" loop_51)"
" l_31"
" l_31)))))"
"((assf_0)"
"(lambda(f_17 l_35)"
"(begin"
" 'assf"
"(begin"
"(if(if(procedure? f_17)(procedure-arity-includes? f_17 1) #f)"
"(void)"
"                            (let-values () (raise-argument-error 'assf \"(any/c any/c . -> . any/c)\" f_17)))"
"((letrec-values(((loop_52)"
"(lambda(l_36 t_8)"
"(begin"
" 'loop"
"(if(pair? l_36)"
"(let-values()"
"(let-values(((a_19)(unsafe-car l_36)))"
"(if(pair? a_19)"
"(if((lambda(__0 a_20)(f_17 a_20)) #f(unsafe-car a_19))"
" a_19"
"(let-values(((l_37)(unsafe-cdr l_36)))"
"(if(pair? l_37)"
"(let-values()"
"(let-values(((a_21)(unsafe-car l_37)))"
"(if(pair? a_21)"
"(if((lambda(__1 a_22)(f_17 a_22))"
" #f"
"(unsafe-car a_21))"
" a_21"
"(let-values(((t_9)(unsafe-cdr t_8))"
"((l_38)(unsafe-cdr l_37)))"
"(if(eq? l_38 t_9)"
"(bad-list 'assf l_35)"
"(loop_52 l_38 t_9))))"
"(bad-item 'assf a_21 l_35))))"
"(if(null? l_37)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_35))))))"
"(bad-item 'assf a_19 l_35))))"
"(if(null? l_36)"
"(let-values() #f)"
"(let-values()(bad-list 'assf l_35))))))))"
" loop_52)"
" l_35"
" l_35))))))"
"(values assq_0 assv_0 assoc_0 assf_0)))))"
"(define-values"
"(filter)"
"(lambda(f_18 list_0)"
"(begin"
"(begin"
"(if(if(procedure? f_18)(procedure-arity-includes? f_18 1) #f)"
"(void)"
"          (let-values () (raise-argument-error 'filter \"(any/c . -> . any/c)\" f_18)))"
"        (if (list? list_0) (void) (let-values () (raise-argument-error 'filter \"list?\" list_0)))"
"((letrec-values(((loop_53)"
"(lambda(l_39 result_0)"
"(begin"
" 'loop"
"(if(null? l_39)"
"(reverse$1 result_0)"
"(loop_53(cdr l_39)(if(f_18(car l_39))(cons(car l_39) result_0) result_0)))))))"
" loop_53)"
" list_0"
" null)))))"
"(define-values(no-empty-edge-table)(make-hash))"
" (define-values (binary-or-text-desc) \"(or/c 'binary 'text)\")"
"(define-values"
"(open-input-file6.1)"
"(lambda(for-module?2_0 mode1_0 path5_0)"
"(begin"
" 'open-input-file6"
"(let-values(((path_0) path5_0))"
"(let-values(((mode_0) mode1_0))"
"(let-values(((for-module?_0) for-module?2_0))"
"(let-values()"
"(begin"
"(if(path-string? path_0)"
"(void)"
"                  (let-values () (raise-argument-error 'open-input-file \"path-string?\" path_0)))"
"(if(memq mode_0 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'open-input-file binary-or-text-desc mode_0)))"
"(open-input-file path_0 mode_0(if for-module?_0 'module 'none))))))))))"
"(define-values"
"(with-input-from-file45.1)"
"(lambda(mode41_0 path43_0 proc44_0)"
"(begin"
" 'with-input-from-file45"
"(let-values(((path_1) path43_0))"
"(let-values(((proc_0) proc44_0))"
"(let-values(((mode_1) mode41_0))"
"(let-values()"
"(begin"
"(if(path-string? path_1)"
"(void)"
"                  (let-values () (raise-argument-error 'with-input-from-file \"path-string?\" path_1)))"
"(if(if(procedure? proc_0)(procedure-arity-includes? proc_0 0) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'with-input-from-file \"(-> any)\" proc_0)))"
"(if(memq mode_1 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'with-input-from-file binary-or-text-desc mode_1)))"
"(with-input-from-file path_1 proc_0 mode_1)))))))))"
"(define-values"
"(call-with-input-file*61.1)"
"(lambda(mode57_0 path59_0 proc60_0)"
"(begin"
" 'call-with-input-file*61"
"(let-values(((path_2) path59_0))"
"(let-values(((proc_1) proc60_0))"
"(let-values(((mode_2) mode57_0))"
"(let-values()"
"(begin"
"(if(path-string? path_2)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-input-file* \"path-string?\" path_2)))"
"(if(if(procedure? proc_1)(procedure-arity-includes? proc_1 1) #f)"
"(void)"
"                  (let-values () (raise-argument-error 'call-with-input-file* \"(input-port? . -> . any)\" proc_1)))"
"(if(memq mode_2 '(binary text))"
"(void)"
"(let-values()(raise-argument-error 'call-with-input-file* binary-or-text-desc mode_2)))"
"(let-values(((p_3)(open-input-file path_2 mode_2)))"
"(dynamic-wind void(lambda()(proc_1 p_3))(lambda()(close-input-port p_3))))))))))))"
"(define-values(the-empty-hash) '#hash())"
"(define-values(the-empty-hasheq) '#hasheq())"
"(define-values(the-empty-hasheqv) '#hasheqv())"
"(define-values"
"(set)"
"(case-lambda"
"(()(begin the-empty-hash))"
"(l_40"
"(let-values(((lst_7) l_40))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_7)))"
"((letrec-values(((for-loop_0)"
"(lambda(s_11 lst_8)"
"(begin"
" 'for-loop"
"(if(pair? lst_8)"
"(let-values(((e_2)(unsafe-car lst_8))((rest_0)(unsafe-cdr lst_8)))"
"(let-values(((s_12)"
"(let-values(((s_13) s_11))"
"(let-values(((s_14)(let-values()(hash-set s_13 e_2 #t))))"
"(values s_14)))))"
"(if(not #f)(for-loop_0 s_12 rest_0) s_12)))"
" s_11)))))"
" for-loop_0)"
" the-empty-hash"
" lst_7))))))"
"(define-values"
"(seteq)"
"(case-lambda"
"(()(begin the-empty-hasheq))"
"(l_41"
"(let-values(((lst_9) l_41))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_9)))"
"((letrec-values(((for-loop_1)"
"(lambda(s_15 lst_10)"
"(begin"
" 'for-loop"
"(if(pair? lst_10)"
"(let-values(((e_3)(unsafe-car lst_10))((rest_1)(unsafe-cdr lst_10)))"
"(let-values(((s_16)"
"(let-values(((s_17) s_15))"
"(let-values(((s_18)(let-values()(hash-set s_17 e_3 #t))))"
"(values s_18)))))"
"(if(not #f)(for-loop_1 s_16 rest_1) s_16)))"
" s_15)))))"
" for-loop_1)"
" the-empty-hasheq"
" lst_9))))))"
"(define-values(seteqv)(lambda()(begin the-empty-hasheqv)))"
"(define-values(set?)(lambda(s_19)(begin(hash? s_19))))"
"(define-values(set-empty?)(lambda(s_20)(begin(zero?(hash-count s_20)))))"
"(define-values(set-member?)(lambda(s_21 e_4)(begin(hash-ref s_21 e_4 #f))))"
"(define-values(set-count)(lambda(s_22)(begin(hash-count s_22))))"
"(define-values(set-add)(lambda(s_23 e_5)(begin(hash-set s_23 e_5 #t))))"
"(define-values(set-remove)(lambda(s_24 e_6)(begin(hash-remove s_24 e_6))))"
"(define-values(set-first)(lambda(s_25)(begin(hash-iterate-key s_25(hash-iterate-first s_25)))))"
"(define-values(subset?)(lambda(s1_0 s2_0)(begin(hash-keys-subset? s1_0 s2_0))))"
"(define-values"
"(set=?)"
"(lambda(s1_1 s2_1)"
"(begin"
"(let-values(((or-part_25)(eq? s1_1 s2_1)))"
"(if or-part_25 or-part_25(if(=(hash-count s1_1)(hash-count s2_1))(hash-keys-subset? s1_1 s2_1) #f))))))"
"(define-values"
"(set-subtract)"
"(lambda(s1_2 s2_2)"
"(begin"
"(let-values(((ht_16) s2_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_16)))"
"((letrec-values(((for-loop_2)"
"(lambda(s1_3 i_21)"
"(begin"
" 'for-loop"
"(if i_21"
"(let-values(((k_0)(unsafe-immutable-hash-iterate-key ht_16 i_21)))"
"(let-values(((s1_4)"
"(let-values(((s1_5) s1_3))"
"(let-values(((s1_6)(let-values()(hash-remove s1_5 k_0))))"
"(values s1_6)))))"
"(if(not #f)"
"(for-loop_2 s1_4(unsafe-immutable-hash-iterate-next ht_16 i_21))"
" s1_4)))"
" s1_3)))))"
" for-loop_2)"
" s1_2"
"(unsafe-immutable-hash-iterate-first ht_16)))))))"
"(define-values"
"(set-union)"
"(lambda(s1_7 s2_3)"
"(begin"
"(if(<(set-count s1_7)(set-count s2_3))"
"(set-union s2_3 s1_7)"
"(let-values(((ht_17) s2_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_17)))"
"((letrec-values(((for-loop_3)"
"(lambda(s1_8 i_22)"
"(begin"
" 'for-loop"
"(if i_22"
"(let-values(((k_1)(unsafe-immutable-hash-iterate-key ht_17 i_22)))"
"(let-values(((s1_9)"
"(let-values(((s1_10) s1_8))"
"(let-values(((s1_11)(let-values()(hash-set s1_10 k_1 #t))))"
"(values s1_11)))))"
"(if(not #f)"
"(for-loop_3 s1_9(unsafe-immutable-hash-iterate-next ht_17 i_22))"
" s1_9)))"
" s1_8)))))"
" for-loop_3)"
" s1_7"
"(unsafe-immutable-hash-iterate-first ht_17))))))))"
"(define-values"
"(set-intersect)"
"(lambda(s1_12 s2_4)"
"(begin"
"(if(<(set-count s1_12)(set-count s2_4))"
"(set-intersect s2_4 s1_12)"
"(let-values(((ht_18) s2_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_18)))"
"((letrec-values(((for-loop_4)"
"(lambda(s_26 i_23)"
"(begin"
" 'for-loop"
"(if i_23"
"(let-values(((k_2)(unsafe-immutable-hash-iterate-key ht_18 i_23)))"
"(let-values(((s_27)"
"(let-values(((s_28) s_26))"
"(let-values(((s_29)"
"(let-values()"
"(if(hash-ref s1_12 k_2 #f)"
" s_28"
"(hash-remove s_28 k_2)))))"
"(values s_29)))))"
"(if(not #f)"
"(for-loop_4 s_27(unsafe-immutable-hash-iterate-next ht_18 i_23))"
" s_27)))"
" s_26)))))"
" for-loop_4)"
" s2_4"
"(unsafe-immutable-hash-iterate-first ht_18))))))))"
"(define-values"
"(set-partition)"
"(lambda(s_30 pred_0 empty-y-set_0 empty-n-set_0)"
"(begin"
"(let-values(((ht_19) s_30))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_19)))"
"((letrec-values(((for-loop_5)"
"(lambda(y_6 n_14 i_24)"
"(begin"
" 'for-loop"
"(if i_24"
"(let-values(((v_27)(unsafe-immutable-hash-iterate-key ht_19 i_24)))"
"(let-values(((y_7 n_15)"
"(let-values(((y_8) y_6)((n_16) n_14))"
"(let-values(((y_9 n_17)"
"(let-values()"
"(if(pred_0 v_27)"
"(values(set-add y_8 v_27) n_16)"
"(values y_8(set-add n_16 v_27))))))"
"(values y_9 n_17)))))"
"(if(not #f)"
"(for-loop_5 y_7 n_15(unsafe-immutable-hash-iterate-next ht_19 i_24))"
"(values y_7 n_15))))"
"(values y_6 n_14))))))"
" for-loop_5)"
" empty-y-set_0"
" empty-n-set_0"
"(unsafe-immutable-hash-iterate-first ht_19)))))))"
"(define-values"
"(set->list)"
"(lambda(s_31)"
"(begin"
"(reverse$1"
"(let-values(((ht_20) s_31))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_20)))"
"((letrec-values(((for-loop_6)"
"(lambda(fold-var_0 i_25)"
"(begin"
" 'for-loop"
"(if i_25"
"(let-values(((k_3)(unsafe-immutable-hash-iterate-key ht_20 i_25)))"
"(let-values(((fold-var_1)"
"(let-values(((fold-var_2) fold-var_0))"
"(let-values(((fold-var_3)"
"(let-values()"
"(cons(let-values() k_3) fold-var_2))))"
"(values fold-var_3)))))"
"(if(not #f)"
"(for-loop_6 fold-var_1(unsafe-immutable-hash-iterate-next ht_20 i_25))"
" fold-var_1)))"
" fold-var_0)))))"
" for-loop_6)"
" null"
"(unsafe-immutable-hash-iterate-first ht_20))))))))"
"(define-values"
"(list->set)"
"(lambda(l_42)"
"(begin"
"(let-values(((lst_11) l_42))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_11)))"
"((letrec-values(((for-loop_7)"
"(lambda(table_0 lst_12)"
"(begin"
" 'for-loop"
"(if(pair? lst_12)"
"(let-values(((k_4)(unsafe-car lst_12))((rest_2)(unsafe-cdr lst_12)))"
"(let-values(((table_1)"
"(let-values(((table_2) table_0))"
"(let-values(((table_3)"
"(let-values()"
"(let-values(((key_7 val_0)"
"(let-values()"
"(values(let-values() k_4) #t))))"
"(hash-set table_2 key_7 val_0)))))"
"(values table_3)))))"
"(if(not #f)(for-loop_7 table_1 rest_2) table_1)))"
" table_0)))))"
" for-loop_7)"
" '#hash()"
" lst_11))))))"
"(define-values"
"(list->seteq)"
"(lambda(l_43)"
"(begin"
"(let-values(((lst_13) l_43))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_13)))"
"((letrec-values(((for-loop_8)"
"(lambda(table_4 lst_14)"
"(begin"
" 'for-loop"
"(if(pair? lst_14)"
"(let-values(((k_5)(unsafe-car lst_14))((rest_3)(unsafe-cdr lst_14)))"
"(let-values(((table_5)"
"(let-values(((table_6) table_4))"
"(let-values(((table_7)"
"(let-values()"
"(let-values(((key_8 val_1)"
"(let-values()"
"(values(let-values() k_5) #t))))"
"(hash-set table_6 key_8 val_1)))))"
"(values table_7)))))"
"(if(not #f)(for-loop_8 table_5 rest_3) table_5)))"
" table_4)))))"
" for-loop_8)"
" '#hasheq()"
" lst_13))))))"
"(define-values(start-atomic)(lambda()(begin(unsafe-start-atomic))))"
"(define-values(end-atomic)(lambda()(begin(unsafe-end-atomic))))"
"(define-values(start-breakable-atomic)(lambda()(begin(unsafe-start-breakable-atomic))))"
"(define-values(end-breakable-atomic)(lambda()(begin(unsafe-end-breakable-atomic))))"
"(define-values(monitor-owner) #f)"
"(define-values"
"(entered-err-string-handler)"
"(lambda(s_0 n_18)(begin(call-as-nonatomic(lambda()((error-value->string-handler) s_0 n_18))))))"
"(define-values(old-paramz) #f)"
"(define-values(old-break-paramz) #f)"
"(define-values(extra-atomic-depth) 0)"
"(define-values(exited-key)(gensym 'as-exit))"
"(define-values(lock-tag)(make-continuation-prompt-tag 'lock))"
"(define-values"
"(call-as-atomic)"
"(lambda(f_19)"
"(begin"
"(begin"
"(if(if(procedure? f_19)(procedure-arity-includes? f_19 0) #f)"
"(void)"
"          (let-values () (raise-type-error 'call-as-atomic \"procedure (arity 0)\" f_19)))"
"(if(eq? monitor-owner(current-thread))"
"(let-values()"
"(dynamic-wind"
"(lambda()(begin(start-breakable-atomic)(set! extra-atomic-depth(add1 extra-atomic-depth))))"
" f_19"
"(lambda()(begin(set! extra-atomic-depth(sub1 extra-atomic-depth))(end-breakable-atomic)))))"
"(let-values()"
"(with-continuation-mark"
" exited-key"
" #f"
"(call-with-continuation-prompt"
"(lambda()"
"(dynamic-wind"
"(lambda()(begin(start-breakable-atomic)(set! monitor-owner(current-thread))))"
"(lambda()"
"(begin"
"(set! old-paramz(current-parameterization))"
"(set! old-break-paramz(current-break-parameterization))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" error-value->string-handler"
" entered-err-string-handler)"
"(let-values()"
"(with-continuation-mark"
" break-enabled-key"
"(make-thread-cell #f)"
"(begin"
"(check-for-break)"
"(let-values()"
"(call-with-exception-handler"
"(lambda(exn_0)"
"(if(continuation-mark-set-first #f exited-key)"
" exn_0"
"(abort-current-continuation lock-tag(lambda()(raise exn_0)))))"
" f_19))))))))"
"(lambda()"
"(begin"
"(set! monitor-owner #f)"
"(set! old-paramz #f)"
"(set! old-break-paramz #f)"
"(end-breakable-atomic)))))"
" lock-tag"
"(lambda(t_10)(t_10))))))))))"
"(define-values"
"(call-as-nonatomic)"
"(lambda(f_20)"
"(begin"
"(begin"
"(if(if(procedure? f_20)(procedure-arity-includes? f_20 0) #f)"
"(void)"
"          (let-values () (raise-type-error 'call-as-nonatomic \"procedure (arity 0)\" f_20)))"
"(if(eq? monitor-owner(current-thread))"
"(void)"
"          (let-values () (error 'call-as-nonatomic \"not in atomic area for ~e\" f_20)))"
"(let-values(((paramz_2) old-paramz)((break-paramz_0) old-break-paramz)((extra-depth_0) extra-atomic-depth))"
"(with-continuation-mark"
" exited-key"
" #t"
"(call-with-parameterization"
" paramz_2"
"(lambda()"
"(call-with-break-parameterization"
" break-paramz_0"
"(lambda()"
"(dynamic-wind"
"(lambda()"
"(begin"
"(set! monitor-owner #f)"
"(set! extra-atomic-depth 0)"
"(end-breakable-atomic)"
"((letrec-values(((loop_54)"
"(lambda(i_26)"
"(begin"
" 'loop"
"(if(zero? i_26)"
"(void)"
"(let-values()(begin(end-breakable-atomic)(loop_54(sub1 i_26)))))))))"
" loop_54)"
" extra-depth_0)))"
" f_20"
"(lambda()"
"(begin"
"(start-breakable-atomic)"
"(set! old-paramz paramz_2)"
"(set! old-break-paramz break-paramz_0)"
"((letrec-values(((loop_55)"
"(lambda(i_27)"
"(begin"
" 'loop"
"(if(zero? i_27)"
"(void)"
"(let-values()"
"(begin(start-breakable-atomic)(loop_55(sub1 i_27)))))))))"
" loop_55)"
" extra-depth_0)"
"(set! extra-atomic-depth extra-depth_0)"
"(set! monitor-owner(current-thread)))))))))))))))"
"(define-values(prop:serialize serialize? serialize-ref)(make-struct-type-property 'serialize))"
"(define-values"
"(prop:serialize-fill! serialize-fill!? serialize-fill!-ref)"
"(make-struct-type-property 'serialize-fill!))"
"(define-values(prop:reach-scopes reach-scopes? reach-scopes-ref)(make-struct-type-property 'reach-scopes))"
"(define-values"
"(prop:scope-with-bindings scope-with-bindings? scope-with-bindings-ref)"
"(make-struct-type-property 'scope-with-bindings))"
"(define-values"
"(prop:binding-reach-scopes binding-reach-scopes? binding-reach-scopes-ref)"
"(make-struct-type-property 'binding-reach-scopes))"
"(define-values"
"(1/module-path?)"
"(lambda(v_28)"
"(begin"
" 'module-path?"
"(let-values(((or-part_0)(if(pair? v_28)(if(eq?(car v_28) 'submod)(submodule-module-path? v_28) #f) #f)))"
"(if or-part_0 or-part_0(root-module-path? v_28))))))"
"(define-values"
"(root-module-path?)"
"(lambda(v_29)"
"(begin"
"(let-values(((or-part_11)(path? v_29)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_2)(if(string? v_29)(string-module-path? v_29) #f)))"
"(if or-part_2"
" or-part_2"
"(let-values(((or-part_26)(if(symbol? v_29)(symbol-module-path? v_29) #f)))"
"(if or-part_26"
" or-part_26"
"(if(pair? v_29)"
"(let-values(((tmp_4)(car v_29)))"
"(if(equal? tmp_4 'quote)"
"(let-values()(if(pair?(cdr v_29))(if(symbol?(cadr v_29))(null?(cddr v_29)) #f) #f))"
"(if(equal? tmp_4 'lib)"
"(let-values()(lib-module-path? v_29))"
"(if(equal? tmp_4 'file)"
"(let-values()"
"(if(pair?(cdr v_29))"
"(if(string?(cadr v_29))(if(path-string?(cadr v_29))(null?(cddr v_29)) #f) #f)"
" #f))"
"(if(equal? tmp_4 'planet)"
"(let-values()(planet-module-path? v_29))"
"(let-values() #f))))))"
" #f))))))))))"
"(define-values"
"(submodule-module-path?)"
"(lambda(v_30)"
"(begin"
"(if(pair?(cdr v_30))"
"(if(list? v_30)"
"          (if (let-values (((or-part_27) (equal? (cadr v_30) \"..\")))"
"(if or-part_27"
" or-part_27"
"                  (let-values (((or-part_10) (equal? (cadr v_30) \".\")))"
"(if or-part_10 or-part_10(root-module-path?(cadr v_30))))))"
"(let-values(((lst_15)(cddr v_30)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_15)))"
"((letrec-values(((for-loop_9)"
"(lambda(result_1 lst_16)"
"(begin"
" 'for-loop"
"(if(pair? lst_16)"
"(let-values(((e_7)(unsafe-car lst_16))((rest_4)(unsafe-cdr lst_16)))"
"(let-values(((result_2)"
"(let-values()"
"(let-values(((result_3)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_28)"
"                                                                                          (equal? e_7 \"..\")))"
"(if or-part_28"
" or-part_28"
"(symbol? e_7)))))))"
"(values result_3)))))"
"(if(if(not((lambda x_13(not result_2)) e_7))(not #f) #f)"
"(for-loop_9 result_2 rest_4)"
" result_2)))"
" result_1)))))"
" for-loop_9)"
" #t"
" lst_15)))"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(string-module-path?)"
"(lambda(v_31)"
"(begin"
"(let-values(((v13_0) v_31)((temp14_0) #t)((temp15_0) #t)((temp16_0) #t))"
"(module-path-string?10.1 temp14_0 temp16_0 #f temp15_0 v13_0)))))"
"(define-values"
"(symbol-module-path?)"
"(lambda(v_32)"
"(begin(let-values(((temp17_0)(symbol->string v_32)))(module-path-string?10.1 #f #f #f #f temp17_0)))))"
"(define-values"
"(lib-module-path?)"
"(lambda(v_33)"
"(begin"
"(if(list? v_33)"
"(if(pair?(cdr v_33))"
"((letrec-values(((loop_56)"
"(lambda(v_34 first?_0)"
"(begin"
" 'loop"
"(let-values(((or-part_29)(null? v_34)))"
"(if or-part_29"
" or-part_29"
"(if(string?(car v_34))"
"(if(let-values(((temp18_0)(car v_34))"
"((first?19_0) first?_0)"
"((first?20_0) first?_0))"
"(module-path-string?10.1 #f first?20_0 #f first?19_0 temp18_0))"
"(loop_56(cdr v_34) #f)"
" #f)"
" #f)))))))"
" loop_56)"
"(cdr v_33)"
" #t)"
" #f)"
" #f))))"
"(define-values"
"(planet-module-path?)"
"(lambda(v_35)"
"(begin"
"(if(list? v_35)"
"(let-values(((tmp_5)(length v_35)))"
"(if(equal? tmp_5 1)"
"(let-values() #f)"
"(if(equal? tmp_5 2)"
"(let-values()"
"(let-values(((e_8)(cadr v_35)))"
"(if(string? e_8)"
"(let-values()"
"(let-values(((e21_0) e_8)((temp22_0) #t)((temp23_0) #t))"
"(module-path-string?10.1 #f temp23_0 temp22_0 #f e21_0)))"
"(if(symbol? e_8)"
"(let-values()"
"(let-values(((temp24_0)(symbol->string e_8))((temp25_0) #t))"
"(module-path-string?10.1 #f #f temp25_0 #f temp24_0)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((file_0)(cadr v_35)))"
"(let-values(((pkg_0)(caddr v_35)))"
"(let-values(((subs_0)(cdddr v_35)))"
"(if file_0"
"(if(let-values(((file26_0) file_0)((temp27_0) #t)((temp28_0) #t))"
"(module-path-string?10.1 #f temp28_0 #f temp27_0 file26_0))"
"(if(if(list? pkg_0)"
"(if(<= 2(length pkg_0) 4)"
"(if(planet-user/pkg-string?(car pkg_0))"
"(if(planet-user/pkg-string?(cadr pkg_0))"
"(let-values(((or-part_30)(null?(cddr pkg_0))))"
"(if or-part_30"
" or-part_30"
"(let-values(((or-part_31)(planet-version-number?(caddr pkg_0))))"
"(if or-part_31"
" or-part_31"
"(let-values(((or-part_32)(null?(cddr pkg_0))))"
"(if or-part_32"
" or-part_32"
"(planet-version-minor-spec?(cadddr pkg_0))))))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values(((lst_17) subs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_17)))"
"((letrec-values(((for-loop_10)"
"(lambda(result_4 lst_18)"
"(begin"
" 'for-loop"
"(if(pair? lst_18)"
"(let-values(((sub_0)(unsafe-car lst_18))"
"((rest_5)(unsafe-cdr lst_18)))"
"(let-values(((result_5)"
"(let-values()"
"(let-values(((result_6)"
"(let-values()"
"(let-values()"
"(let-values(((sub29_0)"
" sub_0))"
"(module-path-string?10.1"
" #f"
" #f"
" #f"
" #f"
" sub29_0))))))"
"(values result_6)))))"
"(if(if(not((lambda x_14(not result_5)) sub_0))"
"(not #f)"
" #f)"
"(for-loop_10 result_5 rest_5)"
" result_5)))"
" result_4)))))"
" for-loop_10)"
" #t"
" lst_17)))"
" #f)"
" #f)"
" #f))))))))"
" #f))))"
"(define-values(planet-version-number?)(lambda(v_36)(begin(exact-nonnegative-integer? v_36))))"
"(define-values"
"(planet-version-minor-spec?)"
"(lambda(v_37)"
"(begin"
"(let-values(((or-part_33)(planet-version-number? v_37)))"
"(if or-part_33"
" or-part_33"
"(if(pair? v_37)"
"(if(list? v_37)"
"(if(= 2(length v_37))"
"(let-values(((tmp_6)(car v_37)))"
"(if(if(equal? tmp_6 '=) #t(if(equal? tmp_6 '+) #t(equal? tmp_6 '-)))"
"(let-values()(planet-version-number?(cadr v_37)))"
"(let-values()(if(planet-version-number?(car v_37))(planet-version-number?(cadr v_37)) #f))))"
" #f)"
" #f)"
" #f))))))"
"(define-values"
"(module-path-string?10.1)"
"(lambda(dots-dir-ok?2_0 file-end-ok?4_0 for-planet?1_0 just-file-ok?3_0 v9_0)"
"(begin"
" 'module-path-string?10"
"(let-values(((v_38) v9_0))"
"(let-values(((for-planet?_0) for-planet?1_0))"
"(let-values(((dots-dir-ok?_0) dots-dir-ok?2_0))"
"(let-values(((just-file-ok?_0) just-file-ok?3_0))"
"(let-values(((file-end-ok?_0) file-end-ok?4_0))"
"(let-values()"
"(let-values(((len_3)(string-length v_38)))"
"(if(positive? len_3)"
"(if(not(char=? '#\\/(string-ref v_38 0)))"
"(if(not(char=? '#\\/(string-ref v_38(sub1 len_3))))"
"(let-values(((start-package-version-pos_0 end-package-version-pos_0)"
"(if for-planet?_0(check-planet-part v_38 len_3)(values 0 0))))"
"(if start-package-version-pos_0"
"((letrec-values(((loop_57)"
"(lambda(i_28 prev-was-slash?_0 saw-slash?_0 saw-dot?_0)"
"(begin"
" 'loop"
"(if(not(negative? i_28))"
"(let-values()"
"(let-values(((c_6)(string-ref v_38 i_28)))"
"(if(char=? c_6 '#\\/)"
"(let-values()"
"(if(not prev-was-slash?_0)"
"(loop_57(sub1 i_28) #t #t saw-dot?_0)"
" #f))"
"(if(char=? c_6 '#\\.)"
"(let-values()"
"(if(if(<(add1 i_28) len_3)"
"(if(not"
"(char=?(string-ref v_38(add1 i_28)) '#\\/))"
"(not"
"(char=?(string-ref v_38(add1 i_28)) '#\\.))"
" #f)"
" #f)"
"(if(not saw-slash?_0)"
"(loop_57(sub1 i_28) #f saw-slash?_0 #t)"
" #f)"
"(loop_57(sub1 i_28) #f saw-slash?_0 saw-dot?_0)))"
"(if(let-values(((or-part_34)(plain-char? c_6)))"
"(if or-part_34"
" or-part_34"
"(if(char=? c_6 '#\\%)"
"(if(<(+ i_28 2) len_3)"
"(hex-sequence? v_38(add1 i_28))"
" #f)"
" #f)))"
"(let-values()"
"(loop_57(sub1 i_28) #f saw-slash?_0 saw-dot?_0))"
"(if(if(>= i_28 start-package-version-pos_0)"
"(< i_28 end-package-version-pos_0)"
" #f)"
"(let-values()"
"(loop_57(sub1 i_28) #f saw-slash?_0 saw-dot?_0))"
"(let-values() #f)))))))"
"(let-values()"
"(if(not"
"(if(not just-file-ok?_0)"
"(if saw-dot?_0(not saw-slash?_0) #f)"
" #f))"
"(let-values(((or-part_35) dots-dir-ok?_0))"
"(if or-part_35"
" or-part_35"
"((letrec-values(((loop_44)"
"(lambda(i_29)"
"(begin"
" 'loop"
"(if(= i_29 len_3)"
"(let-values() #t)"
"(if(char=?"
"(string-ref v_38 i_29)"
" '#\\.)"
"(let-values()"
"(if(not"
"(let-values(((or-part_36)"
"(="
" len_3"
"(add1"
" i_29))))"
"(if or-part_36"
" or-part_36"
"(char=?"
"(string-ref"
" v_38"
"(add1 i_29))"
" '#\\/))))"
"(if(not"
"(if(char=?"
"(string-ref"
" v_38"
"(add1 i_29))"
" '#\\.)"
"(let-values(((or-part_37)"
"(="
" len_3"
"(+"
" i_29"
" 2))))"
"(if or-part_37"
" or-part_37"
"(char=?"
"(string-ref"
" v_38"
"(+ i_29 2))"
" '#\\/)))"
" #f))"
"(loop_44"
"((letrec-values(((loop_58)"
"(lambda(i_30)"
"(begin"
" 'loop"
"(if(char=?"
" '#\\."
"(string-ref"
" v_38"
" i_30))"
"(loop_58"
"(add1"
" i_30))"
" i_30)))))"
" loop_58)"
" i_29))"
" #f)"
" #f))"
"(let-values()"
"(loop_44(add1 i_29)))))))))"
" loop_44)"
" 0)))"
" #f)))))))"
" loop_57)"
"(sub1 len_3)"
" #f"
"(not file-end-ok?_0)"
" #f)"
" #f))"
" #f)"
" #f)"
" #f)))))))))))"
"(define-values"
"(planet-user/pkg-string?)"
"(lambda(v_39)"
"(begin"
"(if(string? v_39)"
"(let-values(((len_4)(string-length v_39)))"
"(if(positive? len_4)"
"(let-values(((vec_11 len_5)"
"(let-values(((vec_12) v_39))"
"(begin(check-string vec_12)(values vec_12(unsafe-string-length vec_12)))))"
"((start_6) 0))"
"(begin"
" #f"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_6)))"
"((letrec-values(((for-loop_11)"
"(lambda(result_7 pos_1 pos_2)"
"(begin"
" 'for-loop"
"(if(if(unsafe-fx< pos_1 len_5) #t #f)"
"(let-values(((c_7)(string-ref vec_11 pos_1))((i_31) pos_2))"
"(let-values(((result_8)"
"(let-values()"
"(let-values(((result_9)"
"(let-values()"
"(let-values()"
"(let-values(((or-part_38)"
"(plain-char? c_7)))"
"(if or-part_38"
" or-part_38"
"(let-values(((or-part_39)"
"(char=? '#\\. c_7)))"
"(if or-part_39"
" or-part_39"
"(if(char=? '#\\% c_7)"
"(if(< i_31(- len_4 2))"
"(hex-sequence? v_39(add1 i_31))"
" #f)"
" #f)))))))))"
"(values result_9)))))"
"(if(if(not((lambda x_15(not result_8)) c_7))"
"(if(not((lambda x_16(not result_8)) i_31))(not #f) #f)"
" #f)"
"(for-loop_11 result_8(unsafe-fx+ 1 pos_1)(+ pos_2 1))"
" result_8)))"
" result_7)))))"
" for-loop_11)"
" #t"
" 0"
" start_6)))"
" #f))"
" #f))))"
"(define-values"
"(plain-char?)"
"(lambda(c_8)"
"(begin"
"(let-values(((or-part_40)(char<=? '#\\a c_8 '#\\z)))"
"(if or-part_40"
" or-part_40"
"(let-values(((or-part_41)(char<=? '#\\A c_8 '#\\Z)))"
"(if or-part_41"
" or-part_41"
"(let-values(((or-part_42)(char<=? '#\\0 c_8 '#\\9)))"
"(if or-part_42"
" or-part_42"
"(let-values(((or-part_43)(char=? '#\\- c_8)))"
"(if or-part_43"
" or-part_43"
"(let-values(((or-part_44)(char=? '#\\_ c_8)))"
"(if or-part_44 or-part_44(char=? '#\\+ c_8))))))))))))))"
"(define-values"
"(hex-sequence?)"
"(lambda(s_32 i_32)"
"(begin"
"(let-values(((c1_16)(string-ref s_32 i_32)))"
"(let-values(((c2_0)(string-ref s_32(add1 i_32))))"
"(if(hex-char? c1_16)"
"(if(hex-char? c2_0)"
"(let-values(((c_9)(integer->char(+(*(hex-char->integer c1_16) 16)(hex-char->integer c2_0)))))"
"(not(plain-char? c_9)))"
" #f)"
" #f))))))"
"(define-values"
"(hex-char?)"
"(lambda(c_10)"
"(begin(let-values(((or-part_45)(char<=? '#\\a c_10 '#\\f)))(if or-part_45 or-part_45(char<=? '#\\0 c_10 '#\\9))))))"
"(define-values"
"(hex-char->integer)"
"(lambda(c_11)"
"(begin"
"(if(char<=? '#\\a c_11 '#\\f)"
"(let-values()(-(char->integer c_11)(+ 10(char->integer '#\\a))))"
"(if(char<=? '#\\A c_11 '#\\F)"
"(let-values()(-(char->integer c_11)(+ 10(char->integer '#\\A))))"
"(let-values()(-(char->integer c_11)(char->integer '#\\0))))))))"
"(define-values"
"(check-planet-part)"
"(lambda(v_40 len_6)"
"(begin"
"(let-values(((start-package-version-pos_1 end-package-version-pos_1 colon1-pos_0 colon2-pos_0)"
"((letrec-values(((loop_59)"
"(lambda(j_2"
" start-package-version-pos_2"
" end-package-version-pos_2"
" colon1-pos_1"
" colon2-pos_1)"
"(begin"
" 'loop"
"(if(= j_2 len_6)"
"(let-values()"
"(values"
" start-package-version-pos_2"
"(let-values(((or-part_46) end-package-version-pos_2))"
"(if or-part_46 or-part_46 j_2))"
" colon1-pos_1"
" colon2-pos_1))"
"(let-values()"
"(let-values(((tmp_7)(string-ref v_40 j_2)))"
"(if(equal? tmp_7 '#\\/)"
"(let-values()"
"(loop_59"
"(add1 j_2)"
"(let-values(((or-part_47) start-package-version-pos_2))"
"(if or-part_47 or-part_47(add1 j_2)))"
"(if start-package-version-pos_2"
"(let-values(((or-part_48) end-package-version-pos_2))"
"(if or-part_48 or-part_48 j_2))"
" #f)"
" colon1-pos_1"
" colon2-pos_1))"
"(if(equal? tmp_7 '#\\:)"
"(let-values()"
"(if colon2-pos_1"
"(let-values()(values #f #f #f #f))"
"(if colon1-pos_1"
"(let-values()"
"(loop_59"
"(add1 j_2)"
" start-package-version-pos_2"
" end-package-version-pos_2"
" colon1-pos_1"
" j_2))"
"(let-values()"
"(loop_59"
"(add1 j_2)"
" start-package-version-pos_2"
" end-package-version-pos_2"
" j_2"
" #f)))))"
"(let-values()"
"(loop_59"
"(add1 j_2)"
" start-package-version-pos_2"
" end-package-version-pos_2"
" colon1-pos_1"
" colon2-pos_1)))))))))))"
" loop_59)"
" 0"
" #f"
" #f"
" #f"
" #f)))"
"(if(if start-package-version-pos_1"
"(if(> end-package-version-pos_1 start-package-version-pos_1)"
"(let-values(((or-part_49)(not colon2-pos_0)))"
"(if or-part_49 or-part_49(<(add1 colon2-pos_0) end-package-version-pos_1)))"
" #f)"
" #f)"
"(let-values()"
"(if colon1-pos_0"
"(let-values()"
"(let-values(((colon1-end_0)"
"(let-values(((or-part_50) colon2-pos_0))"
"(if or-part_50 or-part_50 end-package-version-pos_1))))"
"(if(if(integer-sequence? v_40(add1 colon1-pos_0) colon1-end_0)"
"(let-values(((or-part_51)(not colon2-pos_0)))"
"(if or-part_51"
" or-part_51"
"(let-values(((tmp_8)(string-ref v_40(add1 colon2-pos_0))))"
"(if(equal? tmp_8 '#\\=)"
"(let-values()(integer-sequence? v_40(+ 2 colon2-pos_0) end-package-version-pos_1))"
"(if(if(equal? tmp_8 '#\\>) #t(equal? tmp_8 '#\\<))"
"(let-values()"
"(if(if(<(+ 2 colon2-pos_0) end-package-version-pos_1)"
"(char=? '#\\=(string-ref v_40(+ colon2-pos_0 2)))"
" #f)"
"(let-values()"
"(integer-sequence? v_40(+ 3 colon2-pos_0) end-package-version-pos_1))"
"(let-values()"
"(integer-sequence? v_40(+ 2 colon2-pos_0) end-package-version-pos_1))))"
"(let-values()"
"(integer-range-sequence? v_40(add1 colon2-pos_0) end-package-version-pos_1)))))))"
" #f)"
"(let-values()(values colon1-pos_0 end-package-version-pos_1))"
"(let-values()(values #f #f)))))"
"(let-values()(values 0 0))))"
"(let-values()(values #f #f)))))))"
"(define-values"
"(integer-sequence?)"
"(lambda(s_33 start_7 end_4)"
"(begin"
"(if(< start_7 end_4)"
"(let-values(((start_8) start_7)((end_5) end_4)((inc_0) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_8 end_5 inc_0)))"
"((letrec-values(((for-loop_12)"
"(lambda(result_10 pos_3)"
"(begin"
" 'for-loop"
"(if(< pos_3 end_5)"
"(let-values(((i_33) pos_3))"
"(let-values(((result_0)"
"(let-values()"
"(let-values(((result_11)"
"(let-values()"
"(let-values()"
"(char<=? '#\\0(string-ref s_33 i_33) '#\\9)))))"
"(values result_11)))))"
"(if(if(not((lambda x_17(not result_0)) i_33))(not #f) #f)"
"(for-loop_12 result_0(+ pos_3 inc_0))"
" result_0)))"
" result_10)))))"
" for-loop_12)"
" #t"
" start_8)))"
" #f))))"
"(define-values"
"(integer-range-sequence?)"
"(lambda(s_34 start_9 end_6)"
"(begin"
"(if(< start_9 end_6)"
"(if(let-values(((start_10) start_9)((end_7) end_6)((inc_1) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_10 end_7 inc_1)))"
"((letrec-values(((for-loop_13)"
"(lambda(result_12 pos_4)"
"(begin"
" 'for-loop"
"(if(< pos_4 end_7)"
"(let-values(((i_34) pos_4))"
"(let-values(((result_13)"
"(let-values()"
"(let-values(((result_14)"
"(let-values()"
"(let-values()"
"(let-values(((c_12)"
"(string-ref s_34 i_34)))"
"(let-values(((or-part_52)"
"(char=? c_12 '#\\-)))"
"(if or-part_52"
" or-part_52"
"(char<=? '#\\0 c_12 '#\\9))))))))"
"(values result_14)))))"
"(if(if(not((lambda x_18(not result_13)) i_34))(not #f) #f)"
"(for-loop_13 result_13(+ pos_4 inc_1))"
" result_13)))"
" result_12)))))"
" for-loop_13)"
" #t"
" start_10)))"
"(>="
" 1"
"(let-values(((start_11) start_9)((end_8) end_6)((inc_2) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_11 end_8 inc_2)))"
"((letrec-values(((for-loop_14)"
"(lambda(result_15 pos_5)"
"(begin"
" 'for-loop"
"(if(< pos_5 end_8)"
"(let-values(((i_35) pos_5))"
"(let-values(((result_16)"
"(let-values(((result_17) result_15))"
"(let-values(((result_18)"
"(let-values()"
"(+"
" result_17"
"(let-values()"
"(if(char=?(string-ref s_34 i_35) '#\\-)"
" 1"
" 0))))))"
"(values result_18)))))"
"(if(not #f)(for-loop_14 result_16(+ pos_5 inc_2)) result_16)))"
" result_15)))))"
" for-loop_14)"
" 0"
" start_11))))"
" #f)"
" #f))))"
"(define-values"
"(struct:weak-intern-table weak-intern-table1.1 weak-intern-table? weak-intern-table-box)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'weak-intern-table"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'weak-intern-table)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'box))))"
"(define-values"
"(struct:table table2.1 table? table-ht table-count table-prune-at)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table)))))"
"(values"
" struct:_1"
" make-_1"
" ?_1"
"(make-struct-field-accessor -ref_1 0 'ht)"
"(make-struct-field-accessor -ref_1 1 'count)"
"(make-struct-field-accessor -ref_1 2 'prune-at))))"
"(define-values(make-weak-intern-table)(lambda()(begin(weak-intern-table1.1(box(table2.1(hasheqv) 0 128))))))"
"(define-values"
"(weak-intern!)"
"(lambda(tt_0 v_41)"
"(begin"
"(let-values(((b_8)(weak-intern-table-box tt_0)))"
"(let-values(((t_11)(unbox b_8)))"
"(let-values(((code_0)(equal-hash-code v_41)))"
"(let-values(((vals_0)(hash-ref(table-ht t_11) code_0 null)))"
"(let-values(((or-part_31)"
"(let-values(((lst_19) vals_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_19)))"
"((letrec-values(((for-loop_15)"
"(lambda(result_19 lst_20)"
"(begin"
" 'for-loop"
"(if(pair? lst_20)"
"(let-values(((b_9)(unsafe-car lst_20))"
"((rest_6)(unsafe-cdr lst_20)))"
"(let-values(((result_20)"
"(let-values()"
"(let-values(((result_21)"
"(let-values()"
"(let-values()"
"(let-values(((bv_0)"
"(weak-box-value"
" b_9)))"
"(if(equal? bv_0 v_41)"
" bv_0"
" #f))))))"
"(values result_21)))))"
"(if(if(not((lambda x_19 result_20) b_9))(not #f) #f)"
"(for-loop_15 result_20 rest_6)"
" result_20)))"
" result_19)))))"
" for-loop_15)"
" #f"
" lst_19)))))"
"(if or-part_31"
" or-part_31"
"(let-values(((pruned-t_0)(if(=(table-count t_11)(table-prune-at t_11))(prune-table t_11) t_11)))"
"(let-values(((ht_21)(table-ht pruned-t_0)))"
"(let-values(((new-t_0)"
"(table2.1"
"(hash-set ht_21 code_0(cons(make-weak-box v_41)(hash-ref ht_21 code_0 null)))"
"(add1(table-count pruned-t_0))"
"(table-prune-at pruned-t_0))))"
"(let-values(((or-part_33)(if(box-cas! b_8 t_11 new-t_0) v_41 #f)))"
"(if or-part_33 or-part_33(weak-intern! tt_0 v_41)))))))))))))))"
"(define-values"
"(prune-table)"
"(lambda(t_12)"
"(begin"
"(let-values(((new-ht_0)"
"(let-values(((ht_22)(table-ht t_12)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_22)))"
"((letrec-values(((for-loop_16)"
"(lambda(table_8 i_36)"
"(begin"
" 'for-loop"
"(if i_36"
"(let-values(((k_6 vals_1)(hash-iterate-key+value ht_22 i_36)))"
"(let-values(((table_9)"
"(let-values(((new-vals_0)"
"(reverse$1"
"(let-values(((lst_21) vals_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_21)))"
"((letrec-values(((for-loop_17)"
"(lambda(fold-var_4"
" lst_9)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_9)"
"(let-values(((b_10)"
"(unsafe-car"
" lst_9))"
"((rest_7)"
"(unsafe-cdr"
" lst_9)))"
"(let-values(((fold-var_5)"
"(let-values(((fold-var_6)"
" fold-var_4))"
"(if(weak-box-value"
" b_10)"
"(let-values(((fold-var_7)"
" fold-var_6))"
"(let-values(((fold-var_8)"
"(let-values()"
"(cons"
"(let-values()"
" b_10)"
" fold-var_7))))"
"(values"
" fold-var_8)))"
" fold-var_6))))"
"(if(not"
" #f)"
"(for-loop_17"
" fold-var_5"
" rest_7)"
" fold-var_5)))"
" fold-var_4)))))"
" for-loop_17)"
" null"
" lst_21))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_18)"
"(lambda(table_10)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_11)"
"(let-values(((table_12)"
" table_10))"
"(if(pair?"
" new-vals_0)"
"(let-values(((table_13)"
" table_12))"
"(let-values(((table_14)"
"(let-values()"
"(let-values(((key_9"
" val_2)"
"(let-values()"
"(values"
" k_6"
" new-vals_0))))"
"(hash-set"
" table_13"
" key_9"
" val_2)))))"
"(values"
" table_14)))"
" table_12))))"
" table_11))))))"
" for-loop_18)"
" table_8)))))"
"(if(not #f)"
"(for-loop_16 table_9(hash-iterate-next ht_22 i_36))"
" table_9)))"
" table_8)))))"
" for-loop_16)"
" '#hash()"
"(hash-iterate-first ht_22))))))"
"(let-values(((count_0)"
"(let-values(((ht_23) new-ht_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_23)))"
"((letrec-values(((for-loop_19)"
"(lambda(result_22 i_37)"
"(begin"
" 'for-loop"
"(if i_37"
"(let-values(((k_7 vals_2)(hash-iterate-key+value ht_23 i_37)))"
"(let-values(((result_23)"
"(let-values(((result_24) result_22))"
"(let-values(((result_25)"
"(let-values()"
"(+"
" result_24"
"(let-values()(length vals_2))))))"
"(values result_25)))))"
"(if(not #f)"
"(for-loop_19 result_23(hash-iterate-next ht_23 i_37))"
" result_23)))"
" result_22)))))"
" for-loop_19)"
" 0"
"(hash-iterate-first ht_23))))))"
"(table2.1 new-ht_0 count_0(max 128(* 2 count_0))))))))"
"(define-values"
"(struct:resolved-module-path resolved-module-path1.1 1/resolved-module-path? 1/resolved-module-path-name)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'resolved-module-path"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(r_8 ser-push!_0 state_0)"
"(begin"
"(ser-push!_0 'tag '#:resolved-module-path)"
"(ser-push!_0(1/resolved-module-path-name r_8)))))"
"(cons"
" prop:custom-write"
"(lambda(r_9 port_0 mode_3)"
"(begin"
"                           (if mode_3 (let-values () (write-string \"#<resolved-module-path:\" port_0)) (void))"
"                           (fprintf port_0 \"~a\" (format-resolved-module-path-name (1/resolved-module-path-name r_9)))"
"                           (if mode_3 (let-values () (write-string \">\" port_0)) (void)))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_23 b_11 eql?_0)"
"(eql?_0(1/resolved-module-path-name a_23)(1/resolved-module-path-name b_11)))"
"(lambda(a_24 hash-code_0)(hash-code_0(1/resolved-module-path-name a_24)))"
"(lambda(a_25 hash-code_1)(hash-code_1(1/resolved-module-path-name a_25))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'resolved-module-path)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'name))))"
"(define-values"
"(format-resolved-module-path-name)"
"(lambda(p_4)"
"(begin"
"(if(path? p_4)"
"        (let-values () (string-append \"\\\"\" (path->string p_4) \"\\\"\"))"
"(if(symbol? p_4)"
"(let-values()(format-symbol p_4))"
"(let-values()(format-submod(format-resolved-module-path-name(car p_4))(cdr p_4))))))))"
"(define-values"
"(format-symbol)"
"  (lambda (p_5) (begin (format \"'~s~a\" p_5 (if (symbol-interned? p_5) \"\" (format \"[~a]\" (eq-hash-code p_5)))))))"
"(define-values"
"(format-submod)"
"(lambda(base_5 syms_0)"
"(begin"
"(format"
"       \"(submod ~a~a)\""
" base_5"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_22) syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_22)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_9 lst_23)"
"(begin"
" 'for-loop"
"(if(pair? lst_23)"
"(let-values(((i_38)(unsafe-car lst_23))((rest_8)(unsafe-cdr lst_23)))"
"(let-values(((fold-var_10)"
"(let-values(((fold-var_11) fold-var_9))"
"(let-values(((fold-var_12)"
"(let-values()"
"(cons"
"                                                                        (let-values () (format \" ~s\" i_38))"
" fold-var_11))))"
"(values fold-var_12)))))"
"(if(not #f)(for-loop_20 fold-var_10 rest_8) fold-var_10)))"
" fold-var_9)))))"
" for-loop_20)"
" null"
" lst_22)))))))))"
"(define-values"
"(resolved-module-path-root-name)"
"(lambda(r_10)"
"(begin(let-values(((name_6)(1/resolved-module-path-name r_10)))(if(pair? name_6)(car name_6) name_6)))))"
"(define-values(resolved-module-paths)(make-weak-intern-table))"
"(define-values"
"(1/make-resolved-module-path)"
"(lambda(p_6)"
"(begin"
" 'make-resolved-module-path"
"(begin"
"(if(let-values(((or-part_53)(symbol? p_6)))"
"(if or-part_53"
" or-part_53"
"(let-values(((or-part_54)(if(path? p_6)(complete-path? p_6) #f)))"
"(if or-part_54"
" or-part_54"
"(if(pair? p_6)"
"(if(pair?(cdr p_6))"
"(if(list? p_6)"
"(if(let-values(((or-part_7)(symbol?(car p_6))))"
"(if or-part_7 or-part_7(if(path?(car p_6))(complete-path?(car p_6)) #f)))"
"(let-values(((lst_24)(cdr p_6)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_24)))"
"((letrec-values(((for-loop_21)"
"(lambda(result_26 lst_25)"
"(begin"
" 'for-loop"
"(if(pair? lst_25)"
"(let-values(((s_35)(unsafe-car lst_25))"
"((rest_9)(unsafe-cdr lst_25)))"
"(let-values(((result_19)"
"(let-values()"
"(let-values(((result_27)"
"(let-values()"
"(let-values()"
"(symbol? s_35)))))"
"(values result_27)))))"
"(if(if(not((lambda x_20(not result_19)) s_35))"
"(not #f)"
" #f)"
"(for-loop_21 result_19 rest_9)"
" result_19)))"
" result_26)))))"
" for-loop_21)"
" #t"
" lst_24)))"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-resolved-module-path"
"(string-append"
"              \"(or/c symbol?\\n\""
"              \"      (and/c path? complete-path?)\\n\""
"              \"      (cons/c (or/c symbol?\\n\""
"              \"                    (and/c path? complete-path?))\\n\""
"              \"              (non-empty-listof symbol?)))\")"
" p_6)))"
"(weak-intern! resolved-module-paths(resolved-module-path1.1 p_6))))))"
"(define-values"
"(resolved-module-path->module-path)"
"(lambda(r_11)"
"(begin"
"(let-values(((name_7)(1/resolved-module-path-name r_11)))"
"(let-values(((root-name_0)(if(pair? name_7)(car name_7) name_7)))"
"(let-values(((root-mod-path_0)(if(path? root-name_0) root-name_0(list 'quote root-name_0))))"
"(if(pair? name_7)(list* 'submod root-mod-path_0(cdr name_7)) root-mod-path_0)))))))"
"(define-values"
"(struct:module-path-index"
" module-path-index2.1"
" 1/module-path-index?"
" module-path-index-path"
" module-path-index-base"
" module-path-index-resolved"
" module-path-index-shift-cache"
" set-module-path-index-resolved!"
" set-module-path-index-shift-cache!)"
"(let-values(((struct:_2 make-_2 ?_2 -ref_2 -set!_2)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:custom-write"
"(lambda(r_12 port_1 mode_4)"
"(begin"
"                           (write-string \"#<module-path-index\" port_1)"
"(if(top-level-module-path-index? r_12)"
"                             (let-values () (fprintf port_1 \":top-level\"))"
"(if(module-path-index-path r_12)"
"(let-values()"
"(let-values(((l_44)"
"((letrec-values(((loop_60)"
"(lambda(r_13)"
"(begin"
" 'loop"
"(if(not r_13)"
"(let-values() null)"
"(if(1/resolved-module-path? r_13)"
"                                                                         (let-values () (list \"+\" (format \"~a\" r_13)))"
"(if(module-path-index-path r_13)"
"(let-values()"
"(cons"
"((letrec-values(((loop_61)"
"(lambda(v_42)"
"(begin"
" 'loop"
"(if(if(pair? v_42)"
"(if(eq?"
" 'quote"
"(car"
" v_42))"
"(null?"
"(cddr"
" v_42))"
" #f)"
" #f)"
"(let-values()"
"(format-symbol"
"(cadr v_42)))"
"(if(if(pair?"
" v_42)"
"(eq?"
" 'submod"
"(car v_42))"
" #f)"
"(let-values()"
"(format-submod"
"(loop_61"
"(cadr v_42))"
"(cddr v_42)))"
"(let-values()"
"(format"
"                                                                                                           \"~.s\""
" v_42))))))))"
" loop_61)"
"(module-path-index-path r_13))"
"(loop_60(module-path-index-base r_13))))"
"(if(module-path-index-resolved r_13)"
"(let-values()"
"(list"
"                                                                                \"+\""
"(format"
"                                                                                 \"~a\""
"(module-path-index-resolved r_13))))"
"(let-values() null)))))))))"
" loop_60)"
" r_12)))"
"(fprintf"
" port_1"
"                                    \":~.a\""
"(apply"
" string-append"
"(car l_44)"
"(reverse$1"
"(let-values(((lst_26)(cdr l_44)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_26)))"
"((letrec-values(((for-loop_22)"
"(lambda(fold-var_13 lst_27)"
"(begin"
" 'for-loop"
"(if(pair? lst_27)"
"(let-values(((i_39)(unsafe-car lst_27))"
"((rest_10)(unsafe-cdr lst_27)))"
"(let-values(((fold-var_14)"
"(let-values(((fold-var_15)"
" fold-var_13))"
"(let-values(((fold-var_16)"
"(let-values()"
"(cons"
"(let-values()"
"(format"
"                                                                                                        \" ~a\""
" i_39))"
" fold-var_15))))"
"(values fold-var_16)))))"
"(if(not #f)"
"(for-loop_22 fold-var_14 rest_10)"
" fold-var_14)))"
" fold-var_13)))))"
" for-loop_22)"
" null"
" lst_26))))))))"
"(if(module-path-index-resolved r_12)"
"                                 (let-values () (fprintf port_1 \"=~a\" (module-path-index-resolved r_12)))"
"(void))))"
"                           (write-string \">\" port_1))))"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_26 b_12 eql?_1)"
"(if(eql?_1(module-path-index-path a_26)(module-path-index-path b_12))"
"(eql?_1(module-path-index-base a_26)(module-path-index-base b_12))"
" #f))"
"(lambda(a_27 hash-code_2)"
"(+(hash-code_2(module-path-index-path a_27))(hash-code_2(module-path-index-base a_27))))"
"(lambda(a_28 hash-code_3)"
"(+"
"(hash-code_3(module-path-index-path a_28))"
"(hash-code_3(module-path-index-base a_28)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index)))))"
"(values"
" struct:_2"
" make-_2"
" ?_2"
"(make-struct-field-accessor -ref_2 0 'path)"
"(make-struct-field-accessor -ref_2 1 'base)"
"(make-struct-field-accessor -ref_2 2 'resolved)"
"(make-struct-field-accessor -ref_2 3 'shift-cache)"
"(make-struct-field-mutator -set!_2 2 'resolved)"
"(make-struct-field-mutator -set!_2 3 'shift-cache))))"
"(define-values"
"(deserialize-module-path-index)"
"(case-lambda"
"((path_3 base_6)(begin(1/module-path-index-join path_3 base_6)))"
"((name_8)(make-self-module-path-index(1/make-resolved-module-path name_8)))"
"(() top-level-module-path-index)))"
"(define-values"
"(1/module-path-index-resolve)"
"(let-values(((module-path-index-resolve5_0)"
"(lambda(mpi4_0 load?3_0)"
"(begin"
" 'module-path-index-resolve5"
"(let-values(((mpi_0) mpi4_0))"
"(let-values(((load?_0) load?3_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_0)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'module-path-index-resolve \"module-path-index?\" mpi_0)))"
"(let-values(((or-part_55)(module-path-index-resolved mpi_0)))"
"(if or-part_55"
" or-part_55"
"(let-values(((mod-name_0)"
"((1/current-module-name-resolver)"
"(module-path-index-path mpi_0)"
"(module-path-index-resolve/maybe"
"(module-path-index-base mpi_0)"
" load?_0)"
" #f"
" load?_0)))"
"(begin"
"(if(1/resolved-module-path? mod-name_0)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-resolve"
"                                             \"current module name resolver's result is not a resolved module path\""
"                                             \"result\""
" mod-name_0)))"
"(set-module-path-index-resolved! mpi_0 mod-name_0)"
" mod-name_0))))))))))))))"
"(case-lambda"
"((mpi_1)(begin 'module-path-index-resolve(module-path-index-resolve5_0 mpi_1 #f)))"
"((mpi_2 load?3_1)(module-path-index-resolve5_0 mpi_2 load?3_1)))))"
"(define-values"
"(module-path-index-unresolve)"
"(lambda(mpi_3)"
"(begin"
"(if(module-path-index-resolved mpi_3)"
"(let-values()"
"(let-values(((path_4 base_7)(1/module-path-index-split mpi_3)))(1/module-path-index-join path_4 base_7)))"
"(let-values() mpi_3)))))"
"(define-values"
"(1/module-path-index-join)"
"(let-values(((module-path-index-join10_0)"
"(lambda(mod-path8_0 base9_0 submod7_0)"
"(begin"
" 'module-path-index-join10"
"(let-values(((mod-path_0) mod-path8_0))"
"(let-values(((base_8) base9_0))"
"(let-values(((submod_0) submod7_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if((lambda(x_21)"
"(let-values(((or-part_40)(not x_21)))"
"(if or-part_40 or-part_40(1/module-path? x_21))))"
" mod-path_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                       \"(or/c #f module-path?)\""
" mod-path_0)))"
"(if(let-values(((or-part_41)(not base_8)))"
"(if or-part_41"
" or-part_41"
"(let-values(((or-part_42)(1/resolved-module-path? base_8)))"
"(if or-part_42 or-part_42(1/module-path-index? base_8)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                       \"(or/c #f resolved-module-path? module-path-index?)\""
" base_8)))"
"(if(let-values(((or-part_43)(not submod_0)))"
"(if or-part_43"
" or-part_43"
"(if(pair? submod_0)(if(list? submod_0)(andmap2 symbol? submod_0) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-path-index-join"
"                                       \"(or/c #f (non-empty-listof symbol?))\""
" submod_0)))"
"(if(if(not mod-path_0) base_8 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                       \"cannot combine #f path with non-#f base\""
"                                       \"given base\""
" base_8))"
"(void))"
"(if(if submod_0 mod-path_0 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-path-index-join"
"                                       \"cannot combine #f submodule list with non-#f module path\""
"                                       \"given module path\""
" mod-path_0"
"                                       \"given submodule list\""
" submod_0))"
"(void))"
"(if submod_0"
"(let-values()"
"(make-self-module-path-index"
"(1/make-resolved-module-path(cons generic-module-name submod_0))))"
"(let-values()"
"(let-values(((keep-base_0)"
"((letrec-values(((loop_62)"
"(lambda(mod-path_1)"
"(begin"
" 'loop"
"(if(path? mod-path_1)"
"(let-values() #f)"
"(if(if(pair? mod-path_1)"
"(eq? 'quote(car mod-path_1))"
" #f)"
"(let-values() #f)"
"(if(symbol? mod-path_1)"
"(let-values() #f)"
"(if(if(pair? mod-path_1)"
"(eq? 'submod(car mod-path_1))"
" #f)"
"(let-values()"
"(loop_62(cadr mod-path_1)))"
"(let-values() base_8)))))))))"
" loop_62)"
" mod-path_0)))"
"(module-path-index2.1 mod-path_0 keep-base_0 #f #f)))))))))))))))"
"(case-lambda"
"((mod-path_2 base_9)(begin 'module-path-index-join(module-path-index-join10_0 mod-path_2 base_9 #f)))"
"((mod-path_3 base_10 submod7_1)(module-path-index-join10_0 mod-path_3 base_10 submod7_1)))))"
"(define-values"
"(module-path-index-resolve/maybe)"
"(lambda(base_11 load?_1)"
"(begin(if(1/module-path-index? base_11)(1/module-path-index-resolve base_11 load?_1) base_11))))"
"(define-values"
"(1/module-path-index-split)"
"(lambda(mpi_4)"
"(begin"
" 'module-path-index-split"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_4)"
"(void)"
"              (let-values () (raise-argument-error 'module-path-index-split \"module-path-index?\" mpi_4)))"
"(values(module-path-index-path mpi_4)(module-path-index-base mpi_4))))))))"
"(define-values"
"(1/module-path-index-submodule)"
"(lambda(mpi_5)"
"(begin"
" 'module-path-index-submodule"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/module-path-index? mpi_5)"
"(void)"
"              (let-values () (raise-argument-error 'module-path-index-submodule \"module-path-index?\" mpi_5)))"
"(if(not(module-path-index-path mpi_5))"
"(let-values(((r_14)(module-path-index-resolved mpi_5)))"
"(if r_14(let-values(((p_7)(1/resolved-module-path-name r_14)))(if(pair? p_7)(cdr p_7) #f)) #f))"
" #f)))))))"
"(define-values"
"(make-self-module-path-index)"
"(case-lambda"
"((name_9)(begin(module-path-index2.1 #f #f name_9 #f)))"
"((name_10 enclosing_0)"
"(make-self-module-path-index"
"(let-values(((name25_0) name_10)((temp26_0)(if enclosing_0(1/module-path-index-resolve enclosing_0) #f)))"
"(build-module-name16.1 unsafe-undefined name25_0 temp26_0))))))"
"(define-values(generic-self-mpis)(make-weak-hash))"
"(define-values(generic-module-name) '|expanded module|)"
"(define-values"
"(make-generic-self-module-path-index)"
"(lambda(self_0)"
"(begin"
"(let-values(((r_15)(resolved-module-path-to-generic-resolved-module-path(module-path-index-resolved self_0))))"
"(begin"
"(start-atomic)"
"(begin0"
"(let-values(((or-part_47)"
"(let-values(((e_9)(hash-ref generic-self-mpis r_15 #f)))"
"(if e_9(ephemeron-value e_9) #f))))"
"(if or-part_47"
" or-part_47"
"(let-values(((mpi_6)(module-path-index2.1 #f #f r_15 #f)))"
"(begin(hash-set! generic-self-mpis r_15(make-ephemeron r_15 mpi_6)) mpi_6))))"
"(end-atomic)))))))"
"(define-values"
"(resolved-module-path-to-generic-resolved-module-path)"
"(lambda(r_16)"
"(begin"
"(let-values(((name_11)(1/resolved-module-path-name r_16)))"
"(1/make-resolved-module-path"
"(if(symbol? name_11) generic-module-name(cons generic-module-name(cdr name_11))))))))"
"(define-values"
"(imitate-generic-module-path-index!)"
"(lambda(mpi_7)"
"(begin"
"(let-values(((r_17)(module-path-index-resolved mpi_7)))"
"(if r_17"
"(let-values()"
"(set-module-path-index-resolved! mpi_7(resolved-module-path-to-generic-resolved-module-path r_17)))"
"(void))))))"
"(define-values"
"(module-path-index-shift)"
"(lambda(mpi_8 from-mpi_0 to-mpi_0)"
"(begin"
"(if(eq? mpi_8 from-mpi_0)"
"(let-values() to-mpi_0)"
"(let-values()"
"(let-values(((base_12)(module-path-index-base mpi_8)))"
"(if(not base_12)"
"(let-values() mpi_8)"
"(let-values()"
"(let-values(((shifted-base_0)(module-path-index-shift base_12 from-mpi_0 to-mpi_0)))"
"(if(eq? shifted-base_0 base_12)"
"(let-values() mpi_8)"
"(let-values(((c1_17)(shift-cache-ref(module-path-index-shift-cache shifted-base_0) mpi_8)))"
"(if c1_17"
" c1_17"
"(let-values()"
"(let-values(((shifted-mpi_0)"
"(module-path-index2.1(module-path-index-path mpi_8) shifted-base_0 #f #f)))"
"(begin"
"(shift-cache-set!(module-path-index-shift-cache! shifted-base_0) mpi_8 shifted-mpi_0)"
" shifted-mpi_0)))))))))))))))"
"(define-values"
"(module-path-index-shift-cache!)"
"(lambda(mpi_9)"
"(begin"
"(let-values(((or-part_56)"
"(let-values(((cache_0)(module-path-index-shift-cache mpi_9)))"
"(if cache_0(if(weak-box-value cache_0) cache_0 #f) #f))))"
"(if or-part_56"
" or-part_56"
"(let-values(((cache_1)(make-weak-box(box '#hasheq()))))"
"(begin(set-module-path-index-shift-cache! mpi_9 cache_1) cache_1)))))))"
"(define-values"
"(shift-cache-ref)"
"(lambda(cache_2 v_43)"
"(begin"
"(if cache_2(let-values(((b_13)(weak-box-value cache_2)))(if b_13(hash-ref(unbox b_13) v_43 #f) #f)) #f))))"
"(define-values"
"(shift-cache-set!)"
"(lambda(cache_3 v_44 r_18)"
"(begin"
"(let-values(((b_14)(weak-box-value cache_3)))"
"(if b_14(let-values()(set-box! b_14(hash-set(unbox b_14) v_44 r_18)))(void))))))"
"(define-values(top-level-module-path-index)(make-self-module-path-index(1/make-resolved-module-path 'top-level)))"
"(define-values(top-level-module-path-index?)(lambda(mpi_10)(begin(eq? top-level-module-path-index mpi_10))))"
"(define-values(non-self-module-path-index?)(lambda(mpi_11)(begin(if(module-path-index-path mpi_11) #t #f))))"
"(define-values"
"(core-module-name-resolver)"
"(case-lambda"
"((name_12 from-namespace_0)(begin(void)))"
"((p_8 enclosing_1 source-stx-stx_0 load?_2)"
"(begin"
"(if(1/module-path? p_8)"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"module-path?\" p_8)))"
"(if(let-values(((or-part_52)(not enclosing_1)))"
"(if or-part_52 or-part_52(1/resolved-module-path? enclosing_1)))"
"(void)"
"        (let-values () (raise-argument-error 'core-module-name-resolver \"resolved-module-path?\" enclosing_1)))"
"(if(if(list? p_8)(if(=(length p_8) 2)(if(eq? 'quote(car p_8))(symbol?(cadr p_8)) #f) #f) #f)"
"(let-values()(1/make-resolved-module-path(cadr p_8)))"
"        (if (if (list? p_8) (if (eq? 'submod (car p_8)) (equal? \"..\" (cadr p_8)) #f) #f)"
"(let-values()"
"(let-values(((lst_28)(cdr p_8)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_28)))"
"((letrec-values(((for-loop_23)"
"(lambda(enclosing_2 lst_29)"
"(begin"
" 'for-loop"
"(if(pair? lst_29)"
"(let-values(((s_36)(unsafe-car lst_29))((rest_11)(unsafe-cdr lst_29)))"
"(let-values(((enclosing_3)"
"(let-values(((enclosing_4) enclosing_2))"
"(let-values(((enclosing_5)"
"(let-values()"
"(let-values(((s27_0) s_36)"
"((enclosing28_0) enclosing_4)"
"((p29_0) p_8))"
"(build-module-name16.1"
" p29_0"
" s27_0"
" enclosing28_0)))))"
"(values enclosing_5)))))"
"(if(not #f)(for-loop_23 enclosing_3 rest_11) enclosing_3)))"
" enclosing_2)))))"
" for-loop_23)"
" enclosing_1"
" lst_28))))"
"          (if (if (list? p_8) (if (eq? 'submod (car p_8)) (equal? \".\" (cadr p_8)) #f) #f)"
"(let-values()"
"(let-values(((lst_30)(cddr p_8)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_30)))"
"((letrec-values(((for-loop_24)"
"(lambda(enclosing_6 lst_31)"
"(begin"
" 'for-loop"
"(if(pair? lst_31)"
"(let-values(((s_37)(unsafe-car lst_31))((rest_12)(unsafe-cdr lst_31)))"
"(let-values(((enclosing_7)"
"(let-values(((enclosing_8) enclosing_6))"
"(let-values(((enclosing_9)"
"(let-values()"
"(let-values(((s30_0) s_37)"
"((enclosing31_0) enclosing_8)"
"((p32_0) p_8))"
"(build-module-name16.1"
" p32_0"
" s30_0"
" enclosing31_0)))))"
"(values enclosing_9)))))"
"(if(not #f)(for-loop_24 enclosing_7 rest_12) enclosing_7)))"
" enclosing_6)))))"
" for-loop_24)"
" enclosing_1"
" lst_30))))"
"(if(if(list? p_8)(eq? 'submod(car p_8)) #f)"
"(let-values()"
"(let-values(((base_13)((1/current-module-name-resolver)(cadr p_8) enclosing_1 #f #f)))"
"(let-values(((lst_32)(cddr p_8)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_32)))"
"((letrec-values(((for-loop_25)"
"(lambda(enclosing_10 lst_33)"
"(begin"
" 'for-loop"
"(if(pair? lst_33)"
"(let-values(((s_38)(unsafe-car lst_33))((rest_13)(unsafe-cdr lst_33)))"
"(let-values(((enclosing_11)"
"(let-values(((enclosing_12) enclosing_10))"
"(let-values(((enclosing_13)"
"(let-values()"
"(let-values(((s33_0) s_38)"
"((enclosing34_0)"
" enclosing_12)"
"((p35_0) p_8))"
"(build-module-name16.1"
" p35_0"
" s33_0"
" enclosing34_0)))))"
"(values enclosing_13)))))"
"(if(not #f)(for-loop_25 enclosing_11 rest_13) enclosing_11)))"
" enclosing_10)))))"
" for-loop_25)"
" base_13"
" lst_32)))))"
"              (let-values () (error 'core-module-name-resolver \"not a supported module path: ~v\" p_8))))))))))"
"(define-values"
"(build-module-name16.1)"
"(lambda(original12_0 name14_0 enclosing15_0)"
"(begin"
" 'build-module-name16"
"(let-values(((name_13) name14_0))"
"(let-values(((enclosing_14) enclosing15_0))"
"(let-values(((orig-name_0)(if(eq? original12_0 unsafe-undefined) name_13 original12_0)))"
"(let-values()"
"(let-values(((enclosing-module-name_0)(if enclosing_14(1/resolved-module-path-name enclosing_14) #f)))"
"(1/make-resolved-module-path"
"(if(not enclosing-module-name_0)"
"(let-values() name_13)"
"(if(symbol? enclosing-module-name_0)"
"(let-values()(list enclosing-module-name_0 name_13))"
"                     (if (equal? name_13 \"..\")"
"(let-values()"
"(if(symbol? enclosing-module-name_0)"
"                           (let-values () (error \"too many \\\"..\\\"s:\" orig-name_0))"
"(if(= 2(length enclosing-module-name_0))"
"(let-values()(car enclosing-module-name_0))"
"(let-values()(reverse$1(cdr(reverse$1 enclosing-module-name_0)))))))"
"(let-values()(append enclosing-module-name_0(list name_13)))))))))))))))"
"(define-values"
"(1/current-module-name-resolver)"
"(make-parameter"
" core-module-name-resolver"
"(lambda(v_45)"
"(begin"
"(if(if(procedure? v_45)(if(procedure-arity-includes? v_45 2)(procedure-arity-includes? v_45 4) #f) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-name-resolver"
"            \"(and/c (procedure-arity-includes/c 2) (procedure-arity-includes/c 4))\""
" v_45)))"
" v_45))))"
"(define-values"
"(1/current-module-declare-name)"
"(make-parameter"
" #f"
"(lambda(r_19)"
"(begin"
"(if(let-values(((or-part_57)(not r_19)))(if or-part_57 or-part_57(1/resolved-module-path? r_19)))"
"(void)"
"         (let-values () (raise-argument-error 'current-module-declare-name \"(or/c #f resolved-module-path?)\" r_19)))"
" r_19))))"
"(define-values"
"(1/current-module-declare-source)"
"(make-parameter"
" #f"
"(lambda(s_39)"
"(begin"
"(if(let-values(((or-part_58)(not s_39)))"
"(if or-part_58"
" or-part_58"
"(let-values(((or-part_59)(symbol? s_39)))"
"(if or-part_59 or-part_59(if(path? s_39)(complete-path? s_39) #f)))))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-module-declare-source \"(or/c #f symbol? (and/c path? complete-path?))\" s_39)))"
" s_39))))"
"(define-values"
"(substitute-module-declare-name)"
"(lambda(default-name_0)"
"(begin"
"(let-values(((current-name_0)(1/current-module-declare-name)))"
"(let-values(((root-name_1)"
"(if current-name_0"
"(resolved-module-path-root-name current-name_0)"
"(if(pair? default-name_0)(car default-name_0) default-name_0))))"
"(1/make-resolved-module-path"
"(if(pair? default-name_0)(cons root-name_1(cdr default-name_0)) root-name_1)))))))"
"(define-values"
"(force/composable)"
"(lambda(root_1)"
"(begin"
"(let-values(((v_46)(unsafe-struct-ref root_1 0)))"
"(if(procedure? v_46)"
"(let-values()"
"(begin"
"(unsafe-struct-set! root_1 0(make-running(object-name v_46)))"
"(call-with-exception-handler"
"(lambda(e_5)(begin(unsafe-struct-set! root_1 0(make-reraise e_5)) e_5))"
"(lambda()"
"((letrec-values(((loop_63)"
"(lambda(v_47)"
"(begin"
" 'loop"
"(if(composable-promise? v_47)"
"(let-values()"
"(let-values(((v*_0)(unsafe-struct-ref v_47 0)))"
"(begin"
"(unsafe-struct-set! v_47 0 root_1)"
"(if(procedure? v*_0)"
"(let-values()(loop_63(v*_0)))"
"(if(pair? v*_0)"
"(let-values()"
"(begin(unsafe-struct-set! root_1 0 v*_0)(unsafe-car v*_0)))"
"(let-values()(loop_63 v*_0)))))))"
"(if(promise? v_47)"
"(let-values()(begin(unsafe-struct-set! root_1 0 v_47)(force v_47)))"
"(let-values()(begin(unsafe-struct-set! root_1 0(list v_47)) v_47))))))))"
" loop_63)"
"(v_46))))))"
"(if(pair? v_46)"
"(let-values()(if(null?(unsafe-cdr v_46))(unsafe-car v_46)(apply values v_46)))"
"(if(composable-promise? v_46)"
"(let-values()(force/composable v_46))"
"(if(null? v_46)"
"(let-values()(values))"
"(if(promise? v_46)"
"(let-values()(force v_46))"
"                  (let-values () (error 'force \"composable promise with invalid contents: ~e\" v_46)))))))))))"
"(define-values"
"(reify-result)"
"(lambda(v_48)"
"(begin"
"(if(pair? v_48)"
"(let-values()(if(null?(unsafe-cdr v_48))(unsafe-car v_48)(apply values v_48)))"
"(if(null? v_48)"
"(let-values()(values))"
"(if(reraise? v_48)"
"(let-values()(v_48))"
"            (let-values () (error 'force \"promise with invalid contents: ~e\" v_48))))))))"
"(define-values"
"(force/generic)"
"(lambda(promise_0)"
"(begin"
"(reify-result"
"(let-values(((v_49)(unsafe-struct-ref promise_0 0)))"
"(if(procedure? v_49)"
"(begin"
"(unsafe-struct-set! promise_0 0(make-running(object-name v_49)))"
"(call-with-exception-handler"
"(lambda(e_10)(begin(unsafe-struct-set! promise_0 0(make-reraise e_10)) e_10))"
"(lambda()"
"(let-values(((vs_0)(call-with-values v_49 list)))"
"(begin(unsafe-struct-set! promise_0 0 vs_0) vs_0)))))"
" v_49))))))"
"(define-values"
"(force)"
"(lambda(promise_1)(begin(if(promise? promise_1)((promise-forcer promise_1) promise_1) promise_1))))"
"(define-values"
"(promise-printer)"
"(lambda(promise_2 port_2 write?_0)"
"(begin"
"((letrec-values(((loop_64)"
"(lambda(v_50)"
"(begin"
" 'loop"
"(if(reraise? v_50)"
"(let-values()"
"(let-values(((r_20)(reraise-val v_50)))"
"(if(exn? r_20)"
"(fprintf"
" port_2"
"                                     (if write?_0 \"#<promise!exn!~s>\" \"#<promise!exn!~a>\")"
"(exn-message r_20))"
"                                    (fprintf port_2 (if write?_0 \"#<promise!raise!~s>\" \"#<promise!raise!~a>\") r_20))))"
"(if(running? v_50)"
"(let-values()"
"(let-values(((r_21)(running-name v_50)))"
"(if r_21"
"                                      (fprintf port_2 \"#<promise:!running!~a>\" r_21)"
"                                      (fprintf port_2 \"#<promise:!running>\"))))"
"(if(procedure? v_50)"
"(let-values()"
"(let-values(((c1_18)(object-name v_50)))"
"(if c1_18"
"                                        ((lambda (n_19) (fprintf port_2 \"#<promise:~a>\" n_19)) c1_18)"
"                                        (let-values () (display \"#<promise>\" port_2)))))"
"(if(promise? v_50)"
"(let-values()(loop_64(unsafe-struct-ref v_50 0)))"
"(if(null? v_50)"
"                                      (let-values () (fprintf port_2 \"#<promise!(values)>\"))"
"(if(null?(cdr v_50))"
"(let-values()"
"                                          (fprintf port_2 (if write?_0 \"#<promise!~s>\" \"#<promise!~a>\") (car v_50)))"
"(let-values()"
"(begin"
"                                            (display \"#<promise!(values\" port_2)"
"                                            (let-values (((fmt_0) (if write?_0 \" ~s\" \" ~a\")))"
"(for-each(lambda(x_22)(fprintf port_2 fmt_0 x_22)) v_50))"
"                                            (display \")>\" port_2)))))))))))))"
" loop_64)"
"(unsafe-struct-ref promise_2 0)))))"
"(define-values"
"(prop:force promise-forcer)"
"(let-values(((prop_0 pred?_0 get_0)"
"(make-struct-type-property"
" 'forcer"
"(lambda(v_51 info_0)"
"(begin"
"(if(if(procedure? v_51)(procedure-arity-includes? v_51 1) #f)"
"(void)"
"                       (let-values () (raise-argument-error 'prop:force \"(any/c . -> . any)\" v_51)))"
" v_51))"
" null"
" #t)))"
"(values prop_0 get_0)))"
"(define-values"
"(struct:promise make-promise promise? promise-val set-promise-val!)"
"(let-values(((struct:_3 make-_3 ?_3 -ref_3 -set!_3)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:force force/generic)(cons prop:custom-write promise-printer))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise)))))"
"(values"
" struct:_3"
" make-_3"
" ?_3"
"(make-struct-field-accessor -ref_3 0 'val)"
"(make-struct-field-mutator -set!_3 0 'val))))"
"(define-values"
"(struct:composable-promise make-composable-promise composable-promise?)"
"(let-values(((struct:_4 make-_4 ?_4 -ref_4 -set!_4)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'composable-promise"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force force/composable))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'composable-promise)))))"
"(values struct:_4 make-_4 ?_4)))"
"(define-values(delay) make-promise)"
"(define-values"
"(struct:reraise make-reraise reraise? reraise-val)"
"(let-values(((struct:_5 make-_5 ?_5 -ref_5 -set!_5)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reraise"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:procedure(lambda(this_0)(raise(reraise-val this_0)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'reraise)))))"
"(values struct:_5 make-_5 ?_5(make-struct-field-accessor -ref_5 0 'val))))"
"(define-values"
"(struct:running make-running running? running-name)"
"(let-values(((struct:_6 make-_6 ?_6 -ref_6 -set!_6)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running"
" #f"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(this_1 port_3 write?_1)"
"                         (fprintf port_3 (if write?_1 \"#<running:~s>\" \"#<running:~a>\") (running-name this_1))))"
"(cons"
" prop:procedure"
"(lambda(this_2)"
"(let-values(((name_14)(running-name this_2)))"
"(if name_14"
"                             (error 'force \"reentrant promise `~.s'\" name_14)"
"                             (error 'force \"reentrant promise\"))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running)))))"
"(values struct:_6 make-_6 ?_6(make-struct-field-accessor -ref_6 0 'name))))"
"(define-values"
"(struct:promise/name make-promise/name promise/name?)"
"(let-values(((struct:_7 make-_7 ?_7 -ref_7 -set!_7)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/name"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_9)((unsafe-struct-ref p_9 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/name)))))"
"(values struct:_7 make-_7 ?_7)))"
"(define-values"
"(struct:promise/strict make-promise/strict promise/strict?)"
"(let-values(((struct:_8 make-_8 ?_8 -ref_8 -set!_8)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/strict"
" struct:promise"
" 0"
" 0"
" #f"
"(list(cons prop:force(lambda(p_10)(reify-result(unsafe-struct-ref p_10 0)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/strict)))))"
"(values struct:_8 make-_8 ?_8)))"
"(define-values"
"(struct:running-thread make-running-thread running-thread? running-thread-thread)"
"(let-values(((struct:_9 make-_9 ?_9 -ref_9 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'running-thread"
" struct:running"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'running-thread)))))"
"(values struct:_9 make-_9 ?_9(make-struct-field-accessor -ref_9 0 'thread))))"
"(define-values"
"(struct:syncinfo"
" make-syncinfo"
" syncinfo?"
" syncinfo-thunk"
" syncinfo-done-evt"
" syncinfo-done-sema"
" syncinfo-access-sema"
" set-syncinfo-thunk!)"
"(let-values(((struct:_10 make-_10 ?_10 -ref_10 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syncinfo"
" #f"
" 4"
" 0"
" #f"
"(list(cons new-prop:procedure(case-lambda)))"
"(current-inspector)"
" #f"
" '(1 2 3)"
" #f"
" 'syncinfo)))))"
"(values"
" struct:_10"
" make-_10"
" ?_10"
"(make-struct-field-accessor -ref_10 0 'thunk)"
"(make-struct-field-accessor -ref_10 1 'done-evt)"
"(make-struct-field-accessor -ref_10 2 'done-sema)"
"(make-struct-field-accessor -ref_10 3 'access-sema)"
"(make-struct-field-mutator -set!_10 0 'thunk))))"
"(define-values"
"(struct:promise/sync make-promise/sync promise/sync?)"
"(let-values(((struct:_11 make-_11 ?_11 -ref_11 -set!_11)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/sync"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_11)"
"(let-values(((v_52)(unsafe-struct-ref p_11 0)))"
"(wrap-evt(if(syncinfo? v_52)(syncinfo-done-evt v_52) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_12)"
"(let-values(((v_53)(unsafe-struct-ref p_12 0)))"
"(reify-result"
"(if(not(syncinfo? v_53))"
"(let-values() v_53)"
"(if(running-thread?(syncinfo-thunk v_53))"
"(let-values()"
"(let-values(((r_22)(syncinfo-thunk v_53)))"
"(if(eq?(running-thread-thread r_22)(current-thread))"
"(r_22)"
"(begin(sync(syncinfo-done-evt v_53))(unsafe-struct-ref p_12 0)))))"
"(let-values()"
"(begin"
"(call-with-semaphore"
"(syncinfo-access-sema v_53)"
"(lambda(p_13 v_54)"
"(let-values(((thunk_4)(syncinfo-thunk v_54)))"
"(let-values(((done_0)(syncinfo-done-sema v_54)))"
"(if(running-thread? thunk_4)"
"(void)"
"(let-values()"
"(begin"
"(set-syncinfo-thunk!"
" v_54"
"(make-running-thread(object-name thunk_4)(current-thread)))"
"(call-with-exception-handler"
"(lambda(e_11)"
"(begin"
"(unsafe-struct-set! p_13 0(make-reraise e_11))"
"(semaphore-post done_0)"
" e_11))"
"(lambda()"
"(begin"
"(unsafe-struct-set! p_13 0(call-with-values thunk_4 list))"
"(semaphore-post done_0))))))))))"
" #f"
" p_12"
" v_53)"
"(unsafe-struct-ref p_12 0)))))))))"
"(cons"
" prop:custom-write"
"(lambda(p_14 port_4 write?_2)"
"(let-values(((v_55)(unsafe-struct-ref p_14 0)))"
"(promise-printer"
"(if(syncinfo? v_55)(make-promise(syncinfo-thunk v_55)) p_14)"
" port_4"
" write?_2)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/sync)))))"
"(values struct:_11 make-_11 ?_11)))"
"(define-values"
"(struct:promise/thread make-promise/thread promise/thread?)"
"(let-values(((struct:_12 make-_12 ?_12 -ref_12 -set!_12)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/thread"
" struct:promise"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:evt"
"(lambda(p_15)"
"(let-values(((v_56)(unsafe-struct-ref p_15 0)))"
"(wrap-evt(if(running? v_56)(running-thread-thread v_56) always-evt) void))))"
"(cons"
" prop:force"
"(lambda(p_16)"
"(let-values(((v_57)(unsafe-struct-ref p_16 0)))"
"(reify-result"
"(if(running-thread? v_57)"
"(let-values(((t_13)(running-thread-thread v_57)))"
"(let-values((()(begin(thread-wait t_13)(values))))"
"(let-values(((v_58)(unsafe-struct-ref p_16 0)))"
"(if(running-thread? v_58)"
"(error"
" 'force"
"                                       \"promise's thread terminated ~a\\n  promise: ~e\""
"                                       \"without result or exception\""
" p_16)"
" v_58))))"
" v_57))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/thread)))))"
"(values struct:_12 make-_12 ?_12)))"
"(define-values"
"(struct:promise/idle make-promise/idle promise/idle?)"
"(let-values(((struct:_13 make-_13 ?_13 -ref_13 -set!_13)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'promise/idle"
" struct:promise/thread"
" 0"
" 0"
" #f"
"(list"
"(cons"
" prop:force"
"(lambda(p_17)"
"(let-values(((v_59)(unsafe-struct-ref p_17 0)))"
"(reify-result"
"(if(procedure? v_59)"
"(let-values(((controller_0)"
"(if(running-thread? v_59)(running-thread-thread v_59)(v_59))))"
"(begin"
"(thread-send controller_0 'force!)"
"(thread-wait controller_0)"
"(unsafe-struct-ref p_17 0)))"
" v_59))))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'promise/idle)))))"
"(values struct:_13 make-_13 ?_13)))"
"(define-values"
"(phase?)"
"(lambda(v_28)(begin(let-values(((or-part_0)(not v_28)))(if or-part_0 or-part_0(exact-integer? v_28))))))"
"(define-values(phase+)(lambda(a_2 b_15)(begin(if a_2(if b_15(+ a_2 b_15) #f) #f))))"
"(define-values(phase-)(lambda(a_29 b_16)(begin(if a_29(if b_16(- a_29 b_16) #f) #f))))"
"(define-values"
"(phase<?)"
"(lambda(a_30 b_17)"
"(begin(if(not b_17)(let-values() #f)(if(not a_30)(let-values() #t)(let-values()(< a_30 b_17)))))))"
"(define-values(zero-phase?)(lambda(a_31)(begin(eq? a_31 0))))"
"(define-values(label-phase?)(lambda(a_32)(begin(not a_32))))"
" (define-values (phase?-string) \"(or/c exact-integer? #f)\")"
"(define-values(make-small-hasheq)(lambda()(begin(box '#hasheq()))))"
"(define-values(make-small-hasheqv)(lambda()(begin(box '#hasheqv()))))"
"(define-values"
"(small-hash-ref)"
"(lambda(small-ht_0 key_10 default_4)(begin(hash-ref(unbox small-ht_0) key_10 default_4))))"
"(define-values"
"(small-hash-set!)"
"(lambda(small-ht_1 key_11 val_3)(begin(set-box! small-ht_1(hash-set(unbox small-ht_1) key_11 val_3)))))"
"(define-values(small-hash-keys)(lambda(small-ht_2)(begin(hash-keys(unbox small-ht_2)))))"
"(define-values"
"(struct:serialize-state"
" serialize-state1.1"
" serialize-state?"
" serialize-state-reachable-scopes"
" serialize-state-bindings-intern"
" serialize-state-bulk-bindings-intern"
" serialize-state-scopes"
" serialize-state-shifted-multi-scopes"
" serialize-state-multi-scope-tables"
" serialize-state-mpi-shifts"
" serialize-state-context-triples"
" serialize-state-props"
" serialize-state-interned-props"
" serialize-state-syntax-context"
" serialize-state-sharing-syntaxes)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'serialize-state"
" #f"
" 12"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11)"
" #f"
" 'serialize-state)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'reachable-scopes)"
"(make-struct-field-accessor -ref_0 1 'bindings-intern)"
"(make-struct-field-accessor -ref_0 2 'bulk-bindings-intern)"
"(make-struct-field-accessor -ref_0 3 'scopes)"
"(make-struct-field-accessor -ref_0 4 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_0 5 'multi-scope-tables)"
"(make-struct-field-accessor -ref_0 6 'mpi-shifts)"
"(make-struct-field-accessor -ref_0 7 'context-triples)"
"(make-struct-field-accessor -ref_0 8 'props)"
"(make-struct-field-accessor -ref_0 9 'interned-props)"
"(make-struct-field-accessor -ref_0 10 'syntax-context)"
"(make-struct-field-accessor -ref_0 11 'sharing-syntaxes))))"
"(define-values"
"(make-serialize-state)"
"(lambda(reachable-scopes_0)"
"(begin"
"(let-values(((state_1)"
"(serialize-state1.1"
" reachable-scopes_0"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(make-hash)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hasheq)"
"(make-hash)"
"(box null)"
"(make-hasheq))))"
"(let-values(((empty-seteq_0)(seteq)))"
"(begin"
"(hash-set!(serialize-state-scopes state_1) empty-seteq_0 empty-seteq_0)"
"(hash-set!(serialize-state-shifted-multi-scopes state_1) empty-seteq_0 empty-seteq_0)"
"(hash-set!(serialize-state-interned-props state_1) empty-seteq_0 empty-seteq_0)"
" state_1))))))"
"(define-values"
"(intern-scopes)"
"(lambda(scs_0 state_2)"
"(begin"
"(let-values(((or-part_60)(hash-ref(serialize-state-scopes state_2) scs_0 #f)))"
"(if or-part_60 or-part_60(begin(hash-set!(serialize-state-scopes state_2) scs_0 scs_0) scs_0))))))"
"(define-values"
"(intern-shifted-multi-scopes)"
"(lambda(sms_0 state_3)"
"(begin"
"(let-values(((or-part_61)(hash-ref(serialize-state-shifted-multi-scopes state_3) sms_0 #f)))"
"(if or-part_61"
" or-part_61"
"(begin(hash-set!(serialize-state-shifted-multi-scopes state_3) sms_0 sms_0) sms_0))))))"
"(define-values"
"(intern-mpi-shifts)"
"(lambda(mpi-shifts_0 state_4)"
"(begin"
"(if(null? mpi-shifts_0)"
"(let-values() null)"
"(let-values()"
"(let-values(((tail_0)(intern-mpi-shifts(cdr mpi-shifts_0) state_4)))"
"(let-values(((tail-table_0)"
"(let-values(((or-part_62)(hash-ref(serialize-state-mpi-shifts state_4) tail_0 #f)))"
"(if or-part_62"
" or-part_62"
"(let-values(((ht_24)(make-hasheq)))"
"(begin(hash-set!(serialize-state-mpi-shifts state_4) tail_0 ht_24) ht_24))))))"
"(let-values(((or-part_63)(hash-ref tail-table_0(car mpi-shifts_0) #f)))"
"(if or-part_63"
" or-part_63"
"(let-values(((v_60)(cons(car mpi-shifts_0) tail_0)))"
"(begin(hash-set! tail-table_0(car mpi-shifts_0) v_60) v_60)))))))))))"
"(define-values"
"(intern-context-triple)"
"(lambda(scs_1 sms_1 mpi-shifts_1 state_5)"
"(begin"
"(let-values(((scs-ht_0)"
"(let-values(((or-part_64)(hash-ref(serialize-state-context-triples state_5) scs_1 #f)))"
"(if or-part_64"
" or-part_64"
"(let-values(((ht_25)(make-hasheq)))"
"(begin(hash-set!(serialize-state-context-triples state_5) scs_1 ht_25) ht_25))))))"
"(let-values(((sms-ht_0)"
"(let-values(((or-part_65)(hash-ref scs-ht_0 sms_1 #f)))"
"(if or-part_65"
" or-part_65"
"(let-values(((ht_23)(make-hasheq)))(begin(hash-set! scs-ht_0 sms_1 ht_23) ht_23))))))"
"(let-values(((or-part_66)(hash-ref sms-ht_0 mpi-shifts_1 #f)))"
"(if or-part_66"
" or-part_66"
"(let-values(((vec_13)(vector-immutable scs_1 sms_1 mpi-shifts_1)))"
"(begin(hash-set! sms-ht_0 mpi-shifts_1 vec_13) vec_13)))))))))"
"(define-values"
"(intern-properties)"
"(lambda(all-props_0 get-preserved-props_0 state_6)"
"(begin"
"(let-values(((v_49)(hash-ref(serialize-state-props state_6) all-props_0 'no)))"
"(if(eq? v_49 'no)"
"(let-values()"
"(let-values(((preserved-props_0)(get-preserved-props_0)))"
"(let-values(((p_18)"
"(if(zero?(hash-count preserved-props_0))"
"(let-values() #f)"
"(let-values(((c1_19)"
"(hash-ref(serialize-state-interned-props state_6) preserved-props_0 #f)))"
"(if c1_19"
"((lambda(p_19) p_19) c1_19)"
"(let-values()"
"(begin"
"(hash-set!"
"(serialize-state-interned-props state_6)"
" preserved-props_0"
" preserved-props_0)"
" preserved-props_0)))))))"
"(begin(hash-set!(serialize-state-props state_6) all-props_0 p_18) p_18))))"
"(let-values() v_49))))))"
"(define-values"
"(push-syntax-context!)"
"(lambda(state_7 v_53)"
"(begin(let-values(((b_18)(serialize-state-syntax-context state_7)))(set-box! b_18(cons v_53(unbox b_18)))))))"
"(define-values"
"(get-syntax-context)"
"(lambda(state_8)"
"(begin"
"(let-values(((b_19)(serialize-state-syntax-context state_8)))"
"(if(null?(unbox b_19)) #f(car(unbox b_19)))))))"
"(define-values"
"(pop-syntax-context!)"
"(lambda(state_9)"
"(begin(let-values(((b_20)(serialize-state-syntax-context state_9)))(set-box! b_20(cdr(unbox b_20)))))))"
"(define-values"
"(immutable-prefab-struct-key)"
"(lambda(v_28)"
"(begin(let-values(((k_8)(prefab-struct-key v_28)))(if k_8(if(all-fields-immutable? k_8) k_8 #f) #f)))))"
"(define-values"
"(all-fields-immutable?)"
"(lambda(k_9)"
"(begin"
"(let-values(((or-part_11)(symbol? k_9)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_2)(null? k_9)))"
"(if or-part_2"
" or-part_2"
"(let-values(((rk_0)(cdr k_9)))"
"(let-values(((rk_1)(if(if(pair? rk_0)(exact-integer?(car rk_0)) #f)(cdr rk_0) rk_0)))"
"(let-values(((rk_2)"
"(if(if(pair? rk_1)(pair?(car rk_1)) #f)"
"(if(zero?(caar rk_1))(cdr rk_1)(cons '#(1)(cdr rk_1)))"
" rk_1)))"
"(if(if(pair? rk_2)(vector?(car rk_2)) #f)"
"(if(zero?(vector-length(car rk_2)))(all-fields-immutable?(cdr rk_2)) #f)"
"(all-fields-immutable? rk_2))))))))))))"
" (define-values (not-an-fX.1) (lambda (who_7 v_61) (begin 'not-an-fX (raise-argument-error who_7 \"fixnum?\" v_61))))"
"(define-values"
"(datum-map-slow)"
"(lambda(tail?_0 s_40 f_21 seen_0)"
"(begin"
"((letrec-values(((loop_65)"
"(lambda(tail?_1 s_7 prev-seen_0)"
"(begin"
" 'loop"
"(let-values(((seen_1)"
"(if(if prev-seen_0(datum-has-elements? s_7) #f)"
"(let-values()"
"(if(hash-ref prev-seen_0 s_7 #f)"
"(let-values()((hash-ref prev-seen_0 'cycle-fail) s_7))"
"(let-values()(hash-set prev-seen_0 s_7 #t))))"
"(let-values() prev-seen_0))))"
"(if(null? s_7)"
"(let-values()(f_21 tail?_1 s_7))"
"(if(pair? s_7)"
"(let-values()"
"(f_21 tail?_1(cons(loop_65 #f(car s_7) seen_1)(loop_65 #t(cdr s_7) seen_1))))"
"(if(let-values(((or-part_67)(symbol? s_7)))"
"(if or-part_67"
" or-part_67"
"(let-values(((or-part_68)(boolean? s_7)))"
"(if or-part_68 or-part_68(number? s_7)))))"
"(let-values()(f_21 #f s_7))"
"(if(vector? s_7)"
"(let-values()"
"(f_21"
" #f"
"(vector->immutable-vector"
"(let-values(((len_7)(vector-length s_7)))"
"(begin"
"(if(exact-nonnegative-integer? len_7)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                   \"exact-nonnegative-integer?\""
" len_7)))"
"(let-values(((v_62)(make-vector len_7 0)))"
"(begin"
"(if(zero? len_7)"
"(void)"
"(let-values()"
"(let-values(((vec_14 len_8)"
"(let-values(((vec_15) s_7))"
"(begin"
"(check-vector vec_15)"
"(values"
" vec_15"
"(unsafe-vector-length vec_15))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_21)"
"(lambda(i_40 pos_6)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_6 len_8)"
"(let-values(((e_12)"
"(unsafe-vector-ref"
" vec_14"
" pos_6)))"
"(let-values(((i_41)"
"(let-values(((i_42)"
" i_40))"
"(let-values(((i_43)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_62"
" i_42"
"(let-values()"
"(loop_65"
" #f"
" e_12"
" seen_1)))"
"(unsafe-fx+"
" 1"
" i_42)))))"
"(values i_43)))))"
"(if(if(not"
"((lambda x_23"
"(unsafe-fx="
" i_41"
" len_7))"
" e_12))"
"(not #f)"
" #f)"
"(for-loop_21"
" i_41"
"(unsafe-fx+ 1 pos_6))"
" i_41)))"
" i_40)))))"
" for-loop_21)"
" 0"
" 0)))))"
" v_62)))))))"
"(if(box? s_7)"
"(let-values()(f_21 #f(box-immutable(loop_65 #f(unbox s_7) seen_1))))"
"(let-values(((c1_20)(immutable-prefab-struct-key s_7)))"
"(if c1_20"
"((lambda(key_12)"
"(f_21"
" #f"
"(apply"
" make-prefab-struct"
" key_12"
"(reverse$1"
"(let-values(((v*_1 start*_0 stop*_1 step*_0)"
"(normalise-inputs"
" 'in-vector"
"                                                                 \"vector\""
"(lambda(x_14)(vector? x_14))"
"(lambda(x_24)(unsafe-vector-length x_24))"
"(struct->vector s_7)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_26)"
"(lambda(fold-var_17 idx_0)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< idx_0 stop*_1)"
"(let-values(((e_13)"
"(unsafe-vector-ref"
" v*_1"
" idx_0)))"
"(let-values(((fold-var_18)"
"(let-values(((fold-var_19)"
" fold-var_17))"
"(let-values(((fold-var_20)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_65"
" #f"
" e_13"
" seen_1))"
" fold-var_19))))"
"(values"
" fold-var_20)))))"
"(if(not #f)"
"(for-loop_26"
" fold-var_18"
"(unsafe-fx+ idx_0 1))"
" fold-var_18)))"
" fold-var_17)))))"
" for-loop_26)"
" null"
" start*_0)))))))"
" c1_20)"
"(if(if(hash? s_7)(immutable? s_7) #f)"
"(let-values()"
"(if(hash-eq? s_7)"
"(let-values()"
"(f_21"
" #f"
"(let-values(((ht_26) s_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_26)))"
"((letrec-values(((for-loop_27)"
"(lambda(table_15 i_44)"
"(begin"
" 'for-loop"
"(if i_44"
"(let-values(((k_10 v_63)"
"(hash-iterate-key+value"
" ht_26"
" i_44)))"
"(let-values(((table_16)"
"(let-values(((table_17)"
" table_15))"
"(let-values(((table_18)"
"(let-values()"
"(let-values(((key_13"
" val_4)"
"(let-values()"
"(values"
" k_10"
"(loop_65"
" #f"
" v_63"
" seen_1)))))"
"(hash-set"
" table_17"
" key_13"
" val_4)))))"
"(values"
" table_18)))))"
"(if(not #f)"
"(for-loop_27"
" table_16"
"(hash-iterate-next ht_26 i_44))"
" table_16)))"
" table_15)))))"
" for-loop_27)"
" '#hasheq()"
"(hash-iterate-first ht_26))))))"
"(if(hash-eqv? s_7)"
"(let-values()"
"(f_21"
" #f"
"(let-values(((ht_27) s_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_27)))"
"((letrec-values(((for-loop_28)"
"(lambda(table_19 i_45)"
"(begin"
" 'for-loop"
"(if i_45"
"(let-values(((k_11 v_64)"
"(hash-iterate-key+value"
" ht_27"
" i_45)))"
"(let-values(((table_10)"
"(let-values(((table_11)"
" table_19))"
"(let-values(((table_12)"
"(let-values()"
"(let-values(((key_14"
" val_5)"
"(let-values()"
"(values"
" k_11"
"(loop_65"
" #f"
" v_64"
" seen_1)))))"
"(hash-set"
" table_11"
" key_14"
" val_5)))))"
"(values"
" table_12)))))"
"(if(not #f)"
"(for-loop_28"
" table_10"
"(hash-iterate-next"
" ht_27"
" i_45))"
" table_10)))"
" table_19)))))"
" for-loop_28)"
" '#hasheqv()"
"(hash-iterate-first ht_27))))))"
"(let-values()"
"(f_21"
" #f"
"(let-values(((ht_25) s_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_25)))"
"((letrec-values(((for-loop_29)"
"(lambda(table_20 i_46)"
"(begin"
" 'for-loop"
"(if i_46"
"(let-values(((k_12 v_65)"
"(hash-iterate-key+value"
" ht_25"
" i_46)))"
"(let-values(((table_21)"
"(let-values(((table_22)"
" table_20))"
"(let-values(((table_23)"
"(let-values()"
"(let-values(((key_15"
" val_6)"
"(let-values()"
"(values"
" k_12"
"(loop_65"
" #f"
" v_65"
" seen_1)))))"
"(hash-set"
" table_22"
" key_15"
" val_6)))))"
"(values"
" table_23)))))"
"(if(not #f)"
"(for-loop_29"
" table_21"
"(hash-iterate-next"
" ht_25"
" i_46))"
" table_21)))"
" table_20)))))"
" for-loop_29)"
" '#hash()"
"(hash-iterate-first ht_25)))))))))"
"(let-values()(f_21 #f s_7)))))))))))))))"
" loop_65)"
" tail?_0"
" s_40"
" seen_0))))"
"(define-values"
"(datum-has-elements?)"
"(lambda(d_0)"
"(begin"
"(let-values(((or-part_69)(pair? d_0)))"
"(if or-part_69"
" or-part_69"
"(let-values(((or-part_24)(vector? d_0)))"
"(if or-part_24"
" or-part_24"
"(let-values(((or-part_70)(box? d_0)))"
"(if or-part_70"
" or-part_70"
"(let-values(((or-part_71)(immutable-prefab-struct-key d_0)))"
"(if or-part_71"
" or-part_71"
"(if(hash? d_0)(if(immutable? d_0)(positive?(hash-count d_0)) #f) #f))))))))))))"
"(define-values"
"(struct:preserved-property-value"
" preserved-property-value1.1"
" preserved-property-value?"
" preserved-property-value-content)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'preserved-property-value"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'preserved-property-value)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'content))))"
"(define-values"
"(plain-property-value)"
"(lambda(v_66)(begin(if(preserved-property-value? v_66)(preserved-property-value-content v_66) v_66))))"
"(define-values"
"(check-value-to-preserve)"
"(lambda(v_67 syntax?_0)"
"(begin"
"(let-values(((check-preserve_0)"
"(lambda(tail?_2 v_68)"
"(begin"
" 'check-preserve"
"(begin"
"(if(let-values(((or-part_72)(null? v_68)))"
"(if or-part_72"
" or-part_72"
"(let-values(((or-part_73)(boolean? v_68)))"
"(if or-part_73"
" or-part_73"
"(let-values(((or-part_74)(symbol? v_68)))"
"(if or-part_74"
" or-part_74"
"(let-values(((or-part_75)(number? v_68)))"
"(if or-part_75"
" or-part_75"
"(let-values(((or-part_76)(char? v_68)))"
"(if or-part_76"
" or-part_76"
"(let-values(((or-part_77)(string? v_68)))"
"(if or-part_77"
" or-part_77"
"(let-values(((or-part_29)(bytes? v_68)))"
"(if or-part_29"
" or-part_29"
"(let-values(((or-part_78)(regexp? v_68)))"
"(if or-part_78"
" or-part_78"
"(let-values(((or-part_79)(syntax?_0 v_68)))"
"(if or-part_79"
" or-part_79"
"(let-values(((or-part_80)(pair? v_68)))"
"(if or-part_80"
" or-part_80"
"(let-values(((or-part_81)(vector? v_68)))"
"(if or-part_81"
" or-part_81"
"(let-values(((or-part_82)(box? v_68)))"
"(if or-part_82"
" or-part_82"
"(let-values(((or-part_83)(hash? v_68)))"
"(if or-part_83"
" or-part_83"
"(immutable-prefab-struct-key"
" v_68)))))))))))))))))))))))))))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'write"
"                               \"disallowed value in preserved syntax property\""
"                               \"value\""
" v_68)))"
" v_68)))))"
"(let-values(((s_41) v_67)((f_22) check-preserve_0)((gf_0) check-preserve_0)((seen_2) disallow-cycles$1))"
"((letrec-values(((loop_66)"
"(lambda(tail?_3 s_42 prev-depth_0)"
"(begin"
" 'loop"
"(let-values(((depth_0)(fx+ 1 prev-depth_0)))"
"(if(if seen_2(fx> depth_0 32) #f)"
"(let-values()"
"(datum-map-slow tail?_3 s_42(lambda(tail?_4 s_43)(gf_0 tail?_4 s_43)) seen_2))"
"(if(null? s_42)"
"(let-values()(f_22 tail?_3 s_42))"
"(if(pair? s_42)"
"(let-values()"
"(f_22"
" tail?_3"
"(cons(loop_66 #f(car s_42) depth_0)(loop_66 #t(cdr s_42) depth_0))))"
"(if(symbol? s_42)"
"(let-values()(f_22 #f s_42))"
"(if(boolean? s_42)"
"(let-values()(f_22 #f s_42))"
"(if(number? s_42)"
"(let-values()(f_22 #f s_42))"
"(if(let-values(((or-part_54)(vector? s_42)))"
"(if or-part_54"
" or-part_54"
"(let-values(((or-part_7)(box? s_42)))"
"(if or-part_7"
" or-part_7"
"(let-values(((or-part_8)(prefab-struct-key s_42)))"
"(if or-part_8 or-part_8(hash? s_42)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_3"
" s_42"
"(lambda(tail?_5 s_44)(gf_0 tail?_5 s_44))"
" seen_2))"
"(let-values()(gf_0 #f s_42))))))))))))))"
" loop_66)"
" #f"
" s_41"
" 0))))))"
"(define-values"
"(disallow-cycles$1)"
"(hash"
" 'cycle-fail"
"   (lambda (v_69) (raise-arguments-error 'write \"disallowed cycle in preserved syntax property\" \"at\" v_69))))"
"(define-values"
"(tamper?)"
"(lambda(v_28)"
"(begin"
"(let-values(((or-part_0)(not v_28)))"
"(if or-part_0 or-part_0(let-values(((or-part_1)(symbol? v_28)))(if or-part_1 or-part_1(set? v_28))))))))"
"(define-values(tamper-tainted?)(lambda(v_70)(begin(symbol? v_70))))"
"(define-values(tamper-armed?)(lambda(v_71)(begin(set? v_71))))"
"(define-values(tamper-clean?)(lambda(v_72)(begin(not v_72))))"
"(define-values"
"(tamper-tainted-for-content)"
"(lambda(v_73)(begin(if(datum-has-elements? v_73) 'tainted/need-propagate 'tainted))))"
"(define-values(tamper-needs-propagate?)(lambda(t_14)(begin(eq? t_14 'tainted/need-propagate))))"
"(define-values(tamper-propagated)(lambda(t_15)(begin(if(eq? t_15 'tainted/need-propagate) 'tainted t_15))))"
"(define-values(serialize-tamper)(lambda(t_16)(begin(if(tamper-armed? t_16) 'armed t_16))))"
"(define-values(current-arm-inspectors)(make-parameter(seteq)))"
"(define-values(deserialize-tamper)(lambda(t_17)(begin(if(eq? t_17 'armed)(current-arm-inspectors) t_17))))"
"(define-values"
"(struct:syntax"
" syntax1.1"
" syntax?$1"
" syntax-content"
" syntax-scopes"
" syntax-shifted-multi-scopes"
" syntax-scope-propagations+tamper"
" syntax-mpi-shifts"
" syntax-srcloc"
" syntax-props"
" syntax-inspector"
" set-syntax-content!"
" set-syntax-scope-propagations+tamper!)"
"(let-values(((struct:_14 make-_14 ?_14 -ref_14 -set!_14)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:reach-scopes"
"(lambda(s_45 reach_0)"
"(let-values(((prop_1)(syntax-scope-propagations+tamper s_45)))"
"(begin"
"(reach_0"
"(if(propagation?$1 prop_1)((propagation-ref prop_1) s_45)(syntax-content s_45)))"
"(reach_0(syntax-scopes s_45))"
"(reach_0(syntax-shifted-multi-scopes s_45))"
"(let-values(((ht_17)(syntax-props s_45)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_17)))"
"((letrec-values(((for-loop_3)"
"(lambda(i_47)"
"(begin"
" 'for-loop"
"(if i_47"
"(let-values(((k_13 v_74)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_17"
" i_47)))"
"(let-values((()"
"(let-values()"
"(if(preserved-property-value? v_74)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(reach_0"
"(plain-property-value"
" v_74)))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_3"
"(unsafe-immutable-hash-iterate-next ht_17 i_47))"
"(values))))"
"(values))))))"
" for-loop_3)"
"(unsafe-immutable-hash-iterate-first ht_17))))"
"(void)"
"(reach_0(syntax-srcloc s_45))))))"
"(cons"
" prop:serialize"
"(lambda(s_46 ser-push!_1 state_10)"
"(let-values(((prop_2)(syntax-scope-propagations+tamper s_46)))"
"(let-values(((content_0)"
"(if(propagation?$1 prop_2)"
"((propagation-ref prop_2) s_46)"
"(syntax-content s_46))))"
"(let-values(((properties_0)"
"(intern-properties"
"(syntax-props s_46)"
"(lambda()"
"(let-values(((ht_28)(syntax-props s_46)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_28)))"
"((letrec-values(((for-loop_30)"
"(lambda(table_24 i_48)"
"(begin"
" 'for-loop"
"(if i_48"
"(let-values(((k_14 v_75)"
"(hash-iterate-key+value"
" ht_28"
" i_48)))"
"(let-values(((table_25)"
"(let-values(((table_26)"
" table_24))"
"(if(preserved-property-value?"
" v_75)"
"(let-values(((table_27)"
" table_26))"
"(let-values(((table_28)"
"(let-values()"
"(let-values(((key_16"
" val_7)"
"(let-values()"
"(values"
" k_14"
"(check-value-to-preserve"
"(plain-property-value"
" v_75)"
" syntax?$1)))))"
"(hash-set"
" table_27"
" key_16"
" val_7)))))"
"(values table_28)))"
" table_26))))"
"(if(not #f)"
"(for-loop_30"
" table_25"
"(hash-iterate-next ht_28 i_48))"
" table_25)))"
" table_24)))))"
" for-loop_30)"
" '#hasheq()"
"(hash-iterate-first ht_28)))))"
" state_10)))"
"(let-values(((tamper_0)(serialize-tamper(syntax-tamper s_46))))"
"(let-values(((context-triple_0)"
"(intern-context-triple"
"(intern-scopes(syntax-scopes s_46) state_10)"
"(intern-shifted-multi-scopes"
"(syntax-shifted-multi-scopes s_46)"
" state_10)"
"(intern-mpi-shifts(syntax-mpi-shifts s_46) state_10)"
" state_10)))"
"(let-values(((stx-state_0)(get-syntax-context state_10)))"
"(if(let-values(((or-part_39) properties_0))(if or-part_39 or-part_39 tamper_0))"
"(let-values()"
"(begin"
"(ser-push!_1 'tag '#:syntax+props)"
"(push-syntax-context! state_10 #f)"
"(ser-push!_1 content_0)"
"(pop-syntax-context! state_10)"
"(ser-push!_1 'reference context-triple_0)"
"(ser-push!_1 'reference(syntax-srcloc s_46))"
"(ser-push!_1 properties_0)"
"(ser-push!_1 tamper_0)"
"(if stx-state_0"
"(let-values()(set-syntax-state-all-sharing?! stx-state_0 #f))"
"(void))))"
"(let-values()"
"(let-values(((sharing-mode_0)"
"(hash-ref"
"(serialize-state-sharing-syntaxes state_10)"
" s_46"
" 'unknown)))"
"(begin"
"(if(eq? sharing-mode_0 'share)"
"(let-values()"
"(begin"
"(ser-push!_1 'tag '#:datum->syntax)"
"(ser-push!_1(syntax->datum$1 s_46))))"
"(if(eq? sharing-mode_0 'unknown)"
"(let-values()"
"(let-values((()(begin(ser-push!_1 'tag '#:syntax)(values))))"
"(let-values(((this-state_0)"
"(if(no-pair-syntax-in-cdr? content_0)"
"(syntax-state17.1"
" #t"
" context-triple_0"
"(syntax-srcloc s_46))"
" #f)))"
"(let-values((()"
"(begin"
"(push-syntax-context! state_10 this-state_0)"
"(values))))"
"(let-values((()(begin(ser-push!_1 content_0)(values))))"
"(let-values((()"
"(begin"
"(pop-syntax-context! state_10)"
"(values))))"
"(let-values(((new-sharing-mode_0)"
"(if(if this-state_0"
"(syntax-state-all-sharing?"
" this-state_0)"
" #f)"
" 'share"
" 'none)))"
"(begin"
"(hash-set!"
"(serialize-state-sharing-syntaxes state_10)"
" s_46"
"(if(datum-has-elements? content_0)"
" new-sharing-mode_0"
" 'none))"
"(if(if stx-state_0(eq? new-sharing-mode_0 'none) #f)"
"(let-values()"
"(set-syntax-state-all-sharing?! stx-state_0 #f))"
"(void))))))))))"
"(let-values()"
"(begin"
"(ser-push!_1 'tag '#:syntax)"
"(push-syntax-context! state_10 #f)"
"(ser-push!_1 content_0)"
"(pop-syntax-context! state_10)))))"
"(ser-push!_1 'reference context-triple_0)"
"(ser-push!_1 'reference(syntax-srcloc s_46))"
"(if stx-state_0"
"(let-values()"
"(if(if(eq?"
" context-triple_0"
"(syntax-state-context-triple stx-state_0))"
"(equal?(syntax-srcloc s_46)(syntax-state-srcloc stx-state_0))"
" #f)"
"(void)"
"(let-values()(set-syntax-state-all-sharing?! stx-state_0 #f))))"
"(void))))))))))))))"
"(cons"
" prop:custom-write"
"(lambda(s_47 port_5 mode_5)"
"                         (let-values ((() (begin (write-string \"#<syntax\" port_5) (values))))"
"(let-values(((srcloc_0)(syntax-srcloc s_47)))"
"(begin"
"(if srcloc_0"
"(let-values()"
"(let-values(((srcloc-str_0)(srcloc->string srcloc_0)))"
"                                     (if srcloc-str_0 (let-values () (fprintf port_5 \":~a\" srcloc-str_0)) (void))))"
"(void))"
"                               (fprintf port_5 \" ~.s\" (syntax->datum$1 s_47))"
"                               (write-string \">\" port_5)))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'syntax)))))"
"(values"
" struct:_14"
" make-_14"
" ?_14"
"(make-struct-field-accessor -ref_14 0 'content)"
"(make-struct-field-accessor -ref_14 1 'scopes)"
"(make-struct-field-accessor -ref_14 2 'shifted-multi-scopes)"
"(make-struct-field-accessor -ref_14 3 'scope-propagations+tamper)"
"(make-struct-field-accessor -ref_14 4 'mpi-shifts)"
"(make-struct-field-accessor -ref_14 5 'srcloc)"
"(make-struct-field-accessor -ref_14 6 'props)"
"(make-struct-field-accessor -ref_14 7 'inspector)"
"(make-struct-field-mutator -set!_14 0 'content)"
"(make-struct-field-mutator -set!_14 3 'scope-propagations+tamper))))"
"(define-values(prop:propagation propagation?$1 propagation-ref)(make-struct-type-property 'propagation))"
"(define-values"
"(prop:propagation-tamper propagation-tamper? propagation-tamper-ref)"
"(make-struct-type-property 'propagation-tamper))"
"(define-values"
"(prop:propagation-set-tamper propagation-set-tamper? propagation-set-tamper-ref)"
"(make-struct-type-property 'propagation-set-tamper))"
"(define-values"
"(syntax-tamper)"
"(lambda(s_32)"
"(begin"
"(let-values(((v_76)(syntax-scope-propagations+tamper s_32)))"
"(if(tamper? v_76) v_76((propagation-tamper-ref v_76) v_76))))))"
"(define-values(empty-scopes)(seteq))"
"(define-values(empty-shifted-multi-scopes)(seteq))"
"(define-values(empty-mpi-shifts) null)"
"(define-values(empty-props) '#hasheq())"
"(define-values"
"(empty-syntax)"
"(syntax1.1 #f empty-scopes empty-shifted-multi-scopes #f empty-mpi-shifts #f empty-props #f))"
"(define-values(identifier?)(lambda(s_48)(begin(if(syntax?$1 s_48)(symbol?(syntax-content s_48)) #f))))"
"(define-values(syntax-identifier?)(lambda(s_49)(begin(symbol?(syntax-content s_49)))))"
"(define-values"
"(syntax->datum$1)"
"(lambda(s_50)"
"(begin"
" 'syntax->datum"
"(let-values(((s_51) s_50)"
"((f_23)(lambda(tail?_6 x_25)(begin 'f x_25)))"
"((d->s_0)(lambda(s_52 d_1)(begin 'd->s d_1)))"
"((s-e_0) syntax-content)"
"((seen_3) #f))"
"((letrec-values(((loop_59)"
"(lambda(s_53)"
"(begin"
" 'loop"
"(let-values(((s_54) s_53)"
"((f_24) f_23)"
"((gf_1)"
"(lambda(tail?_7 v_77)"
"(begin"
" 'gf"
"(if(syntax?$1 v_77)"
"(let-values()(d->s_0 v_77(loop_59(s-e_0 v_77))))"
"(let-values()(f_23 tail?_7 v_77))))))"
"((seen_4) seen_3))"
"((letrec-values(((loop_67)"
"(lambda(tail?_8 s_55 prev-depth_1)"
"(begin"
" 'loop"
"(let-values(((depth_1)(fx+ 1 prev-depth_1)))"
"(if(if seen_4(fx> depth_1 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_8"
" s_55"
"(lambda(tail?_9 s_56)(gf_1 tail?_9 s_56))"
" seen_4))"
"(if(null? s_55)"
"(let-values()(f_24 tail?_8 s_55))"
"(if(pair? s_55)"
"(let-values()"
"(f_24"
" tail?_8"
"(cons"
"(loop_67 #f(car s_55) depth_1)"
"(loop_67 #t(cdr s_55) depth_1))))"
"(if(symbol? s_55)"
"(let-values()(f_24 #f s_55))"
"(if(boolean? s_55)"
"(let-values()(f_24 #f s_55))"
"(if(number? s_55)"
"(let-values()(f_24 #f s_55))"
"(if(let-values(((or-part_84)(vector? s_55)))"
"(if or-part_84"
" or-part_84"
"(let-values(((or-part_85)(box? s_55)))"
"(if or-part_85"
" or-part_85"
"(let-values(((or-part_86)"
"(prefab-struct-key s_55)))"
"(if or-part_86"
" or-part_86"
"(hash? s_55)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_8"
" s_55"
"(lambda(tail?_10 s_57)(gf_1 tail?_10 s_57))"
" seen_4))"
"(let-values()(gf_1 #f s_55))))))))))))))"
" loop_67)"
" #f"
" s_54"
" 0))))))"
" loop_59)"
" s_51)))))"
"(define-values"
"(datum->syntax$1)"
"(let-values(((datum->syntax6_0)"
"(lambda(stx-c4_0 s5_0 stx-l2_0 stx-p3_0)"
"(begin"
" 'datum->syntax6"
"(let-values(((stx-c_0) stx-c4_0))"
"(let-values(((s_58) s5_0))"
"(let-values(((stx-l_0) stx-l2_0))"
"(let-values(((stx-p_0) stx-p3_0))"
"(let-values()"
"(if(syntax?$1 s_58)"
"(let-values() s_58)"
"(let-values()"
"(let-values(((wrap_0)"
"(lambda(content_1)"
"(begin"
" 'wrap"
"(syntax1.1"
" content_1"
"(if stx-c_0(syntax-scopes stx-c_0) empty-scopes)"
"(if stx-c_0"
"(syntax-shifted-multi-scopes stx-c_0)"
" empty-shifted-multi-scopes)"
"(if stx-c_0"
"(if(syntax-tamper stx-c_0)"
"(tamper-tainted-for-content content_1)"
" #f)"
" #f)"
"(if stx-c_0(syntax-mpi-shifts stx-c_0) empty-mpi-shifts)"
"(if stx-l_0(syntax-srcloc stx-l_0) #f)"
" empty-props"
"(if stx-c_0(syntax-inspector stx-c_0) #f))))))"
"(let-values(((result-s_0)"
"(let-values(((s_59) s_58)"
"((f_25)"
"(lambda(tail?_11 x_26)"
"(begin 'f(if tail?_11 x_26(wrap_0 x_26)))))"
"((s->_0)(lambda(s_60)(begin 's-> s_60)))"
"((seen_5) disallow-cycles))"
"(let-values(((s_61) s_59)"
"((f_26) f_25)"
"((gf_2)"
"(lambda(tail?_12 v_78)"
"(begin"
" 'gf"
"(if(syntax?$1 v_78)"
"(let-values()(s->_0 v_78))"
"(let-values()(f_25 tail?_12 v_78))))))"
"((seen_6) seen_5))"
"((letrec-values(((loop_68)"
"(lambda(tail?_13 s_62 prev-depth_2)"
"(begin"
" 'loop"
"(let-values(((depth_2)"
"(fx+ 1 prev-depth_2)))"
"(if(if seen_6(fx> depth_2 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_13"
" s_62"
"(lambda(tail?_14 s_63)"
"(gf_2 tail?_14 s_63))"
" seen_6))"
"(if(null? s_62)"
"(let-values()(f_26 tail?_13 s_62))"
"(if(pair? s_62)"
"(let-values()"
"(f_26"
" tail?_13"
"(cons"
"(loop_68 #f(car s_62) depth_2)"
"(loop_68"
" #t"
"(cdr s_62)"
" depth_2))))"
"(if(symbol? s_62)"
"(let-values()(f_26 #f s_62))"
"(if(boolean? s_62)"
"(let-values()(f_26 #f s_62))"
"(if(number? s_62)"
"(let-values()(f_26 #f s_62))"
"(if(let-values(((or-part_87)"
"(vector?"
" s_62)))"
"(if or-part_87"
" or-part_87"
"(let-values(((or-part_88)"
"(box?"
" s_62)))"
"(if or-part_88"
" or-part_88"
"(let-values(((or-part_89)"
"(prefab-struct-key"
" s_62)))"
"(if or-part_89"
" or-part_89"
"(hash?"
" s_62)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_13"
" s_62"
"(lambda(tail?_15 s_64)"
"(gf_2 tail?_15 s_64))"
" seen_6))"
"(let-values()"
"(gf_2"
" #f"
" s_62))))))))))))))"
" loop_68)"
" #f"
" s_61"
" 0)))))"
"(if(if stx-p_0(not(eq?(syntax-props stx-p_0) empty-props)) #f)"
"(let-values(((the-struct_0) result-s_0))"
"(if(syntax?$1 the-struct_0)"
"(let-values(((props19_0)(syntax-props stx-p_0)))"
"(syntax1.1"
"(syntax-content the-struct_0)"
"(syntax-scopes the-struct_0)"
"(syntax-shifted-multi-scopes the-struct_0)"
"(syntax-scope-propagations+tamper the-struct_0)"
"(syntax-mpi-shifts the-struct_0)"
"(syntax-srcloc the-struct_0)"
" props19_0"
"(syntax-inspector the-struct_0)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_0)))"
" result-s_0))))))))))))))"
"(case-lambda"
"((stx-c_1 s_65)(begin 'datum->syntax(datum->syntax6_0 stx-c_1 s_65 #f #f)))"
"((stx-c_2 s_66 stx-l_1 stx-p3_1)(datum->syntax6_0 stx-c_2 s_66 stx-l_1 stx-p3_1))"
"((stx-c_3 s_67 stx-l2_1)(datum->syntax6_0 stx-c_3 s_67 stx-l2_1 #f)))))"
"(define-values"
"(disallow-cycles)"
"(hasheq"
" 'cycle-fail"
"   (lambda (s_68) (raise-arguments-error 'datum->syntax \"cannot create syntax from cyclic datum\" \"datum\" s_68))))"
"(define-values"
"(struct:syntax-state"
" syntax-state17.1"
" syntax-state?"
" syntax-state-all-sharing?"
" syntax-state-context-triple"
" syntax-state-srcloc"
" set-syntax-state-all-sharing?!)"
"(let-values(((struct:_15 make-_15 ?_15 -ref_15 -set!_15)"
"(let-values()"
"(let-values()"
"(make-struct-type 'syntax-state #f 3 0 #f null(current-inspector) #f '(1 2) #f 'syntax-state)))))"
"(values"
" struct:_15"
" make-_15"
" ?_15"
"(make-struct-field-accessor -ref_15 0 'all-sharing?)"
"(make-struct-field-accessor -ref_15 1 'context-triple)"
"(make-struct-field-accessor -ref_15 2 'srcloc)"
"(make-struct-field-mutator -set!_15 0 'all-sharing?))))"
"(define-values"
"(no-pair-syntax-in-cdr?)"
"(lambda(content_2)"
"(begin"
"(if(pair? content_2)"
"(let-values()"
"((letrec-values(((loop_69)"
"(lambda(content_3)"
"(begin"
" 'loop"
"(if(if(syntax?$1 content_3)(pair?(syntax-content content_3)) #f)"
"(let-values() #f)"
"(if(pair? content_3)"
"(let-values()(loop_69(cdr content_3)))"
"(let-values() #t)))))))"
" loop_69)"
"(cdr content_2)))"
"(let-values() #t)))))"
"(define-values"
"(deserialize-syntax)"
"(lambda(content_4 context-triple_1 srcloc_1 props_0 tamper_1 inspector_0)"
"(begin"
"(syntax1.1"
" content_4"
"(vector*-ref context-triple_1 0)"
"(vector*-ref context-triple_1 1)"
"(deserialize-tamper tamper_1)"
"(vector*-ref context-triple_1 2)"
" srcloc_1"
"(if props_0"
"(let-values(((ht_29) props_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_29)))"
"((letrec-values(((for-loop_31)"
"(lambda(table_29 i_49)"
"(begin"
" 'for-loop"
"(if i_49"
"(let-values(((k_15 v_79)(unsafe-immutable-hash-iterate-key+value ht_29 i_49)))"
"(let-values(((table_30)"
"(let-values(((table_31) table_29))"
"(let-values(((table_32)"
"(let-values()"
"(let-values(((key_17 val_8)"
"(let-values()"
"(values"
" k_15"
"(preserved-property-value1.1"
" v_79)))))"
"(hash-set table_31 key_17 val_8)))))"
"(values table_32)))))"
"(if(not #f)"
"(for-loop_31 table_30(unsafe-immutable-hash-iterate-next ht_29 i_49))"
" table_30)))"
" table_29)))))"
" for-loop_31)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_29))))"
" empty-props)"
" inspector_0))))"
"(define-values"
"(deserialize-datum->syntax)"
"(lambda(content_5 context-triple_2 srcloc_2 inspector_1)"
"(begin"
"(let-values(((s_69)(deserialize-syntax #f context-triple_2 srcloc_2 #f #f inspector_1)))"
"(datum->syntax$1 s_69 content_5 s_69 s_69)))))"
"(define-values"
"(struct:full-binding full-binding1.1 full-binding? full-binding-frame-id full-binding-free=id)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-binding"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:binding-reach-scopes(lambda(b_21)(binding-free=id b_21))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'full-binding)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'frame-id)"
"(make-struct-field-accessor -ref_0 1 'free=id))))"
"(define-values(binding-frame-id)(lambda(b_22)(begin(if(full-binding? b_22)(full-binding-frame-id b_22) #f))))"
"(define-values(binding-free=id)(lambda(b_11)(begin(if(full-binding? b_11)(full-binding-free=id b_11) #f))))"
"(define-values"
"(make-module-binding22.1)"
"(lambda(extra-inspector8_0"
" extra-nominal-bindings9_0"
" frame-id6_0"
" free=id7_0"
" nominal-module2_0"
" nominal-phase3_0"
" nominal-require-phase5_0"
" nominal-sym4_0"
" wrt1_0"
" module19_0"
" phase20_0"
" sym21_0)"
"(begin"
" 'make-module-binding22"
"(let-values(((module_0) module19_0))"
"(let-values(((phase_0) phase20_0))"
"(let-values(((sym_0) sym21_0))"
"(let-values()"
"(let-values(((nominal-module_0)"
"(if(eq? nominal-module2_0 unsafe-undefined) module_0 nominal-module2_0)))"
"(let-values(((nominal-phase_0)(if(eq? nominal-phase3_0 unsafe-undefined) phase_0 nominal-phase3_0)))"
"(let-values(((nominal-sym_0)(if(eq? nominal-sym4_0 unsafe-undefined) sym_0 nominal-sym4_0)))"
"(let-values(((nominal-require-phase_0) nominal-require-phase5_0))"
"(let-values(((frame-id_0) frame-id6_0))"
"(let-values(((free=id_0) free=id7_0))"
"(let-values(((extra-inspector_0) extra-inspector8_0))"
"(let-values(((extra-nominal-bindings_0) extra-nominal-bindings9_0))"
"(let-values()"
"(if(let-values(((or-part_90) frame-id_0))"
"(if or-part_90"
" or-part_90"
"(let-values(((or-part_91) free=id_0))"
"(if or-part_91"
" or-part_91"
"(let-values(((or-part_92) extra-inspector_0))"
"(if or-part_92"
" or-part_92"
"(not"
"(if(eqv? nominal-phase_0 phase_0)"
"(if(eq? nominal-sym_0 sym_0)"
"(if(eqv? nominal-require-phase_0 0)"
"(null? extra-nominal-bindings_0)"
" #f)"
" #f)"
" #f))))))))"
"(let-values()"
"(full-module-binding51.1"
" frame-id_0"
" free=id_0"
" module_0"
" phase_0"
" sym_0"
" nominal-module_0"
" nominal-phase_0"
" nominal-sym_0"
" nominal-require-phase_0"
" extra-inspector_0"
" extra-nominal-bindings_0))"
"(let-values()"
"(simple-module-binding52.1"
" module_0"
" phase_0"
" sym_0"
" nominal-module_0)))))))))))))))))))"
"(define-values"
"(module-binding-update48.1)"
"(lambda(extra-inspector34_0"
" extra-nominal-bindings35_0"
" frame-id32_0"
" free=id33_0"
" module25_0"
" nominal-module28_0"
" nominal-phase29_0"
" nominal-require-phase31_0"
" nominal-sym30_0"
" phase26_0"
" sym27_0"
" b47_0)"
"(begin"
" 'module-binding-update48"
"(let-values(((b_23) b47_0))"
"(let-values(((module_1)(if(eq? module25_0 unsafe-undefined)(module-binding-module b_23) module25_0)))"
"(let-values(((phase_1)(if(eq? phase26_0 unsafe-undefined)(module-binding-phase b_23) phase26_0)))"
"(let-values(((sym_1)(if(eq? sym27_0 unsafe-undefined)(module-binding-sym b_23) sym27_0)))"
"(let-values(((nominal-module_1)"
"(if(eq? nominal-module28_0 unsafe-undefined)"
"(module-binding-nominal-module b_23)"
" nominal-module28_0)))"
"(let-values(((nominal-phase_1)"
"(if(eq? nominal-phase29_0 unsafe-undefined)"
"(module-binding-nominal-phase b_23)"
" nominal-phase29_0)))"
"(let-values(((nominal-sym_1)"
"(if(eq? nominal-sym30_0 unsafe-undefined)"
"(module-binding-nominal-sym b_23)"
" nominal-sym30_0)))"
"(let-values(((nominal-require-phase_1)"
"(if(eq? nominal-require-phase31_0 unsafe-undefined)"
"(module-binding-nominal-require-phase b_23)"
" nominal-require-phase31_0)))"
"(let-values(((frame-id_1)"
"(if(eq? frame-id32_0 unsafe-undefined)(binding-frame-id b_23) frame-id32_0)))"
"(let-values(((free=id_1)"
"(if(eq? free=id33_0 unsafe-undefined)(binding-free=id b_23) free=id33_0)))"
"(let-values(((extra-inspector_1)"
"(if(eq? extra-inspector34_0 unsafe-undefined)"
"(module-binding-extra-inspector b_23)"
" extra-inspector34_0)))"
"(let-values(((extra-nominal-bindings_1)"
"(if(eq? extra-nominal-bindings35_0 unsafe-undefined)"
"(module-binding-extra-nominal-bindings b_23)"
" extra-nominal-bindings35_0)))"
"(let-values()"
"(let-values(((module53_0) module_1)"
"((phase54_0) phase_1)"
"((sym55_0) sym_1)"
"((nominal-module56_0) nominal-module_1)"
"((nominal-phase57_0) nominal-phase_1)"
"((nominal-sym58_0) nominal-sym_1)"
"((nominal-require-phase59_0) nominal-require-phase_1)"
"((frame-id60_0) frame-id_1)"
"((free=id61_0) free=id_1)"
"((extra-inspector62_0) extra-inspector_1)"
"((extra-nominal-bindings63_0) extra-nominal-bindings_1))"
"(make-module-binding22.1"
" extra-inspector62_0"
" extra-nominal-bindings63_0"
" frame-id60_0"
" free=id61_0"
" nominal-module56_0"
" nominal-phase57_0"
" nominal-require-phase59_0"
" nominal-sym58_0"
" unsafe-undefined"
" module53_0"
" phase54_0"
" sym55_0))))))))))))))))))"
"(define-values"
"(module-binding?)"
"(lambda(b_24)"
"(begin"
"(let-values(((or-part_93)(simple-module-binding? b_24)))"
"(if or-part_93 or-part_93(full-module-binding? b_24))))))"
"(define-values"
"(struct:full-module-binding"
" full-module-binding51.1"
" full-module-binding?"
" full-module-binding-module"
" full-module-binding-phase"
" full-module-binding-sym"
" full-module-binding-nominal-module"
" full-module-binding-nominal-phase"
" full-module-binding-nominal-sym"
" full-module-binding-nominal-require-phase"
" full-module-binding-extra-inspector"
" full-module-binding-extra-nominal-bindings)"
"(let-values(((struct:_16 make-_16 ?_16 -ref_16 -set!_16)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-module-binding"
" struct:full-binding"
" 9"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(b_25 ser-push!_2 state_11)"
"(let-values(((simplified-b_0)"
"(if(full-binding-frame-id b_25)"
"(let-values(((b65_0) b_25)((temp66_0) #f))"
"(module-binding-update48.1"
" unsafe-undefined"
" unsafe-undefined"
" temp66_0"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" b65_0))"
" b_25)))"
"(if(full-module-binding? simplified-b_0)"
"(let-values()"
"(begin"
"(ser-push!_2 'tag '#:module-binding)"
"(ser-push!_2(full-module-binding-module b_25))"
"(ser-push!_2(full-module-binding-sym b_25))"
"(ser-push!_2(full-module-binding-phase b_25))"
"(ser-push!_2(full-module-binding-nominal-module b_25))"
"(ser-push!_2(full-module-binding-nominal-phase b_25))"
"(ser-push!_2(full-module-binding-nominal-sym b_25))"
"(ser-push!_2(full-module-binding-nominal-require-phase b_25))"
"(ser-push!_2(full-binding-free=id b_25))"
"(if(full-module-binding-extra-inspector b_25)"
"(ser-push!_2 'tag '#:inspector)"
"(ser-push!_2 #f))"
"(ser-push!_2(full-module-binding-extra-nominal-bindings b_25))))"
"(let-values()(ser-push!_2 simplified-b_0)))))))"
" #f"
" #f"
" '(0 1 2 3 4 5 6 7 8)"
" #f"
" 'full-module-binding)))))"
"(values"
" struct:_16"
" make-_16"
" ?_16"
"(make-struct-field-accessor -ref_16 0 'module)"
"(make-struct-field-accessor -ref_16 1 'phase)"
"(make-struct-field-accessor -ref_16 2 'sym)"
"(make-struct-field-accessor -ref_16 3 'nominal-module)"
"(make-struct-field-accessor -ref_16 4 'nominal-phase)"
"(make-struct-field-accessor -ref_16 5 'nominal-sym)"
"(make-struct-field-accessor -ref_16 6 'nominal-require-phase)"
"(make-struct-field-accessor -ref_16 7 'extra-inspector)"
"(make-struct-field-accessor -ref_16 8 'extra-nominal-bindings))))"
"(define-values"
"(struct:simple-module-binding"
" simple-module-binding52.1"
" simple-module-binding?"
" simple-module-binding-module"
" simple-module-binding-phase"
" simple-module-binding-sym"
" simple-module-binding-nominal-module)"
"(let-values(((struct:_17 make-_17 ?_17 -ref_17 -set!_17)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'simple-module-binding"
" #f"
" 4"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(b_26 ser-push!_3 state_12)"
"(begin"
"(ser-push!_3 'tag '#:simple-module-binding)"
"(ser-push!_3(simple-module-binding-module b_26))"
"(ser-push!_3(simple-module-binding-sym b_26))"
"(ser-push!_3(simple-module-binding-phase b_26))"
"(ser-push!_3(simple-module-binding-nominal-module b_26))))))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'simple-module-binding)))))"
"(values"
" struct:_17"
" make-_17"
" ?_17"
"(make-struct-field-accessor -ref_17 0 'module)"
"(make-struct-field-accessor -ref_17 1 'phase)"
"(make-struct-field-accessor -ref_17 2 'sym)"
"(make-struct-field-accessor -ref_17 3 'nominal-module))))"
"(define-values"
"(deserialize-full-module-binding)"
"(lambda(module_2"
" sym_2"
" phase_2"
" nominal-module_2"
" nominal-phase_2"
" nominal-sym_2"
" nominal-require-phase_2"
" free=id_2"
" extra-inspector_2"
" extra-nominal-bindings_2)"
"(begin"
"(let-values(((module68_0) module_2)"
"((phase69_0) phase_2)"
"((sym70_0) sym_2)"
"((nominal-module71_0) nominal-module_2)"
"((nominal-phase72_0) nominal-phase_2)"
"((nominal-sym73_0) nominal-sym_2)"
"((nominal-require-phase74_0) nominal-require-phase_2)"
"((free=id75_0) free=id_2)"
"((extra-inspector76_0) extra-inspector_2)"
"((extra-nominal-bindings77_0) extra-nominal-bindings_2))"
"(make-module-binding22.1"
" extra-inspector76_0"
" extra-nominal-bindings77_0"
" #f"
" free=id75_0"
" nominal-module71_0"
" nominal-phase72_0"
" nominal-require-phase74_0"
" nominal-sym73_0"
" unsafe-undefined"
" module68_0"
" phase69_0"
" sym70_0)))))"
"(define-values"
"(deserialize-simple-module-binding)"
"(lambda(module_3 sym_3 phase_3 nominal-module_3)"
"(begin(simple-module-binding52.1 module_3 phase_3 sym_3 nominal-module_3))))"
"(define-values"
"(module-binding-module)"
"(lambda(b_27)"
"(begin(if(simple-module-binding? b_27)(simple-module-binding-module b_27)(full-module-binding-module b_27)))))"
"(define-values"
"(module-binding-phase)"
"(lambda(b_28)"
"(begin(if(simple-module-binding? b_28)(simple-module-binding-phase b_28)(full-module-binding-phase b_28)))))"
"(define-values"
"(module-binding-sym)"
"(lambda(b_29)"
"(begin(if(simple-module-binding? b_29)(simple-module-binding-sym b_29)(full-module-binding-sym b_29)))))"
"(define-values"
"(module-binding-nominal-module)"
"(lambda(b_30)"
"(begin"
"(if(simple-module-binding? b_30)"
"(simple-module-binding-nominal-module b_30)"
"(full-module-binding-nominal-module b_30)))))"
"(define-values"
"(module-binding-nominal-phase)"
"(lambda(b_31)"
"(begin"
"(if(simple-module-binding? b_31)(simple-module-binding-phase b_31)(full-module-binding-nominal-phase b_31)))))"
"(define-values"
"(module-binding-nominal-sym)"
"(lambda(b_32)"
"(begin(if(simple-module-binding? b_32)(simple-module-binding-sym b_32)(full-module-binding-nominal-sym b_32)))))"
"(define-values"
"(module-binding-nominal-require-phase)"
"(lambda(b_33)(begin(if(simple-module-binding? b_33) 0(full-module-binding-nominal-require-phase b_33)))))"
"(define-values"
"(module-binding-extra-inspector)"
"(lambda(b_34)(begin(if(simple-module-binding? b_34) #f(full-module-binding-extra-inspector b_34)))))"
"(define-values"
"(module-binding-extra-nominal-bindings)"
"(lambda(b_35)(begin(if(simple-module-binding? b_35) null(full-module-binding-extra-nominal-bindings b_35)))))"
"(define-values(empty-binding-table) '#hasheq())"
"(define-values"
"(struct:table-with-bulk-bindings"
" table-with-bulk-bindings1.1"
" table-with-bulk-bindings?"
" table-with-bulk-bindings-syms"
" table-with-bulk-bindings-syms/serialize"
" table-with-bulk-bindings-bulk-bindings)"
"(let-values(((struct:_18 make-_18 ?_18 -ref_18 -set!_18)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'table-with-bulk-bindings"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(twbb_0 ser-push!_4 state_13)"
"(begin"
"(ser-push!_4 'tag '#:table-with-bulk-bindings)"
"(ser-push!_4(table-with-bulk-bindings-syms/serialize twbb_0))"
"(ser-push!_4(table-with-bulk-bindings-bulk-bindings twbb_0))))))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'table-with-bulk-bindings)))))"
"(values"
" struct:_18"
" make-_18"
" ?_18"
"(make-struct-field-accessor -ref_18 0 'syms)"
"(make-struct-field-accessor -ref_18 1 'syms/serialize)"
"(make-struct-field-accessor -ref_18 2 'bulk-bindings))))"
"(define-values"
"(deserialize-table-with-bulk-bindings)"
"(lambda(syms_1 bulk-bindings_0)(begin(table-with-bulk-bindings1.1 syms_1 syms_1 bulk-bindings_0))))"
"(define-values"
"(struct:bulk-binding-at bulk-binding-at2.1 bulk-binding-at? bulk-binding-at-scopes bulk-binding-at-bulk)"
"(let-values(((struct:_19 make-_19 ?_19 -ref_19 -set!_19)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-at"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"                      (cons prop:reach-scopes (lambda (sms_2 reach_1) (error \"shouldn't get here\")))"
"(cons"
" prop:serialize"
"(lambda(bba_0 ser-push!_5 state_14)"
"(begin"
"(ser-push!_5 'tag '#:bulk-binding-at)"
"(ser-push!_5(bulk-binding-at-scopes bba_0))"
"(ser-push!_5(bulk-binding-at-bulk bba_0))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-at)))))"
"(values"
" struct:_19"
" make-_19"
" ?_19"
"(make-struct-field-accessor -ref_19 0 'scopes)"
"(make-struct-field-accessor -ref_19 1 'bulk))))"
"(define-values(deserialize-bulk-binding-at)(lambda(scopes_0 bulk_0)(begin(bulk-binding-at2.1 scopes_0 bulk_0))))"
"(define-values(prop:bulk-binding bulk-binding?$1 bulk-binding-ref)(make-struct-type-property 'bulk-binding))"
"(define-values"
"(struct:bulk-binding-class"
" bulk-binding-class3.1"
" bulk-binding-class?"
" bulk-binding-class-get-symbols"
" bulk-binding-class-create)"
"(let-values(((struct:_20 make-_20 ?_20 -ref_20 -set!_20)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-class"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'bulk-binding-class)))))"
"(values"
" struct:_20"
" make-_20"
" ?_20"
"(make-struct-field-accessor -ref_20 0 'get-symbols)"
"(make-struct-field-accessor -ref_20 1 'create))))"
"(define-values"
"(bulk-binding-symbols)"
"(lambda(b_36 s_70 extra-shifts_0)"
"(begin"
"((bulk-binding-class-get-symbols(bulk-binding-ref b_36))"
" b_36"
"(append extra-shifts_0(if s_70(syntax-mpi-shifts s_70) null))))))"
"(define-values(bulk-binding-create)(lambda(b_37)(begin(bulk-binding-class-create(bulk-binding-ref b_37)))))"
"(define-values(binding-table-empty?)(lambda(bt_0)(begin(if(hash? bt_0)(zero?(hash-count bt_0)) #f))))"
"(define-values"
"(binding-table-add)"
"(lambda(bt_1 scopes_1 sym_4 binding_0 just-for-nominal?_0)"
"(begin"
"(if(hash? bt_1)"
"(let-values()(hash-set bt_1 sym_4(hash-set(hash-ref bt_1 sym_4 '#hash()) scopes_1 binding_0)))"
"(let-values()"
"(let-values(((new-syms_0)"
"(binding-table-add"
"(table-with-bulk-bindings-syms bt_1)"
" scopes_1"
" sym_4"
" binding_0"
" just-for-nominal?_0)))"
"(let-values(((new-syms/serialize_0)"
"(if just-for-nominal?_0"
"(let-values()(table-with-bulk-bindings-syms/serialize bt_1))"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_1)"
"(table-with-bulk-bindings-syms/serialize bt_1))"
"(let-values() new-syms_0)"
"(let-values()"
"(binding-table-add"
"(table-with-bulk-bindings-syms/serialize bt_1)"
" scopes_1"
" sym_4"
" binding_0"
" #f))))))"
"(let-values(((the-struct_1) bt_1))"
"(if(table-with-bulk-bindings? the-struct_1)"
"(let-values(((syms32_0) new-syms_0)((syms/serialize33_0) new-syms/serialize_0))"
"(table-with-bulk-bindings1.1"
" syms32_0"
" syms/serialize33_0"
"(table-with-bulk-bindings-bulk-bindings the-struct_1)))"
"                  (raise-argument-error 'struct-copy \"table-with-bulk-bindings?\" the-struct_1))))))))))"
"(define-values"
"(prop:implicitly-reachable implicitly-reachable? implicitly-reachable-ref)"
"(make-struct-type-property 'implicitly-reachable))"
"(define-values"
"(binding-table-add-bulk9.1)"
"(lambda(shadow-except4_0 bt6_0 scopes7_0 bulk8_0)"
"(begin"
" 'binding-table-add-bulk9"
"(let-values(((bt_2) bt6_0))"
"(let-values(((scopes_2) scopes7_0))"
"(let-values(((bulk_1) bulk8_0))"
"(let-values(((shadow-except_0) shadow-except4_0))"
"(let-values()"
"(if(table-with-bulk-bindings? bt_2)"
"(let-values()"
"(let-values(((new-syms_1)"
"(let-values(((temp34_0)(table-with-bulk-bindings-syms bt_2))"
"((scopes35_0) scopes_2)"
"((bulk36_0) bulk_1)"
"((shadow-except37_0) shadow-except_0))"
"(remove-matching-bindings17.1 shadow-except37_0 temp34_0 scopes35_0 bulk36_0))))"
"(let-values(((new-syms/serialize_1)"
"(if(eq?"
"(table-with-bulk-bindings-syms bt_2)"
"(table-with-bulk-bindings-syms/serialize bt_2))"
" new-syms_1"
"(let-values(((temp38_0)(table-with-bulk-bindings-syms/serialize bt_2))"
"((scopes39_0) scopes_2)"
"((bulk40_0) bulk_1)"
"((shadow-except41_0) shadow-except_0))"
"(remove-matching-bindings17.1"
" shadow-except41_0"
" temp38_0"
" scopes39_0"
" bulk40_0)))))"
"(table-with-bulk-bindings1.1"
" new-syms_1"
" new-syms/serialize_1"
"(cons(bulk-binding-at2.1 scopes_2 bulk_1)(table-with-bulk-bindings-bulk-bindings bt_2))))))"
"(let-values()"
"(let-values(((temp42_0)(table-with-bulk-bindings1.1 bt_2 bt_2 null))"
"((scopes43_0) scopes_2)"
"((bulk44_0) bulk_1))"
"(binding-table-add-bulk9.1 #f temp42_0 scopes43_0 bulk44_0))))))))))))"
"(define-values"
"(remove-matching-bindings17.1)"
"(lambda(except12_0 syms14_0 scopes15_0 bulk16_0)"
"(begin"
" 'remove-matching-bindings17"
"(let-values(((syms_2) syms14_0))"
"(let-values(((scopes_3) scopes15_0))"
"(let-values(((bulk_2) bulk16_0))"
"(let-values(((except_0) except12_0))"
"(let-values()"
"(let-values(((bulk-symbols_0)(bulk-binding-symbols bulk_2 #f null)))"
"(if(<(hash-count syms_2)(hash-count bulk-symbols_0))"
"(let-values()"
"(let-values(((ht_30) syms_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_30)))"
"((letrec-values(((for-loop_32)"
"(lambda(syms_3 i_34)"
"(begin"
" 'for-loop"
"(if i_34"
"(let-values(((sym_5 sym-bindings_0)"
"(unsafe-immutable-hash-iterate-key+value ht_30 i_34)))"
"(let-values(((syms_4)"
"(let-values(((syms_5) syms_3))"
"(let-values(((syms_6)"
"(let-values()"
"(if(hash-ref"
" bulk-symbols_0"
" sym_5"
" #f)"
"(let-values(((syms45_0) syms_5)"
"((sym46_0) sym_5)"
"((sym-bindings47_0)"
" sym-bindings_0)"
"((scopes48_0)"
" scopes_3)"
"((except49_0)"
" except_0))"
"(remove-matching-binding26.1"
" except49_0"
" syms45_0"
" sym46_0"
" sym-bindings47_0"
" scopes48_0))"
" syms_5))))"
"(values syms_6)))))"
"(if(not #f)"
"(for-loop_32"
" syms_4"
"(unsafe-immutable-hash-iterate-next ht_30 i_34))"
" syms_4)))"
" syms_3)))))"
" for-loop_32)"
" syms_2"
"(unsafe-immutable-hash-iterate-first ht_30)))))"
"(let-values()"
"(let-values(((ht_31) bulk-symbols_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_31)))"
"((letrec-values(((for-loop_33)"
"(lambda(syms_7 i_50)"
"(begin"
" 'for-loop"
"(if i_50"
"(let-values(((sym_6)(unsafe-immutable-hash-iterate-key ht_31 i_50)))"
"(let-values(((syms_8)"
"(let-values(((syms_9) syms_7))"
"(let-values(((syms_10)"
"(let-values()"
"(let-values(((sym-bindings_1)"
"(hash-ref"
" syms_9"
" sym_6"
" #f)))"
"(if sym-bindings_1"
"(let-values(((syms50_0) syms_9)"
"((sym51_0) sym_6)"
"((sym-bindings52_0)"
" sym-bindings_1)"
"((scopes53_0)"
" scopes_3)"
"((except54_0)"
" except_0))"
"(remove-matching-binding26.1"
" except54_0"
" syms50_0"
" sym51_0"
" sym-bindings52_0"
" scopes53_0))"
" syms_9)))))"
"(values syms_10)))))"
"(if(not #f)"
"(for-loop_33"
" syms_8"
"(unsafe-immutable-hash-iterate-next ht_31 i_50))"
" syms_8)))"
" syms_7)))))"
" for-loop_33)"
" syms_2"
"(unsafe-immutable-hash-iterate-first ht_31)))))))))))))))"
"(define-values"
"(remove-matching-binding26.1)"
"(lambda(except20_0 syms22_0 sym23_0 sym-bindings24_0 scopes25_0)"
"(begin"
" 'remove-matching-binding26"
"(let-values(((syms_11) syms22_0))"
"(let-values(((sym_7) sym23_0))"
"(let-values(((sym-bindings_2) sym-bindings24_0))"
"(let-values(((scopes_4) scopes25_0))"
"(let-values(((except_1) except20_0))"
"(let-values()"
"(if(if except_1"
"(let-values(((b_38)(hash-ref sym-bindings_2 scopes_4 #f)))"
"(if(module-binding? b_38)(eq? except_1(module-binding-module b_38)) #f))"
" #f)"
"(let-values() syms_11)"
"(let-values()(hash-set syms_11 sym_7(hash-remove sym-bindings_2 scopes_4)))))))))))))"
"(define-values"
"(next-state-in-full-binding-table)"
"(lambda(sym-ht_0 sym-i_0)"
"(begin"
"(if sym-i_0"
"(let-values(((ht_32)(hash-iterate-value sym-ht_0 sym-i_0)))"
"(let-values(((i_51)(hash-iterate-first ht_32)))"
"(if i_51"
"(cons(vector sym-i_0(hash-iterate-key sym-ht_0 sym-i_0) ht_32) i_51)"
"(next-state-in-full-binding-table(hash-iterate-next sym-ht_0 sym-i_0)))))"
" '(#f . #f)))))"
"(define-values"
"(binding-table-symbols)"
"(lambda(table_33 scs_2 s_71 extra-shifts_1)"
"(begin"
"(let-values(((ht_33 bulk-bindings_1)"
"(if(hash? table_33)"
"(values table_33 null)"
"(values"
"(table-with-bulk-bindings-syms table_33)"
"(table-with-bulk-bindings-bulk-bindings table_33)))))"
"(set-union"
"(let-values(((ht_34) ht_33))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_34)))"
"((letrec-values(((for-loop_34)"
"(lambda(table_34 i_52)"
"(begin"
" 'for-loop"
"(if i_52"
"(let-values(((sym_8 at-sym_0)(hash-iterate-key+value ht_34 i_52)))"
"(let-values(((table_35)"
"(let-values(((table_36) table_34))"
"(if(let-values(((ht_35) at-sym_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_35)))"
"((letrec-values(((for-loop_35)"
"(lambda(result_28 i_53)"
"(begin"
" 'for-loop"
"(if i_53"
"(let-values(((an-scs_0)"
"(hash-iterate-key"
" ht_35"
" i_53)))"
"(let-values(((result_29)"
"(let-values()"
"(let-values(((result_30)"
"(let-values()"
"(let-values()"
"(subset?"
" an-scs_0"
" scs_2)))))"
"(values"
" result_30)))))"
"(if(if(not"
"((lambda x_27"
" result_29)"
" an-scs_0))"
"(not #f)"
" #f)"
"(for-loop_35"
" result_29"
"(hash-iterate-next"
" ht_35"
" i_53))"
" result_29)))"
" result_28)))))"
" for-loop_35)"
" #f"
"(hash-iterate-first ht_35))))"
"(let-values(((table_37) table_36))"
"(let-values(((table_38)"
"(let-values()"
"(let-values(((key_18 val_9)"
"(let-values()"
"(values"
"(let-values() sym_8)"
" #t))))"
"(hash-set table_37 key_18 val_9)))))"
"(values table_38)))"
" table_36))))"
"(if(not #f)(for-loop_34 table_35(hash-iterate-next ht_34 i_52)) table_35)))"
" table_34)))))"
" for-loop_34)"
" '#hasheq()"
"(hash-iterate-first ht_34))))"
"(let-values(((lst_34) bulk-bindings_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_34)))"
"((letrec-values(((for-loop_36)"
"(lambda(table_39 lst_35)"
"(begin"
" 'for-loop"
"(if(pair? lst_35)"
"(let-values(((bba_1)(unsafe-car lst_35))((rest_14)(unsafe-cdr lst_35)))"
"(let-values(((table_40)"
"(let-values(((table_41) table_39))"
"(if(subset?(bulk-binding-at-scopes bba_1) scs_2)"
"(let-values(((ht_36)"
"(bulk-binding-symbols"
"(bulk-binding-at-bulk bba_1)"
" s_71"
" extra-shifts_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_36)))"
"((letrec-values(((for-loop_37)"
"(lambda(table_42 i_5)"
"(begin"
" 'for-loop"
"(if i_5"
"(let-values(((sym_9)"
"(hash-iterate-key"
" ht_36"
" i_5)))"
"(let-values(((table_43)"
"(let-values(((table_44)"
" table_42))"
"(let-values(((table_45)"
"(let-values()"
"(let-values(((key_19"
" val_10)"
"(let-values()"
"(values"
"(let-values()"
" sym_9)"
" #t))))"
"(hash-set"
" table_44"
" key_19"
" val_10)))))"
"(values"
" table_45)))))"
"(if(not #f)"
"(for-loop_37"
" table_43"
"(hash-iterate-next"
" ht_36"
" i_5))"
" table_43)))"
" table_42)))))"
" for-loop_37)"
" table_41"
"(hash-iterate-first ht_36))))"
" table_41))))"
"(if(not #f)(for-loop_36 table_40 rest_14) table_40)))"
" table_39)))))"
" for-loop_36)"
" '#hasheq()"
" lst_34))))))))"
"(define-values"
"(binding-table-prune-to-reachable)"
"(lambda(bt_3 state_15)"
"(begin"
"(let-values(((or-part_94)(hash-ref(serialize-state-bindings-intern state_15) bt_3 #f)))"
"(if or-part_94"
" or-part_94"
"(let-values(((reachable-scopes_1)(serialize-state-reachable-scopes state_15)))"
"(let-values(((new-syms_2)"
"(let-values(((ht_37)(if(hash? bt_3) bt_3(table-with-bulk-bindings-syms/serialize bt_3))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_37)))"
"((letrec-values(((for-loop_38)"
"(lambda(table_46 i_54)"
"(begin"
" 'for-loop"
"(if i_54"
"(let-values(((sym_10 bindings-for-sym_0)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_37"
" i_54)))"
"(let-values(((table_47)"
"(let-values(((new-bindings-for-sym_0)"
"(let-values(((ht_38)"
" bindings-for-sym_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash"
" ht_38)))"
"((letrec-values(((for-loop_39)"
"(lambda(table_48"
" i_55)"
"(begin"
" 'for-loop"
"(if i_55"
"(let-values(((scopes_5"
" binding_1)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_38"
" i_55)))"
"(let-values(((table_49)"
"(let-values(((table_50)"
" table_48))"
"(if(subset?"
" scopes_5"
" reachable-scopes_1)"
"(let-values(((table_51)"
" table_50))"
"(let-values(((table_52)"
"(let-values()"
"(let-values(((key_20"
" val_11)"
"(let-values()"
"(values"
"(intern-scopes"
" scopes_5"
" state_15)"
" binding_1))))"
"(hash-set"
" table_51"
" key_20"
" val_11)))))"
"(values"
" table_52)))"
" table_50))))"
"(if(not"
" #f)"
"(for-loop_39"
" table_49"
"(unsafe-immutable-hash-iterate-next"
" ht_38"
" i_55))"
" table_49)))"
" table_48)))))"
" for-loop_39)"
" '#hash()"
"(unsafe-immutable-hash-iterate-first"
" ht_38))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_40)"
"(lambda(table_53)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_54)"
"(let-values(((table_55)"
" table_53))"
"(if(positive?"
"(hash-count"
" new-bindings-for-sym_0))"
"(let-values(((table_56)"
" table_55))"
"(let-values(((table_57)"
"(let-values()"
"(let-values(((key_21"
" val_12)"
"(let-values()"
"(values"
" sym_10"
" new-bindings-for-sym_0))))"
"(hash-set"
" table_56"
" key_21"
" val_12)))))"
"(values"
" table_57)))"
" table_55))))"
" table_54))))))"
" for-loop_40)"
" table_46)))))"
"(if(not #f)"
"(for-loop_38"
" table_47"
"(unsafe-immutable-hash-iterate-next ht_37 i_54))"
" table_47)))"
" table_46)))))"
" for-loop_38)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_37))))))"
"(let-values(((new-bulk-bindings_0)"
"(if(hash? bt_3)"
" null"
"(reverse$1"
"(let-values(((lst_36)(table-with-bulk-bindings-bulk-bindings bt_3)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_36)))"
"((letrec-values(((for-loop_41)"
"(lambda(fold-var_21 lst_37)"
"(begin"
" 'for-loop"
"(if(pair? lst_37)"
"(let-values(((bba_2)(unsafe-car lst_37))"
"((rest_15)(unsafe-cdr lst_37)))"
"(let-values(((fold-var_22)"
"(let-values(((fold-var_23) fold-var_21))"
"(if(subset?"
"(bulk-binding-at-scopes bba_2)"
" reachable-scopes_1)"
"(let-values(((fold-var_24) fold-var_23))"
"(let-values(((fold-var_25)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((the-struct_2)"
" bba_2))"
"(if(bulk-binding-at?"
" the-struct_2)"
"(let-values(((scopes55_0)"
"(intern-scopes"
"(bulk-binding-at-scopes"
" bba_2)"
" state_15)))"
"(bulk-binding-at2.1"
" scopes55_0"
"(bulk-binding-at-bulk"
" the-struct_2)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                         \"bulk-binding-at?\""
" the-struct_2))))"
" fold-var_24))))"
"(values fold-var_25)))"
" fold-var_23))))"
"(if(not #f)"
"(for-loop_41 fold-var_22 rest_15)"
" fold-var_22)))"
" fold-var_21)))))"
" for-loop_41)"
" null"
" lst_36)))))))"
"(let-values(((new-bt_0)"
"(if(pair? new-bulk-bindings_0)"
"(table-with-bulk-bindings1.1 new-syms_2 new-syms_2 new-bulk-bindings_0)"
" new-syms_2)))"
"(begin(hash-set!(serialize-state-bulk-bindings-intern state_15) bt_3 new-bt_0) new-bt_0))))))))))"
"(define-values"
"(binding-table-register-reachable)"
"(lambda(bt_4 get-reachable-scopes_0 reach_2 register-trigger_0)"
"(begin"
"(begin"
"(let-values(((ht_39)(if(hash? bt_4) bt_4(table-with-bulk-bindings-syms/serialize bt_4))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_39)))"
"((letrec-values(((for-loop_42)"
"(lambda(i_56)"
"(begin"
" 'for-loop"
"(if i_56"
"(let-values(((sym_11 bindings-for-sym_1)"
"(unsafe-immutable-hash-iterate-key+value ht_39 i_56)))"
"(let-values((()"
"(let-values(((ht_40) bindings-for-sym_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_40)))"
"((letrec-values(((for-loop_43)"
"(lambda(i_57)"
"(begin"
" 'for-loop"
"(if i_57"
"(let-values(((scopes_6 binding_2)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_40"
" i_57)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((v_80)"
"(if(binding-reach-scopes?"
" binding_2)"
"((binding-reach-scopes-ref"
" binding_2)"
" binding_2)"
" #f)))"
"(scopes-register-reachable"
" scopes_6"
" v_80"
" get-reachable-scopes_0"
" reach_2"
" register-trigger_0)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_43"
"(unsafe-immutable-hash-iterate-next"
" ht_40"
" i_57))"
"(values))))"
"(values))))))"
" for-loop_43)"
"(unsafe-immutable-hash-iterate-first ht_40))))))"
"(if(not #f)"
"(for-loop_42(unsafe-immutable-hash-iterate-next ht_39 i_56))"
"(values))))"
"(values))))))"
" for-loop_42)"
"(unsafe-immutable-hash-iterate-first ht_39))))"
"(void)"
"(if(table-with-bulk-bindings? bt_4)"
"(let-values()"
"(begin"
"(let-values(((lst_38)(table-with-bulk-bindings-bulk-bindings bt_4)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_38)))"
"((letrec-values(((for-loop_44)"
"(lambda(lst_39)"
"(begin"
" 'for-loop"
"(if(pair? lst_39)"
"(let-values(((bba_3)(unsafe-car lst_39))((rest_16)(unsafe-cdr lst_39)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(scopes-register-reachable"
"(bulk-binding-at-scopes bba_3)"
" #f"
" get-reachable-scopes_0"
" reach_2"
" register-trigger_0))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_44 rest_16)(values))))"
"(values))))))"
" for-loop_44)"
" lst_38)))"
"(void)))"
"(void))))))"
"(define-values"
"(scopes-register-reachable)"
"(lambda(scopes_7 v_81 get-reachable-scopes_1 reach_3 register-trigger_1)"
"(begin"
"(let-values(((reachable-scopes_2)(get-reachable-scopes_1)))"
"(if(subset? scopes_7 reachable-scopes_2)"
"(let-values()(reach_3 v_81))"
"(let-values()"
"(let-values(((pending-scopes_0)"
"(let-values(((ht_41) scopes_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_41)))"
"((letrec-values(((for-loop_45)"
"(lambda(table_58 i_58)"
"(begin"
" 'for-loop"
"(if i_58"
"(let-values(((sc_0)"
"(unsafe-immutable-hash-iterate-key ht_41 i_58)))"
"(let-values(((table_59)"
"(let-values(((table_60) table_58))"
"(if(let-values(((or-part_95)"
"(set-member?"
" reachable-scopes_2"
" sc_0)))"
"(if or-part_95"
" or-part_95"
"(implicitly-reachable? sc_0)))"
" table_60"
"(let-values(((table_61) table_60))"
"(let-values(((table_62)"
"(let-values()"
"(let-values(((key_22"
" val_13)"
"(let-values()"
"(values"
"(let-values()"
" sc_0)"
" #t))))"
"(hash-set"
" table_61"
" key_22"
" val_13)))))"
"(values table_62)))))))"
"(if(not #f)"
"(for-loop_45"
" table_59"
"(unsafe-immutable-hash-iterate-next ht_41 i_58))"
" table_59)))"
" table_58)))))"
" for-loop_45)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_41))))))"
"(let-values(((check-trigger_0)"
"(lambda(reach_4)"
"(begin"
" 'check-trigger"
"(if(zero?(hash-count pending-scopes_0))"
"(let-values()"
"(begin"
"(reach_4 v_81)"
"(let-values(((ht_42) scopes_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_42)))"
"((letrec-values(((for-loop_46)"
"(lambda(i_59)"
"(begin"
" 'for-loop"
"(if i_59"
"(let-values(((sc_1)"
"(unsafe-immutable-hash-iterate-key"
" ht_42"
" i_59)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(implicitly-reachable?"
" sc_1)"
"(let-values()"
"(reach_4"
" sc_1))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_46"
"(unsafe-immutable-hash-iterate-next"
" ht_42"
" i_59))"
"(values))))"
"(values))))))"
" for-loop_46)"
"(unsafe-immutable-hash-iterate-first ht_42))))"
"(void)))"
"(void))))))"
"(begin"
"(let-values(((ht_43) pending-scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_43)))"
"((letrec-values(((for-loop_47)"
"(lambda(i_60)"
"(begin"
" 'for-loop"
"(if i_60"
"(let-values(((sc_2)(unsafe-immutable-hash-iterate-key ht_43 i_60)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-trigger_1"
" sc_2"
"(lambda(reach_5)"
"(begin"
"(set! pending-scopes_0"
"(hash-remove"
" pending-scopes_0"
" sc_2))"
"(check-trigger_0 reach_5)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_47(unsafe-immutable-hash-iterate-next ht_43 i_60))"
"(values))))"
"(values))))))"
" for-loop_47)"
"(unsafe-immutable-hash-iterate-first ht_43))))"
"(void)"
"(check-trigger_0 reach_3))))))))))"
"(define-values"
"(syntax-property$1)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((s_72 key_23)"
"(begin"
" 'syntax-property"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_72)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_72)))"
"(values))))"
"(let-values(((v_70)(hash-ref(syntax-props s_72) key_23 #f)))(plain-property-value v_70)))))"
"((s_73 key_24 val_14)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_73)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_73)))"
"(values))))"
"(let-values(((pval_0)(if(eq? key_24 'paren-shape)(preserved-property-value1.1 val_14) val_14)))"
"(let-values(((the-struct_3) s_73))"
"(if(syntax?$1 the-struct_3)"
"(let-values(((props2_0)(hash-set(syntax-props s_73) key_24 pval_0)))"
"(syntax1.1"
"(syntax-content the-struct_3)"
"(syntax-scopes the-struct_3)"
"(syntax-shifted-multi-scopes the-struct_3)"
"(syntax-scope-propagations+tamper the-struct_3)"
"(syntax-mpi-shifts the-struct_3)"
"(syntax-srcloc the-struct_3)"
" props2_0"
"(syntax-inspector the-struct_3)))"
"                (raise-argument-error 'struct-copy \"syntax?\" the-struct_3))))))"
"((s_74 key_25 val_15 preserved?_0)"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_74)"
"(void)"
"                          (let-values () (raise-argument-error 'syntax-property \"syntax?\" s_74)))"
"(values))))"
"(let-values((()"
"(begin"
"(if preserved?_0"
"(let-values()"
"(if(if(symbol? key_25)(symbol-interned? key_25) #f)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-property"
"                                   \"key for a perserved property must be an interned symbol\""
"                                   \"given key\""
" key_25"
"                                   \"given value\""
" val_15))))"
"(void))"
"(values))))"
"(let-values(((pval_1)(if preserved?_0(preserved-property-value1.1 val_15) val_15)))"
"(let-values(((the-struct_4) s_74))"
"(if(syntax?$1 the-struct_4)"
"(let-values(((props3_0)(hash-set(syntax-props s_74) key_25 pval_1)))"
"(syntax1.1"
"(syntax-content the-struct_4)"
"(syntax-scopes the-struct_4)"
"(syntax-shifted-multi-scopes the-struct_4)"
"(syntax-scope-propagations+tamper the-struct_4)"
"(syntax-mpi-shifts the-struct_4)"
"(syntax-srcloc the-struct_4)"
" props3_0"
"(syntax-inspector the-struct_4)))"
"                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_4)))))))))))"
"(define-values"
"(1/syntax-property-preserved?)"
"(lambda(s_75 key_26)"
"(begin"
" 'syntax-property-preserved?"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_75)"
"(void)"
"              (let-values () (raise-argument-error 'syntax-property-preserved? \"syntax?\" s_75)))"
"(if(if(symbol? key_26)(symbol-interned? key_26) #f)"
"(void)"
"(let-values()"
"                (raise-argument-error 'syntax-property-preserved? \"(and/c symbol? symbol-interned?)\" key_26)))"
"(preserved-property-value?(hash-ref(syntax-props s_75) key_26 #f))))))))"
"(define-values"
"(1/syntax-property-symbol-keys)"
"(lambda(s_10)"
"(begin"
" 'syntax-property-symbol-keys"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_10)"
"(void)"
"              (let-values () (raise-argument-error 'syntax-property-symbol-keys \"syntax\" s_10)))"
"(reverse$1"
"(let-values(((ht_44)(syntax-props s_10)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_44)))"
"((letrec-values(((for-loop_48)"
"(lambda(fold-var_26 i_61)"
"(begin"
" 'for-loop"
"(if i_61"
"(let-values(((k_16 v_32)"
"(unsafe-immutable-hash-iterate-key+value ht_44 i_61)))"
"(let-values(((fold-var_27)"
"(let-values(((fold-var_28) fold-var_26))"
"(if(if(symbol? k_16)(symbol-interned? k_16) #f)"
"(let-values(((fold-var_29) fold-var_28))"
"(let-values(((fold-var_30)"
"(let-values()"
"(cons"
"(let-values() k_16)"
" fold-var_29))))"
"(values fold-var_30)))"
" fold-var_28))))"
"(if(not #f)"
"(for-loop_48 fold-var_27(unsafe-immutable-hash-iterate-next ht_44 i_61))"
" fold-var_27)))"
" fold-var_26)))))"
" for-loop_48)"
" null"
"(unsafe-immutable-hash-iterate-first ht_44)))))))))))"
"(define-values"
"(1/syntax-property-remove)"
"(lambda(s_76 key_27)"
"(begin"
" 'syntax-property-remove"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_76) (void) (let-values () (raise-argument-error 'syntax-property-remove \"syntax?\" s_76)))"
"(if(hash-ref(syntax-props s_76) key_27 #f)"
"(let-values(((the-struct_5) s_76))"
"(if(syntax?$1 the-struct_5)"
"(let-values(((props7_0)(hash-remove(syntax-props s_76) key_27)))"
"(syntax1.1"
"(syntax-content the-struct_5)"
"(syntax-scopes the-struct_5)"
"(syntax-shifted-multi-scopes the-struct_5)"
"(syntax-scope-propagations+tamper the-struct_5)"
"(syntax-mpi-shifts the-struct_5)"
"(syntax-srcloc the-struct_5)"
" props7_0"
"(syntax-inspector the-struct_5)))"
"                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_5)))"
" s_76)))))))"
"(define-values"
"(taint-content)"
"(lambda(d_2)"
"(begin"
"(let-values(((s_74) d_2)"
"((f_27)(lambda(tail?_16 x_28)(begin 'f x_28)))"
"((s->_1)"
"(lambda(sub-s_0)"
"(begin"
" 's->"
"(if(tamper-tainted?(syntax-tamper sub-s_0))"
"(let-values() sub-s_0)"
"(let-values()"
"(let-values(((stx_0) sub-s_0))"
"(let-values(((the-struct_6) stx_0))"
"(if(syntax?$1 the-struct_6)"
"(let-values(((scope-propagations+tamper5_0)"
"(let-values(((t_18)"
"(tamper-tainted-for-content(syntax-content sub-s_0)))"
"((p_20)(syntax-scope-propagations+tamper stx_0)))"
"(if(tamper? p_20)"
" t_18"
"((propagation-set-tamper-ref p_20) p_20 t_18)))))"
"(syntax1.1"
"(syntax-content the-struct_6)"
"(syntax-scopes the-struct_6)"
"(syntax-shifted-multi-scopes the-struct_6)"
" scope-propagations+tamper5_0"
"(syntax-mpi-shifts the-struct_6)"
"(syntax-srcloc the-struct_6)"
"(syntax-props the-struct_6)"
"(syntax-inspector the-struct_6)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_6)))))))))"
"((seen_7) #f))"
"(let-values(((s_77) s_74)"
"((f_28) f_27)"
"((gf_3)"
"(lambda(tail?_17 v_32)"
"(begin"
" 'gf"
"(if(syntax?$1 v_32)(let-values()(s->_1 v_32))(let-values()(f_27 tail?_17 v_32))))))"
"((seen_8) seen_7))"
"((letrec-values(((loop_70)"
"(lambda(tail?_18 s_78 prev-depth_3)"
"(begin"
" 'loop"
"(let-values(((depth_3)(fx+ 1 prev-depth_3)))"
"(if(if seen_8(fx> depth_3 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_18"
" s_78"
"(lambda(tail?_19 s_79)(gf_3 tail?_19 s_79))"
" seen_8))"
"(if(null? s_78)"
"(let-values()(f_28 tail?_18 s_78))"
"(if(pair? s_78)"
"(let-values()"
"(f_28"
" tail?_18"
"(cons(loop_70 #f(car s_78) depth_3)(loop_70 #t(cdr s_78) depth_3))))"
"(if(symbol? s_78)"
"(let-values()(f_28 #f s_78))"
"(if(boolean? s_78)"
"(let-values()(f_28 #f s_78))"
"(if(number? s_78)"
"(let-values()(f_28 #f s_78))"
"(if(let-values(((or-part_79)(vector? s_78)))"
"(if or-part_79"
" or-part_79"
"(let-values(((or-part_80)(box? s_78)))"
"(if or-part_80"
" or-part_80"
"(let-values(((or-part_81)(prefab-struct-key s_78)))"
"(if or-part_81 or-part_81(hash? s_78)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_18"
" s_78"
"(lambda(tail?_0 s_40)(gf_3 tail?_0 s_40))"
" seen_8))"
"(let-values()(gf_3 #f s_78))))))))))))))"
" loop_70)"
" #f"
" s_77"
" 0))))))"
"(define-values(syntax-tainted?$1)(lambda(s_41)(begin 'syntax-tainted?(tamper-tainted?(syntax-tamper s_41)))))"
"(define-values(syntax-clean?)(lambda(s_80)(begin(tamper-clean?(syntax-tamper s_80)))))"
"(define-values"
"(syntax-arm$1)"
"(lambda(s_6 insp_0)"
"(begin"
" 'syntax-arm"
"(let-values(((t_19)(syntax-tamper s_6)))"
"(if(tamper-tainted? t_19)"
"(let-values() s_6)"
"(if(if t_19"
"(let-values(((or-part_96)(set-member? t_19 insp_0)))"
"(if or-part_96"
" or-part_96"
"(let-values(((ht_45) t_19))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_45)))"
"((letrec-values(((for-loop_49)"
"(lambda(result_31 i_62)"
"(begin"
" 'for-loop"
"(if i_62"
"(let-values(((already-insp_0)"
"(unsafe-immutable-hash-iterate-key ht_45 i_62)))"
"(let-values(((result_32)"
"(let-values()"
"(let-values(((result_33)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same?"
" already-insp_0"
" insp_0)))))"
"(values result_33)))))"
"(if(if(not((lambda x_29 result_32) already-insp_0))(not #f) #f)"
"(for-loop_49"
" result_32"
"(unsafe-immutable-hash-iterate-next ht_45 i_62))"
" result_32)))"
" result_31)))))"
" for-loop_49)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_45))))))"
" #f)"
"(let-values() s_6)"
"(let-values()"
"(let-values(((stx_1) s_6))"
"(let-values(((the-struct_7) stx_1))"
"(if(syntax?$1 the-struct_7)"
"(let-values(((scope-propagations+tamper6_0)"
"(let-values(((t_20)(set-add(if t_19(remove-inferior t_19 insp_0)(seteq)) insp_0))"
"((p_21)(syntax-scope-propagations+tamper stx_1)))"
"(if(tamper? p_21) t_20((propagation-set-tamper-ref p_21) p_21 t_20)))))"
"(syntax1.1"
"(syntax-content the-struct_7)"
"(syntax-scopes the-struct_7)"
"(syntax-shifted-multi-scopes the-struct_7)"
" scope-propagations+tamper6_0"
"(syntax-mpi-shifts the-struct_7)"
"(syntax-srcloc the-struct_7)"
"(syntax-props the-struct_7)"
"(syntax-inspector the-struct_7)))"
"                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_7)))))))))))"
"(define-values"
"(remove-inferior)"
"(lambda(t_21 insp_1)"
"(begin"
"(let-values(((ht_46) t_21))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_46)))"
"((letrec-values(((for-loop_50)"
"(lambda(table_63 i_63)"
"(begin"
" 'for-loop"
"(if i_63"
"(let-values(((already-insp_1)(unsafe-immutable-hash-iterate-key ht_46 i_63)))"
"(let-values(((table_64)"
"(let-values(((table_65) table_63))"
"(if(inspector-superior-or-same? insp_1 already-insp_1)"
" table_65"
"(let-values(((table_66) table_65))"
"(let-values(((table_67)"
"(let-values()"
"(let-values(((key_28 val_16)"
"(let-values()"
"(values"
"(let-values() already-insp_1)"
" #t))))"
"(hash-set table_66 key_28 val_16)))))"
"(values table_67)))))))"
"(if(not #f)"
"(for-loop_50 table_64(unsafe-immutable-hash-iterate-next ht_46 i_63))"
" table_64)))"
" table_63)))))"
" for-loop_50)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_46)))))))"
"(define-values"
"(syntax-disarm$1)"
"(let-values(((syntax-disarm3_0)"
"(lambda(s2_5 insp1_0)"
"(begin"
" 'syntax-disarm3"
"(let-values(((s_81) s2_5))"
"(let-values(((insp_2) insp1_0))"
"(let-values()"
"(let-values(((t_22)(syntax-tamper s_81)))"
"(if(not(tamper-armed? t_22))"
"(let-values() s_81)"
"(if(not insp_2)"
"(let-values()"
"(let-values(((stx_2) s_81))"
"(let-values(((the-struct_8) stx_2))"
"(if(syntax?$1 the-struct_8)"
"(let-values(((scope-propagations+tamper7_0)"
"(let-values(((t_23) #f)"
"((p_22)(syntax-scope-propagations+tamper stx_2)))"
"(if(tamper? p_22)"
" t_23"
"((propagation-set-tamper-ref p_22) p_22 t_23)))))"
"(syntax1.1"
"(syntax-content the-struct_8)"
"(syntax-scopes the-struct_8)"
"(syntax-shifted-multi-scopes the-struct_8)"
" scope-propagations+tamper7_0"
"(syntax-mpi-shifts the-struct_8)"
"(syntax-srcloc the-struct_8)"
"(syntax-props the-struct_8)"
"(syntax-inspector the-struct_8)))"
"                                        (raise-argument-error 'struct-copy \"syntax?\" the-struct_8)))))"
"(let-values()"
"(let-values(((new-t_1)(remove-inferior t_22 insp_2)))"
"(let-values(((stx_3) s_81))"
"(let-values(((the-struct_9) stx_3))"
"(if(syntax?$1 the-struct_9)"
"(let-values(((scope-propagations+tamper8_0)"
"(let-values(((t_24)(if(not(set-empty? new-t_1)) new-t_1 #f))"
"((p_23)(syntax-scope-propagations+tamper stx_3)))"
"(if(tamper? p_23)"
" t_24"
"((propagation-set-tamper-ref p_23) p_23 t_24)))))"
"(syntax1.1"
"(syntax-content the-struct_9)"
"(syntax-scopes the-struct_9)"
"(syntax-shifted-multi-scopes the-struct_9)"
" scope-propagations+tamper8_0"
"(syntax-mpi-shifts the-struct_9)"
"(syntax-srcloc the-struct_9)"
"(syntax-props the-struct_9)"
"(syntax-inspector the-struct_9)))"
"                                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_9))))))))))))))))"
"(case-lambda"
"((s_82)(begin 'syntax-disarm(syntax-disarm3_0 s_82 #f)))"
"((s_83 insp1_1)(syntax-disarm3_0 s_83 insp1_1)))))"
"(define-values"
"(syntax-rearm$1)"
"(lambda(s_17 from-s_0)"
"(begin"
" 'syntax-rearm"
"(let-values(((t_25)(syntax-tamper s_17)))"
"(if(tamper-tainted? t_25)"
"(let-values() s_17)"
"(let-values()"
"(let-values(((from-t_0)(syntax-tamper from-s_0)))"
"(if(tamper-clean? from-t_0)"
"(let-values() s_17)"
"(if(tamper-tainted? from-t_0)"
"(let-values()"
"(let-values(((stx_4) s_17))"
"(let-values(((the-struct_10) stx_4))"
"(if(syntax?$1 the-struct_10)"
"(let-values(((scope-propagations+tamper9_0)"
"(let-values(((t_26)(tamper-tainted-for-content(syntax-content s_17)))"
"((p_24)(syntax-scope-propagations+tamper stx_4)))"
"(if(tamper? p_24) t_26((propagation-set-tamper-ref p_24) p_24 t_26)))))"
"(syntax1.1"
"(syntax-content the-struct_10)"
"(syntax-scopes the-struct_10)"
"(syntax-shifted-multi-scopes the-struct_10)"
" scope-propagations+tamper9_0"
"(syntax-mpi-shifts the-struct_10)"
"(syntax-srcloc the-struct_10)"
"(syntax-props the-struct_10)"
"(syntax-inspector the-struct_10)))"
"                          (raise-argument-error 'struct-copy \"syntax?\" the-struct_10)))))"
"(if(tamper-clean? t_25)"
"(let-values()"
"(let-values(((stx_5) s_17))"
"(let-values(((the-struct_11) stx_5))"
"(if(syntax?$1 the-struct_11)"
"(let-values(((scope-propagations+tamper10_0)"
"(let-values(((t_27) from-t_0)"
"((p_25)(syntax-scope-propagations+tamper stx_5)))"
"(if(tamper? p_25) t_27((propagation-set-tamper-ref p_25) p_25 t_27)))))"
"(syntax1.1"
"(syntax-content the-struct_11)"
"(syntax-scopes the-struct_11)"
"(syntax-shifted-multi-scopes the-struct_11)"
" scope-propagations+tamper10_0"
"(syntax-mpi-shifts the-struct_11)"
"(syntax-srcloc the-struct_11)"
"(syntax-props the-struct_11)"
"(syntax-inspector the-struct_11)))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_11)))))"
"(let-values()"
"(let-values(((stx_6) s_17))"
"(let-values(((the-struct_12) stx_6))"
"(if(syntax?$1 the-struct_12)"
"(let-values(((scope-propagations+tamper11_0)"
"(let-values(((t_28)"
"(let-values(((ht_16) from-t_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_16)))"
"((letrec-values(((for-loop_2)"
"(lambda(t_29 i_21)"
"(begin"
" 'for-loop"
"(if i_21"
"(let-values(((from-i_0)"
"(unsafe-immutable-hash-iterate-key"
" ht_16"
" i_21)))"
"(let-values(((t_30)"
"(let-values(((t_31)"
" t_29))"
"(let-values(((t_32)"
"(let-values()"
"(if(set-member?"
" t_31"
" from-i_0)"
"(let-values()"
" t_31)"
"(if(any-superior?"
" t_31"
" from-i_0)"
"(let-values()"
" t_31)"
"(let-values()"
"(set-add"
"(remove-inferior"
" t_31"
" from-i_0)"
" from-i_0)))))))"
"(values"
" t_32)))))"
"(if(not #f)"
"(for-loop_2"
" t_30"
"(unsafe-immutable-hash-iterate-next"
" ht_16"
" i_21))"
" t_30)))"
" t_29)))))"
" for-loop_2)"
" t_25"
"(unsafe-immutable-hash-iterate-first ht_16)))))"
"((p_19)(syntax-scope-propagations+tamper stx_6)))"
"(if(tamper? p_19) t_28((propagation-set-tamper-ref p_19) p_19 t_28)))))"
"(syntax1.1"
"(syntax-content the-struct_12)"
"(syntax-scopes the-struct_12)"
"(syntax-shifted-multi-scopes the-struct_12)"
" scope-propagations+tamper11_0"
"(syntax-mpi-shifts the-struct_12)"
"(syntax-srcloc the-struct_12)"
"(syntax-props the-struct_12)"
"(syntax-inspector the-struct_12)))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_12)))))))))))))))"
"(define-values"
"(syntax-taint$1)"
"(lambda(s_84)"
"(begin"
" 'syntax-taint"
"(if(tamper-tainted?(syntax-tamper s_84))"
" s_84"
"(let-values(((stx_7) s_84))"
"(let-values(((the-struct_13) stx_7))"
"(if(syntax?$1 the-struct_13)"
"(let-values(((scope-propagations+tamper12_0)"
"(let-values(((t_33)(tamper-tainted-for-content(syntax-content s_84)))"
"((p_26)(syntax-scope-propagations+tamper stx_7)))"
"(if(tamper? p_26) t_33((propagation-set-tamper-ref p_26) p_26 t_33)))))"
"(syntax1.1"
"(syntax-content the-struct_13)"
"(syntax-scopes the-struct_13)"
"(syntax-shifted-multi-scopes the-struct_13)"
" scope-propagations+tamper12_0"
"(syntax-mpi-shifts the-struct_13)"
"(syntax-srcloc the-struct_13)"
"(syntax-props the-struct_13)"
"(syntax-inspector the-struct_13)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_13))))))))"
"(define-values"
"(any-superior?)"
"(lambda(t_5 from-i_1)"
"(begin"
"(let-values(((ht_47) t_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_47)))"
"((letrec-values(((for-loop_51)"
"(lambda(result_34 i_64)"
"(begin"
" 'for-loop"
"(if i_64"
"(let-values(((i_65)(unsafe-immutable-hash-iterate-key ht_47 i_64)))"
"(let-values(((result_35)"
"(let-values()"
"(let-values(((result_36)"
"(let-values()"
"(let-values()"
"(inspector-superior-or-same? i_65 from-i_1)))))"
"(values result_36)))))"
"(if(if(not((lambda x_30 result_35) i_65))(not #f) #f)"
"(for-loop_51 result_35(unsafe-immutable-hash-iterate-next ht_47 i_64))"
" result_35)))"
" result_34)))))"
" for-loop_51)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_47)))))))"
"(define-values"
"(inspector-superior-or-same?)"
"(lambda(sup-i_0 i_66)"
"(begin"
"(let-values(((or-part_97)(eq? sup-i_0 i_66)))(if or-part_97 or-part_97(inspector-superior? sup-i_0 i_66))))))"
"(define-values"
"(struct:fallback fallback1.1 fallback? fallback-search-list)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()(make-struct-type 'fallback #f 1 0 #f null 'prefab #f '(0) #f 'fallback)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'search-list))))"
"(define-values"
"(fallback-first)"
"(lambda(smss_0)(begin(if(fallback? smss_0)(car(fallback-search-list smss_0)) smss_0))))"
"(define-values"
"(fallback-rest)"
"(lambda(smss_1)"
"(begin"
"(let-values(((l_9)(cdr(fallback-search-list smss_1))))(if(null?(cdr l_9))(car l_9)(fallback1.1 l_9))))))"
"(define-values"
"(fallback-push)"
"(lambda(smss_2 smss/maybe-fallback_0)"
"(begin"
"(fallback1.1"
"(cons"
" smss_2"
"(if(fallback? smss/maybe-fallback_0)"
"(fallback-search-list smss/maybe-fallback_0)"
"(list smss/maybe-fallback_0)))))))"
"(define-values"
"(fallback-update-first)"
"(lambda(smss_3 f_4)"
"(begin"
"(if(fallback? smss_3)"
"(let-values(((l_45)(fallback-search-list smss_3)))(fallback1.1(cons(f_4(car l_45))(cdr l_45))))"
"(f_4 smss_3)))))"
"(define-values"
"(fallback-map)"
"(lambda(smss_4 f_29)"
"(begin"
"(if(fallback? smss_4)"
"(fallback1.1"
"(reverse$1"
"(let-values(((lst_40)(fallback-search-list smss_4)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_40)))"
"((letrec-values(((for-loop_52)"
"(lambda(fold-var_31 lst_41)"
"(begin"
" 'for-loop"
"(if(pair? lst_41)"
"(let-values(((smss_5)(unsafe-car lst_41))((rest_17)(unsafe-cdr lst_41)))"
"(let-values(((fold-var_32)"
"(let-values(((fold-var_33) fold-var_31))"
"(let-values(((fold-var_34)"
"(let-values()"
"(cons"
"(let-values()(f_29 smss_5))"
" fold-var_33))))"
"(values fold-var_34)))))"
"(if(not #f)(for-loop_52 fold-var_32 rest_17) fold-var_32)))"
" fold-var_31)))))"
" for-loop_52)"
" null"
" lst_40)))))"
"(f_29 smss_4)))))"
"(define-values"
"(fallback->list)"
"(lambda(smss_6)(begin(if(fallback? smss_6)(fallback-search-list smss_6)(list smss_6)))))"
"(define-values(cache)(box(make-weak-box #f)))"
"(define-values"
"(clear-resolve-cache!)"
"(case-lambda"
"((sym_12)"
"(begin"
"(let-values(((c_13)(weak-box-value(unbox* cache))))"
"(begin(if c_13(let-values()(hash-remove! c_13 sym_12))(void))(set-box*! shifted-cache #f)))))"
"(()"
"(let-values(((c_14)(weak-box-value(unbox* cache))))"
"(begin(if c_14(let-values()(hash-clear! c_14))(void))(set-box*! shifted-cache #f))))))"
"(define-values"
"(struct:entry entry1.1 entry? entry-scs entry-smss entry-phase entry-binding)"
"(let-values(((struct:_21 make-_21 ?_21 -ref_21 -set!_21)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'entry"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'entry)))))"
"(values"
" struct:_21"
" make-_21"
" ?_21"
"(make-struct-field-accessor -ref_21 0 'scs)"
"(make-struct-field-accessor -ref_21 1 'smss)"
"(make-struct-field-accessor -ref_21 2 'phase)"
"(make-struct-field-accessor -ref_21 3 'binding))))"
"(define-values"
"(resolve-cache-get)"
"(lambda(sym_13 phase_4 scs_3 smss_7)"
"(begin"
"(let-values(((c_15)(weak-box-value(unbox* cache))))"
"(if c_15"
"(let-values(((v_82)(hash-ref c_15 sym_13 #f)))"
"(if v_82"
"(if(eqv? phase_4(entry-phase v_82))"
"(if(set=? scs_3(entry-scs v_82))(if(set=? smss_7(entry-smss v_82))(entry-binding v_82) #f) #f)"
" #f)"
" #f))"
" #f)))))"
"(define-values"
"(resolve-cache-set!)"
"(lambda(sym_14 phase_5 scs_4 smss_8 b_39)"
"(begin"
"(let-values(((wb_0)(unbox* cache)))"
"(let-values(((c_16)(weak-box-value wb_0)))"
"(if(not c_16)"
"(let-values()"
"(begin"
"(box-cas! cache wb_0(make-weak-box(make-hasheq)))"
"(resolve-cache-set! sym_14 phase_5 scs_4 smss_8 b_39)))"
"(let-values()(hash-set! c_16 sym_14(entry1.1 scs_4 smss_8 phase_5 b_39)))))))))"
"(define-values(SHIFTED-CACHE-SIZE) 16)"
"(define-values(shifted-cache)(box #f))"
"(define-values(shifted-cache-pos) 0)"
"(define-values"
"(struct:shifted-entry shifted-entry2.1 shifted-entry? shifted-entry-s shifted-entry-phase shifted-entry-binding)"
"(let-values(((struct:_22 make-_22 ?_22 -ref_22 -set!_22)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-entry"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'shifted-entry)))))"
"(values"
" struct:_22"
" make-_22"
" ?_22"
"(make-struct-field-accessor -ref_22 0 's)"
"(make-struct-field-accessor -ref_22 1 'phase)"
"(make-struct-field-accessor -ref_22 2 'binding))))"
"(define-values"
"(shifted-cache-vector)"
"(lambda()"
"(begin"
"(let-values(((wb_1)(unbox* shifted-cache)))"
"(let-values(((c1_21)(if wb_1(weak-box-value wb_1) #f)))"
"(if c1_21"
"((lambda(vec_16) vec_16) c1_21)"
"(let-values()"
"(let-values(((vec_17)(make-vector SHIFTED-CACHE-SIZE #f)))"
"(begin(set-box*! shifted-cache(make-weak-box vec_17)) vec_17)))))))))"
"(define-values"
"(resolve+shift-cache-get)"
"(lambda(s_23 phase_6)"
"(begin"
"(let-values(((vec_18)(shifted-cache-vector)))"
"(let-values(((vec_13 len_9)"
"(let-values(((vec_19) vec_18))"
"(begin(check-vector vec_19)(values vec_19(unsafe-vector-length vec_19))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_53)"
"(lambda(result_23 pos_7)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_7 len_9)"
"(let-values(((e_14)(unsafe-vector-ref vec_13 pos_7)))"
"(let-values(((result_37)"
"(let-values()"
"(let-values(((result_38)"
"(let-values()"
"(let-values()"
"(if e_14"
"(if(eq? s_23(shifted-entry-s e_14))"
"(if(eqv?"
" phase_6"
"(shifted-entry-phase e_14))"
"(shifted-entry-binding e_14)"
" #f)"
" #f)"
" #f)))))"
"(values result_38)))))"
"(if(if(not((lambda x_31 result_37) e_14))(not #f) #f)"
"(for-loop_53 result_37(unsafe-fx+ 1 pos_7))"
" result_37)))"
" result_23)))))"
" for-loop_53)"
" #f"
" 0)))))))"
"(define-values"
"(resolve+shift-cache-set!)"
"(lambda(s_85 phase_7 b_19)"
"(begin"
"(let-values(((vec_20)(shifted-cache-vector)))"
"(let-values(((p_27) shifted-cache-pos))"
"(begin"
"(vector*-set! vec_20 p_27(shifted-entry2.1 s_85 phase_7 b_19))"
"(set! shifted-cache-pos(fxand(fx+ 1 p_27)(fx- SHIFTED-CACHE-SIZE 1)))))))))"
"(define-values(NUM-CACHE-SLOTS) 8)"
"(define-values(cached-sets)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-sets-pos) 0)"
"(define-values(cached-hashes)(make-weak-box(make-vector NUM-CACHE-SLOTS #f)))"
"(define-values(cached-hashes-pos) 0)"
"(define-values"
"(cache-or-reuse-set)"
"(lambda(s_45)"
"(begin"
"(let-values(((vec_21)"
"(let-values(((or-part_98)(weak-box-value cached-sets)))"
"(if or-part_98"
" or-part_98"
"(let-values(((vec_22)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-sets(make-weak-box vec_22)) vec_22))))))"
"(let-values(((or-part_99)"
"(let-values(((vec_23 len_10)"
"(let-values(((vec_24) vec_21))"
"(begin(check-vector vec_24)(values vec_24(unsafe-vector-length vec_24))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_54)"
"(lambda(result_39 pos_8)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_8 len_10)"
"(let-values(((s2_6)(unsafe-vector-ref vec_23 pos_8)))"
"(let-values(((result_40)"
"(let-values()"
"(let-values(((result_35)"
"(let-values()"
"(let-values()"
"(if s2_6"
"(if(set=? s_45 s2_6) s2_6 #f)"
" #f)))))"
"(values result_35)))))"
"(if(if(not((lambda x_32 result_40) s2_6))(not #f) #f)"
"(for-loop_54 result_40(unsafe-fx+ 1 pos_8))"
" result_40)))"
" result_39)))))"
" for-loop_54)"
" #f"
" 0)))))"
"(if or-part_99"
" or-part_99"
"(begin"
"(vector*-set! vec_21 cached-sets-pos s_45)"
"(set! cached-sets-pos(fxand(fx+ 1 cached-sets-pos)(fx- NUM-CACHE-SLOTS 1)))"
" s_45)))))))"
"(define-values"
"(cache-or-reuse-hash)"
"(lambda(s_86)"
"(begin"
"(let-values(((vec_25)"
"(let-values(((or-part_100)(weak-box-value cached-hashes)))"
"(if or-part_100"
" or-part_100"
"(let-values(((vec_26)(make-vector NUM-CACHE-SLOTS #f)))"
"(begin(set! cached-hashes(make-weak-box vec_26)) vec_26))))))"
"(let-values(((or-part_97)"
"(let-values(((vec_27 len_11)"
"(let-values(((vec_28) vec_25))"
"(begin(check-vector vec_28)(values vec_28(unsafe-vector-length vec_28))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_55)"
"(lambda(result_8 pos_9)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_9 len_11)"
"(let-values(((s2_7)(unsafe-vector-ref vec_27 pos_9)))"
"(let-values(((result_41)"
"(let-values()"
"(let-values(((result_42)"
"(let-values()"
"(let-values()"
"(if s2_7"
"(if(equal? s_86 s2_7) s2_7 #f)"
" #f)))))"
"(values result_42)))))"
"(if(if(not((lambda x_16 result_41) s2_7))(not #f) #f)"
"(for-loop_55 result_41(unsafe-fx+ 1 pos_9))"
" result_41)))"
" result_8)))))"
" for-loop_55)"
" #f"
" 0)))))"
"(if or-part_97"
" or-part_97"
"(begin"
"(vector*-set! vec_25 cached-hashes-pos s_86)"
"(set! cached-hashes-pos(fxand(fx+ 1 cached-hashes-pos)(fx- NUM-CACHE-SLOTS 1)))"
" s_86)))))))"
"(define-values"
"(struct:scope scope1.1 scope? scope-id scope-kind scope-binding-table set-scope-binding-table!)"
"(let-values(((struct:_23 make-_23 ?_23 -ref_23 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'scope"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:scope-with-bindings"
"(lambda(s_87 get-reachable-scopes_2 reach_6 register-trigger_2)"
"(binding-table-register-reachable"
"(scope-binding-table s_87)"
" get-reachable-scopes_2"
" reach_6"
" register-trigger_2)))"
"(cons prop:reach-scopes(lambda(s_88 reach_7)(void)))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_89 ser-push!_6 state_16)"
"(if(binding-table-empty?(scope-binding-table s_89))"
"(let-values()(ser-push!_6 'tag #f))"
"(let-values()"
"(begin"
"(ser-push!_6 'tag '#:scope-fill!)"
"(ser-push!_6(binding-table-prune-to-reachable(scope-binding-table s_89) state_16)))))))"
"(cons"
" prop:serialize"
"(lambda(s_90 ser-push!_7 state_17)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_17) s_90)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(if(eq? s_90 top-level-common-scope)"
"(let-values()(ser-push!_7 'tag '#:scope))"
"(let-values()"
"(begin(ser-push!_7 'tag '#:scope+kind)(ser-push!_7(scope-kind s_90))))))))"
"(cons"
" prop:custom-write"
"(lambda(sc_3 port_6 mode_6)"
"(begin"
"                           (write-string \"#<scope:\" port_6)"
"(display(scope-id sc_3) port_6)"
"                           (write-string \":\" port_6)"
"(display(scope-kind sc_3) port_6)"
"                           (write-string \">\" port_6)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'scope)))))"
"(values"
" struct:_23"
" make-_23"
" ?_23"
"(make-struct-field-accessor -ref_23 0 'id)"
"(make-struct-field-accessor -ref_23 1 'kind)"
"(make-struct-field-accessor -ref_23 2 'binding-table)"
"(make-struct-field-mutator -set!_23 2 'binding-table))))"
"(define-values"
"(deserialize-scope)"
"(case-lambda"
"(()(begin top-level-common-scope))"
"((kind_0)(scope1.1(new-deserialize-scope-id!) kind_0 empty-binding-table))))"
"(define-values(deserialize-scope-fill!)(lambda(s_91 bt_5)(begin(set-scope-binding-table! s_91 bt_5))))"
"(define-values"
"(struct:interned-scope interned-scope2.1 interned-scope? interned-scope-key)"
"(let-values(((struct:_24 make-_24 ?_24 -ref_24 -set!_24)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'interned-scope"
" struct:scope"
" 1"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(s_92 ser-push!_8 state_18)"
"(begin"
"(if(set-member?(serialize-state-reachable-scopes state_18) s_92)"
"(void)"
"                             (let-values () (error \"internal error: found supposedly unreachable scope\")))"
"(ser-push!_8 'tag '#:interned-scope)"
"(ser-push!_8(interned-scope-key s_92)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_4 port_7 mode_7)"
"(begin"
"                           (write-string \"#<scope:\" port_7)"
"(display(scope-id sc_4) port_7)"
"                           (write-string \":\" port_7)"
"(display(scope-kind sc_4) port_7)"
"                           (write-string \" \" port_7)"
"(display(interned-scope-key sc_4) port_7)"
"                           (write-string \">\" port_7)))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'interned-scope)))))"
"(values struct:_24 make-_24 ?_24(make-struct-field-accessor -ref_24 0 'key))))"
"(define-values"
"(struct:multi-scope"
" multi-scope3.1"
" multi-scope?"
" multi-scope-id"
" multi-scope-name"
" multi-scope-scopes"
" multi-scope-shifted"
" multi-scope-label-shifted)"
"(let-values(((struct:_25 make-_25 ?_25 -ref_25 -set!_25)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'multi-scope"
" #f"
" 5"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:scope-with-bindings"
"(lambda(ms_0 get-reachable-scopes_3 reach_8 register-trigger_3)"
"(begin"
"(let-values(((ht_48)(multi-scope-scopes ms_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-values ht_48)))"
"((letrec-values(((for-loop_56)"
"(lambda(i_67)"
"(begin"
" 'for-loop"
"(if i_67"
"(let-values(((sc_5)(hash-iterate-value ht_48 i_67)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(binding-table-empty?"
"(scope-binding-table"
" sc_5))"
"(void)"
"(let-values()"
"(reach_8 sc_5))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_56(hash-iterate-next ht_48 i_67))"
"(values))))"
"(values))))))"
" for-loop_56)"
"(hash-iterate-first ht_48))))"
"(void))))"
"(cons prop:reach-scopes(lambda(s_86 reach_9)(void)))"
"(cons"
" prop:serialize"
"(lambda(ms_1 ser-push!_9 state_19)"
"(let-values((()(begin(ser-push!_9 'tag '#:multi-scope)(values))))"
"(let-values((()(begin(ser-push!_9(multi-scope-name ms_1))(values))))"
"(let-values(((multi-scope-tables_0)(serialize-state-multi-scope-tables state_19)))"
"(ser-push!_9"
"(let-values(((or-part_101)"
"(hash-ref multi-scope-tables_0(multi-scope-scopes ms_1) #f)))"
"(if or-part_101"
" or-part_101"
"(let-values(((ht_49)(make-hasheqv)))"
"(begin"
"(let-values(((ht_50)(multi-scope-scopes ms_1)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_50)))"
"((letrec-values(((for-loop_57)"
"(lambda(i_68)"
"(begin"
" 'for-loop"
"(if i_68"
"(let-values(((phase_8 sc_6)"
"(hash-iterate-key+value ht_50 i_68)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(set-member?"
"(serialize-state-reachable-scopes"
" state_19)"
" sc_6)"
"(let-values()"
"(hash-set!"
" ht_49"
" phase_8"
" sc_6))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_57(hash-iterate-next ht_50 i_68))"
"(values))))"
"(values))))))"
" for-loop_57)"
"(hash-iterate-first ht_50))))"
"(void)"
"(hash-set! multi-scope-tables_0(multi-scope-scopes ms_1) ht_49)"
" ht_49)))))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'multi-scope)))))"
"(values"
" struct:_25"
" make-_25"
" ?_25"
"(make-struct-field-accessor -ref_25 0 'id)"
"(make-struct-field-accessor -ref_25 1 'name)"
"(make-struct-field-accessor -ref_25 2 'scopes)"
"(make-struct-field-accessor -ref_25 3 'shifted)"
"(make-struct-field-accessor -ref_25 4 'label-shifted))))"
"(define-values"
"(deserialize-multi-scope)"
"(lambda(name_15 scopes_8)"
"(begin(multi-scope3.1(new-deserialize-scope-id!) name_15 scopes_8(box(hasheqv))(box(hash))))))"
"(define-values"
"(struct:representative-scope"
" representative-scope4.1"
" representative-scope?"
" representative-scope-owner"
" representative-scope-phase"
" set-representative-scope-owner!"
" set-representative-scope-phase!)"
"(let-values(((struct:_26 make-_26 ?_26 -ref_26 -set!_26)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'representative-scope"
" struct:scope"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:implicitly-reachable #t)"
"(cons prop:reach-scopes(lambda(s_93 reach_10)(reach_10(representative-scope-owner s_93))))"
"(cons"
" prop:serialize-fill!"
"(lambda(s_94 ser-push!_10 state_20)"
"(begin"
"(ser-push!_10 'tag '#:representative-scope-fill!)"
"(ser-push!_10(binding-table-prune-to-reachable(scope-binding-table s_94) state_20))"
"(ser-push!_10(representative-scope-owner s_94)))))"
"(cons"
" prop:serialize"
"(lambda(s_95 ser-push!_11 state_21)"
"(begin"
"(ser-push!_11 'tag '#:representative-scope)"
"(ser-push!_11(scope-kind s_95))"
"(ser-push!_11(representative-scope-phase s_95)))))"
"(cons"
" prop:custom-write"
"(lambda(sc_7 port_8 mode_8)"
"(begin"
"                           (write-string \"#<scope:\" port_8)"
"(display(scope-id sc_7) port_8)"
"(if(representative-scope-owner sc_7)"
"(let-values()"
"(begin"
"                                 (write-string \"=\" port_8)"
"(display(multi-scope-id(representative-scope-owner sc_7)) port_8)))"
"(void))"
"                           (write-string \"@\" port_8)"
"(display(representative-scope-phase sc_7) port_8)"
"                           (write-string \">\" port_8)))))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'representative-scope)))))"
"(values"
" struct:_26"
" make-_26"
" ?_26"
"(make-struct-field-accessor -ref_26 0 'owner)"
"(make-struct-field-accessor -ref_26 1 'phase)"
"(make-struct-field-mutator -set!_26 0 'owner)"
"(make-struct-field-mutator -set!_26 1 'phase))))"
"(define-values"
"(deserialize-representative-scope)"
"(lambda(kind_1 phase_9)"
"(begin(let-values(((v_83)(representative-scope4.1(new-deserialize-scope-id!) kind_1 #f #f phase_9))) v_83))))"
"(define-values"
"(deserialize-representative-scope-fill!)"
"(lambda(s_96 bt_6 owner_0)"
"(begin(begin(deserialize-scope-fill! s_96 bt_6)(set-representative-scope-owner! s_96 owner_0)))))"
"(define-values"
"(struct:shifted-multi-scope"
" shifted-multi-scope5.1"
" shifted-multi-scope?"
" shifted-multi-scope-phase"
" shifted-multi-scope-multi-scope)"
"(let-values(((struct:_27 make-_27 ?_27 -ref_27 -set!_27)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-multi-scope"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:reach-scopes"
"(lambda(sms_3 reach_11)(reach_11(shifted-multi-scope-multi-scope sms_3))))"
"(cons"
" prop:serialize"
"(lambda(sms_4 ser-push!_12 state_22)"
"(begin"
"(ser-push!_12 'tag '#:shifted-multi-scope)"
"(ser-push!_12(shifted-multi-scope-phase sms_4))"
"(ser-push!_12(shifted-multi-scope-multi-scope sms_4)))))"
"(cons"
" prop:custom-write"
"(lambda(sms_5 port_9 mode_9)"
"(begin"
"                           (write-string \"#<scope:\" port_9)"
"(display(multi-scope-id(shifted-multi-scope-multi-scope sms_5)) port_9)"
"                           (write-string \"@\" port_9)"
"(display(shifted-multi-scope-phase sms_5) port_9)"
"                           (write-string \">\" port_9)))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'shifted-multi-scope)))))"
"(values"
" struct:_27"
" make-_27"
" ?_27"
"(make-struct-field-accessor -ref_27 0 'phase)"
"(make-struct-field-accessor -ref_27 1 'multi-scope))))"
"(define-values"
"(deserialize-shifted-multi-scope)"
"(lambda(phase_10 multi-scope_0)(begin(intern-shifted-multi-scope phase_10 multi-scope_0))))"
"(define-values"
"(intern-shifted-multi-scope)"
"(lambda(phase_11 multi-scope_1)"
"(begin"
"(letrec-values(((transaction-loop_0)"
"(lambda(boxed-table_0 key_29 make_0)"
"(begin"
" 'transaction-loop"
"(let-values(((or-part_102)(hash-ref(unbox boxed-table_0) phase_11 #f)))"
"(if or-part_102"
" or-part_102"
"(let-values(((val_17)(make_0)))"
"(let-values(((current_0)(unbox boxed-table_0)))"
"(let-values(((next_3)(hash-set current_0 key_29 val_17)))"
"(if(box-cas! boxed-table_0 current_0 next_3)"
" val_17"
"(transaction-loop_0 boxed-table_0 key_29 make_0)))))))))))"
"(if(phase? phase_11)"
"(let-values()"
"(let-values(((or-part_103)(hash-ref(unbox(multi-scope-shifted multi-scope_1)) phase_11 #f)))"
"(if or-part_103"
" or-part_103"
"(transaction-loop_0"
"(multi-scope-shifted multi-scope_1)"
" phase_11"
"(lambda()(shifted-multi-scope5.1 phase_11 multi-scope_1))))))"
"(let-values()"
"(let-values(((or-part_104)(hash-ref(unbox(multi-scope-label-shifted multi-scope_1)) phase_11 #f)))"
"(if or-part_104"
" or-part_104"
"(transaction-loop_0"
"(multi-scope-label-shifted multi-scope_1)"
" phase_11"
"(lambda()(shifted-multi-scope5.1 phase_11 multi-scope_1)))))))))))"
"(define-values"
"(struct:shifted-to-label-phase shifted-to-label-phase6.1 shifted-to-label-phase? shifted-to-label-phase-from)"
"(let-values(((struct:_28 make-_28 ?_28 -ref_28 -set!_28)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'shifted-to-label-phase"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'shifted-to-label-phase)))))"
"(values struct:_28 make-_28 ?_28(make-struct-field-accessor -ref_28 0 'from))))"
"(define-values(id-counter) 0)"
"(define-values(new-scope-id!)(lambda()(begin(begin(set! id-counter(add1 id-counter)) id-counter))))"
"(define-values(new-deserialize-scope-id!)(lambda()(begin(-(new-scope-id!)))))"
"(define-values(deserialized-scope-id?)(lambda(scope-id_0)(begin(negative? scope-id_0))))"
"(define-values(top-level-common-scope)(scope1.1 0 'module empty-binding-table))"
"(define-values(new-scope)(lambda(kind_2)(begin(scope1.1(new-scope-id!) kind_2 empty-binding-table))))"
"(define-values(interned-scopes-table)(make-weak-hasheq))"
"(define-values"
"(make-interned-scope)"
"(lambda(sym_15)"
"(begin"
"(let-values(((make_1)"
"(lambda()"
"(begin"
" 'make"
"(make-ephemeron"
" sym_15"
"(interned-scope2.1(-(new-scope-id!)) 'interned empty-binding-table sym_15))))))"
"(call-as-atomic"
"(lambda()"
"(let-values(((or-part_105)(ephemeron-value(hash-ref! interned-scopes-table sym_15 make_1))))"
"(if or-part_105"
" or-part_105"
"(let-values(((new_1)(make_1)))"
"(begin(hash-set! interned-scopes-table sym_15 new_1)(ephemeron-value new_1)))))))))))"
"(define-values"
"(new-multi-scope)"
"(let-values(((new-multi-scope8_0)"
"(lambda(name7_0)"
"(begin"
" 'new-multi-scope8"
"(let-values(((name_16) name7_0))"
"(let-values()"
"(intern-shifted-multi-scope"
" 0"
"(multi-scope3.1(new-scope-id!) name_16(make-hasheqv)(box(hasheqv))(box(hash))))))))))"
"(case-lambda(()(begin(new-multi-scope8_0 #f)))((name7_1)(new-multi-scope8_0 name7_1)))))"
"(define-values"
"(multi-scope-to-scope-at-phase)"
"(lambda(ms_2 phase_12)"
"(begin"
"(let-values(((or-part_106)(hash-ref(multi-scope-scopes ms_2) phase_12 #f)))"
"(if or-part_106"
" or-part_106"
"(let-values(((s_97)"
"(representative-scope4.1"
"(if(deserialized-scope-id?(multi-scope-id ms_2))(new-deserialize-scope-id!)(new-scope-id!))"
" 'module"
" empty-binding-table"
" ms_2"
" phase_12)))"
"(begin(hash-set!(multi-scope-scopes ms_2) phase_12 s_97) s_97)))))))"
"(define-values(scope>?)(lambda(sc1_0 sc2_0)(begin(>(scope-id sc1_0)(scope-id sc2_0)))))"
"(define-values(scope<?)(lambda(sc1_1 sc2_1)(begin(<(scope-id sc1_1)(scope-id sc2_1)))))"
"(define-values"
"(shifted-multi-scope<?)"
"(lambda(sms1_0 sms2_0)"
"(begin"
"(let-values(((ms1_0)(shifted-multi-scope-multi-scope sms1_0)))"
"(let-values(((ms2_0)(shifted-multi-scope-multi-scope sms2_0)))"
"(if(eq? ms1_0 ms2_0)"
"(let-values(((p1_0)(shifted-multi-scope-phase sms1_0))((p2_0)(shifted-multi-scope-phase sms2_0)))"
"(if(shifted-to-label-phase? p1_0)"
"(let-values()"
"(if(shifted-to-label-phase? p2_0)"
"(let-values()(phase<?(shifted-to-label-phase-from p1_0)(shifted-to-label-phase-from p2_0)))"
"(let-values() #f)))"
"(if(shifted-to-label-phase? p2_0)(let-values() #t)(let-values()(phase<? p1_0 p2_0)))))"
"(<(multi-scope-id ms1_0)(multi-scope-id ms2_0))))))))"
"(define-values"
"(syntax-e/no-taint)"
"(lambda(s_98)"
"(begin"
"(let-values(((prop_3)(syntax-scope-propagations+tamper s_98)))"
"(if(let-values(((or-part_107)(propagation? prop_3)))"
"(if or-part_107 or-part_107(tamper-needs-propagate? prop_3)))"
"(let-values(((new-content_0)"
"(let-values(((s_99)(syntax-content s_98))"
"((f_30)(lambda(tail?_20 x_33)(begin 'f x_33)))"
"((s->_2)"
"(lambda(sub-s_1)"
"(begin"
" 's->"
"(if(propagation? prop_3)"
"(let-values(((the-struct_14) sub-s_1))"
"(if(syntax?$1 the-struct_14)"
"(let-values(((scopes49_0)"
"(propagation-apply prop_3(syntax-scopes sub-s_1) s_98))"
"((shifted-multi-scopes50_0)"
"(propagation-apply-shifted"
" prop_3"
"(syntax-shifted-multi-scopes sub-s_1)"
" s_98))"
"((mpi-shifts51_0)"
"(propagation-apply-mpi-shifts"
" prop_3"
"(syntax-mpi-shifts sub-s_1)"
" s_98))"
"((inspector52_0)"
"(propagation-apply-inspector"
" prop_3"
"(syntax-inspector sub-s_1)))"
"((scope-propagations+tamper53_0)"
"(propagation-merge"
"(syntax-content sub-s_1)"
" prop_3"
"(syntax-scope-propagations+tamper sub-s_1)"
"(syntax-scopes sub-s_1)"
"(syntax-shifted-multi-scopes sub-s_1)"
"(syntax-mpi-shifts sub-s_1))))"
"(syntax1.1"
"(syntax-content the-struct_14)"
" scopes49_0"
" shifted-multi-scopes50_0"
" scope-propagations+tamper53_0"
" mpi-shifts51_0"
"(syntax-srcloc the-struct_14)"
"(syntax-props the-struct_14)"
" inspector52_0))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_14)))"
"(let-values(((stx_8) sub-s_1))"
"(let-values(((the-struct_15) stx_8))"
"(if(syntax?$1 the-struct_15)"
"(let-values(((scope-propagations+tamper54_0)"
"(let-values(((t_34)"
"(tamper-tainted-for-content"
"(syntax-content sub-s_1)))"
"((p_28)"
"(syntax-scope-propagations+tamper stx_8)))"
"(if(tamper? p_28)"
" t_34"
"((propagation-set-tamper-ref p_28) p_28 t_34)))))"
"(syntax1.1"
"(syntax-content the-struct_15)"
"(syntax-scopes the-struct_15)"
"(syntax-shifted-multi-scopes the-struct_15)"
" scope-propagations+tamper54_0"
"(syntax-mpi-shifts the-struct_15)"
"(syntax-srcloc the-struct_15)"
"(syntax-props the-struct_15)"
"(syntax-inspector the-struct_15)))"
"                                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_15))))))))"
"((seen_9) #f))"
"(let-values(((s_100) s_99)"
"((f_31) f_30)"
"((gf_4)"
"(lambda(tail?_21 v_84)"
"(begin"
" 'gf"
"(if(syntax?$1 v_84)"
"(let-values()(s->_2 v_84))"
"(let-values()(f_30 tail?_21 v_84))))))"
"((seen_10) seen_9))"
"((letrec-values(((loop_71)"
"(lambda(tail?_22 s_101 prev-depth_4)"
"(begin"
" 'loop"
"(let-values(((depth_4)(fx+ 1 prev-depth_4)))"
"(if(if seen_10(fx> depth_4 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_22"
" s_101"
"(lambda(tail?_23 s_102)(gf_4 tail?_23 s_102))"
" seen_10))"
"(if(null? s_101)"
"(let-values()(f_31 tail?_22 s_101))"
"(if(pair? s_101)"
"(let-values()"
"(f_31"
" tail?_22"
"(cons"
"(loop_71 #f(car s_101) depth_4)"
"(loop_71 #t(cdr s_101) depth_4))))"
"(if(symbol? s_101)"
"(let-values()(f_31 #f s_101))"
"(if(boolean? s_101)"
"(let-values()(f_31 #f s_101))"
"(if(number? s_101)"
"(let-values()(f_31 #f s_101))"
"(if(let-values(((or-part_108)(vector? s_101)))"
"(if or-part_108"
" or-part_108"
"(let-values(((or-part_109)(box? s_101)))"
"(if or-part_109"
" or-part_109"
"(let-values(((or-part_110)"
"(prefab-struct-key s_101)))"
"(if or-part_110"
" or-part_110"
"(hash? s_101)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_22"
" s_101"
"(lambda(tail?_24 s_103)(gf_4 tail?_24 s_103))"
" seen_10))"
"(let-values()(gf_4 #f s_101))))))))))))))"
" loop_71)"
" #f"
" s_100"
" 0)))))"
"(begin"
"(set-syntax-content! s_98 new-content_0)"
"(set-syntax-scope-propagations+tamper!"
" s_98"
"(tamper-propagated(if(propagation? prop_3)(propagation-tamper prop_3) prop_3)))"
" new-content_0))"
"(syntax-content s_98))))))"
"(define-values"
"(syntax-e$1)"
"(lambda(s_104)"
"(begin"
" 'syntax-e"
"(let-values(((e_15)(syntax-content s_104)))"
"(if(symbol? e_15)"
"(let-values() e_15)"
"(let-values()"
"(let-values(((content_6)(syntax-e/no-taint s_104)))"
"(if(not(tamper-armed?(syntax-scope-propagations+tamper s_104)))"
"(let-values() content_6)"
"(if(datum-has-elements? content_6)"
"(let-values()(taint-content content_6))"
"(let-values() content_6))))))))))"
"(define-values"
"(generalize-scope)"
"(lambda(sc_8)"
"(begin"
"(if(representative-scope? sc_8)"
"(intern-shifted-multi-scope(representative-scope-phase sc_8)(representative-scope-owner sc_8))"
" sc_8))))"
"(define-values"
"(add-scope)"
"(lambda(s_105 sc_9)"
"(begin"
"(let-values(((s_106) s_105)((sc_10)(generalize-scope sc_9))((op_0) set-add)((prop-op_0) propagation-add))"
"(if(shifted-multi-scope? sc_10)"
"(let-values(((the-struct_16) s_106))"
"(if(syntax?$1 the-struct_16)"
"(let-values(((shifted-multi-scopes55_0)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_106)"
"(lambda(smss_9)(op_0(fallback-first smss_9) sc_10))))"
"((scope-propagations+tamper56_0)"
"(if(datum-has-elements?(syntax-content s_106))"
"(prop-op_0"
"(syntax-scope-propagations+tamper s_106)"
" sc_10"
"(syntax-scopes s_106)"
"(syntax-shifted-multi-scopes s_106)"
"(syntax-mpi-shifts s_106))"
"(syntax-scope-propagations+tamper s_106))))"
"(syntax1.1"
"(syntax-content the-struct_16)"
"(syntax-scopes the-struct_16)"
" shifted-multi-scopes55_0"
" scope-propagations+tamper56_0"
"(syntax-mpi-shifts the-struct_16)"
"(syntax-srcloc the-struct_16)"
"(syntax-props the-struct_16)"
"(syntax-inspector the-struct_16)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_16)))"
"(let-values(((the-struct_17) s_106))"
"(if(syntax?$1 the-struct_17)"
"(let-values(((scopes57_0)(op_0(syntax-scopes s_106) sc_10))"
"((scope-propagations+tamper58_0)"
"(if(datum-has-elements?(syntax-content s_106))"
"(prop-op_0"
"(syntax-scope-propagations+tamper s_106)"
" sc_10"
"(syntax-scopes s_106)"
"(syntax-shifted-multi-scopes s_106)"
"(syntax-mpi-shifts s_106))"
"(syntax-scope-propagations+tamper s_106))))"
"(syntax1.1"
"(syntax-content the-struct_17)"
" scopes57_0"
"(syntax-shifted-multi-scopes the-struct_17)"
" scope-propagations+tamper58_0"
"(syntax-mpi-shifts the-struct_17)"
"(syntax-srcloc the-struct_17)"
"(syntax-props the-struct_17)"
"(syntax-inspector the-struct_17)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_17))))))))"
"(define-values"
"(add-scopes)"
"(lambda(s_107 scs_5)"
"(begin"
"(let-values(((lst_42) scs_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_42)))"
"((letrec-values(((for-loop_58)"
"(lambda(s_108 lst_43)"
"(begin"
" 'for-loop"
"(if(pair? lst_43)"
"(let-values(((sc_11)(unsafe-car lst_43))((rest_18)(unsafe-cdr lst_43)))"
"(let-values(((s_109)"
"(let-values(((s_110) s_108))"
"(let-values(((s_111)(let-values()(add-scope s_110 sc_11))))"
"(values s_111)))))"
"(if(not #f)(for-loop_58 s_109 rest_18) s_109)))"
" s_108)))))"
" for-loop_58)"
" s_107"
" lst_42))))))"
"(define-values"
"(remove-scope)"
"(lambda(s_112 sc_12)"
"(begin"
"(let-values(((s_113) s_112)"
"((sc_13)(generalize-scope sc_12))"
"((op_1) set-remove)"
"((prop-op_1) propagation-remove))"
"(if(shifted-multi-scope? sc_13)"
"(let-values(((the-struct_18) s_113))"
"(if(syntax?$1 the-struct_18)"
"(let-values(((shifted-multi-scopes59_0)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_113)"
"(lambda(smss_10)(op_1(fallback-first smss_10) sc_13))))"
"((scope-propagations+tamper60_0)"
"(if(datum-has-elements?(syntax-content s_113))"
"(prop-op_1"
"(syntax-scope-propagations+tamper s_113)"
" sc_13"
"(syntax-scopes s_113)"
"(syntax-shifted-multi-scopes s_113)"
"(syntax-mpi-shifts s_113))"
"(syntax-scope-propagations+tamper s_113))))"
"(syntax1.1"
"(syntax-content the-struct_18)"
"(syntax-scopes the-struct_18)"
" shifted-multi-scopes59_0"
" scope-propagations+tamper60_0"
"(syntax-mpi-shifts the-struct_18)"
"(syntax-srcloc the-struct_18)"
"(syntax-props the-struct_18)"
"(syntax-inspector the-struct_18)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_18)))"
"(let-values(((the-struct_19) s_113))"
"(if(syntax?$1 the-struct_19)"
"(let-values(((scopes61_0)(op_1(syntax-scopes s_113) sc_13))"
"((scope-propagations+tamper62_0)"
"(if(datum-has-elements?(syntax-content s_113))"
"(prop-op_1"
"(syntax-scope-propagations+tamper s_113)"
" sc_13"
"(syntax-scopes s_113)"
"(syntax-shifted-multi-scopes s_113)"
"(syntax-mpi-shifts s_113))"
"(syntax-scope-propagations+tamper s_113))))"
"(syntax1.1"
"(syntax-content the-struct_19)"
" scopes61_0"
"(syntax-shifted-multi-scopes the-struct_19)"
" scope-propagations+tamper62_0"
"(syntax-mpi-shifts the-struct_19)"
"(syntax-srcloc the-struct_19)"
"(syntax-props the-struct_19)"
"(syntax-inspector the-struct_19)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_19))))))))"
"(define-values"
"(remove-scopes)"
"(lambda(s_114 scs_6)"
"(begin"
"(let-values(((lst_44) scs_6))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_44)))"
"((letrec-values(((for-loop_59)"
"(lambda(s_115 lst_45)"
"(begin"
" 'for-loop"
"(if(pair? lst_45)"
"(let-values(((sc_14)(unsafe-car lst_45))((rest_19)(unsafe-cdr lst_45)))"
"(let-values(((s_116)"
"(let-values(((s_117) s_115))"
"(let-values(((s_118)(let-values()(remove-scope s_117 sc_14))))"
"(values s_118)))))"
"(if(not #f)(for-loop_59 s_116 rest_19) s_116)))"
" s_115)))))"
" for-loop_59)"
" s_114"
" lst_44))))))"
"(define-values"
"(set-flip)"
"(lambda(s_119 e_16)(begin(if(set-member? s_119 e_16)(set-remove s_119 e_16)(set-add s_119 e_16)))))"
"(define-values"
"(flip-scope)"
"(lambda(s_120 sc_15)"
"(begin"
"(let-values(((s_121) s_120)((sc_16)(generalize-scope sc_15))((op_2) set-flip)((prop-op_2) propagation-flip))"
"(if(shifted-multi-scope? sc_16)"
"(let-values(((the-struct_20) s_121))"
"(if(syntax?$1 the-struct_20)"
"(let-values(((shifted-multi-scopes63_0)"
"(fallback-update-first"
"(syntax-shifted-multi-scopes s_121)"
"(lambda(smss_11)(op_2(fallback-first smss_11) sc_16))))"
"((scope-propagations+tamper64_0)"
"(if(datum-has-elements?(syntax-content s_121))"
"(prop-op_2"
"(syntax-scope-propagations+tamper s_121)"
" sc_16"
"(syntax-scopes s_121)"
"(syntax-shifted-multi-scopes s_121)"
"(syntax-mpi-shifts s_121))"
"(syntax-scope-propagations+tamper s_121))))"
"(syntax1.1"
"(syntax-content the-struct_20)"
"(syntax-scopes the-struct_20)"
" shifted-multi-scopes63_0"
" scope-propagations+tamper64_0"
"(syntax-mpi-shifts the-struct_20)"
"(syntax-srcloc the-struct_20)"
"(syntax-props the-struct_20)"
"(syntax-inspector the-struct_20)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_20)))"
"(let-values(((the-struct_21) s_121))"
"(if(syntax?$1 the-struct_21)"
"(let-values(((scopes65_0)(op_2(syntax-scopes s_121) sc_16))"
"((scope-propagations+tamper66_0)"
"(if(datum-has-elements?(syntax-content s_121))"
"(prop-op_2"
"(syntax-scope-propagations+tamper s_121)"
" sc_16"
"(syntax-scopes s_121)"
"(syntax-shifted-multi-scopes s_121)"
"(syntax-mpi-shifts s_121))"
"(syntax-scope-propagations+tamper s_121))))"
"(syntax1.1"
"(syntax-content the-struct_21)"
" scopes65_0"
"(syntax-shifted-multi-scopes the-struct_21)"
" scope-propagations+tamper66_0"
"(syntax-mpi-shifts the-struct_21)"
"(syntax-srcloc the-struct_21)"
"(syntax-props the-struct_21)"
"(syntax-inspector the-struct_21)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_21))))))))"
"(define-values"
"(flip-scopes)"
"(lambda(s_122 scs_7)"
"(begin"
"(let-values(((lst_46) scs_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_46)))"
"((letrec-values(((for-loop_43)"
"(lambda(s_123 lst_47)"
"(begin"
" 'for-loop"
"(if(pair? lst_47)"
"(let-values(((sc_17)(unsafe-car lst_47))((rest_20)(unsafe-cdr lst_47)))"
"(let-values(((s_124)"
"(let-values(((s_125) s_123))"
"(let-values(((s_126)(let-values()(flip-scope s_125 sc_17))))"
"(values s_126)))))"
"(if(not #f)(for-loop_43 s_124 rest_20) s_124)))"
" s_123)))))"
" for-loop_43)"
" s_122"
" lst_46))))))"
"(define-values"
"(push-scope)"
"(lambda(s_127 sms_6)"
"(begin"
"(let-values(((smss/maybe-fallbacks67_0) #f))"
"(let-values(((prev-result_0) #f))"
"(let-values(((push_0)"
"(lambda(smss/maybe-fallbacks_0)"
"(begin"
" 'push"
"(if(eq? smss/maybe-fallbacks67_0 smss/maybe-fallbacks_0)"
"(let-values() prev-result_0)"
"(let-values()"
"(let-values(((r_23)"
"(let-values()"
"(let-values(((smss_12)(fallback-first smss/maybe-fallbacks_0)))"
"(if(set-empty? smss_12)"
"(let-values()(set-add smss_12 sms_6))"
"(if(set-member? smss_12 sms_6)"
"(let-values() smss/maybe-fallbacks_0)"
"(let-values()"
"(fallback-push"
"(set-add smss_12 sms_6)"
" smss/maybe-fallbacks_0))))))))"
"(begin"
"(set! smss/maybe-fallbacks67_0 smss/maybe-fallbacks_0)"
"(set! prev-result_0 r_23)"
" r_23))))))))"
"(let-values(((s_128) s_127)"
"((f_32)(lambda(tail?_25 x_34)(begin 'f x_34)))"
"((d->s_1)"
"(lambda(s_129 d_3)"
"(begin"
" 'd->s"
"(let-values(((the-struct_22) s_129))"
"(if(syntax?$1 the-struct_22)"
"(let-values(((content68_0) d_3)"
"((shifted-multi-scopes69_0)"
"(push_0(syntax-shifted-multi-scopes s_129))))"
"(syntax1.1"
" content68_0"
"(syntax-scopes the-struct_22)"
" shifted-multi-scopes69_0"
"(syntax-scope-propagations+tamper the-struct_22)"
"(syntax-mpi-shifts the-struct_22)"
"(syntax-srcloc the-struct_22)"
"(syntax-props the-struct_22)"
"(syntax-inspector the-struct_22)))"
"                                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_22))))))"
"((s-e_1) syntax-e/no-taint)"
"((seen_11) #f))"
"((letrec-values(((loop_72)"
"(lambda(s_130)"
"(begin"
" 'loop"
"(let-values(((s_131) s_130)"
"((f_33) f_32)"
"((gf_5)"
"(lambda(tail?_26 v_85)"
"(begin"
" 'gf"
"(if(syntax?$1 v_85)"
"(let-values()(d->s_1 v_85(loop_72(s-e_1 v_85))))"
"(let-values()(f_32 tail?_26 v_85))))))"
"((seen_12) seen_11))"
"((letrec-values(((loop_73)"
"(lambda(tail?_27 s_132 prev-depth_5)"
"(begin"
" 'loop"
"(let-values(((depth_5)(fx+ 1 prev-depth_5)))"
"(if(if seen_12(fx> depth_5 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_27"
" s_132"
"(lambda(tail?_28 s_133)(gf_5 tail?_28 s_133))"
" seen_12))"
"(if(null? s_132)"
"(let-values()(f_33 tail?_27 s_132))"
"(if(pair? s_132)"
"(let-values()"
"(f_33"
" tail?_27"
"(cons"
"(loop_73 #f(car s_132) depth_5)"
"(loop_73 #t(cdr s_132) depth_5))))"
"(if(symbol? s_132)"
"(let-values()(f_33 #f s_132))"
"(if(boolean? s_132)"
"(let-values()(f_33 #f s_132))"
"(if(number? s_132)"
"(let-values()(f_33 #f s_132))"
"(if(let-values(((or-part_111)"
"(vector? s_132)))"
"(if or-part_111"
" or-part_111"
"(let-values(((or-part_112)"
"(box? s_132)))"
"(if or-part_112"
" or-part_112"
"(let-values(((or-part_113)"
"(prefab-struct-key"
" s_132)))"
"(if or-part_113"
" or-part_113"
"(hash? s_132)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_27"
" s_132"
"(lambda(tail?_29 s_134)"
"(gf_5 tail?_29 s_134))"
" seen_12))"
"(let-values()(gf_5 #f s_132))))))))))))))"
" loop_73)"
" #f"
" s_131"
" 0))))))"
" loop_72)"
" s_128))))))))"
"(define-values"
"(struct:propagation"
" propagation14.1"
" propagation?"
" propagation-prev-scs"
" propagation-prev-smss"
" propagation-scope-ops"
" propagation-prev-mss"
" propagation-add-mpi-shifts"
" propagation-inspector"
" propagation-tamper)"
"(let-values(((struct:_29 make-_29 ?_29 -ref_29 -set!_29)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'propagation"
" #f"
" 7"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons prop:propagation-set-tamper(lambda(p_29 v_86)(propagation-set-tamper p_29 v_86)))"
"(cons prop:propagation-tamper(lambda(p_30)(propagation-tamper p_30)))"
"(cons prop:propagation syntax-e$1))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'propagation)))))"
"(values"
" struct:_29"
" make-_29"
" ?_29"
"(make-struct-field-accessor -ref_29 0 'prev-scs)"
"(make-struct-field-accessor -ref_29 1 'prev-smss)"
"(make-struct-field-accessor -ref_29 2 'scope-ops)"
"(make-struct-field-accessor -ref_29 3 'prev-mss)"
"(make-struct-field-accessor -ref_29 4 'add-mpi-shifts)"
"(make-struct-field-accessor -ref_29 5 'inspector)"
"(make-struct-field-accessor -ref_29 6 'tamper))))"
"(define-values"
"(propagation-add)"
"(lambda(prop_4 sc_18 prev-scs_0 prev-smss_0 prev-mss_0)"
"(begin"
"(if(propagation? prop_4)"
"(let-values(((the-struct_23) prop_4))"
"(if(propagation? the-struct_23)"
"(let-values(((scope-ops71_0)(hash-set(propagation-scope-ops prop_4) sc_18 'add)))"
"(propagation14.1"
"(propagation-prev-scs the-struct_23)"
"(propagation-prev-smss the-struct_23)"
" scope-ops71_0"
"(propagation-prev-mss the-struct_23)"
"(propagation-add-mpi-shifts the-struct_23)"
"(propagation-inspector the-struct_23)"
"(propagation-tamper the-struct_23)))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_23)))"
"(propagation14.1 prev-scs_0 prev-smss_0(hasheq sc_18 'add) prev-mss_0 #f #f prop_4)))))"
"(define-values"
"(propagation-remove)"
"(lambda(prop_5 sc_19 prev-scs_1 prev-smss_1 prev-mss_1)"
"(begin"
"(if(propagation? prop_5)"
"(let-values(((the-struct_24) prop_5))"
"(if(propagation? the-struct_24)"
"(let-values(((scope-ops72_0)(hash-set(propagation-scope-ops prop_5) sc_19 'remove)))"
"(propagation14.1"
"(propagation-prev-scs the-struct_24)"
"(propagation-prev-smss the-struct_24)"
" scope-ops72_0"
"(propagation-prev-mss the-struct_24)"
"(propagation-add-mpi-shifts the-struct_24)"
"(propagation-inspector the-struct_24)"
"(propagation-tamper the-struct_24)))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_24)))"
"(propagation14.1 prev-scs_1 prev-smss_1(hasheq sc_19 'remove) prev-mss_1 #f #f prop_5)))))"
"(define-values"
"(propagation-flip)"
"(lambda(prop_6 sc_20 prev-scs_2 prev-smss_2 prev-mss_2)"
"(begin"
"(if(propagation? prop_6)"
"(let-values(((ops_0)(propagation-scope-ops prop_6)))"
"(let-values(((current-op_0)(hash-ref ops_0 sc_20 #f)))"
"(if(if(eq? current-op_0 'flip)"
"(if(= 1(hash-count ops_0))"
"(if(not(propagation-inspector prop_6))(not(propagation-add-mpi-shifts prop_6)) #f)"
" #f)"
" #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((the-struct_25) prop_6))"
"(if(propagation? the-struct_25)"
"(let-values(((scope-ops73_0)"
"(if(eq? current-op_0 'flip)"
"(hash-remove ops_0 sc_20)"
"(hash-set"
" ops_0"
" sc_20"
"(let-values(((tmp_9) current-op_0))"
"(if(equal? tmp_9 'add)"
"(let-values() 'remove)"
"(if(equal? tmp_9 'remove)(let-values() 'add)(let-values() 'flip))))))))"
"(propagation14.1"
"(propagation-prev-scs the-struct_25)"
"(propagation-prev-smss the-struct_25)"
" scope-ops73_0"
"(propagation-prev-mss the-struct_25)"
"(propagation-add-mpi-shifts the-struct_25)"
"(propagation-inspector the-struct_25)"
"(propagation-tamper the-struct_25)))"
"                    (raise-argument-error 'struct-copy \"propagation?\" the-struct_25)))))))"
"(propagation14.1 prev-scs_2 prev-smss_2(hasheq sc_20 'flip) prev-mss_2 #f #f prop_6)))))"
"(define-values"
"(propagation-mpi-shift)"
"(lambda(prop_7 add_0 inspector_2 prev-scs_3 prev-smss_3 prev-mss_3)"
"(begin"
"(if(propagation? prop_7)"
"(let-values(((the-struct_26) prop_7))"
"(if(propagation? the-struct_26)"
"(let-values(((add-mpi-shifts74_0)"
"(let-values(((base-add_0)(propagation-add-mpi-shifts prop_7)))"
"(if(if add_0 base-add_0 #f)"
"(lambda(mss_0)(begin 'add-mpi-shifts74(add_0(base-add_0 mss_0))))"
"(let-values(((or-part_114) add_0))(if or-part_114 or-part_114 base-add_0)))))"
"((inspector75_0)"
"(let-values(((or-part_115)(propagation-inspector prop_7)))"
"(if or-part_115 or-part_115 inspector_2))))"
"(propagation14.1"
"(propagation-prev-scs the-struct_26)"
"(propagation-prev-smss the-struct_26)"
"(propagation-scope-ops the-struct_26)"
"(propagation-prev-mss the-struct_26)"
" add-mpi-shifts74_0"
" inspector75_0"
"(propagation-tamper the-struct_26)))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_26)))"
"(propagation14.1 prev-scs_3 prev-smss_3 '#hasheq() prev-mss_3 add_0 inspector_2 prop_7)))))"
"(define-values"
"(propagation-apply)"
"(lambda(prop_8 scs_8 parent-s_0)"
"(begin"
"(if(eq?(propagation-prev-scs prop_8) scs_8)"
"(let-values()(syntax-scopes parent-s_0))"
"(let-values()"
"(let-values(((new-scs_0)"
"(let-values(((ht_51)(propagation-scope-ops prop_8)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_51)))"
"((letrec-values(((for-loop_60)"
"(lambda(scs_9 i_69)"
"(begin"
" 'for-loop"
"(if i_69"
"(let-values(((sc_21 op_3)"
"(unsafe-immutable-hash-iterate-key+value ht_51 i_69)))"
"(let-values(((scs_10)"
"(let-values(((scs_11) scs_9))"
"(if(not(shifted-multi-scope? sc_21))"
"(let-values(((scs_12) scs_11))"
"(let-values(((scs_13)"
"(let-values()"
"(let-values(((tmp_10) op_3))"
"(if(equal? tmp_10 'add)"
"(let-values()"
"(set-add scs_12 sc_21))"
"(if(equal?"
" tmp_10"
" 'remove)"
"(let-values()"
"(set-remove"
" scs_12"
" sc_21))"
"(let-values()"
"(set-flip"
" scs_12"
" sc_21))))))))"
"(values scs_13)))"
" scs_11))))"
"(if(not #f)"
"(for-loop_60"
" scs_10"
"(unsafe-immutable-hash-iterate-next ht_51 i_69))"
" scs_10)))"
" scs_9)))))"
" for-loop_60)"
" scs_8"
"(unsafe-immutable-hash-iterate-first ht_51))))))"
"(if(set=? new-scs_0(syntax-scopes parent-s_0))"
"(syntax-scopes parent-s_0)"
"(cache-or-reuse-set new-scs_0))))))))"
"(define-values"
"(propagation-apply-shifted)"
"(lambda(prop_9 smss_13 parent-s_1)"
"(begin"
"(if(eq?(propagation-prev-smss prop_9) smss_13)"
"(let-values()(syntax-shifted-multi-scopes parent-s_1))"
"(let-values()"
"(let-values(((new-smss_0)"
"(let-values(((ht_52)(propagation-scope-ops prop_9)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_52)))"
"((letrec-values(((for-loop_61)"
"(lambda(smss_14 i_70)"
"(begin"
" 'for-loop"
"(if i_70"
"(let-values(((sms_7 op_4)"
"(unsafe-immutable-hash-iterate-key+value ht_52 i_70)))"
"(let-values(((smss_15)"
"(let-values(((smss_16) smss_14))"
"(if(shifted-multi-scope? sms_7)"
"(let-values(((smss_17) smss_16))"
"(let-values(((smss_18)"
"(let-values()"
"(fallback-update-first"
" smss_17"
"(lambda(smss_19)"
"(let-values(((tmp_11)"
" op_4))"
"(if(equal? tmp_11 'add)"
"(let-values()"
"(set-add"
" smss_19"
" sms_7))"
"(if(equal?"
" tmp_11"
" 'remove)"
"(let-values()"
"(set-remove"
" smss_19"
" sms_7))"
"(let-values()"
"(set-flip"
" smss_19"
" sms_7))))))))))"
"(values smss_18)))"
" smss_16))))"
"(if(not #f)"
"(for-loop_61"
" smss_15"
"(unsafe-immutable-hash-iterate-next ht_52 i_70))"
" smss_15)))"
" smss_14)))))"
" for-loop_61)"
" smss_13"
"(unsafe-immutable-hash-iterate-first ht_52))))))"
"(let-values(((parent-smss_0)(syntax-shifted-multi-scopes parent-s_1)))"
"(if(if(set? new-smss_0)(if(set? parent-smss_0)(set=? new-smss_0 parent-smss_0) #f) #f)"
" parent-smss_0"
"(cache-or-reuse-hash new-smss_0)))))))))"
"(define-values"
"(propagation-apply-mpi-shifts)"
"(lambda(prop_10 mss_1 parent-s_2)"
"(begin"
"(if(eq?(propagation-prev-mss prop_10) mss_1)"
"(let-values()(syntax-mpi-shifts parent-s_2))"
"(let-values()(let-values(((add_1)(propagation-add-mpi-shifts prop_10)))(if add_1(add_1 mss_1) mss_1)))))))"
"(define-values"
"(propagation-apply-inspector)"
"(lambda(prop_11 i_71)"
"(begin(let-values(((or-part_116) i_71))(if or-part_116 or-part_116(propagation-inspector prop_11))))))"
"(define-values"
"(propagation-set-tamper)"
"(lambda(prop_12 t_35)"
"(begin"
"(if(propagation? prop_12)"
"(let-values(((the-struct_27) prop_12))"
"(if(propagation? the-struct_27)"
"(let-values(((tamper76_0) t_35))"
"(propagation14.1"
"(propagation-prev-scs the-struct_27)"
"(propagation-prev-smss the-struct_27)"
"(propagation-scope-ops the-struct_27)"
"(propagation-prev-mss the-struct_27)"
"(propagation-add-mpi-shifts the-struct_27)"
"(propagation-inspector the-struct_27)"
" tamper76_0))"
"            (raise-argument-error 'struct-copy \"propagation?\" the-struct_27)))"
" t_35))))"
"(define-values"
"(propagation-merge)"
"(lambda(content_7 prop_13 base-prop_0 prev-scs_4 prev-smss_4 prev-mss_4)"
"(begin"
"(if(not(datum-has-elements? content_7))"
"(let-values()(if(tamper-tainted?(propagation-tamper prop_13)) 'tainted base-prop_0))"
"(if(not(propagation? base-prop_0))"
"(let-values()"
"(if(if(eq?(propagation-prev-scs prop_13) prev-scs_4)"
"(if(eq?(propagation-prev-smss prop_13) prev-smss_4)"
"(if(eq?(propagation-prev-mss prop_13) prev-mss_4)"
"(eq?(propagation-tamper prop_13) base-prop_0)"
" #f)"
" #f)"
" #f)"
"(let-values() prop_13)"
"(let-values()"
"(propagation14.1"
" prev-scs_4"
" prev-smss_4"
"(propagation-scope-ops prop_13)"
" prev-mss_4"
"(propagation-add-mpi-shifts prop_13)"
"(propagation-inspector prop_13)"
"(if(tamper-tainted?(propagation-tamper prop_13)) 'tainted/need-propagate base-prop_0)))))"
"(let-values()"
"(let-values(((new-ops_0)"
"(let-values(((ht_53)(propagation-scope-ops prop_13)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_53)))"
"((letrec-values(((for-loop_62)"
"(lambda(ops_1 i_72)"
"(begin"
" 'for-loop"
"(if i_72"
"(let-values(((sc_22 op_5)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_53"
" i_72)))"
"(let-values(((ops_2)"
"(let-values(((ops_3) ops_1))"
"(let-values(((ops_4)"
"(let-values()"
"(let-values(((tmp_12) op_5))"
"(if(equal? tmp_12 'add)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_22"
" 'add))"
"(if(equal? tmp_12 'remove)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_22"
" 'remove))"
"(let-values()"
"(let-values(((current-op_1)"
"(hash-ref"
" ops_3"
" sc_22"
" #f)))"
"(let-values(((tmp_13)"
" current-op_1))"
"(if(equal?"
" tmp_13"
" 'add)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_22"
" 'remove))"
"(if(equal?"
" tmp_13"
" 'remove)"
"(let-values()"
"(hash-set"
" ops_3"
" sc_22"
" 'add))"
"(if(equal?"
" tmp_13"
" 'flip)"
"(let-values()"
"(hash-remove"
" ops_3"
" sc_22))"
"(let-values()"
"(hash-set"
" ops_3"
" sc_22"
" 'flip))))))))))))))"
"(values ops_4)))))"
"(if(not #f)"
"(for-loop_62"
" ops_2"
"(unsafe-immutable-hash-iterate-next ht_53 i_72))"
" ops_2)))"
" ops_1)))))"
" for-loop_62)"
"(propagation-scope-ops base-prop_0)"
"(unsafe-immutable-hash-iterate-first ht_53))))))"
"(let-values(((add_2)(propagation-add-mpi-shifts prop_13)))"
"(let-values(((base-add_1)(propagation-add-mpi-shifts base-prop_0)))"
"(let-values(((new-tamper_0)"
"(if(let-values(((or-part_117)(tamper-tainted?(propagation-tamper prop_13))))"
"(if or-part_117 or-part_117(tamper-tainted?(propagation-tamper base-prop_0))))"
" 'tainted/need-propagate"
"(propagation-tamper base-prop_0))))"
"(if(if(zero?(hash-count new-ops_0))"
"(if(not add_2)"
"(if(not base-add_1)"
"(if(not(propagation-inspector prop_13))(not(propagation-inspector base-prop_0)) #f)"
" #f)"
" #f)"
" #f)"
" new-tamper_0"
"(let-values(((the-struct_28) base-prop_0))"
"(if(propagation? the-struct_28)"
"(let-values(((scope-ops77_0) new-ops_0)"
"((add-mpi-shifts78_0)"
"(if(if add_2 base-add_1 #f)"
"(lambda(mss_2)(begin 'add-mpi-shifts78(add_2(base-add_1 mss_2))))"
"(let-values(((or-part_118) add_2))(if or-part_118 or-part_118 base-add_1))))"
"((inspector79_0)"
"(let-values(((or-part_119)(propagation-inspector base-prop_0)))"
"(if or-part_119 or-part_119(propagation-inspector prop_13))))"
"((tamper80_0) new-tamper_0))"
"(propagation14.1"
"(propagation-prev-scs the-struct_28)"
"(propagation-prev-smss the-struct_28)"
" scope-ops77_0"
"(propagation-prev-mss the-struct_28)"
" add-mpi-shifts78_0"
" inspector79_0"
" tamper80_0))"
"                          (raise-argument-error 'struct-copy \"propagation?\" the-struct_28))))))))))))))"
"(define-values"
"(shift-multi-scope)"
"(lambda(sms_8 delta_0)"
"(begin"
"(if(zero-phase? delta_0)"
"(let-values() sms_8)"
"(if(label-phase? delta_0)"
"(let-values()"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_8))"
"(let-values() #f)"
"(let-values()"
"(intern-shifted-multi-scope"
"(shifted-to-label-phase6.1(phase- 0(shifted-multi-scope-phase sms_8)))"
"(shifted-multi-scope-multi-scope sms_8)))))"
"(if(shifted-to-label-phase?(shifted-multi-scope-phase sms_8))"
"(let-values() sms_8)"
"(let-values()"
"(intern-shifted-multi-scope"
"(phase+ delta_0(shifted-multi-scope-phase sms_8))"
"(shifted-multi-scope-multi-scope sms_8)))))))))"
"(define-values"
"(syntax-shift-phase-level$1)"
"(lambda(s_135 phase_13)"
"(begin"
" 'syntax-shift-phase-level"
"(if(eqv? phase_13 0)"
" s_135"
"(let-values()"
"(let-values(((smss81_0) #f))"
"(let-values(((prev-result_1) #f))"
"(let-values(((shift-all_0)"
"(lambda(smss_20)"
"(begin"
" 'shift-all"
"(if(eq? smss81_0 smss_20)"
"(let-values() prev-result_1)"
"(let-values()"
"(let-values(((r_24)"
"(let-values()"
"(fallback-map"
" smss_20"
"(lambda(smss_21)"
"(let-values(((ht_54) smss_21))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_54)))"
"((letrec-values(((for-loop_63)"
"(lambda(table_68 i_73)"
"(begin"
" 'for-loop"
"(if i_73"
"(let-values(((sms_9)"
"(unsafe-immutable-hash-iterate-key"
" ht_54"
" i_73)))"
"(let-values(((table_69)"
"(let-values(((new-sms_0)"
"(shift-multi-scope"
" sms_9"
" phase_13)))"
"(begin"
" #t"
"((letrec-values(((for-loop_64)"
"(lambda(table_70)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_71)"
"(let-values(((table_72)"
" table_70))"
"(if new-sms_0"
"(let-values(((table_73)"
" table_72))"
"(let-values(((table_74)"
"(let-values()"
"(let-values(((key_30"
" val_18)"
"(let-values()"
"(values"
"(let-values()"
" new-sms_0)"
" #t))))"
"(hash-set"
" table_73"
" key_30"
" val_18)))))"
"(values"
" table_74)))"
" table_72))))"
" table_71))))))"
" for-loop_64)"
" table_68)))))"
"(if(not #f)"
"(for-loop_63"
" table_69"
"(unsafe-immutable-hash-iterate-next"
" ht_54"
" i_73))"
" table_69)))"
" table_68)))))"
" for-loop_63)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_54)))))))))"
"(begin(set! smss81_0 smss_20)(set! prev-result_1 r_24) r_24))))))))"
"(let-values(((s_136) s_135)"
"((f_34)(lambda(tail?_30 d_4)(begin 'f d_4)))"
"((d->s_2)"
"(lambda(s_137 d_5)"
"(begin"
" 'd->s"
"(let-values(((the-struct_29) s_137))"
"(if(syntax?$1 the-struct_29)"
"(let-values(((content82_0) d_5)"
"((shifted-multi-scopes83_0)"
"(shift-all_0(syntax-shifted-multi-scopes s_137))))"
"(syntax1.1"
" content82_0"
"(syntax-scopes the-struct_29)"
" shifted-multi-scopes83_0"
"(syntax-scope-propagations+tamper the-struct_29)"
"(syntax-mpi-shifts the-struct_29)"
"(syntax-srcloc the-struct_29)"
"(syntax-props the-struct_29)"
"(syntax-inspector the-struct_29)))"
"                                      (raise-argument-error 'struct-copy \"syntax?\" the-struct_29))))))"
"((s-e_2) syntax-e/no-taint)"
"((seen_13) #f))"
"((letrec-values(((loop_74)"
"(lambda(s_138)"
"(begin"
" 'loop"
"(let-values(((s_139) s_138)"
"((f_35) f_34)"
"((gf_6)"
"(lambda(tail?_31 v_87)"
"(begin"
" 'gf"
"(if(syntax?$1 v_87)"
"(let-values()(d->s_2 v_87(loop_74(s-e_2 v_87))))"
"(let-values()(f_34 tail?_31 v_87))))))"
"((seen_14) seen_13))"
"((letrec-values(((loop_75)"
"(lambda(tail?_32 s_140 prev-depth_6)"
"(begin"
" 'loop"
"(let-values(((depth_6)(fx+ 1 prev-depth_6)))"
"(if(if seen_14(fx> depth_6 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_32"
" s_140"
"(lambda(tail?_33 s_141)(gf_6 tail?_33 s_141))"
" seen_14))"
"(if(null? s_140)"
"(let-values()(f_35 tail?_32 s_140))"
"(if(pair? s_140)"
"(let-values()"
"(f_35"
" tail?_32"
"(cons"
"(loop_75 #f(car s_140) depth_6)"
"(loop_75 #t(cdr s_140) depth_6))))"
"(if(symbol? s_140)"
"(let-values()(f_35 #f s_140))"
"(if(boolean? s_140)"
"(let-values()(f_35 #f s_140))"
"(if(number? s_140)"
"(let-values()(f_35 #f s_140))"
"(if(let-values(((or-part_120)"
"(vector? s_140)))"
"(if or-part_120"
" or-part_120"
"(let-values(((or-part_121)"
"(box? s_140)))"
"(if or-part_121"
" or-part_121"
"(let-values(((or-part_122)"
"(prefab-struct-key"
" s_140)))"
"(if or-part_122"
" or-part_122"
"(hash? s_140)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_32"
" s_140"
"(lambda(tail?_34 s_142)"
"(gf_6 tail?_34 s_142))"
" seen_14))"
"(let-values()"
"(gf_6 #f s_140))))))))))))))"
" loop_75)"
" #f"
" s_139"
" 0))))))"
" loop_74)"
" s_136))))))))))"
"(define-values"
"(syntax-swap-scopes)"
"(lambda(s_143 src-scopes_0 dest-scopes_0)"
"(begin"
"(if(equal? src-scopes_0 dest-scopes_0)"
" s_143"
"(let-values(((src-smss_0 src-scs_0)"
"(set-partition"
"(let-values(((ht_55) src-scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_55)))"
"((letrec-values(((for-loop_65)"
"(lambda(table_75 i_74)"
"(begin"
" 'for-loop"
"(if i_74"
"(let-values(((sc_23)"
"(unsafe-immutable-hash-iterate-key ht_55 i_74)))"
"(let-values(((table_76)"
"(let-values(((table_77) table_75))"
"(let-values(((table_78)"
"(let-values()"
"(let-values(((key_31 val_19)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_23))"
" #t))))"
"(hash-set"
" table_77"
" key_31"
" val_19)))))"
"(values table_78)))))"
"(if(not #f)"
"(for-loop_65"
" table_76"
"(unsafe-immutable-hash-iterate-next ht_55 i_74))"
" table_76)))"
" table_75)))))"
" for-loop_65)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_55))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq)))"
"((dest-smss_0 dest-scs_0)"
"(set-partition"
"(let-values(((ht_56) dest-scopes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_56)))"
"((letrec-values(((for-loop_66)"
"(lambda(table_79 i_75)"
"(begin"
" 'for-loop"
"(if i_75"
"(let-values(((sc_24)"
"(unsafe-immutable-hash-iterate-key ht_56 i_75)))"
"(let-values(((table_80)"
"(let-values(((table_81) table_79))"
"(let-values(((table_82)"
"(let-values()"
"(let-values(((key_32 val_20)"
"(let-values()"
"(values"
"(let-values()"
"(generalize-scope"
" sc_24))"
" #t))))"
"(hash-set"
" table_81"
" key_32"
" val_20)))))"
"(values table_82)))))"
"(if(not #f)"
"(for-loop_66"
" table_80"
"(unsafe-immutable-hash-iterate-next ht_56 i_75))"
" table_80)))"
" table_79)))))"
" for-loop_66)"
" '#hasheq()"
"(unsafe-immutable-hash-iterate-first ht_56))))"
" shifted-multi-scope?"
"(seteq)"
"(seteq))))"
"(let-values(((scs84_0) #f))"
"(let-values(((prev-result_2) #f))"
"(let-values(((swap-scs_0)"
"(lambda(scs_14)"
"(begin"
" 'swap-scs"
"(if(eq? scs84_0 scs_14)"
"(let-values() prev-result_2)"
"(let-values()"
"(let-values(((r_25)"
"(let-values()"
"(if(subset? src-scs_0 scs_14)"
"(set-union(set-subtract scs_14 src-scs_0) dest-scs_0)"
" scs_14))))"
"(begin(set! scs84_0 scs_14)(set! prev-result_2 r_25) r_25))))))))"
"(let-values(((smss85_0) #f))"
"(let-values(((prev-result_3) #f))"
"(let-values(((swap-smss_0)"
"(lambda(smss_22)"
"(begin"
" 'swap-smss"
"(if(eq? smss85_0 smss_22)"
"(let-values() prev-result_3)"
"(let-values()"
"(let-values(((r_26)"
"(let-values()"
"(fallback-update-first"
" smss_22"
"(lambda(smss_23)"
"(if(subset? src-smss_0 smss_23)"
"(set-union(set-subtract smss_23 src-smss_0) dest-smss_0)"
" smss_23))))))"
"(begin(set! smss85_0 smss_22)(set! prev-result_3 r_26) r_26))))))))"
"(let-values(((s_144) s_143)"
"((f_36)(lambda(tail?_35 d_6)(begin 'f d_6)))"
"((d->s_3)"
"(lambda(s_145 d_7)"
"(begin"
" 'd->s"
"(let-values(((the-struct_30) s_145))"
"(if(syntax?$1 the-struct_30)"
"(let-values(((content86_0) d_7)"
"((scopes87_0)(swap-scs_0(syntax-scopes s_145)))"
"((shifted-multi-scopes88_0)"
"(swap-smss_0(syntax-shifted-multi-scopes s_145))))"
"(syntax1.1"
" content86_0"
" scopes87_0"
" shifted-multi-scopes88_0"
"(syntax-scope-propagations+tamper the-struct_30)"
"(syntax-mpi-shifts the-struct_30)"
"(syntax-srcloc the-struct_30)"
"(syntax-props the-struct_30)"
"(syntax-inspector the-struct_30)))"
"                                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_30))))))"
"((s-e_3) syntax-e/no-taint)"
"((seen_15) #f))"
"((letrec-values(((loop_76)"
"(lambda(s_146)"
"(begin"
" 'loop"
"(let-values(((s_147) s_146)"
"((f_37) f_36)"
"((gf_7)"
"(lambda(tail?_36 v_88)"
"(begin"
" 'gf"
"(if(syntax?$1 v_88)"
"(let-values()(d->s_3 v_88(loop_76(s-e_3 v_88))))"
"(let-values()(f_36 tail?_36 v_88))))))"
"((seen_16) seen_15))"
"((letrec-values(((loop_77)"
"(lambda(tail?_37 s_148 prev-depth_7)"
"(begin"
" 'loop"
"(let-values(((depth_7)(fx+ 1 prev-depth_7)))"
"(if(if seen_16(fx> depth_7 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_37"
" s_148"
"(lambda(tail?_38 s_149)"
"(gf_7 tail?_38 s_149))"
" seen_16))"
"(if(null? s_148)"
"(let-values()(f_37 tail?_37 s_148))"
"(if(pair? s_148)"
"(let-values()"
"(f_37"
" tail?_37"
"(cons"
"(loop_77 #f(car s_148) depth_7)"
"(loop_77 #t(cdr s_148) depth_7))))"
"(if(symbol? s_148)"
"(let-values()(f_37 #f s_148))"
"(if(boolean? s_148)"
"(let-values()(f_37 #f s_148))"
"(if(number? s_148)"
"(let-values()(f_37 #f s_148))"
"(if(let-values(((or-part_123)"
"(vector? s_148)))"
"(if or-part_123"
" or-part_123"
"(let-values(((or-part_124)"
"(box? s_148)))"
"(if or-part_124"
" or-part_124"
"(let-values(((or-part_125)"
"(prefab-struct-key"
" s_148)))"
"(if or-part_125"
" or-part_125"
"(hash? s_148)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_37"
" s_148"
"(lambda(tail?_39 s_150)"
"(gf_7 tail?_39 s_150))"
" seen_16))"
"(let-values()"
"(gf_7 #f s_148))))))))))))))"
" loop_77)"
" #f"
" s_147"
" 0))))))"
" loop_76)"
" s_144)))))))))))))"
"(define-values"
"(syntax-scope-set)"
"(lambda(s_151 phase_14)"
"(begin(scope-set-at-fallback s_151(fallback-first(syntax-shifted-multi-scopes s_151)) phase_14))))"
"(define-values"
"(scope-set-at-fallback)"
"(lambda(s_152 smss_24 phase_15)"
"(begin"
"(let-values(((ht_57) smss_24))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_57)))"
"((letrec-values(((for-loop_67)"
"(lambda(scopes_9 i_76)"
"(begin"
" 'for-loop"
"(if i_76"
"(let-values(((sms_10)(unsafe-immutable-hash-iterate-key ht_57 i_76)))"
"(let-values(((scopes_10)"
"(let-values(((scopes_11) scopes_9))"
"(if(let-values(((or-part_126)(label-phase? phase_15)))"
"(if or-part_126"
" or-part_126"
"(not"
"(shifted-to-label-phase?"
"(shifted-multi-scope-phase sms_10)))))"
"(let-values(((scopes_12) scopes_11))"
"(let-values(((scopes_13)"
"(let-values()"
"(set-add"
" scopes_12"
"(multi-scope-to-scope-at-phase"
"(shifted-multi-scope-multi-scope sms_10)"
"(let-values(((ph_0)"
"(shifted-multi-scope-phase"
" sms_10)))"
"(if(shifted-to-label-phase? ph_0)"
"(shifted-to-label-phase-from ph_0)"
"(phase- ph_0 phase_15))))))))"
"(values scopes_13)))"
" scopes_11))))"
"(if(not #f)"
"(for-loop_67 scopes_10(unsafe-immutable-hash-iterate-next ht_57 i_76))"
" scopes_10)))"
" scopes_9)))))"
" for-loop_67)"
"(syntax-scopes s_152)"
"(unsafe-immutable-hash-iterate-first ht_57)))))))"
"(define-values"
"(find-max-scope)"
"(lambda(scopes_14)"
"(begin"
"(begin"
"        (if (set-empty? scopes_14) (let-values () (error \"cannot bind in empty scope set\")) (void))"
"(let-values(((ht_58) scopes_14))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_58)))"
"((letrec-values(((for-loop_68)"
"(lambda(max-sc_0 i_77)"
"(begin"
" 'for-loop"
"(if i_77"
"(let-values(((sc_25)(unsafe-immutable-hash-iterate-key ht_58 i_77)))"
"(let-values(((max-sc_1)"
"(let-values(((max-sc_2) max-sc_0))"
"(let-values(((max-sc_3)"
"(let-values()"
"(if(scope>? sc_25 max-sc_2) sc_25 max-sc_2))))"
"(values max-sc_3)))))"
"(if(not #f)"
"(for-loop_68 max-sc_1(unsafe-immutable-hash-iterate-next ht_58 i_77))"
" max-sc_1)))"
" max-sc_0)))))"
" for-loop_68)"
"(set-first scopes_14)"
"(unsafe-immutable-hash-iterate-first ht_58))))))))"
"(define-values"
"(add-binding-in-scopes!20.1)"
"(lambda(just-for-nominal?15_0 scopes17_0 sym18_0 binding19_0)"
"(begin"
" 'add-binding-in-scopes!20"
"(let-values(((scopes_15) scopes17_0))"
"(let-values(((sym_16) sym18_0))"
"(let-values(((binding_3) binding19_0))"
"(let-values(((just-for-nominal?_1) just-for-nominal?15_0))"
"(let-values()"
"(let-values(((max-sc_4)(find-max-scope scopes_15)))"
"(let-values(((bt_7)"
"(binding-table-add"
"(scope-binding-table max-sc_4)"
" scopes_15"
" sym_16"
" binding_3"
" just-for-nominal?_1)))"
"(begin(set-scope-binding-table! max-sc_4 bt_7)(clear-resolve-cache! sym_16))))))))))))"
"(define-values"
"(add-bulk-binding-in-scopes!27.1)"
"(lambda(shadow-except23_0 scopes25_1 bulk-binding26_0)"
"(begin"
" 'add-bulk-binding-in-scopes!27"
"(let-values(((scopes_16) scopes25_1))"
"(let-values(((bulk-binding_0) bulk-binding26_0))"
"(let-values(((shadow-except_1) shadow-except23_0))"
"(let-values()"
"(let-values(((max-sc_5)(find-max-scope scopes_16)))"
"(let-values(((bt_8)"
"(let-values(((temp89_0)(scope-binding-table max-sc_5))"
"((scopes90_0) scopes_16)"
"((bulk-binding91_0) bulk-binding_0)"
"((shadow-except92_0) shadow-except_1))"
"(binding-table-add-bulk9.1 shadow-except92_0 temp89_0 scopes90_0 bulk-binding91_0))))"
"(begin(set-scope-binding-table! max-sc_5 bt_8)(clear-resolve-cache!)))))))))))"
"(define-values"
"(syntax-any-macro-scopes?)"
"(lambda(s_153)"
"(begin"
"(let-values(((ht_59)(syntax-scopes s_153)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_59)))"
"((letrec-values(((for-loop_69)"
"(lambda(result_43 i_78)"
"(begin"
" 'for-loop"
"(if i_78"
"(let-values(((sc_26)(unsafe-immutable-hash-iterate-key ht_59 i_78)))"
"(let-values(((result_44)"
"(let-values()"
"(let-values(((result_45)"
"(let-values()"
"(let-values()(eq?(scope-kind sc_26) 'macro)))))"
"(values result_45)))))"
"(if(if(not((lambda x_35 result_44) sc_26))(not #f) #f)"
"(for-loop_69 result_44(unsafe-immutable-hash-iterate-next ht_59 i_78))"
" result_44)))"
" result_43)))))"
" for-loop_69)"
" #f"
"(unsafe-immutable-hash-iterate-first ht_59)))))))"
"(define-values"
"(resolve40.1)"
"(lambda(ambiguous-value30_0 exactly?31_0 extra-shifts33_0 get-scopes?32_0 s38_0 phase39_0)"
"(begin"
" 'resolve40"
"(let-values(((s_154) s38_0))"
"(let-values(((phase_16) phase39_0))"
"(let-values(((ambiguous-value_0) ambiguous-value30_0))"
"(let-values(((exactly?_0) exactly?31_0))"
"(let-values(((get-scopes?_0) get-scopes?32_0))"
"(let-values(((extra-shifts_2) extra-shifts33_0))"
"(let-values()"
"(let-values(((sym_17)(syntax-content s_154)))"
"((letrec-values(((fallback-loop_0)"
"(lambda(smss_25)"
"(begin"
" 'fallback-loop"
"(let-values(((c1_22)"
"(if(not exactly?_0)"
"(if(not get-scopes?_0)"
"(resolve-cache-get"
" sym_17"
" phase_16"
"(syntax-scopes s_154)"
"(fallback-first smss_25))"
" #f)"
" #f)))"
"(if c1_22"
"((lambda(b_40)"
"(if(eq? b_40 '#:none)"
"(let-values()"
"(if(fallback? smss_25)"
"(fallback-loop_0(fallback-rest smss_25))"
" #f))"
"(let-values() b_40)))"
" c1_22)"
"(let-values()"
"(let-values(((scopes_17)"
"(scope-set-at-fallback"
" s_154"
"(fallback-first smss_25)"
" phase_16)))"
"(let-values(((best-scopes_0 best-binding_0)"
"(let-values(((ht_60) scopes_17))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys ht_60)))"
"((letrec-values(((for-loop_70)"
"(lambda(best-scopes_1"
" best-binding_1"
" i_79)"
"(begin"
" 'for-loop"
"(if i_79"
"(let-values(((sc_27)"
"(unsafe-immutable-hash-iterate-key"
" ht_60"
" i_79)))"
"(let-values(((best-scopes_2"
" best-binding_2)"
"(let-values(((ht_61"
" bulk-bindings_2)"
"(let-values(((table_83)"
"(scope-binding-table"
" sc_27)))"
"(if(hash?"
" table_83)"
"(values"
"(hash-ref"
" table_83"
" sym_17"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_83)"
" sym_17"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_83)))))"
"((s_155)"
" s_154)"
"((extra-shifts_3)"
" extra-shifts_2))"
"(begin"
" #t"
"((letrec-values(((for-loop_71)"
"(lambda(best-scopes_3"
" best-binding_3"
" i_80)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" i_80))"
"(let-values(((b-scopes_0)"
"(if(pair?"
" i_80)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_80)))"
"(let-values()"
"(hash-iterate-key"
" ht_61"
" i_80))))"
"((binding_4)"
"(if(pair?"
" i_80)"
"(let-values()"
"(let-values(((bulk_3)"
"(bulk-binding-at-bulk"
"(car"
" i_80))))"
"(let-values(((b-info_0)"
"(if(symbol-interned?"
" sym_17)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_3"
" s_155"
" extra-shifts_3)"
" sym_17"
" #f)"
" #f)))"
"(if b-info_0"
"((bulk-binding-create"
" bulk_3)"
" bulk_3"
" b-info_0"
" sym_17)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_61"
" i_80)))))"
"(let-values(((best-scopes_4"
" best-binding_4)"
"(let-values(((best-scopes_5)"
" best-scopes_3)"
"((best-binding_5)"
" best-binding_3))"
"(if(if b-scopes_0"
"(if binding_4"
"(subset?"
" b-scopes_0"
" scopes_17)"
" #f)"
" #f)"
"(let-values(((best-scopes_6)"
" best-scopes_5)"
"((best-binding_6)"
" best-binding_5))"
"(let-values(((best-scopes_7"
" best-binding_7)"
"(let-values()"
"(if(pair?"
" best-scopes_6)"
"(let-values()"
"(if(let-values(((lst_48)"
" best-scopes_6))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_48)))"
"((letrec-values(((for-loop_72)"
"(lambda(result_46"
" lst_49)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_49)"
"(let-values(((amb-scopes_0)"
"(unsafe-car"
" lst_49))"
"((rest_21)"
"(unsafe-cdr"
" lst_49)))"
"(let-values(((result_47)"
"(let-values()"
"(let-values(((result_48)"
"(let-values()"
"(let-values()"
"(subset?"
" amb-scopes_0"
" b-scopes_0)))))"
"(values"
" result_48)))))"
"(if(if(not"
"((lambda x_36"
"(not"
" result_47))"
" amb-scopes_0))"
"(not"
" #f)"
" #f)"
"(for-loop_72"
" result_47"
" rest_21)"
" result_47)))"
" result_46)))))"
" for-loop_72)"
" #t"
" lst_48)))"
"(let-values()"
"(values"
" b-scopes_0"
" binding_4))"
"(let-values()"
"(values"
"(cons"
" b-scopes_0"
" best-scopes_6)"
" #f))))"
"(if(not"
" best-scopes_6)"
"(let-values()"
"(values"
" b-scopes_0"
" binding_4))"
"(if(subset?"
" b-scopes_0"
" best-scopes_6)"
"(let-values()"
"(values"
" best-scopes_6"
" best-binding_6))"
"(if(subset?"
" best-scopes_6"
" b-scopes_0)"
"(let-values()"
"(values"
" b-scopes_0"
" binding_4))"
"(let-values()"
"(values"
"(list"
" best-scopes_6"
" b-scopes_0)"
" #f)))))))))"
"(values"
" best-scopes_7"
" best-binding_7)))"
"(values"
" best-scopes_5"
" best-binding_5)))))"
"(if(not"
" #f)"
"(for-loop_71"
" best-scopes_4"
" best-binding_4"
"(if(pair?"
" i_80)"
"(let-values()"
"(cdr"
" i_80))"
"(let-values()"
"(let-values(((or-part_127)"
"(hash-iterate-next"
" ht_61"
" i_80)))"
"(if or-part_127"
" or-part_127"
" bulk-bindings_2)))))"
"(values"
" best-scopes_4"
" best-binding_4))))"
"(values"
" best-scopes_3"
" best-binding_3))))))"
" for-loop_71)"
" best-scopes_1"
" best-binding_1"
"(let-values(((or-part_128)"
"(hash-iterate-first"
" ht_61)))"
"(if or-part_128"
" or-part_128"
" bulk-bindings_2)))))))"
"(if(not #f)"
"(for-loop_70"
" best-scopes_2"
" best-binding_2"
"(unsafe-immutable-hash-iterate-next"
" ht_60"
" i_79))"
"(values"
" best-scopes_2"
" best-binding_2))))"
"(values"
" best-scopes_1"
" best-binding_1))))))"
" for-loop_70)"
" #f"
" #f"
"(unsafe-immutable-hash-iterate-first ht_60))))))"
"(if(pair? best-scopes_0)"
"(let-values()"
"(if(fallback? smss_25)"
"(fallback-loop_0(fallback-rest smss_25))"
" ambiguous-value_0))"
"(if best-scopes_0"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_17"
" phase_16"
"(syntax-scopes s_154)"
"(fallback-first smss_25)"
" best-binding_0)"
"(if(let-values(((or-part_129)(not exactly?_0)))"
"(if or-part_129"
" or-part_129"
"(eqv?"
"(set-count scopes_17)"
"(set-count best-scopes_0))))"
"(if get-scopes?_0 best-scopes_0 best-binding_0)"
" #f)))"
"(let-values()"
"(begin"
"(resolve-cache-set!"
" sym_17"
" phase_16"
"(syntax-scopes s_154)"
"(fallback-first smss_25)"
" '#:none)"
"(if(fallback? smss_25)"
"(fallback-loop_0(fallback-rest smss_25))"
" #f))))))))))))))"
" fallback-loop_0)"
"(syntax-shifted-multi-scopes s_154)))))))))))))"
"(define-values"
"(bound-identifier=?$1)"
"(lambda(a_33 b_41 phase_17)"
"(begin"
" 'bound-identifier=?"
"(if(eq?(syntax-e$1 a_33)(syntax-e$1 b_41))"
"(equal?(syntax-scope-set a_33 phase_17)(syntax-scope-set b_41 phase_17))"
" #f))))"
"(define-values"
"(local-binding?)"
"(lambda(b_42)"
"(begin(let-values(((or-part_0)(full-local-binding? b_42)))(if or-part_0 or-part_0(symbol? b_42))))))"
"(define-values"
"(struct:full-local-binding full-local-binding1.1 full-local-binding? full-local-binding-key)"
"(let-values(((struct:_30 make-_30 ?_30 -ref_30 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'full-local-binding"
" struct:full-binding"
" 1"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(b_43 ser-push!_13 state_23)"
"(begin"
"(ser-push!_13 'tag '#:local-binding)"
"(ser-push!_13(full-local-binding-key b_43))"
"(ser-push!_13(full-binding-free=id b_43))))))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'full-local-binding)))))"
"(values struct:_30 make-_30 ?_30(make-struct-field-accessor -ref_30 0 'key))))"
"(define-values"
"(deserialize-full-local-binding)"
"(lambda(key_33 free=id_3)(begin(full-local-binding1.1 #f free=id_3 key_33))))"
"(define-values"
"(make-local-binding7.1)"
"(lambda(frame-id2_0 free=id3_0 key6_0)"
"(begin"
" 'make-local-binding7"
"(let-values(((key_34) key6_0))"
"(let-values(((frame-id_2) frame-id2_0))"
"(let-values(((free=id_4) free=id3_0))"
"(let-values()"
"(if(if(not frame-id_2)(not free=id_4) #f)"
"(let-values() key_34)"
"(let-values()(full-local-binding1.1 frame-id_2 free=id_4 key_34))))))))))"
"(define-values"
"(local-binding-update17.1)"
"(lambda(frame-id11_0 free=id12_0 key10_0 b16_0)"
"(begin"
" 'local-binding-update17"
"(let-values(((b_44) b16_0))"
"(let-values(((key_35)(if(eq? key10_0 unsafe-undefined)(local-binding-key b_44) key10_0)))"
"(let-values(((frame-id_3)(if(eq? frame-id11_0 unsafe-undefined)(binding-frame-id b_44) frame-id11_0)))"
"(let-values(((free=id_5)(if(eq? free=id12_0 unsafe-undefined)(binding-free=id b_44) free=id12_0)))"
"(let-values()"
"(let-values(((key21_0) key_35)((frame-id22_0) frame-id_3)((free=id23_0) free=id_5))"
"(make-local-binding7.1 frame-id22_0 free=id23_0 key21_0))))))))))"
"(define-values"
"(local-binding-key)"
"(lambda(b_45)(begin(if(full-local-binding? b_45)(full-local-binding-key b_45) b_45))))"
"(define-values"
"(1/prop:rename-transformer 1/rename-transformer? rename-transformer-value)"
"(make-struct-type-property"
" 'rename-transformer"
"(lambda(v_28 info_1)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_11)(exact-nonnegative-integer? v_28)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_2)(identifier? v_28)))"
"(if or-part_2 or-part_2(if(procedure? v_28)(procedure-arity-includes? v_28 1) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:rename-transformer"
"(string-append"
"                           \"(or/c exact-nonnegative-integer?\\n\""
"                           \"      identifier?\\n\""
"                           \"      (procedure-arity-includes? proc 1))\")"
" v_28)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_28)"
"(let-values()"
"(begin"
"(if(<= v_28(list-ref info_1 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_28"
"                                  \"initialized-field count\""
"(list-ref info_1 1))))"
"(if(member v_28(list-ref info_1 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:rename-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_28)))))"
"(void))"
"(values))))"
"(let-values(((ref_0)(list-ref info_1 3)))"
"(if(identifier? v_28)"
"(let-values()(lambda(t_36) v_28))"
"(if(integer? v_28)"
"(let-values()"
"(lambda(t_37)"
"(let-values(((val_21)(ref_0 t_37 v_28)))"
"(if(identifier? val_21) val_21(datum->syntax$1 #f '?)))))"
"(let-values()"
"(lambda(t_15)"
"(let-values(((id_0)(call-with-continuation-prompt(lambda()(v_28 t_15)))))"
"(begin"
"(if(identifier? id_0)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'prop:rename-transformer"
"                            \"contract violation for given value; expected an identifier\""
"                            \"given\""
" id_0)))"
" id_0))))))))))))"
"(define-values"
"(struct:id-rename-transformer id-rename-transformer1.1 id-rename-transformer? id-rename-transformer-id)"
"(let-values(((struct:_31 make-_31 ?_31 -ref_31 -set!_31)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'rename-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:rename-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'id-rename-transformer)))))"
"(values struct:_31 make-_31 ?_31(make-struct-field-accessor -ref_31 0 'id))))"
"(define-values"
"(1/make-rename-transformer)"
"(lambda(id_1)"
"(begin"
" 'make-rename-transformer"
"(begin"
"(if(identifier? id_1)"
"(void)"
"          (let-values () (raise-argument-error 'make-rename-transformer \"identifier?\" id_1)))"
"(id-rename-transformer1.1 id_1)))))"
"(define-values"
"(1/rename-transformer-target)"
"(lambda(t_38)(begin 'rename-transformer-target((rename-transformer-value t_38) t_38))))"
"(define-values"
"(free-identifier=?$1)"
"(lambda(a_34 b_46 a-phase_0 b-phase_0)"
"(begin"
" 'free-identifier=?"
"(let-values(((ab_0)"
"(toplevel-as-symbol"
"(let-values(((a51_0) a_34)((a-phase52_0) a-phase_0)((temp53_0) #t))"
"(resolve+shift28.1 #f #f null unsafe-undefined temp53_0 a51_0 a-phase52_0)))))"
"(let-values(((bb_0)"
"(toplevel-as-symbol"
"(let-values(((b54_0) b_46)((b-phase55_0) b-phase_0)((temp56_0) #t))"
"(resolve+shift28.1 #f #f null unsafe-undefined temp56_0 b54_0 b-phase55_0)))))"
"(if(let-values(((or-part_3)(symbol? ab_0)))(if or-part_3 or-part_3(symbol? bb_0)))"
"(let-values()(eq? ab_0 bb_0))"
"(let-values()(same-binding? ab_0 bb_0))))))))"
"(define-values"
"(toplevel-as-symbol)"
"(lambda(b_47)"
"(begin"
"(if(if(module-binding? b_47)(top-level-module-path-index?(module-binding-module b_47)) #f)"
"(module-binding-sym b_47)"
" b_47))))"
"(define-values"
"(same-binding?)"
"(lambda(ab_1 bb_1)"
"(begin"
"(if(module-binding? ab_1)"
"(let-values()"
"(if(module-binding? bb_1)"
"(if(eq?(module-binding-sym ab_1)(module-binding-sym bb_1))"
"(if(eqv?(module-binding-phase ab_1)(module-binding-phase bb_1))"
"(eq?"
"(1/module-path-index-resolve(module-binding-module ab_1))"
"(1/module-path-index-resolve(module-binding-module bb_1)))"
" #f)"
" #f)"
" #f))"
"(if(local-binding? ab_1)"
"(let-values()(if(local-binding? bb_1)(eq?(local-binding-key ab_1)(local-binding-key bb_1)) #f))"
"          (let-values () (error \"bad binding\" ab_1)))))))"
"(define-values"
"(same-binding-nominals?)"
"(lambda(ab_2 bb_2)"
"(begin"
"(if(eq?"
"(1/module-path-index-resolve(module-binding-nominal-module ab_2))"
"(1/module-path-index-resolve(module-binding-nominal-module bb_2)))"
"(if(eqv?(module-binding-nominal-require-phase ab_2)(module-binding-nominal-require-phase bb_2))"
"(eqv?(module-binding-nominal-sym ab_2)(module-binding-nominal-sym bb_2))"
" #f)"
" #f))))"
"(define-values"
"(identifier-binding-symbol$1)"
"(lambda(id_2 phase_18)"
"(begin"
" 'identifier-binding-symbol"
"(let-values(((b_43)"
"(let-values(((id57_0) id_2)((phase58_0) phase_18)((temp59_0) #t))"
"(resolve+shift28.1 #f #f null unsafe-undefined temp59_0 id57_0 phase58_0))))"
"(if(symbol? b_43)"
"(let-values() b_43)"
"(if(module-binding? b_43)"
"(let-values()(module-binding-sym b_43))"
"(if(local-binding? b_43)(let-values()(local-binding-key b_43))(let-values()(syntax-e$1 id_2)))))))))"
"(define-values"
"(identifier-binding$1)"
"(let-values(((identifier-binding4_0)"
"(lambda(id2_0 phase3_0 top-level-symbol?1_0)"
"(begin"
" 'identifier-binding4"
"(let-values(((id_3) id2_0))"
"(let-values(((phase_19) phase3_0))"
"(let-values(((top-level-symbol?_0) top-level-symbol?1_0))"
"(let-values()"
"(let-values(((b_48)"
"(let-values(((id60_0) id_3)((phase61_0) phase_19))"
"(resolve+shift28.1 #f #f null unsafe-undefined #f id60_0 phase61_0))))"
"(if(module-binding? b_48)"
"(let-values()"
"(if(top-level-module-path-index?(module-binding-module b_48))"
"(if top-level-symbol?_0(list(module-binding-nominal-sym b_48)) #f)"
"(list"
"(module-binding-module b_48)"
"(module-binding-sym b_48)"
"(module-binding-nominal-module b_48)"
"(module-binding-nominal-sym b_48)"
"(module-binding-phase b_48)"
"(module-binding-nominal-require-phase b_48)"
"(module-binding-nominal-phase b_48))))"
"(if(local-binding? b_48)(let-values() 'lexical)(let-values() #f))))))))))))"
"(case-lambda"
"((id_4 phase_20)(begin 'identifier-binding(identifier-binding4_0 id_4 phase_20 #f)))"
"((id_5 phase_21 top-level-symbol?1_1)(identifier-binding4_0 id_5 phase_21 top-level-symbol?1_1)))))"
"(define-values"
"(maybe-install-free=id!)"
"(lambda(val_22 id_6 phase_22)"
"(begin"
"(if(1/rename-transformer? val_22)"
"(let-values()"
"(let-values(((free=id_6)(1/rename-transformer-target val_22)))"
"(if(syntax-property$1 free=id_6 'not-free-identifier=?)"
"(void)"
"(let-values()"
"(let-values(((b_49)"
"(let-values(((id65_0) id_6)((phase66_0) phase_22)((temp67_0) #t)((temp68_0) #t))"
"(resolve+shift28.1 #f temp67_0 null temp68_0 #f id65_0 phase66_0))))"
"(let-values(((temp62_0)(syntax-scope-set id_6 phase_22))"
"((temp63_0)(syntax-e$1 id_6))"
"((temp64_0)(binding-set-free=id b_49 free=id_6)))"
"(add-binding-in-scopes!20.1 #f temp62_0 temp63_0 temp64_0)))))))"
"(void)))))"
"(define-values"
"(binding-set-free=id)"
"(lambda(b_50 free=id_7)"
"(begin"
"(if(module-binding? b_50)"
"(let-values()"
"(let-values(((b69_0) b_50)((free=id70_0) free=id_7))"
"(module-binding-update48.1"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" free=id70_0"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" b69_0)))"
"(if(local-binding? b_50)"
"(let-values()"
"(let-values(((b71_0) b_50)((free=id72_0) free=id_7))"
"(local-binding-update17.1 unsafe-undefined free=id72_0 unsafe-undefined b71_0)))"
"          (let-values () (error \"bad binding for free=id:\" b_50)))))))"
"(define-values"
"(struct:non-source-shift non-source-shift6.1 non-source-shift? non-source-shift-from non-source-shift-to)"
"(let-values(((struct:_32 make-_32 ?_32 -ref_32 -set!_32)"
"(let-values()"
"(let-values()"
"(make-struct-type 'non-source-shift #f 2 0 #f null 'prefab #f '(0 1) #f 'non-source-shift)))))"
"(values"
" struct:_32"
" make-_32"
" ?_32"
"(make-struct-field-accessor -ref_32 0 'from)"
"(make-struct-field-accessor -ref_32 1 'to))))"
"(define-values(shift-from)(lambda(s_15)(begin(if(pair? s_15)(car s_15)(non-source-shift-from s_15)))))"
"(define-values(shift-to)(lambda(s_156)(begin(if(pair? s_156)(cdr s_156)(non-source-shift-to s_156)))))"
"(define-values"
"(syntax-module-path-index-shift13.1)"
"(lambda(non-source?7_0 s10_0 from-mpi11_0 to-mpi12_0 inspector9_0)"
"(begin"
" 'syntax-module-path-index-shift13"
"(let-values(((s_19) s10_0))"
"(let-values(((from-mpi_1) from-mpi11_0))"
"(let-values(((to-mpi_1) to-mpi12_0))"
"(let-values(((inspector_3) inspector9_0))"
"(let-values(((non-source?_0) non-source?7_0))"
"(let-values()"
"(if(eq? from-mpi_1 to-mpi_1)"
"(let-values()(if inspector_3(syntax-set-inspector s_19 inspector_3) s_19))"
"(let-values()"
"(let-values(((shift_0)"
"(if non-source?_0"
"(non-source-shift6.1 from-mpi_1 to-mpi_1)"
"(cons from-mpi_1 to-mpi_1))))"
"(let-values(((the-struct_31) s_19))"
"(if(syntax?$1 the-struct_31)"
"(let-values(((mpi-shifts74_0)(shift-cons shift_0(syntax-mpi-shifts s_19)))"
"((inspector75_1)"
"(let-values(((or-part_130)(syntax-inspector s_19)))"
"(if or-part_130 or-part_130 inspector_3)))"
"((scope-propagations+tamper76_0)"
"(if(datum-has-elements?(syntax-content s_19))"
"(propagation-mpi-shift"
"(syntax-scope-propagations+tamper s_19)"
"(lambda(s_157)(shift-cons shift_0 s_157))"
" inspector_3"
"(syntax-scopes s_19)"
"(syntax-shifted-multi-scopes s_19)"
"(syntax-mpi-shifts s_19))"
"(syntax-scope-propagations+tamper s_19))))"
"(syntax1.1"
"(syntax-content the-struct_31)"
"(syntax-scopes the-struct_31)"
"(syntax-shifted-multi-scopes the-struct_31)"
" scope-propagations+tamper76_0"
" mpi-shifts74_0"
"(syntax-srcloc the-struct_31)"
"(syntax-props the-struct_31)"
" inspector75_1))"
"                            (raise-argument-error 'struct-copy \"syntax?\" the-struct_31)))))))))))))))"
"(define-values"
"(shift-cons)"
"(lambda(shift_1 shifts_0)"
"(begin"
"(if(if(pair? shifts_0)(eq?(shift-from shift_1)(shift-from(car shifts_0))) #f)"
"(let-values() shifts_0)"
"(let-values()(cons shift_1 shifts_0))))))"
"(define-values"
"(resolve+shift28.1)"
"(lambda(ambiguous-value16_0 exactly?17_0 extra-shifts20_0 immediate?18_0 unbound-sym?19_0 s26_0 phase27_0)"
"(begin"
" 'resolve+shift28"
"(let-values(((s_158) s26_0))"
"(let-values(((phase_23) phase27_0))"
"(let-values(((ambiguous-value_1) ambiguous-value16_0))"
"(let-values(((exactly?_1) exactly?17_0))"
"(let-values(((immediate?_0)(if(eq? immediate?18_0 unsafe-undefined) exactly?_1 immediate?18_0)))"
"(let-values(((unbound-sym?_0) unbound-sym?19_0))"
"(let-values(((extra-shifts_4) extra-shifts20_0))"
"(let-values()"
"(let-values(((can-cache?_0)"
"(if(not exactly?_1)(if(not immediate?_0)(null? extra-shifts_4) #f) #f)))"
"(let-values(((c1_23)(if can-cache?_0(resolve+shift-cache-get s_158 phase_23) #f)))"
"(if c1_23"
"((lambda(b_51)(if(eq? b_51 '#:none)(if unbound-sym?_0(syntax-content s_158) #f) b_51))"
" c1_23)"
"(let-values()"
"(let-values(((immediate-b_0)"
"(let-values(((s77_0) s_158)"
"((phase78_0) phase_23)"
"((ambiguous-value79_0) ambiguous-value_1)"
"((exactly?80_0) exactly?_1)"
"((extra-shifts81_0) extra-shifts_4))"
"(resolve40.1"
" ambiguous-value79_0"
" exactly?80_0"
" extra-shifts81_0"
" #f"
" s77_0"
" phase78_0))))"
"(let-values(((b_52)"
"(if(if immediate-b_0"
"(if(not immediate?_0)(binding-free=id immediate-b_0) #f)"
" #f)"
"(let-values(((temp82_0)(binding-free=id immediate-b_0))"
"((phase83_0) phase_23)"
"((temp84_0)"
"(append extra-shifts_4(syntax-mpi-shifts s_158)))"
"((ambiguous-value85_0) ambiguous-value_1)"
"((exactly?86_0) exactly?_1)"
"((unbound-sym?87_0) unbound-sym?_0))"
"(resolve+shift28.1"
" ambiguous-value85_0"
" exactly?86_0"
" temp84_0"
" unsafe-undefined"
" unbound-sym?87_0"
" temp82_0"
" phase83_0))"
" immediate-b_0)))"
"(if(module-binding? b_52)"
"(let-values()"
"(let-values(((mpi-shifts_2)(syntax-mpi-shifts s_158)))"
"(if(null? mpi-shifts_2)"
"(let-values() b_52)"
"(let-values()"
"(let-values(((mod_0)(module-binding-module b_52)))"
"(let-values(((shifted-mod_0)(apply-syntax-shifts mod_0 mpi-shifts_2)))"
"(let-values(((nominal-mod_0)(module-binding-nominal-module b_52)))"
"(let-values(((shifted-nominal-mod_0)"
"(if(eq? mod_0 nominal-mod_0)"
" shifted-mod_0"
"(apply-syntax-shifts nominal-mod_0 mpi-shifts_2))))"
"(let-values(((result-b_0)"
"(if(if(eq? mod_0 shifted-mod_0)"
"(if(eq? nominal-mod_0 shifted-nominal-mod_0)"
"(if(not(binding-free=id b_52))"
"(null?"
"(module-binding-extra-nominal-bindings"
" b_52))"
" #f)"
" #f)"
" #f)"
" b_52"
"(let-values(((b88_0) b_52)"
"((shifted-mod89_0) shifted-mod_0)"
"((shifted-nominal-mod90_0)"
" shifted-nominal-mod_0)"
"((temp91_0)"
"(if(binding-free=id b_52)"
"(let-values(((temp93_0)"
"(binding-free=id"
" b_52))"
"((s94_0) s_158))"
"(syntax-transfer-shifts36.1"
" #f"
" temp93_0"
" s94_0"
" #f))"
" #f))"
"((temp92_0)"
"(reverse$1"
"(let-values(((lst_50)"
"(module-binding-extra-nominal-bindings"
" b_52)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_50)))"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_35"
" lst_51)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_51)"
"(let-values(((b_53)"
"(unsafe-car"
" lst_51))"
"((rest_22)"
"(unsafe-cdr"
" lst_51)))"
"(let-values(((fold-var_36)"
"(let-values(((fold-var_37)"
" fold-var_35))"
"(let-values(((fold-var_38)"
"(let-values()"
"(cons"
"(let-values()"
"(apply-syntax-shifts-to-binding"
" b_53"
" mpi-shifts_2))"
" fold-var_37))))"
"(values"
" fold-var_38)))))"
"(if(not"
" #f)"
"(for-loop_73"
" fold-var_36"
" rest_22)"
" fold-var_36)))"
" fold-var_35)))))"
" for-loop_73)"
" null"
" lst_50))))))"
"(module-binding-update48.1"
" unsafe-undefined"
" temp92_0"
" unsafe-undefined"
" temp91_0"
" shifted-mod89_0"
" shifted-nominal-mod90_0"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" b88_0)))))"
"(begin"
"(if can-cache?_0"
"(let-values()"
"(resolve+shift-cache-set! s_158 phase_23 result-b_0))"
"(void))"
" result-b_0))))))))))"
"(let-values()"
"(begin"
"(if can-cache?_0"
"(let-values()"
"(resolve+shift-cache-set!"
" s_158"
" phase_23"
"(let-values(((or-part_131) b_52))(if or-part_131 or-part_131 '#:none))))"
"(void))"
"(let-values(((or-part_132) b_52))"
"(if or-part_132"
" or-part_132"
"(if unbound-sym?_0(syntax-content s_158) #f)))))))))))))))))))))))"
"(define-values"
"(apply-syntax-shifts)"
"(lambda(mpi_12 shifts_1)"
"(begin"
"(if(null? shifts_1)"
"(let-values() mpi_12)"
"(let-values()"
"(let-values(((shifted-mpi_1)(apply-syntax-shifts mpi_12(cdr shifts_1))))"
"(let-values(((shift_2)(car shifts_1)))"
"(module-path-index-shift shifted-mpi_1(shift-from shift_2)(shift-to shift_2)))))))))"
"(define-values"
"(apply-syntax-shifts-to-binding)"
"(lambda(b_54 shifts_2)"
"(begin"
"(if(null? shifts_2)"
"(let-values() b_54)"
"(let-values()"
"(let-values(((shifted-b_0)(apply-syntax-shifts-to-binding b_54(cdr shifts_2))))"
"(let-values(((shift_3)(car shifts_2)))"
"(binding-module-path-index-shift shifted-b_0(shift-from shift_3)(shift-to shift_3)))))))))"
"(define-values"
"(binding-module-path-index-shift)"
"(lambda(b_55 from-mpi_2 to-mpi_2)"
"(begin"
"(if(module-binding? b_55)"
"(let-values()"
"(let-values(((b95_0) b_55)"
"((temp96_0)(module-path-index-shift(module-binding-module b_55) from-mpi_2 to-mpi_2))"
"((temp97_0)(module-path-index-shift(module-binding-nominal-module b_55) from-mpi_2 to-mpi_2))"
"((temp98_0)"
"(reverse$1"
"(let-values(((lst_52)(module-binding-extra-nominal-bindings b_55)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_52)))"
"((letrec-values(((for-loop_74)"
"(lambda(fold-var_39 lst_53)"
"(begin"
" 'for-loop"
"(if(pair? lst_53)"
"(let-values(((b_56)(unsafe-car lst_53))"
"((rest_23)(unsafe-cdr lst_53)))"
"(let-values(((fold-var_40)"
"(let-values(((fold-var_41) fold-var_39))"
"(let-values(((fold-var_42)"
"(let-values()"
"(cons"
"(let-values()"
"(binding-module-path-index-shift"
" b_56"
" from-mpi_2"
" to-mpi_2))"
" fold-var_41))))"
"(values fold-var_42)))))"
"(if(not #f)(for-loop_74 fold-var_40 rest_23) fold-var_40)))"
" fold-var_39)))))"
" for-loop_74)"
" null"
" lst_52))))))"
"(module-binding-update48.1"
" unsafe-undefined"
" temp98_0"
" unsafe-undefined"
" unsafe-undefined"
" temp96_0"
" temp97_0"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" b95_0)))"
"(let-values() b_55)))))"
"(define-values"
"(syntax-transfer-shifts36.1)"
"(lambda(non-source?31_0 to-s34_0 from-s35_0 inspector33_0)"
"(begin"
" 'syntax-transfer-shifts36"
"(let-values(((to-s_0) to-s34_0))"
"(let-values(((from-s_1) from-s35_0))"
"(let-values(((inspector_4) inspector33_0))"
"(let-values(((non-source?_1) non-source?31_0))"
"(let-values()"
"(let-values(((to-s99_0) to-s_0)"
"((temp100_0)(syntax-mpi-shifts from-s_1))"
"((inspector101_0) inspector_4)"
"((non-source?102_0) non-source?_1))"
"(syntax-add-shifts44.1 non-source?102_0 to-s99_0 temp100_0 inspector101_0))))))))))"
"(define-values"
"(syntax-add-shifts44.1)"
"(lambda(non-source?39_0 to-s42_0 shifts43_0 inspector41_0)"
"(begin"
" 'syntax-add-shifts44"
"(let-values(((to-s_1) to-s42_0))"
"(let-values(((shifts_3) shifts43_0))"
"(let-values(((inspector_5) inspector41_0))"
"(let-values(((non-source?_2) non-source?39_0))"
"(let-values()"
"(if(if(null? shifts_3) inspector_5 #f)"
"(let-values()(syntax-set-inspector to-s_1 inspector_5))"
"(let-values()"
"(let-values(((lst_54)(reverse$1 shifts_3))((start_12) 0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_54)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_12)))"
"((letrec-values(((for-loop_75)"
"(lambda(s_159 lst_55 pos_10)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_55) #t #f)"
"(let-values(((shift_4)(unsafe-car lst_55))"
"((rest_24)(unsafe-cdr lst_55))"
"((i_81) pos_10))"
"(let-values(((s_160)"
"(let-values(((s_103) s_159))"
"(let-values(((s_104)"
"(let-values()"
"(let-values(((s103_0) s_103)"
"((temp104_0)"
"(shift-from shift_4))"
"((temp105_0)"
"(shift-to shift_4))"
"((temp106_0)"
"(if(zero? i_81)"
" inspector_5"
" #f))"
"((non-source?107_0)"
" non-source?_2))"
"(syntax-module-path-index-shift13.1"
" non-source?107_0"
" s103_0"
" temp104_0"
" temp105_0"
" temp106_0)))))"
"(values s_104)))))"
"(if(not #f)(for-loop_75 s_160 rest_24(+ pos_10 1)) s_160)))"
" s_159)))))"
" for-loop_75)"
" to-s_1"
" lst_54"
" start_12)))))))))))))"
"(define-values"
"(syntax-set-inspector)"
"(lambda(s_161 insp_3)"
"(begin"
"(let-values(((the-struct_32) s_161))"
"(if(syntax?$1 the-struct_32)"
"(let-values(((inspector108_0)"
"(let-values(((or-part_133)(syntax-inspector s_161)))(if or-part_133 or-part_133 insp_3)))"
"((scope-propagations+tamper109_0)"
"(if(datum-has-elements?(syntax-content s_161))"
"(propagation-mpi-shift"
"(syntax-scope-propagations+tamper s_161)"
" #f"
" insp_3"
"(syntax-scopes s_161)"
"(syntax-shifted-multi-scopes s_161)"
"(syntax-mpi-shifts s_161))"
"(syntax-scope-propagations+tamper s_161))))"
"(syntax1.1"
"(syntax-content the-struct_32)"
"(syntax-scopes the-struct_32)"
"(syntax-shifted-multi-scopes the-struct_32)"
" scope-propagations+tamper109_0"
"(syntax-mpi-shifts the-struct_32)"
"(syntax-srcloc the-struct_32)"
"(syntax-props the-struct_32)"
" inspector108_0))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_32))))))"
"(define-values"
"(1/syntax-source-module)"
"(let-values(((syntax-source-module49_0)"
"(lambda(s48_0 source?47_0)"
"(begin"
" 'syntax-source-module49"
"(let-values(((s_162) s48_0))"
"(let-values(((source?_0) source?47_0))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_162)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" s_162)))"
"(let-values(((lst_56)(reverse$1(syntax-mpi-shifts s_162))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_56)))"
"((letrec-values(((for-loop_76)"
"(lambda(result_49 lst_57)"
"(begin"
" 'for-loop"
"(if(pair? lst_57)"
"(let-values(((shift_5)(unsafe-car lst_57))"
"((rest_25)(unsafe-cdr lst_57)))"
"(let-values(((result_50)"
"(let-values(((result_51) result_49))"
"(if(non-source-shift? shift_5)"
" result_51"
"(let-values()"
"(let-values(((result_52)"
"(let-values()"
"(let-values()"
"(let-values(((from-mpi_3)"
"(car"
" shift_5)))"
"(let-values(((path_5"
" base_14)"
"(1/module-path-index-split"
" from-mpi_3)))"
"(if(not path_5)"
"(if(module-path-index-resolved"
" from-mpi_3)"
"(let-values(((mpi_13)"
"(apply-syntax-shifts"
" from-mpi_3"
"(syntax-mpi-shifts"
" s_162))))"
"(if source?_0"
"(1/resolved-module-path-name"
"(1/module-path-index-resolve"
" mpi_13"
" #f))"
" mpi_13))"
" #f)"
" #f)))))))"
"(values result_52)))))))"
"(if(if(not((lambda x_37 result_50) shift_5))(not #f) #f)"
"(for-loop_76 result_50 rest_25)"
" result_50)))"
" result_49)))))"
" for-loop_76)"
" #f"
" lst_56)))))))))))"
"(case-lambda"
"((s_163)(begin 'syntax-source-module(syntax-source-module49_0 s_163 #f)))"
"((s_164 source?47_1)(syntax-source-module49_0 s_164 source?47_1)))))"
"(define-values"
"(1/identifier-prune-to-source-module)"
"(lambda(id_7)"
"(begin"
" 'identifier-prune-to-source-module"
"(begin"
"(if(identifier? id_7)"
"(void)"
"          (let-values () (raise-argument-error 'identifier-prune-to-source-module \"identifier?\" id_7)))"
"(let-values(((the-struct_33)(datum->syntax$1 #f(syntax-e$1 id_7) id_7 id_7)))"
"(if(syntax?$1 the-struct_33)"
"(let-values(((mpi-shifts110_0)(syntax-mpi-shifts id_7)))"
"(syntax1.1"
"(syntax-content the-struct_33)"
"(syntax-scopes the-struct_33)"
"(syntax-shifted-multi-scopes the-struct_33)"
"(syntax-scope-propagations+tamper the-struct_33)"
" mpi-shifts110_0"
"(syntax-srcloc the-struct_33)"
"(syntax-props the-struct_33)"
"(syntax-inspector the-struct_33)))"
"            (raise-argument-error 'struct-copy \"syntax?\" the-struct_33)))))))"
"(define-values"
"(struct:provided provided1.1 provided? provided-binding provided-protected? provided-syntax?)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'provided"
" #f"
" 3"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:serialize"
"(lambda(p_31 ser-push!_14 state_24)"
"(begin"
"(ser-push!_14 'tag '#:provided)"
"(ser-push!_14(provided-binding p_31))"
"(ser-push!_14(provided-protected? p_31))"
"(ser-push!_14(provided-syntax? p_31))))))"
" #f"
" #f"
" '(0 1 2)"
" #f"
" 'provided)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'binding)"
"(make-struct-field-accessor -ref_0 1 'protected?)"
"(make-struct-field-accessor -ref_0 2 'syntax?))))"
"(define-values(provided-as-binding)(lambda(v_89)(begin(if(provided? v_89)(provided-binding v_89) v_89))))"
"(define-values(provided-as-protected?)(lambda(v_5)(begin(if(provided? v_5)(provided-protected? v_5) #f))))"
"(define-values(provided-as-transformer?)(lambda(v_90)(begin(if(provided? v_90)(provided-syntax? v_90) #f))))"
"(define-values"
"(deserialize-provided)"
"(lambda(binding_5 protected?_0 syntax?_1)(begin(provided1.1 binding_5 protected?_0 syntax?_1))))"
"(define-values"
"(provide-binding-to-require-binding11.1)"
"(lambda(mpi2_0 phase-shift4_0 provide-phase-level3_0 self1_0 binding/p9_0 sym10_0)"
"(begin"
" 'provide-binding-to-require-binding11"
"(let-values(((binding/p_0) binding/p9_0))"
"(let-values(((sym_18) sym10_0))"
"(let-values(((self_1) self1_0))"
"(let-values(((mpi_14) mpi2_0))"
"(let-values(((provide-phase-level_0) provide-phase-level3_0))"
"(let-values(((phase-shift_0) phase-shift4_0))"
"(let-values()"
"(let-values(((binding_6)(provided-as-binding binding/p_0)))"
"(let-values(((from-mod_0)(module-binding-module binding_6)))"
"(let-values(((binding17_0) binding_6)"
"((temp18_1)(module-path-index-shift from-mod_0 self_1 mpi_14))"
"((mpi19_0) mpi_14)"
"((provide-phase-level20_0) provide-phase-level_0)"
"((sym21_1) sym_18)"
"((phase-shift22_0) phase-shift_0)"
"((temp23_1) #f)"
"((temp24_1)"
"(if(not(provided-as-protected? binding/p_0))"
"(module-binding-extra-inspector binding_6)"
" #f))"
"((null25_0) null))"
"(module-binding-update48.1"
" temp24_1"
" null25_0"
" temp23_1"
" unsafe-undefined"
" temp18_1"
" mpi19_0"
" provide-phase-level20_0"
" phase-shift22_0"
" sym21_1"
" unsafe-undefined"
" unsafe-undefined"
" binding17_0))))))))))))))"
"(define-values"
"(struct:bulk-binding"
" bulk-binding14.1"
" bulk-binding?"
" bulk-binding-provides"
" bulk-binding-prefix"
" bulk-binding-excepts"
" bulk-binding-self"
" bulk-binding-mpi"
" bulk-binding-provide-phase-level"
" bulk-binding-phase-shift"
" bulk-binding-bulk-binding-registry"
" set-bulk-binding-provides!"
" set-bulk-binding-self!)"
"(let-values(((struct:_33 make-_33 ?_33 -ref_33 -set!_33)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding"
" #f"
" 8"
" 0"
" #f"
"(list"
"(cons"
" prop:serialize"
"(lambda(b_18 ser-push!_15 reachable-scopes_3)"
"(begin"
"(ser-push!_15 'tag '#:bulk-binding)"
"(ser-push!_15(bulk-binding-prefix b_18))"
"(ser-push!_15(bulk-binding-excepts b_18))"
"(ser-push!_15(bulk-binding-mpi b_18))"
"(ser-push!_15(bulk-binding-provide-phase-level b_18))"
"(ser-push!_15(bulk-binding-phase-shift b_18))"
"(ser-push!_15 'tag '#:bulk-binding-registry))))"
"(cons"
" prop:bulk-binding"
"(bulk-binding-class3.1"
"(lambda(b_57 mpi-shifts_3)"
"(let-values(((or-part_134)(bulk-binding-provides b_57)))"
"(if or-part_134"
" or-part_134"
"(let-values(((mod-name_1)"
"(1/module-path-index-resolve"
"(apply-syntax-shifts(bulk-binding-mpi b_57) mpi-shifts_3))))"
"(let-values((()"
"(begin"
"(if(bulk-binding-bulk-binding-registry b_57)"
"(void)"
"(let-values()"
"(error"
"                                                     \"namespace mismatch: no bulk-binding registry available:\""
" mod-name_1)))"
"(values))))"
"(let-values(((table_84)"
"(bulk-binding-registry-table"
"(bulk-binding-bulk-binding-registry b_57))))"
"(let-values(((bulk-provide_0)(hash-ref table_84 mod-name_1 #f)))"
"(let-values((()"
"(begin"
"(if bulk-provide_0"
"(void)"
"(let-values()"
"(error"
"                                                           \"namespace mismatch: bulk bindings not found in registry for module:\""
" mod-name_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(set-bulk-binding-self! b_57(bulk-provide-self bulk-provide_0))"
"(values))))"
"(let-values(((provides_0)"
"(hash-ref"
"(bulk-provide-provides bulk-provide_0)"
"(bulk-binding-provide-phase-level b_57))))"
"(let-values(((excepts_0)(bulk-binding-excepts b_57)))"
"(let-values(((prefix_0)(bulk-binding-prefix b_57)))"
"(let-values(((adjusted-provides_0)"
"(if(let-values(((or-part_135) prefix_0))"
"(if or-part_135"
" or-part_135"
"(positive?(hash-count excepts_0))))"
"(let-values()"
"(bulk-provides-add-prefix-remove-exceptions"
" provides_0"
" prefix_0"
" excepts_0))"
"(let-values() provides_0))))"
"(begin"
"(set-bulk-binding-provides! b_57 adjusted-provides_0)"
" adjusted-provides_0))))))))))))))"
"(lambda(b_58 binding_7 sym_19)"
"(let-values(((binding27_0) binding_7)"
"((temp28_1)"
"(if(bulk-binding-prefix b_58)"
"(string->symbol"
"(substring"
"(symbol->string sym_19)"
"(string-length(symbol->string(bulk-binding-prefix b_58)))))"
" sym_19))"
"((temp29_0)(bulk-binding-self b_58))"
"((temp30_0)(bulk-binding-mpi b_58))"
"((temp31_0)(bulk-binding-provide-phase-level b_58))"
"((temp32_0)(bulk-binding-phase-shift b_58)))"
"(provide-binding-to-require-binding11.1"
" temp30_0"
" temp32_0"
" temp31_0"
" temp29_0"
" binding27_0"
" temp28_1))))))"
"(current-inspector)"
" #f"
" '(1 2 4 5 6 7)"
" #f"
" 'bulk-binding)))))"
"(values"
" struct:_33"
" make-_33"
" ?_33"
"(make-struct-field-accessor -ref_33 0 'provides)"
"(make-struct-field-accessor -ref_33 1 'prefix)"
"(make-struct-field-accessor -ref_33 2 'excepts)"
"(make-struct-field-accessor -ref_33 3 'self)"
"(make-struct-field-accessor -ref_33 4 'mpi)"
"(make-struct-field-accessor -ref_33 5 'provide-phase-level)"
"(make-struct-field-accessor -ref_33 6 'phase-shift)"
"(make-struct-field-accessor -ref_33 7 'bulk-binding-registry)"
"(make-struct-field-mutator -set!_33 0 'provides)"
"(make-struct-field-mutator -set!_33 3 'self))))"
"(define-values"
"(deserialize-bulk-binding)"
"(lambda(prefix_1 excepts_1 mpi_3 provide-phase-level_1 phase-shift_1 bulk-binding-registry_0)"
"(begin"
"(bulk-binding14.1 #f prefix_1 excepts_1 #f mpi_3 provide-phase-level_1 phase-shift_1 bulk-binding-registry_0))))"
"(define-values"
"(bulk-provides-add-prefix-remove-exceptions)"
"(lambda(provides_1 prefix_2 excepts_2)"
"(begin"
"(let-values(((ht_62) provides_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_62)))"
"((letrec-values(((for-loop_77)"
"(lambda(table_85 i_82)"
"(begin"
" 'for-loop"
"(if i_82"
"(let-values(((sym_20 val_23)(hash-iterate-key+value ht_62 i_82)))"
"(let-values(((table_86)"
"(let-values(((table_87) table_85))"
"(if(hash-ref excepts_2 sym_20 #f)"
" table_87"
"(let-values(((table_88) table_87))"
"(if(symbol-interned? sym_20)"
"(let-values(((table_89) table_88))"
"(let-values(((table_90)"
"(let-values()"
"(let-values(((key_36 val_24)"
"(let-values()"
"(values"
"(if prefix_2"
"(string->symbol"
"(format"
"                                                                                                 \"~a~a\""
" prefix_2"
" sym_20))"
" sym_20)"
" val_23))))"
"(hash-set table_89 key_36 val_24)))))"
"(values table_90)))"
" table_88))))))"
"(if(not #f)(for-loop_77 table_86(hash-iterate-next ht_62 i_82)) table_86)))"
" table_85)))))"
" for-loop_77)"
" '#hash()"
"(hash-iterate-first ht_62)))))))"
"(define-values"
"(struct:bulk-provide bulk-provide15.1 bulk-provide? bulk-provide-self bulk-provide-provides)"
"(let-values(((struct:_34 make-_34 ?_34 -ref_34 -set!_34)"
"(let-values()"
"(let-values()"
"(make-struct-type 'bulk-provide #f 2 0 #f null(current-inspector) #f '(0 1) #f 'bulk-provide)))))"
"(values"
" struct:_34"
" make-_34"
" ?_34"
"(make-struct-field-accessor -ref_34 0 'self)"
"(make-struct-field-accessor -ref_34 1 'provides))))"
"(define-values"
"(struct:bulk-binding-registry bulk-binding-registry16.1 bulk-binding-registry? bulk-binding-registry-table)"
"(let-values(((struct:_35 make-_35 ?_35 -ref_35 -set!_35)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-binding-registry"
" #f"
" 1"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'bulk-binding-registry)))))"
"(values struct:_35 make-_35 ?_35(make-struct-field-accessor -ref_35 0 'table))))"
"(define-values(make-bulk-binding-registry)(lambda()(begin(bulk-binding-registry16.1(make-hasheq)))))"
"(define-values"
"(register-bulk-provide!)"
"(lambda(bulk-binding-registry_1 mod-name_2 self_2 provides_2)"
"(begin"
"(hash-set!"
"(bulk-binding-registry-table bulk-binding-registry_1)"
" mod-name_2"
"(bulk-provide15.1 self_2 provides_2)))))"
"(define-values"
"(registered-bulk-provide?)"
"(lambda(bulk-binding-registry_2 mod-name_3)"
"(begin(if(hash-ref(bulk-binding-registry-table bulk-binding-registry_2) mod-name_3 #f) #t #f))))"
"(define-values(generate-lift-key)(lambda()(begin(gensym 'lift))))"
"(define-values"
"(struct:root-expand-context/outer"
" root-expand-context/outer1.1"
" root-expand-context/outer?"
" root-expand-context/outer-inner"
" root-expand-context/outer-post-expansion"
" root-expand-context/outer-use-site-scopes"
" root-expand-context/outer-frame-id)"
"(let-values(((struct:_36 make-_36 ?_36 -ref_36 -set!_36)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'root-expand-context/outer)))))"
"(values"
" struct:_36"
" make-_36"
" ?_36"
"(make-struct-field-accessor -ref_36 0 'inner)"
"(make-struct-field-accessor -ref_36 1 'post-expansion)"
"(make-struct-field-accessor -ref_36 2 'use-site-scopes)"
"(make-struct-field-accessor -ref_36 3 'frame-id))))"
"(define-values"
"(struct:root-expand-context/inner"
" root-expand-context/inner2.1"
" root-expand-context/inner?"
" root-expand-context/inner-self-mpi"
" root-expand-context/inner-module-scopes"
" root-expand-context/inner-top-level-bind-scope"
" root-expand-context/inner-all-scopes-stx"
" root-expand-context/inner-defined-syms"
" root-expand-context/inner-counter"
" root-expand-context/inner-lift-key)"
"(let-values(((struct:_9 make-_9 ?_9 -ref_9 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'root-expand-context/inner"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'root-expand-context/inner)))))"
"(values"
" struct:_9"
" make-_9"
" ?_9"
"(make-struct-field-accessor -ref_9 0 'self-mpi)"
"(make-struct-field-accessor -ref_9 1 'module-scopes)"
"(make-struct-field-accessor -ref_9 2 'top-level-bind-scope)"
"(make-struct-field-accessor -ref_9 3 'all-scopes-stx)"
"(make-struct-field-accessor -ref_9 4 'defined-syms)"
"(make-struct-field-accessor -ref_9 5 'counter)"
"(make-struct-field-accessor -ref_9 6 'lift-key))))"
"(define-values"
"(root-expand-context/make)"
"(lambda(self-mpi_0"
" module-scopes_0"
" post-expansion_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" use-site-scopes_0"
" defined-syms_0"
" frame-id_4"
" counter_0"
" lift-key_0)"
"(begin"
"(root-expand-context/outer1.1"
"(root-expand-context/inner2.1"
" self-mpi_0"
" module-scopes_0"
" top-level-bind-scope_0"
" all-scopes-stx_0"
" defined-syms_0"
" counter_0"
" lift-key_0)"
" post-expansion_0"
" use-site-scopes_0"
" frame-id_4))))"
"(define-values"
"(root-expand-context-post-expansion)"
"(lambda(v_91)(begin(root-expand-context/outer-post-expansion v_91))))"
"(define-values"
"(root-expand-context-use-site-scopes)"
"(lambda(v_92)(begin(root-expand-context/outer-use-site-scopes v_92))))"
"(define-values(root-expand-context-frame-id)(lambda(v_47)(begin(root-expand-context/outer-frame-id v_47))))"
"(define-values"
"(root-expand-context-self-mpi)"
"(lambda(v_65)(begin(root-expand-context/inner-self-mpi(root-expand-context/outer-inner v_65)))))"
"(define-values"
"(root-expand-context-module-scopes)"
"(lambda(v_48)(begin(root-expand-context/inner-module-scopes(root-expand-context/outer-inner v_48)))))"
"(define-values"
"(root-expand-context-top-level-bind-scope)"
"(lambda(v_93)(begin(root-expand-context/inner-top-level-bind-scope(root-expand-context/outer-inner v_93)))))"
"(define-values"
"(root-expand-context-all-scopes-stx)"
"(lambda(v_49)(begin(root-expand-context/inner-all-scopes-stx(root-expand-context/outer-inner v_49)))))"
"(define-values"
"(root-expand-context-defined-syms)"
"(lambda(v_94)(begin(root-expand-context/inner-defined-syms(root-expand-context/outer-inner v_94)))))"
"(define-values"
"(root-expand-context-counter)"
"(lambda(v_42)(begin(root-expand-context/inner-counter(root-expand-context/outer-inner v_42)))))"
"(define-values"
"(root-expand-context-lift-key)"
"(lambda(v_95)(begin(root-expand-context/inner-lift-key(root-expand-context/outer-inner v_95)))))"
"(define-values"
"(make-root-expand-context13.1)"
"(lambda(all-scopes-stx7_0 initial-scopes4_0 outside-scope5_0 post-expansion-scope6_0 self-mpi3_0)"
"(begin"
" 'make-root-expand-context13"
"(let-values(((self-mpi_1) self-mpi3_0))"
"(let-values(((initial-scopes_0) initial-scopes4_0))"
"(let-values(((outside-scope_0)"
"(if(eq? outside-scope5_0 unsafe-undefined) top-level-common-scope outside-scope5_0)))"
"(let-values(((post-expansion-scope_0)"
"(if(eq? post-expansion-scope6_0 unsafe-undefined)"
"(new-multi-scope 'top-level)"
" post-expansion-scope6_0)))"
"(let-values(((all-scopes-stx_1) all-scopes-stx7_0))"
"(let-values()"
"(let-values(((module-scopes_1)(list* post-expansion-scope_0 outside-scope_0 initial-scopes_0)))"
"(root-expand-context/make"
" self-mpi_1"
" module-scopes_1"
" post-expansion-scope_0"
"(new-scope 'module)"
"(let-values(((or-part_136) all-scopes-stx_1))"
"(if or-part_136 or-part_136(add-scopes empty-syntax module-scopes_1)))"
"(box null)"
"(make-hasheqv)"
"                     (string->uninterned-symbol \"root-frame\")"
"(box 0)"
"(generate-lift-key))))))))))))"
"(define-values"
"(apply-post-expansion)"
"(lambda(pe_0 s_165)"
"(begin"
"(if(not pe_0)"
"(let-values() s_165)"
"(if(shifted-multi-scope? pe_0)"
"(let-values()(push-scope s_165 pe_0))"
"(if(pair? pe_0)"
"(let-values()"
"(let-values(((temp18_2)(push-scope s_165(car pe_0)))((temp19_0)(cdr pe_0)))"
"(syntax-add-shifts44.1 #f temp18_2 temp19_0 #f)))"
"(let-values()(pe_0 s_165))))))))"
"(define-values"
"(post-expansion-scope)"
"(lambda(pe_1)"
"(begin"
"(if(shifted-multi-scope? pe_1)"
"(let-values() pe_1)"
"(if(pair? pe_1)"
"(let-values()(car pe_1))"
"          (let-values () (error 'post-expansion-scope \"internal error: cannot extract scope from ~s\" pe_1)))))))"
"(define-values"
"(root-expand-context-encode-for-module)"
"(lambda(ctx_0 orig-self_0 new-self_0)"
"(begin"
"(datum->syntax$1"
" #f"
"(vector"
"(add-scopes empty-syntax(root-expand-context-module-scopes ctx_0))"
"(apply-post-expansion(root-expand-context-post-expansion ctx_0) empty-syntax)"
"(let-values(((temp20_0)(root-expand-context-all-scopes-stx ctx_0))"
"((orig-self21_0) orig-self_0)"
"((new-self22_0) new-self_0))"
"(syntax-module-path-index-shift13.1 #f temp20_0 orig-self21_0 new-self22_0 #f))"
"(add-scopes empty-syntax(unbox(root-expand-context-use-site-scopes ctx_0)))"
"(let-values(((ht_63)(root-expand-context-defined-syms ctx_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_63)))"
"((letrec-values(((for-loop_78)"
"(lambda(table_91 i_83)"
"(begin"
" 'for-loop"
"(if i_83"
"(let-values(((phase_24 ht_64)(hash-iterate-key+value ht_63 i_83)))"
"(let-values(((table_92)"
"(let-values(((table_93) table_91))"
"(let-values(((table_94)"
"(let-values()"
"(let-values(((key_37 val_25)"
"(let-values()"
"(values phase_24 ht_64))))"
"(hash-set table_93 key_37 val_25)))))"
"(values table_94)))))"
"(if(not #f)(for-loop_78 table_92(hash-iterate-next ht_63 i_83)) table_92)))"
" table_91)))))"
" for-loop_78)"
" '#hasheqv()"
"(hash-iterate-first ht_63))))"
"(root-expand-context-frame-id ctx_0)"
"(unbox(root-expand-context-counter ctx_0)))))))"
"(define-values"
"(root-expand-context-decode-for-module)"
"(lambda(vec-s_0 self_3)"
"(begin"
"(let-values(((vec_29)(if(syntax?$1 vec-s_0)(syntax-e$1 vec-s_0) #f)))"
"(begin"
"(if(if(vector? vec_29)"
"(if(=(vector-length vec_29) 7)"
"(if(syntax?$1(vector-ref vec_29 0))"
"(if(syntax-with-one-scope?(vector-ref vec_29 1))"
"(if(syntax?$1(vector-ref vec_29 2))"
"(if(syntax?$1(vector-ref vec_29 3))"
"(if(defined-syms-hash?(syntax-e$1(vector-ref vec_29 4)))"
"(if(symbol?(syntax-e$1(vector-ref vec_29 5)))"
"(exact-nonnegative-integer?(syntax-e$1(vector-ref vec_29 6)))"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)"
"(void)"
"            (let-values () (error 'root-expand-context-decode-for-module \"bad encoding: ~s\" vec-s_0)))"
"(root-expand-context/make"
" self_3"
"(extract-scope-list(vector-ref vec_29 0))"
"(cons(extract-scope(vector-ref vec_29 1))(extract-shifts(vector-ref vec_29 1)))"
"(new-scope 'module)"
"(vector-ref vec_29 2)"
"(box(extract-scope-list(vector-ref vec_29 3)))"
"(unpack-defined-syms(vector-ref vec_29 4))"
"(syntax-e$1(vector-ref vec_29 5))"
"(box(syntax-e$1(vector-ref vec_29 6)))"
"(generate-lift-key)))))))"
"(define-values"
"(defined-syms-hash?)"
"(lambda(v_96)"
"(begin"
"(let-values(((ht_65) v_96))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_65)))"
"((letrec-values(((for-loop_79)"
"(lambda(result_53 i_84)"
"(begin"
" 'for-loop"
"(if i_84"
"(let-values(((phase_25 ht-s_0)(hash-iterate-key+value ht_65 i_84)))"
"(let-values(((result_54)"
"(let-values()"
"(let-values(((result_55)"
"(let-values()"
"(let-values()"
"(if(phase? phase_25)"
"(if(hash?(syntax-e$1 ht-s_0))"
"(let-values(((ht_66)(syntax-e$1 ht-s_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_66)))"
"((letrec-values(((for-loop_80)"
"(lambda(result_56 i_85)"
"(begin"
" 'for-loop"
"(if i_85"
"(let-values(((sym_21"
" id_8)"
"(hash-iterate-key+value"
" ht_66"
" i_85)))"
"(let-values(((result_57)"
"(let-values()"
"(let-values(((result_58)"
"(let-values()"
"(let-values()"
"(if(symbol?"
" sym_21)"
"(identifier?"
" id_8)"
" #f)))))"
"(values"
" result_58)))))"
"(if(if(not"
"((lambda x_38"
"(not"
" result_57))"
" sym_21"
" id_8))"
"(not #f)"
" #f)"
"(for-loop_80"
" result_57"
"(hash-iterate-next"
" ht_66"
" i_85))"
" result_57)))"
" result_56)))))"
" for-loop_80)"
" #t"
"(hash-iterate-first ht_66))))"
" #f)"
" #f)))))"
"(values result_55)))))"
"(if(if(not((lambda x_39(not result_54)) phase_25 ht-s_0))(not #f) #f)"
"(for-loop_79 result_54(hash-iterate-next ht_65 i_84))"
" result_54)))"
" result_53)))))"
" for-loop_79)"
" #t"
"(hash-iterate-first ht_65)))))))"
"(define-values"
"(extract-scope-list)"
"(lambda(stx_9)(begin(map2 generalize-scope(set->list(syntax-scope-set stx_9 0))))))"
"(define-values"
"(syntax-with-one-scope?)"
"(lambda(stx_10)(begin(if(syntax?$1 stx_10)(= 1(set-count(syntax-scope-set stx_10 0))) #f))))"
"(define-values"
"(extract-scope)"
"(lambda(stx_11)(begin(let-values(((s_58)(syntax-scope-set stx_11 0)))(generalize-scope(set-first s_58))))))"
"(define-values(extract-shifts)(lambda(stx_12)(begin(syntax-mpi-shifts stx_12))))"
"(define-values"
"(unpack-defined-syms)"
"(lambda(v_97)"
"(begin"
"(hash-copy"
"(let-values(((ht_67)(syntax-e$1 v_97)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_67)))"
"((letrec-values(((for-loop_81)"
"(lambda(table_95 i_86)"
"(begin"
" 'for-loop"
"(if i_86"
"(let-values(((phase_26 ht-s_1)(hash-iterate-key+value ht_67 i_86)))"
"(let-values(((table_96)"
"(let-values(((table_97) table_95))"
"(let-values(((table_98)"
"(let-values()"
"(let-values(((key_38 val_26)"
"(let-values()"
"(values"
" phase_26"
"(hash-copy"
"(let-values(((ht_68)"
"(syntax-e$1"
" ht-s_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_68)))"
"((letrec-values(((for-loop_82)"
"(lambda(table_99"
" i_87)"
"(begin"
" 'for-loop"
"(if i_87"
"(let-values(((sym_22"
" id_9)"
"(hash-iterate-key+value"
" ht_68"
" i_87)))"
"(let-values(((table_100)"
"(let-values(((table_101)"
" table_99))"
"(let-values(((table_102)"
"(let-values()"
"(let-values(((key_39"
" val_27)"
"(let-values()"
"(values"
" sym_22"
" id_9))))"
"(hash-set"
" table_101"
" key_39"
" val_27)))))"
"(values"
" table_102)))))"
"(if(not"
" #f)"
"(for-loop_82"
" table_100"
"(hash-iterate-next"
" ht_68"
" i_87))"
" table_100)))"
" table_99)))))"
" for-loop_82)"
" '#hash()"
"(hash-iterate-first"
" ht_68)))))))))"
"(hash-set table_97 key_38 val_26)))))"
"(values table_98)))))"
"(if(not #f)(for-loop_81 table_96(hash-iterate-next ht_67 i_86)) table_96)))"
" table_95)))))"
" for-loop_81)"
" '#hasheqv()"
"(hash-iterate-first ht_67))))))))"
"(define-values(1/primitive-table) primitive-table)"
"(define-values(1/primitive->compiled-position) primitive->compiled-position)"
"(define-values(1/compiled-position->primitive) compiled-position->primitive)"
"(define-values(1/primitive-in-category?) primitive-in-category?)"
"(define-values(1/linklet?) linklet?)"
"(define-values(1/compile-linklet) compile-linklet)"
"(define-values(1/recompile-linklet) recompile-linklet)"
"(define-values(1/eval-linklet) eval-linklet)"
"(define-values(1/read-compiled-linklet) read-compiled-linklet)"
"(define-values(1/instantiate-linklet) instantiate-linklet)"
"(define-values(1/linklet-import-variables) linklet-import-variables)"
"(define-values(1/linklet-export-variables) linklet-export-variables)"
"(define-values(1/instance?) instance?)"
"(define-values(1/make-instance) make-instance)"
"(define-values(1/instance-name) instance-name)"
"(define-values(1/instance-data) instance-data)"
"(define-values(1/instance-variable-names) instance-variable-names)"
"(define-values(1/instance-variable-value) instance-variable-value)"
"(define-values(1/instance-set-variable-value!) instance-set-variable-value!)"
"(define-values(1/instance-unset-variable!) instance-unset-variable!)"
"(define-values(1/linklet-directory?) linklet-directory?)"
"(define-values(1/hash->linklet-directory) hash->linklet-directory)"
"(define-values(1/linklet-directory->hash) linklet-directory->hash)"
"(define-values(1/linklet-bundle?) linklet-bundle?)"
"(define-values(1/hash->linklet-bundle) hash->linklet-bundle)"
"(define-values(1/linklet-bundle->hash) linklet-bundle->hash)"
"(define-values(1/variable-reference?) variable-reference?)"
"(define-values(1/variable-reference->instance) variable-reference->instance)"
"(define-values(1/variable-reference-constant?) variable-reference-constant?)"
"(define-values(1/variable-reference-from-unsafe?) variable-reference-from-unsafe?)"
"(void"
"(if 1/variable-reference-constant?"
"(void)"
"    (let-values () (error \"broken '#%linklet primitive table; maybe you need to use \\\"bootstrap-run.rkt\\\"\"))))"
"(define-values"
"(struct:module-registry module-registry1.1 module-registry? module-registry-declarations module-registry-lock-box)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-registry"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-registry)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'declarations)"
"(make-struct-field-accessor -ref_0 1 'lock-box))))"
"(define-values(make-module-registry)(lambda()(begin(module-registry1.1(make-hasheq)(box #f)))))"
"(define-values"
"(registry-call-with-lock)"
"(lambda(r_5 proc_2)"
"(begin"
"(let-values(((lock-box_0)(module-registry-lock-box r_5)))"
"((letrec-values(((loop_70)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((v_33)(unbox lock-box_0)))"
"(if(let-values(((or-part_75)(not v_33)))"
"(if or-part_75 or-part_75(sync/timeout 0(car v_33)(cdr v_33))))"
"(let-values()"
"(let-values(((sema_0)(make-semaphore)))"
"(let-values(((lock_0)(cons(semaphore-peek-evt sema_0)(current-thread))))"
"((dynamic-wind"
" void"
"(lambda()"
"(if(box-cas! lock-box_0 v_33 lock_0)"
"(let-values()(begin(proc_2) void))"
"(let-values()(lambda()(loop_70)))))"
"(lambda()(semaphore-post sema_0)))))))"
"(if(eq?(current-thread)(cdr v_33))"
"(let-values()(proc_2))"
"(let-values()(begin(sync(car v_33)(cdr v_33))(loop_70))))))))))"
" loop_70))))))"
"(define-values"
"(struct:namespace"
" namespace1.1"
" 1/namespace?"
" namespace-mpi"
" namespace-source-name"
" namespace-root-expand-ctx"
" namespace-phase"
" namespace-0-phase"
" namespace-phase-to-namespace"
" namespace-phase-level-to-definitions"
" namespace-module-registry$1"
" namespace-bulk-binding-registry"
" namespace-submodule-declarations"
" namespace-root-namespace"
" namespace-declaration-inspector"
" namespace-inspector"
" namespace-available-module-instances"
" namespace-module-instances"
" set-namespace-inspector!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'namespace"
" #f"
" 15"
" 0"
" #f"
"(list"
"(cons prop:authentic #t)"
"(cons"
" prop:custom-write"
"(lambda(ns_0 port_10 mode_10)"
"                         (let-values ((() (begin (write-string \"#<namespace\" port_10) (values))))"
"(let-values(((n_20)(namespace-source-name ns_0)))"
"(let-values((()"
"(begin"
"(if n_20"
"                                               (let-values () (fprintf port_10 \":~a\" (namespace->name ns_0)))"
"(void))"
"(values))))"
"(let-values(((0-phase_0)(namespace-0-phase ns_0)))"
"(let-values(((phase-level_0)(phase-(namespace-phase ns_0) 0-phase_0)))"
"(begin"
"(if(zero-phase? phase-level_0)"
"(void)"
"                                       (let-values () (fprintf port_10 \":~s\" phase-level_0)))"
"(if(zero-phase? 0-phase_0)"
"(void)"
"(let-values()"
"                                         (fprintf port_10 \"~a~s\" (if (positive? 0-phase_0) \"+\" \"\") 0-phase_0)))"
"                                     (write-string \">\" port_10))))))))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 13 14)"
" #f"
" 'namespace)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'mpi)"
"(make-struct-field-accessor -ref_0 1 'source-name)"
"(make-struct-field-accessor -ref_0 2 'root-expand-ctx)"
"(make-struct-field-accessor -ref_0 3 'phase)"
"(make-struct-field-accessor -ref_0 4 '0-phase)"
"(make-struct-field-accessor -ref_0 5 'phase-to-namespace)"
"(make-struct-field-accessor -ref_0 6 'phase-level-to-definitions)"
"(make-struct-field-accessor -ref_0 7 'module-registry)"
"(make-struct-field-accessor -ref_0 8 'bulk-binding-registry)"
"(make-struct-field-accessor -ref_0 9 'submodule-declarations)"
"(make-struct-field-accessor -ref_0 10 'root-namespace)"
"(make-struct-field-accessor -ref_0 11 'declaration-inspector)"
"(make-struct-field-accessor -ref_0 12 'inspector)"
"(make-struct-field-accessor -ref_0 13 'available-module-instances)"
"(make-struct-field-accessor -ref_0 14 'module-instances)"
"(make-struct-field-mutator -set!_0 12 'inspector))))"
"(define-values"
"(struct:definitions definitions2.1 definitions? definitions-variables definitions-transformers)"
"(let-values(((struct:_37 make-_37 ?_37 -ref_37 -set!_37)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'definitions"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'definitions)))))"
"(values"
" struct:_37"
" make-_37"
" ?_37"
"(make-struct-field-accessor -ref_37 0 'variables)"
"(make-struct-field-accessor -ref_37 1 'transformers))))"
"(define-values(make-namespace)(lambda()(begin(let-values()(new-namespace8.1 #t unsafe-undefined #f)))))"
"(define-values"
"(new-namespace8.1)"
"(lambda(register?4_0 root-expand-ctx3_0 share-from-ns7_0)"
"(begin"
" 'new-namespace8"
"(let-values(((share-from-ns_0) share-from-ns7_0))"
"(let-values(((root-expand-ctx_0)"
"(if(eq? root-expand-ctx3_0 unsafe-undefined)"
"(let-values(((top-level-module-path-index20_0) top-level-module-path-index))"
"(make-root-expand-context13.1"
" #f"
" null"
" unsafe-undefined"
" unsafe-undefined"
" top-level-module-path-index20_0))"
" root-expand-ctx3_0)))"
"(let-values(((register?_0) register?4_0))"
"(let-values()"
"(let-values(((phase_27)(if share-from-ns_0(namespace-phase share-from-ns_0) 0)))"
"(let-values(((ns_1)"
"(namespace1.1"
" top-level-module-path-index"
" #f"
"(box root-expand-ctx_0)"
" phase_27"
" phase_27"
"(make-small-hasheqv)"
"(make-small-hasheqv)"
"(if share-from-ns_0(namespace-module-registry$1 share-from-ns_0)(make-module-registry))"
"(if share-from-ns_0"
"(namespace-bulk-binding-registry share-from-ns_0)"
"(make-bulk-binding-registry))"
"(make-small-hasheq)"
"(if share-from-ns_0"
"(let-values(((or-part_137)(namespace-root-namespace share-from-ns_0)))"
"(if or-part_137 or-part_137 share-from-ns_0))"
" #f)"
" #f"
"(make-inspector(current-code-inspector))"
"(if share-from-ns_0"
"(namespace-available-module-instances share-from-ns_0)"
"(make-hasheqv))"
"(if share-from-ns_0(namespace-module-instances share-from-ns_0)(make-hasheqv)))))"
"(begin"
"(if register?_0"
"(let-values()(small-hash-set!(namespace-phase-to-namespace ns_1) phase_27 ns_1))"
"(void))"
" ns_1))))))))))"
"(define-values"
"(1/current-namespace)"
"(make-parameter"
"(make-namespace)"
"(lambda(v_98)"
"(begin"
"       (if (1/namespace? v_98) (void) (let-values () (raise-argument-error 'current-namespace \"namespace?\" v_98)))"
" v_98))))"
"(define-values"
"(namespace-get-root-expand-ctx)"
"(lambda(ns_2)(begin(force(unbox(namespace-root-expand-ctx ns_2))))))"
"(define-values"
"(namespace-set-root-expand-ctx!)"
"(lambda(ns_3 root-ctx_0)(begin(set-box!(namespace-root-expand-ctx ns_3) root-ctx_0))))"
"(define-values"
"(namespace-self-mpi)"
"(lambda(ns_4)(begin(root-expand-context-self-mpi(namespace-get-root-expand-ctx ns_4)))))"
"(define-values"
"(namespace->module)"
"(lambda(ns_5 name_17)"
"(begin"
"(let-values(((or-part_138)(small-hash-ref(namespace-submodule-declarations ns_5) name_17 #f)))"
"(if or-part_138"
" or-part_138"
"(hash-ref(module-registry-declarations(namespace-module-registry$1 ns_5)) name_17 #f))))))"
"(define-values"
"(namespace->namespace-at-phase)"
"(lambda(ns_6 phase_24)"
"(begin"
"(let-values(((or-part_139)(small-hash-ref(namespace-phase-to-namespace ns_6) phase_24 #f)))"
"(if or-part_139"
" or-part_139"
"(let-values(((p-ns_0)"
"(let-values(((the-struct_34) ns_6))"
"(if(1/namespace? the-struct_34)"
"(let-values(((phase21_0) phase_24))"
"(namespace1.1"
"(namespace-mpi the-struct_34)"
"(namespace-source-name the-struct_34)"
"(namespace-root-expand-ctx the-struct_34)"
" phase21_0"
"(namespace-0-phase the-struct_34)"
"(namespace-phase-to-namespace the-struct_34)"
"(namespace-phase-level-to-definitions the-struct_34)"
"(namespace-module-registry$1 the-struct_34)"
"(namespace-bulk-binding-registry the-struct_34)"
"(namespace-submodule-declarations the-struct_34)"
"(namespace-root-namespace the-struct_34)"
"(namespace-declaration-inspector the-struct_34)"
"(namespace-inspector the-struct_34)"
"(namespace-available-module-instances the-struct_34)"
"(namespace-module-instances the-struct_34)))"
"                            (raise-argument-error 'struct-copy \"namespace?\" the-struct_34)))))"
"(begin(small-hash-set!(namespace-phase-to-namespace ns_6) phase_24 p-ns_0) p-ns_0)))))))"
"(define-values"
"(namespace->name)"
"(lambda(ns_7)"
"(begin"
"(let-values(((n_21)(namespace-source-name ns_7)))"
"(let-values(((s_166)"
"(if(not n_21)"
"(let-values() 'top-level)"
"(if(symbol? n_21)"
"                          (let-values () (format \"'~s\" n_21))"
"                          (let-values () (string-append \"\\\"\" (path->string n_21) \"\\\"\"))))))"
"(let-values(((r_27)(1/resolved-module-path-name(1/module-path-index-resolve(namespace-mpi ns_7)))))"
"            (if (pair? r_27) (string-append \"(submod \" s_166 \" \" (substring (format \"~s\" (cdr r_27)) 1)) s_166)))))))"
"(define-values"
"(namespace->definitions)"
"(lambda(ns_8 phase-level_1)"
"(begin"
"(let-values(((d_8)(small-hash-ref(namespace-phase-level-to-definitions ns_8) phase-level_1 #f)))"
"(let-values(((or-part_140) d_8))"
"(if or-part_140"
" or-part_140"
"(let-values()"
"(let-values(((p-ns_1)"
"(namespace->namespace-at-phase ns_8(phase+(namespace-0-phase ns_8) phase-level_1))))"
"(let-values(((d_9)(definitions2.1(1/make-instance(namespace->name p-ns_1) p-ns_1)(make-hasheq))))"
"(begin(small-hash-set!(namespace-phase-level-to-definitions ns_8) phase-level_1 d_9) d_9))))))))))"
"(define-values"
"(namespace-set-variable!)"
"(let-values(((namespace-set-variable!16_0)"
"(lambda(ns12_0 phase-level13_0 name14_1 val15_0 as-constant?11_0)"
"(begin"
" 'namespace-set-variable!16"
"(let-values(((ns_9) ns12_0))"
"(let-values(((phase-level_2) phase-level13_0))"
"(let-values(((name_18) name14_1))"
"(let-values(((val_28) val15_0))"
"(let-values(((as-constant?_0) as-constant?11_0))"
"(let-values()"
"(let-values(((d_10)(namespace->definitions ns_9 phase-level_2)))"
"(1/instance-set-variable-value!"
"(definitions-variables d_10)"
" name_18"
" val_28"
"(if as-constant?_0 'constant #f)))))))))))))"
"(case-lambda"
"((ns_10 phase-level_3 name_19 val_29)(begin(namespace-set-variable!16_0 ns_10 phase-level_3 name_19 val_29 #f)))"
"((ns_11 phase-level_4 name_20 val_30 as-constant?11_1)"
"(namespace-set-variable!16_0 ns_11 phase-level_4 name_20 val_30 as-constant?11_1)))))"
"(define-values"
"(namespace-set-consistent!)"
"(lambda(ns_12 phase-level_5 name_21 val_31)"
"(begin"
"(let-values(((d_11)(namespace->definitions ns_12 phase-level_5)))"
"(1/instance-set-variable-value!(definitions-variables d_11) name_21 val_31 'consistent)))))"
"(define-values"
"(namespace-unset-variable!)"
"(lambda(ns_13 phase-level_6 name_22)"
"(begin"
"(let-values(((d_12)(namespace->definitions ns_13 phase-level_6)))"
"(1/instance-unset-variable!(definitions-variables d_12) name_22)))))"
"(define-values"
"(namespace-set-transformer!)"
"(lambda(ns_14 phase-level_7 name_23 val_32)"
"(begin"
"(let-values(((d_13)(namespace->definitions ns_14(add1 phase-level_7))))"
"(hash-set!(definitions-transformers d_13) name_23 val_32)))))"
"(define-values"
"(namespace-unset-transformer!)"
"(lambda(ns_15 phase-level_8 name_24)"
"(begin"
"(let-values(((d_14)(namespace->definitions ns_15(add1 phase-level_8))))"
"(hash-remove!(definitions-transformers d_14) name_24)))))"
"(define-values"
"(namespace-get-variable)"
"(lambda(ns_16 phase-level_9 name_25 fail-k_0)"
"(begin"
"(let-values(((d_15)(namespace->definitions ns_16 phase-level_9)))"
"(1/instance-variable-value(definitions-variables d_15) name_25 fail-k_0)))))"
"(define-values"
"(namespace-get-transformer)"
"(lambda(ns_17 phase-level_10 name_26 fail-k_1)"
"(begin"
"(let-values(((d_16)(namespace->definitions ns_17(add1 phase-level_10))))"
"(hash-ref(definitions-transformers d_16) name_26 fail-k_1)))))"
"(define-values"
"(namespace->instance)"
"(lambda(ns_18 phase-shift_2)(begin(definitions-variables(namespace->definitions ns_18 phase-shift_2)))))"
"(define-values"
"(namespace-same-instance?)"
"(lambda(a-ns_0 b-ns_0)"
"(begin"
"(eq?"
"(small-hash-ref(namespace-phase-level-to-definitions a-ns_0) 0 'no-a)"
"(small-hash-ref(namespace-phase-level-to-definitions b-ns_0) 0 'no-b)))))"
"(define-values(original-property-sym)(gensym 'original))"
"(define-values"
"(syntax->list$1)"
"(lambda(s_0)"
"(begin"
" 'syntax->list"
"(let-values(((l_46)"
"((letrec-values(((loop_78)"
"(lambda(s_1)"
"(begin"
" 'loop"
"(if(pair? s_1)"
"(let-values()(cons(car s_1)(loop_78(cdr s_1))))"
"(if(syntax?$1 s_1)"
"(let-values()(loop_78(syntax-e$1 s_1)))"
"(let-values() s_1)))))))"
" loop_78)"
" s_0)))"
"(if(list? l_46) l_46 #f)))))"
"(define-values(missing$1)(gensym))"
"(define-values"
"(syntax-track-origin$1)"
"(let-values(((syntax-track-origin4_0)"
"(lambda(new-stx2_0 old-stx3_0 id1_0)"
"(begin"
" 'syntax-track-origin4"
"(let-values(((new-stx_0) new-stx2_0))"
"(let-values(((old-stx_0) old-stx3_0))"
"(let-values(((id_10)"
"(if(eq? id1_0 unsafe-undefined)"
"(if(identifier? old-stx_0)"
" old-stx_0"
"(let-values(((v_30)(syntax-e/no-taint old-stx_0)))"
"(if(pair? v_30)(car v_30) #f)))"
" id1_0)))"
"(let-values()"
"(let-values(((old-props_0)(syntax-props old-stx_0)))"
"(if(zero?(hash-count old-props_0))"
"(let-values()"
"(if id_10"
"(syntax-property$1"
" new-stx_0"
" 'origin"
"(cons id_10(hash-ref(syntax-props new-stx_0) 'origin null)))"
" new-stx_0))"
"(let-values()"
"(let-values(((new-props_0)(syntax-props new-stx_0)))"
"(if(zero?(hash-count new-props_0))"
"(let-values()"
"(if id_10"
"(let-values()"
"(let-values(((old-origin_0)"
"(plain-property-value"
"(hash-ref old-props_0 'origin missing$1))))"
"(let-values(((origin_0)"
"(if(eq? old-origin_0 missing$1)"
"(list id_10)"
"(cons id_10 old-origin_0))))"
"(let-values(((the-struct_35) new-stx_0))"
"(if(syntax?$1 the-struct_35)"
"(let-values(((props6_0)(hash-set old-props_0 'origin origin_0)))"
"(syntax1.1"
"(syntax-content the-struct_35)"
"(syntax-scopes the-struct_35)"
"(syntax-shifted-multi-scopes the-struct_35)"
"(syntax-scope-propagations+tamper the-struct_35)"
"(syntax-mpi-shifts the-struct_35)"
"(syntax-srcloc the-struct_35)"
" props6_0"
"(syntax-inspector the-struct_35)))"
"                                                    (raise-argument-error 'struct-copy \"syntax?\" the-struct_35))))))"
"(let-values()"
"(let-values(((the-struct_36) new-stx_0))"
"(if(syntax?$1 the-struct_36)"
"(let-values(((props7_1) old-props_0))"
"(syntax1.1"
"(syntax-content the-struct_36)"
"(syntax-scopes the-struct_36)"
"(syntax-shifted-multi-scopes the-struct_36)"
"(syntax-scope-propagations+tamper the-struct_36)"
"(syntax-mpi-shifts the-struct_36)"
"(syntax-srcloc the-struct_36)"
" props7_1"
"(syntax-inspector the-struct_36)))"
"                                                (raise-argument-error 'struct-copy \"syntax?\" the-struct_36))))))"
"(let-values()"
"(let-values(((old-props-with-origin_0)"
"(if id_10"
"(hash-set"
" old-props_0"
" 'origin"
"(cons id_10(hash-ref old-props_0 'origin null)))"
" old-props_0)))"
"(let-values(((updated-props_0)"
"(if(<"
"(hash-count old-props-with-origin_0)"
"(hash-count new-props_0))"
"(let-values()"
"(let-values(((ht_69) old-props-with-origin_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_69)))"
"((letrec-values(((for-loop_83)"
"(lambda(new-props_1 i_88)"
"(begin"
" 'for-loop"
"(if i_88"
"(let-values(((k_17 v_2)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_69"
" i_88)))"
"(let-values(((new-props_2)"
"(let-values(((new-props_3)"
" new-props_1))"
"(let-values(((new-props_4)"
"(let-values()"
"(let-values(((new-v_0)"
"(hash-ref"
" new-props_3"
" k_17"
" missing$1)))"
"(hash-set"
" new-props_3"
" k_17"
"(if(eq?"
" new-v_0"
" missing$1)"
" v_2"
"(cons/preserve"
" new-v_0"
" v_2)))))))"
"(values"
" new-props_4)))))"
"(if(not #f)"
"(for-loop_83"
" new-props_2"
"(unsafe-immutable-hash-iterate-next"
" ht_69"
" i_88))"
" new-props_2)))"
" new-props_1)))))"
" for-loop_83)"
" new-props_0"
"(unsafe-immutable-hash-iterate-first ht_69)))))"
"(let-values()"
"(let-values(((ht_70) new-props_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash ht_70)))"
"((letrec-values(((for-loop_84)"
"(lambda(old-props_1 i_0)"
"(begin"
" 'for-loop"
"(if i_0"
"(let-values(((k_18 v_89)"
"(unsafe-immutable-hash-iterate-key+value"
" ht_70"
" i_0)))"
"(let-values(((old-props_2)"
"(let-values(((old-props_3)"
" old-props_1))"
"(let-values(((old-props_4)"
"(let-values()"
"(let-values(((old-v_0)"
"(hash-ref"
" old-props_3"
" k_18"
" missing$1)))"
"(hash-set"
" old-props_3"
" k_18"
"(if(eq?"
" old-v_0"
" missing$1)"
" v_89"
"(cons/preserve"
" v_89"
" old-v_0)))))))"
"(values"
" old-props_4)))))"
"(if(not #f)"
"(for-loop_84"
" old-props_2"
"(unsafe-immutable-hash-iterate-next"
" ht_70"
" i_0))"
" old-props_2)))"
" old-props_1)))))"
" for-loop_84)"
" old-props-with-origin_0"
"(unsafe-immutable-hash-iterate-first ht_70))))))))"
"(let-values(((the-struct_37) new-stx_0))"
"(if(syntax?$1 the-struct_37)"
"(let-values(((props8_0) updated-props_0))"
"(syntax1.1"
"(syntax-content the-struct_37)"
"(syntax-scopes the-struct_37)"
"(syntax-shifted-multi-scopes the-struct_37)"
"(syntax-scope-propagations+tamper the-struct_37)"
"(syntax-mpi-shifts the-struct_37)"
"(syntax-srcloc the-struct_37)"
" props8_0"
"(syntax-inspector the-struct_37)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"syntax?\""
" the-struct_37)))))))))))))))))))"
"(case-lambda"
"((new-stx_1 old-stx_1)(begin 'syntax-track-origin(syntax-track-origin4_0 new-stx_1 old-stx_1 unsafe-undefined)))"
"((new-stx_2 old-stx_2 id1_1)(syntax-track-origin4_0 new-stx_2 old-stx_2 id1_1)))))"
"(define-values"
"(cons/preserve)"
"(lambda(a_35 b_49)"
"(begin"
"(if(let-values(((or-part_67)(preserved-property-value? a_35)))"
"(if or-part_67 or-part_67(preserved-property-value? b_49)))"
"(preserved-property-value1.1(cons(plain-property-value a_35)(plain-property-value b_49)))"
"(cons a_35 b_49)))))"
"(define-values"
"(syntax-track-origin*)"
"(lambda(old-stxes_0 new-stx_3)"
"(begin"
"(let-values(((lst_58) old-stxes_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_58)))"
"((letrec-values(((for-loop_85)"
"(lambda(new-stx_4 lst_24)"
"(begin"
" 'for-loop"
"(if(pair? lst_24)"
"(let-values(((old-stx_3)(unsafe-car lst_24))((rest_26)(unsafe-cdr lst_24)))"
"(let-values(((new-stx_5)"
"(let-values(((new-stx_6) new-stx_4))"
"(let-values(((new-stx_7)"
"(let-values()"
"(syntax-track-origin$1 new-stx_6 old-stx_3))))"
"(values new-stx_7)))))"
"(if(not #f)(for-loop_85 new-stx_5 rest_26) new-stx_5)))"
" new-stx_4)))))"
" for-loop_85)"
" new-stx_3"
" lst_58))))))"
"(define-values"
"(1/struct:exn:fail:syntax make-exn:fail:syntax$1 1/exn:fail:syntax? 1/exn:fail:syntax-exprs)"
"(let-values(((struct:_30 make-_30 ?_30 -ref_30 -set!_30)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax"
" struct:exn:fail"
" 1"
" 0"
" #f"
"(list"
"(cons"
" prop:exn:srclocs"
"(lambda(e_17)(filter values(map2 syntax-srcloc(1/exn:fail:syntax-exprs e_17))))))"
" #f"
" #f"
" '(0)"
"(lambda(str_1 cm_0 exprs_0 info_2)"
"(begin"
"(if(if(list? exprs_0)(andmap2 syntax?$1 exprs_0) #f)"
"(void)"
"                           (let-values () (raise-argument-error 'exn:fail:syntax \"(listof syntax?)\" exprs_0)))"
"(values str_1 cm_0 exprs_0)))"
" 'exn:fail:syntax)))))"
"(values struct:_30 make-_30 ?_30(make-struct-field-accessor -ref_30 0 'exprs))))"
"(define-values"
"(1/struct:exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1 1/exn:fail:syntax:unbound?)"
"(let-values(((struct:_38 make-_38 ?_38 -ref_38 -set!_38)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:unbound"
" 1/struct:exn:fail:syntax"
" 0"
" 0"
" #f"
" null"
" #f"
" #f"
" '()"
" #f"
" 'exn:fail:syntax:unbound)))))"
"(values struct:_38 make-_38 ?_38)))"
"(define-values"
"(raise-syntax-error$1)"
"(let-values(((raise-syntax-error7_0)"
"(lambda(given-name5_0 message6_0 expr1_0 sub-expr2_0 extra-sources3_0 message-suffix4_0)"
"(begin"
" 'raise-syntax-error7"
"(let-values(((given-name_0) given-name5_0))"
"(let-values(((message_0) message6_0))"
"(let-values(((expr_0) expr1_0))"
"(let-values(((sub-expr_0) sub-expr2_0))"
"(let-values(((extra-sources_0) extra-sources3_0))"
"(let-values(((message-suffix_0) message-suffix4_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(do-raise-syntax-error"
" 'raise-syntax-error"
" make-exn:fail:syntax$1"
" given-name_0"
" message_0"
" expr_0"
" sub-expr_0"
" extra-sources_0"
" message-suffix_0))))))))))))))"
"(case-lambda"
"     ((given-name_1 message_1) (begin 'raise-syntax-error (raise-syntax-error7_0 given-name_1 message_1 #f #f null \"\")))"
"((given-name_2 message_2 expr_1 sub-expr_1 extra-sources_1 message-suffix4_1)"
"(raise-syntax-error7_0 given-name_2 message_2 expr_1 sub-expr_1 extra-sources_1 message-suffix4_1))"
"((given-name_3 message_3 expr_2 sub-expr_2 extra-sources3_1)"
"      (raise-syntax-error7_0 given-name_3 message_3 expr_2 sub-expr_2 extra-sources3_1 \"\"))"
"((given-name_4 message_4 expr_3 sub-expr2_1)"
"      (raise-syntax-error7_0 given-name_4 message_4 expr_3 sub-expr2_1 null \"\"))"
"     ((given-name_5 message_5 expr1_1) (raise-syntax-error7_0 given-name_5 message_5 expr1_1 #f null \"\")))))"
"(define-values"
"(raise-unbound-syntax-error)"
"(let-values(((raise-unbound-syntax-error15_0)"
"(lambda(given-name13_0 message14_0 expr9_0 sub-expr10_0 extra-sources11_0 message-suffix12_0)"
"(begin"
" 'raise-unbound-syntax-error15"
"(let-values(((given-name_6) given-name13_0))"
"(let-values(((message_6) message14_0))"
"(let-values(((expr_4) expr9_0))"
"(let-values(((sub-expr_3) sub-expr10_0))"
"(let-values(((extra-sources_2) extra-sources11_0))"
"(let-values(((message-suffix_1) message-suffix12_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(do-raise-syntax-error"
" 'raise-unbound-syntax-error"
" make-exn:fail:syntax:unbound$1"
" given-name_6"
" message_6"
" expr_4"
" sub-expr_3"
" extra-sources_2"
" message-suffix_1))))))))))))))"
"(case-lambda"
"     ((given-name_7 message_7) (begin (raise-unbound-syntax-error15_0 given-name_7 message_7 #f #f null \"\")))"
"((given-name_8 message_8 expr_5 sub-expr_4 extra-sources_3 message-suffix12_1)"
"(raise-unbound-syntax-error15_0 given-name_8 message_8 expr_5 sub-expr_4 extra-sources_3 message-suffix12_1))"
"((given-name_9 message_9 expr_6 sub-expr_5 extra-sources11_1)"
"      (raise-unbound-syntax-error15_0 given-name_9 message_9 expr_6 sub-expr_5 extra-sources11_1 \"\"))"
"((given-name_10 message_10 expr_7 sub-expr10_1)"
"      (raise-unbound-syntax-error15_0 given-name_10 message_10 expr_7 sub-expr10_1 null \"\"))"
"((given-name_11 message_11 expr9_1)"
"      (raise-unbound-syntax-error15_0 given-name_11 message_11 expr9_1 #f null \"\")))))"
"(define-values"
"(do-raise-syntax-error)"
"(lambda(who_8 exn:fail:syntax_0 given-name_12 message_12 expr_8 sub-expr_6 extra-sources_4 message-suffix_2)"
"(begin"
"(let-values((()"
"(begin"
"(if((lambda(x_40)"
"(let-values(((or-part_99)(not x_40)))(if or-part_99 or-part_99(symbol? x_40))))"
" given-name_12)"
"(void)"
"                        (let-values () (raise-argument-error who_8 \"(or/c symbol? #f)\" given-name_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message_12)"
"(void)"
"                          (let-values () (raise-argument-error who_8 \"string?\" message_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(list? extra-sources_4)(andmap2 syntax?$1 extra-sources_4) #f)"
"(void)"
"                            (let-values () (raise-argument-error who_8 \"(listof syntax?)\" extra-sources_4)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(string? message-suffix_2)"
"(void)"
"                              (let-values () (raise-argument-error who_8 \"string?\" message-suffix_2)))"
"(values))))"
"(let-values(((name_27)"
"(format"
"                             \"~a\""
"(let-values(((or-part_136) given-name_12))"
"(if or-part_136"
" or-part_136"
"(let-values(((or-part_141)(extract-form-name expr_8)))"
"(if or-part_141 or-part_141 '?)))))))"
"(let-values(((at-message_0)"
"(let-values(((or-part_142)"
"(if sub-expr_6"
"(if(error-print-source-location)"
"                                                (format \"\\n  at: ~.s\" (syntax->datum$1 (datum->syntax$1 #f sub-expr_6)))"
" #f)"
" #f)))"
"                                (if or-part_142 or-part_142 \"\"))))"
"(let-values(((in-message_0)"
"(let-values(((or-part_135)"
"(if expr_8"
"(if(error-print-source-location)"
"                                                  (format \"\\n  in: ~.s\" (syntax->datum$1 (datum->syntax$1 #f expr_8)))"
" #f)"
" #f)))"
"                                  (if or-part_135 or-part_135 \"\"))))"
"(let-values(((src-loc-str_0)"
"(let-values(((or-part_143)"
"(if(error-print-source-location)"
"(let-values(((or-part_144)(extract-source-location sub-expr_6)))"
"(if or-part_144 or-part_144(extract-source-location expr_8)))"
" #f)))"
"                                    (if or-part_143 or-part_143 \"\"))))"
"(raise"
"(exn:fail:syntax_0"
"                        (string-append src-loc-str_0 name_27 \": \" message_12 at-message_0 in-message_0 message-suffix_2)"
"(current-continuation-marks)"
"(map2"
" syntax-taint$1"
"(if(let-values(((or-part_145) sub-expr_6))(if or-part_145 or-part_145 expr_8))"
"(cons"
"(datum->syntax$1"
" #f"
"(let-values(((or-part_137) sub-expr_6))(if or-part_137 or-part_137 expr_8)))"
" extra-sources_4)"
" extra-sources_4)))))))))))))))"
"(define-values"
"(extract-form-name)"
"(lambda(s_70)"
"(begin"
"(if(syntax?$1 s_70)"
"(let-values()"
"(let-values(((e_18)(syntax-e$1 s_70)))"
"(if(symbol? e_18)"
"(let-values() e_18)"
"(if(if(pair? e_18)(identifier?(car e_18)) #f)"
"(let-values()(syntax-e$1(car e_18)))"
"(let-values() #f)))))"
"(let-values() #f)))))"
"(define-values"
"(extract-source-location)"
"(lambda(s_26)"
"(begin"
"(if(syntax?$1 s_26)"
"(if(syntax-srcloc s_26)"
"          (let-values (((str_2) (srcloc->string (syntax-srcloc s_26)))) (if str_2 (string-append str_2 \": \") #f))"
" #f)"
" #f))))"
"(define-values"
"(struct:module-use module-use1.1 module-use? module-use-module module-use-phase)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-use"
" #f"
" 2"
" 0"
" #f"
"(list"
"(cons"
" prop:equal+hash"
"(list"
"(lambda(a_36 b_22 eql?_2)"
"(let-values(((a-mod_0)(module-use-module a_36)))"
"(let-values(((b-mod_0)(module-use-module b_22)))"
"(if(eql?_2 a-mod_0 b-mod_0)"
"(if(eql?_2(module-use-phase a_36)(module-use-phase b_22))"
"(let-values(((a-path_0 a-base_0)(1/module-path-index-split a-mod_0))"
"((b-path_0 b-base_0)(1/module-path-index-split b-mod_0)))"
"(let-values(((or-part_78) a-path_0))"
"(if or-part_78"
" or-part_78"
"(let-values(((or-part_79) b-path_0))"
"(if or-part_79"
" or-part_79"
"(eq?"
"(module-path-index-resolved a-mod_0)"
"(module-path-index-resolved b-mod_0)))))))"
" #f)"
" #f))))"
"(lambda(a_37 hash-code_4)"
"(+(hash-code_4(module-use-module a_37))(hash-code_4(module-use-phase a_37))))"
"(lambda(a_38 hash-code_5)"
"(+(hash-code_5(module-use-module a_38))(hash-code_5(module-use-phase a_38)))))))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-use)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'module)"
"(make-struct-field-accessor -ref_0 1 'phase))))"
"(define-values"
"(struct:module"
" module1.1"
" module?"
" module-source-name"
" module-self"
" module-requires"
" module-provides"
" module-access"
" module-language-info"
" module-min-phase-level"
" module-max-phase-level"
" module-phase-level-linklet-info-callback"
" module-force-bulk-binding"
" module-prepare-instance"
" module-instantiate-phase"
" module-primitive?"
" module-is-predefined?"
" module-cross-phase-persistent?"
" module-no-protected?"
" module-inspector"
" module-submodule-names"
" module-supermodule-name"
" module-get-all-variables"
" set-module-access!)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module"
" #f"
" 20"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)"
" #f"
" 'module)))))"
"(values"
" struct:_1"
" make-_1"
" ?_1"
"(make-struct-field-accessor -ref_1 0 'source-name)"
"(make-struct-field-accessor -ref_1 1 'self)"
"(make-struct-field-accessor -ref_1 2 'requires)"
"(make-struct-field-accessor -ref_1 3 'provides)"
"(make-struct-field-accessor -ref_1 4 'access)"
"(make-struct-field-accessor -ref_1 5 'language-info)"
"(make-struct-field-accessor -ref_1 6 'min-phase-level)"
"(make-struct-field-accessor -ref_1 7 'max-phase-level)"
"(make-struct-field-accessor -ref_1 8 'phase-level-linklet-info-callback)"
"(make-struct-field-accessor -ref_1 9 'force-bulk-binding)"
"(make-struct-field-accessor -ref_1 10 'prepare-instance)"
"(make-struct-field-accessor -ref_1 11 'instantiate-phase)"
"(make-struct-field-accessor -ref_1 12 'primitive?)"
"(make-struct-field-accessor -ref_1 13 'is-predefined?)"
"(make-struct-field-accessor -ref_1 14 'cross-phase-persistent?)"
"(make-struct-field-accessor -ref_1 15 'no-protected?)"
"(make-struct-field-accessor -ref_1 16 'inspector)"
"(make-struct-field-accessor -ref_1 17 'submodule-names)"
"(make-struct-field-accessor -ref_1 18 'supermodule-name)"
"(make-struct-field-accessor -ref_1 19 'get-all-variables)"
"(make-struct-field-mutator -set!_1 4 'access))))"
"(define-values"
"(struct:module-linklet-info"
" module-linklet-info2.1"
" module-linklet-info?"
" module-linklet-info-linklet-or-instance"
" module-linklet-info-module-uses"
" module-linklet-info-self"
" module-linklet-info-inspector"
" module-linklet-info-extra-inspector"
" module-linklet-info-extra-inspectorsss)"
"(let-values(((struct:_39 make-_39 ?_39 -ref_39 -set!_39)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-linklet-info"
" #f"
" 6"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '(0 1 2 3 4 5)"
" #f"
" 'module-linklet-info)))))"
"(values"
" struct:_39"
" make-_39"
" ?_39"
"(make-struct-field-accessor -ref_39 0 'linklet-or-instance)"
"(make-struct-field-accessor -ref_39 1 'module-uses)"
"(make-struct-field-accessor -ref_39 2 'self)"
"(make-struct-field-accessor -ref_39 3 'inspector)"
"(make-struct-field-accessor -ref_39 4 'extra-inspector)"
"(make-struct-field-accessor -ref_39 5 'extra-inspectorsss))))"
"(define-values"
"(make-module39.1)"
"(lambda(cross-phase-persistent?16_0"
" force-bulk-binding-callback10_0"
" get-all-variables20_0"
" instantiate-phase-callback9_0"
" language-info13_0"
" max-phase-level8_0"
" min-phase-level7_0"
" no-protected?17_0"
" phase-level-linklet-info-callback12_0"
" predefined?15_0"
" prepare-instance-callback11_0"
" primitive?14_0"
" provides6_0"
" requires5_0"
" self4_0"
" source-name3_0"
" submodule-names18_0"
" supermodule-name19_0)"
"(begin"
" 'make-module39"
"(let-values(((source-name_0) source-name3_0))"
"(let-values(((self_4) self4_0))"
"(let-values(((requires_0) requires5_0))"
"(let-values(((provides_3) provides6_0))"
"(let-values(((min-phase-level_0) min-phase-level7_0))"
"(let-values(((max-phase-level_0) max-phase-level8_0))"
"(let-values(((instantiate-phase_0) instantiate-phase-callback9_0))"
"(let-values(((force-bulk-binding_0)"
"(if(eq? force-bulk-binding-callback10_0 unsafe-undefined)"
" void"
" force-bulk-binding-callback10_0)))"
"(let-values(((prepare-instance_0)"
"(if(eq? prepare-instance-callback11_0 unsafe-undefined)"
" void"
" prepare-instance-callback11_0)))"
"(let-values(((phase-level-linklet-info-callback_0)"
"(if(eq? phase-level-linklet-info-callback12_0 unsafe-undefined)"
"(lambda(phase-level_11 ns_19 insp_4)"
"(begin 'phase-level-linklet-info-callback #f))"
" phase-level-linklet-info-callback12_0)))"
"(let-values(((language-info_0) language-info13_0))"
"(let-values(((primitive?_0) primitive?14_0))"
"(let-values(((predefined?_0) predefined?15_0))"
"(let-values(((cross-phase-persistent?_0)"
"(if(eq? cross-phase-persistent?16_0 unsafe-undefined)"
" primitive?_0"
" cross-phase-persistent?16_0)))"
"(let-values(((no-protected?_0) no-protected?17_0))"
"(let-values(((submodule-names_0) submodule-names18_0))"
"(let-values(((supermodule-name_0) supermodule-name19_0))"
"(let-values(((get-all-variables_0)"
"(if(eq? get-all-variables20_0 unsafe-undefined)"
"(lambda()(begin 'get-all-variables null))"
" get-all-variables20_0)))"
"(let-values()"
"(module1.1"
" source-name_0"
" self_4"
"(unresolve-requires requires_0)"
" provides_3"
" #f"
" language-info_0"
" min-phase-level_0"
" max-phase-level_0"
" phase-level-linklet-info-callback_0"
" force-bulk-binding_0"
" prepare-instance_0"
" instantiate-phase_0"
" primitive?_0"
" predefined?_0"
" cross-phase-persistent?_0"
" no-protected?_0"
"(current-code-inspector)"
" submodule-names_0"
" supermodule-name_0"
" get-all-variables_0)))))))))))))))))))))))"
"(define-values"
"(struct:module-instance"
" module-instance42.1"
" module-instance?"
" module-instance-namespace"
" module-instance-module"
" module-instance-shifted-requires"
" module-instance-phase-level-to-state"
" module-instance-made-available?"
" module-instance-attached?"
" module-instance-data-box"
" set-module-instance-shifted-requires!"
" set-module-instance-made-available?!"
" set-module-instance-attached?!)"
"(let-values(((struct:_40 make-_40 ?_40 -ref_40 -set!_40)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-instance"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 3 6)"
" #f"
" 'module-instance)))))"
"(values"
" struct:_40"
" make-_40"
" ?_40"
"(make-struct-field-accessor -ref_40 0 'namespace)"
"(make-struct-field-accessor -ref_40 1 'module)"
"(make-struct-field-accessor -ref_40 2 'shifted-requires)"
"(make-struct-field-accessor -ref_40 3 'phase-level-to-state)"
"(make-struct-field-accessor -ref_40 4 'made-available?)"
"(make-struct-field-accessor -ref_40 5 'attached?)"
"(make-struct-field-accessor -ref_40 6 'data-box)"
"(make-struct-field-mutator -set!_40 2 'shifted-requires)"
"(make-struct-field-mutator -set!_40 4 'made-available?)"
"(make-struct-field-mutator -set!_40 5 'attached?))))"
"(define-values"
"(make-module-instance)"
"(lambda(m-ns_0 m_1)(begin(module-instance42.1 m-ns_0 m_1 #f(make-small-hasheqv) #f #f(box #f)))))"
"(define-values"
"(make-module-namespace50.1)"
"(lambda(for-submodule?45_0 mpi43_0 root-expand-context44_0 ns49_0)"
"(begin"
" 'make-module-namespace50"
"(let-values(((ns_20) ns49_0))"
"(let-values(((name-mpi_0) mpi43_0))"
"(let-values(((root-expand-ctx_1) root-expand-context44_0))"
"(let-values(((for-submodule?_0) for-submodule?45_0))"
"(let-values()"
"(let-values(((phase_28) 0))"
"(let-values(((name_28)(1/module-path-index-resolve name-mpi_0)))"
"(let-values(((m-ns_1)"
"(let-values(((the-struct_38)"
"(let-values(((ns158_0) ns_20)"
"((root-expand-ctx159_0) root-expand-ctx_1)"
"((temp160_0) #f))"
"(new-namespace8.1 temp160_0 root-expand-ctx159_0 ns158_0))))"
"(if(1/namespace? the-struct_38)"
"(let-values(((mpi150_0) name-mpi_0)"
"((source-name151_0)(resolved-module-path-root-name name_28))"
"((phase152_0) phase_28)"
"((0-phase153_0) phase_28)"
"((submodule-declarations154_0)"
"(if for-submodule?_0"
"(namespace-submodule-declarations ns_20)"
"(make-small-hasheq)))"
"((available-module-instances155_0)(make-hasheqv))"
"((module-instances156_0)(make-hasheqv))"
"((declaration-inspector157_0)(current-code-inspector)))"
"(namespace1.1"
" mpi150_0"
" source-name151_0"
"(namespace-root-expand-ctx the-struct_38)"
" phase152_0"
" 0-phase153_0"
"(namespace-phase-to-namespace the-struct_38)"
"(namespace-phase-level-to-definitions the-struct_38)"
"(namespace-module-registry$1 the-struct_38)"
"(namespace-bulk-binding-registry the-struct_38)"
" submodule-declarations154_0"
"(namespace-root-namespace the-struct_38)"
" declaration-inspector157_0"
"(namespace-inspector the-struct_38)"
" available-module-instances155_0"
" module-instances156_0))"
"                                      (raise-argument-error 'struct-copy \"namespace?\" the-struct_38)))))"
"(let-values((()"
"(begin"
"(small-hash-set!(namespace-phase-to-namespace m-ns_1) phase_28 m-ns_1)"
"(values))))"
"(let-values(((at-phase_0)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances m-ns_1) phase_28 at-phase_0)"
"(hash-set! at-phase_0 name_28(make-module-instance m-ns_1 #f))"
" m-ns_1))))))))))))))"
"(define-values"
"(declare-module!58.1)"
"(lambda(with-submodules?53_0 ns55_0 m56_0 mod-name57_0)"
"(begin"
" 'declare-module!58"
"(let-values(((ns_21) ns55_0))"
"(let-values(((m_2) m56_0))"
"(let-values(((mod-name_4) mod-name57_0))"
"(let-values(((with-submodules?_0) with-submodules?53_0))"
"(let-values()"
"(let-values(((prior-m_0)"
"(if with-submodules?_0"
"(hash-ref"
"(module-registry-declarations(namespace-module-registry$1 ns_21))"
" mod-name_4"
" #f)"
" #f)))"
"(let-values(((prior-mi_0)"
"(if prior-m_0"
"(if(not(eq? m_2 prior-m_0))"
"(let-values(((ns161_0) ns_21)"
"((mod-name162_0) mod-name_4)"
"((temp163_0)(namespace-phase ns_21)))"
"(namespace->module-instance70.1"
" #f"
" #f"
" unsafe-undefined"
" ns161_0"
" mod-name162_0"
" temp163_0))"
" #f)"
" #f)))"
"(begin"
"(if(if prior-m_0(not(eq? m_2 prior-m_0)) #f)"
"(let-values()(check-redeclaration-ok prior-m_0 prior-mi_0 mod-name_4))"
"(void))"
"(if with-submodules?_0"
"(hash-set!(module-registry-declarations(namespace-module-registry$1 ns_21)) mod-name_4 m_2)"
"(small-hash-set!(namespace-submodule-declarations ns_21) mod-name_4 m_2))"
"(if with-submodules?_0"
"(let-values()"
"(begin"
"(register-bulk-provide!"
"(namespace-bulk-binding-registry ns_21)"
" mod-name_4"
"(module-self m_2)"
"(module-provides m_2))"
"((1/current-module-name-resolver) mod-name_4 #f)))"
"(void))"
"(if prior-mi_0"
"(let-values()"
"(let-values(((m-ns_2)(module-instance-namespace prior-mi_0)))"
"(let-values(((states_0)(module-instance-phase-level-to-state prior-mi_0)))"
"(let-values(((phase_29)(namespace-phase ns_21)))"
"(let-values(((visit?_0)(eq? 'started(small-hash-ref states_0(add1 phase_29) #f))))"
"(let-values(((run?_0)(eq? 'started(small-hash-ref states_0 phase_29 #f))))"
"(let-values(((at-phase_1)(hash-ref(namespace-module-instances ns_21) phase_29)))"
"(begin"
"(hash-set! at-phase_1 mod-name_4(make-module-instance m-ns_2 m_2))"
"(if visit?_0"
"(let-values()"
"(let-values(((ns164_0) ns_21)"
"((temp165_0)(namespace-mpi m-ns_2))"
"((phase166_0) phase_29))"
"(namespace-module-visit!104.1"
" unsafe-undefined"
" ns164_0"
" temp165_0"
" phase166_0)))"
"(void))"
"(if run?_0"
"(let-values()"
"(let-values(((ns167_0) ns_21)"
"((temp168_0)(namespace-mpi m-ns_2))"
"((phase169_0) phase_29))"
"(namespace-module-instantiate!96.1"
" #t"
" unsafe-undefined"
" unsafe-undefined"
" #f"
" ns167_0"
" temp168_0"
" phase169_0)))"
"(void))))))))))"
"(void)))))))))))))"
"(define-values"
"(check-redeclaration-ok)"
"(lambda(prior-m_1 prior-mi_1 mod-name_5)"
"(begin"
"(begin"
"(if(module-cross-phase-persistent? prior-m_1)"
"(let-values()"
"            (raise-arguments-error 'module \"cannot redeclare cross-phase persistent module\" \"module name\" mod-name_5))"
"(void))"
"(if(if prior-mi_1"
"(let-values(((or-part_146)(module-instance-attached? prior-mi_1)))"
"(if or-part_146"
" or-part_146"
"(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector(module-instance-namespace prior-mi_1))))))"
" #f)"
"(let-values()"
"            (raise-arguments-error 'module \"current code inspector cannot redeclare module\" \"module name\" mod-name_5))"
"(void))))))"
"(define-values"
"(raise-unknown-module-error)"
"  (lambda (who_9 mod-name_6) (begin (raise-arguments-error who_9 \"unknown module\" \"module name\" mod-name_6))))"
"(define-values"
"(namespace->module-linklet-info)"
"(lambda(ns_22 name_29 phase-level_12)"
"(begin"
"(let-values(((m_3)(namespace->module ns_22 name_29)))"
"(if m_3((module-phase-level-linklet-info-callback m_3) phase-level_12 ns_22(module-inspector m_3)) #f)))))"
"(define-values"
"(namespace->module-instance70.1)"
"(lambda(check-available-at-phase-level62_0"
" complain-on-failure?61_0"
" unavailable-callback63_0"
" ns67_0"
" name68_0"
" 0-phase69_0)"
"(begin"
" 'namespace->module-instance70"
"(let-values(((ns_23) ns67_0))"
"(let-values(((name_30) name68_0))"
"(let-values(((0-phase_1) 0-phase69_0))"
"(let-values(((complain-on-failure?_0) complain-on-failure?61_0))"
"(let-values(((check-available-at-phase-level_0) check-available-at-phase-level62_0))"
"(let-values(((unavailable-callback_0)"
"(if(eq? unavailable-callback63_0 unsafe-undefined) void unavailable-callback63_0)))"
"(let-values()"
"(let-values(((mi_0)"
"(let-values(((or-part_147)"
"(hash-ref"
"(hash-ref(namespace-module-instances ns_23) 0-phase_1 '#hasheq())"
" name_30"
" #f)))"
"(if or-part_147"
" or-part_147"
"(let-values(((or-part_148)"
"(let-values(((c-ns_0)"
"(let-values(((or-part_149)"
"(namespace-root-namespace ns_23)))"
"(if or-part_149 or-part_149 ns_23))))"
"(hash-ref(namespace-module-instances c-ns_0) name_30 #f))))"
"(if or-part_148"
" or-part_148"
"(if complain-on-failure?_0"
"                                            (error \"no module instance found:\" name_30 0-phase_1)"
" #f)))))))"
"(if(if mi_0 check-available-at-phase-level_0 #f)"
"(check-availablilty mi_0 check-available-at-phase-level_0 unavailable-callback_0)"
" mi_0))))))))))))"
"(define-values"
"(namespace-install-module-namespace!)"
"(lambda(ns_24 name_31 0-phase_2 m_4 existing-m-ns_0)"
"(begin"
"(let-values(((m-ns_3)"
"(let-values(((the-struct_39) ns_24))"
"(if(1/namespace? the-struct_39)"
"(let-values(((mpi170_0)(namespace-mpi existing-m-ns_0))"
"((source-name171_0)(namespace-source-name existing-m-ns_0))"
"((root-expand-ctx172_0)(box(unbox(namespace-root-expand-ctx existing-m-ns_0))))"
"((phase173_0)(namespace-phase existing-m-ns_0))"
"((0-phase174_0)(namespace-0-phase existing-m-ns_0))"
"((phase-to-namespace175_0)(make-small-hasheqv))"
"((phase-level-to-definitions176_0)"
"(if(module-cross-phase-persistent? m_4)"
"(namespace-phase-level-to-definitions existing-m-ns_0)"
"(make-small-hasheqv)))"
"((declaration-inspector177_0)(module-inspector m_4))"
"((inspector178_0)(namespace-inspector existing-m-ns_0)))"
"(namespace1.1"
" mpi170_0"
" source-name171_0"
" root-expand-ctx172_0"
" phase173_0"
" 0-phase174_0"
" phase-to-namespace175_0"
" phase-level-to-definitions176_0"
"(namespace-module-registry$1 the-struct_39)"
"(namespace-bulk-binding-registry the-struct_39)"
"(namespace-submodule-declarations the-struct_39)"
"(namespace-root-namespace the-struct_39)"
" declaration-inspector177_0"
" inspector178_0"
"(namespace-available-module-instances the-struct_39)"
"(namespace-module-instances the-struct_39)))"
"                        (raise-argument-error 'struct-copy \"namespace?\" the-struct_39)))))"
"(let-values(((mi_1)(make-module-instance m-ns_3 m_4)))"
"(if(module-cross-phase-persistent? m_4)"
"(let-values()"
"(begin"
"(small-hash-set!(namespace-phase-to-namespace m-ns_3) 0 m-ns_3)"
"(small-hash-set!"
"(namespace-phase-level-to-definitions m-ns_3)"
" 0"
"(namespace->definitions existing-m-ns_0 0))"
"(small-hash-set!(namespace-phase-to-namespace m-ns_3) 1(namespace->namespace-at-phase m-ns_3 1))"
"(small-hash-set!"
"(namespace-phase-level-to-definitions m-ns_3)"
" 1"
"(namespace->definitions existing-m-ns_0 1))"
"(hash-set!"
"(namespace-module-instances"
"(let-values(((or-part_150)(namespace-root-namespace ns_24)))(if or-part_150 or-part_150 ns_24)))"
" name_31"
" mi_1)"
"(small-hash-set!(module-instance-phase-level-to-state mi_1) 0 'started)))"
"(let-values()"
"(let-values((()"
"(begin(small-hash-set!(namespace-phase-to-namespace m-ns_3) 0-phase_2 m-ns_3)(values))))"
"(let-values((()"
"(begin"
"(small-hash-set!"
"(namespace-phase-level-to-definitions m-ns_3)"
" 0"
"(namespace->definitions existing-m-ns_0 0))"
"(values))))"
"(let-values((()"
"(begin"
"(small-hash-set!(module-instance-phase-level-to-state mi_1) 0 'started)"
"(values))))"
"(let-values(((at-phase_2)"
"(let-values(((or-part_151)"
"(hash-ref(namespace-module-instances ns_24) 0-phase_2 #f)))"
"(if or-part_151"
" or-part_151"
"(let-values(((at-phase_3)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_24) 0-phase_2 at-phase_3)"
" at-phase_3))))))"
"(hash-set! at-phase_2 name_31 mi_1))))))))))))"
"(define-values"
"(namespace-create-module-instance!)"
"(lambda(ns_25 name_32 0-phase_3 m_5 mpi_15)"
"(begin"
"(let-values(((m-ns_4)"
"(let-values(((the-struct_40) ns_25))"
"(if(1/namespace? the-struct_40)"
"(let-values(((mpi179_0) mpi_15)"
"((source-name180_0)"
"(let-values(((or-part_152)(module-source-name m_5)))"
"(if or-part_152"
" or-part_152"
"(resolved-module-path-root-name(1/module-path-index-resolve mpi_15)))))"
"((root-expand-ctx181_0)(box #f))"
"((phase182_0) 0-phase_3)"
"((0-phase183_0) 0-phase_3)"
"((phase-to-namespace184_0)(make-small-hasheqv))"
"((phase-level-to-definitions185_0)(make-small-hasheqv))"
"((declaration-inspector186_0)(module-inspector m_5))"
"((inspector187_0)(make-inspector(module-inspector m_5))))"
"(namespace1.1"
" mpi179_0"
" source-name180_0"
" root-expand-ctx181_0"
" phase182_0"
" 0-phase183_0"
" phase-to-namespace184_0"
" phase-level-to-definitions185_0"
"(namespace-module-registry$1 the-struct_40)"
"(namespace-bulk-binding-registry the-struct_40)"
"(namespace-submodule-declarations the-struct_40)"
"(namespace-root-namespace the-struct_40)"
" declaration-inspector186_0"
" inspector187_0"
"(namespace-available-module-instances the-struct_40)"
"(namespace-module-instances the-struct_40)))"
"                        (raise-argument-error 'struct-copy \"namespace?\" the-struct_40)))))"
"(let-values((()(begin(small-hash-set!(namespace-phase-to-namespace m-ns_4) 0-phase_3 m-ns_4)(values))))"
"(let-values(((mi_2)(make-module-instance m-ns_4 m_5)))"
"(begin"
"(if(module-cross-phase-persistent? m_5)"
"(hash-set!(namespace-module-instances ns_25) name_32 mi_2)"
"(let-values(((at-phase_4)"
"(let-values(((or-part_153)(hash-ref(namespace-module-instances ns_25) 0-phase_3 #f)))"
"(if or-part_153"
" or-part_153"
"(let-values(((at-phase_5)(make-hasheq)))"
"(begin"
"(hash-set!(namespace-module-instances ns_25) 0-phase_3 at-phase_5)"
" at-phase_5))))))"
"(hash-set! at-phase_4 name_32 mi_2)))"
" mi_2)))))))"
"(define-values"
"(check-availablilty)"
"(lambda(mi_3 check-available-at-phase-level_1 unavailable-callback_1)"
"(begin"
"(let-values(((m_6)(module-instance-module mi_3)))"
"(if(if m_6"
"(if(<=(module-min-phase-level m_6)(add1 check-available-at-phase-level_1)(module-max-phase-level m_6))"
"(not"
"(small-hash-ref"
"(module-instance-phase-level-to-state mi_3)"
"(add1 check-available-at-phase-level_1)"
" #f))"
" #f)"
" #f)"
"(unavailable-callback_1 mi_3)"
" mi_3)))))"
"(define-values"
"(namespace->module-namespace82.1)"
"(lambda(check-available-at-phase-level74_0"
" complain-on-failure?73_0"
" unavailable-callback75_0"
" ns79_0"
" name80_0"
" 0-phase81_0)"
"(begin"
" 'namespace->module-namespace82"
"(let-values(((ns_26) ns79_0))"
"(let-values(((name_33) name80_0))"
"(let-values(((0-phase_4) 0-phase81_0))"
"(let-values(((complain-on-failure?_1) complain-on-failure?73_0))"
"(let-values(((check-available-at-phase-level_2) check-available-at-phase-level74_0))"
"(let-values(((unavailable-callback_2)"
"(if(eq? unavailable-callback75_0 unsafe-undefined) void unavailable-callback75_0)))"
"(let-values()"
"(let-values(((mi_4)"
"(let-values(((ns188_0) ns_26)"
"((name189_0) name_33)"
"((0-phase190_0) 0-phase_4)"
"((complain-on-failure?191_0) complain-on-failure?_1)"
"((check-available-at-phase-level192_0) check-available-at-phase-level_2)"
"((unavailable-callback193_0) unavailable-callback_2))"
"(namespace->module-instance70.1"
" check-available-at-phase-level192_0"
" complain-on-failure?191_0"
" unavailable-callback193_0"
" ns188_0"
" name189_0"
" 0-phase190_0))))"
"(if mi_4(module-instance-namespace mi_4) #f))))))))))))"
"(define-values"
"(namespace-record-module-instance-attached!)"
"(lambda(ns_27 mod-name_7 phase_30)"
"(begin"
"(let-values(((mi_5)"
"(let-values(((ns194_0) ns_27)((mod-name195_0) mod-name_7)((phase196_0) phase_30))"
"(namespace->module-instance70.1 #f #f unsafe-undefined ns194_0 mod-name195_0 phase196_0))))"
"(set-module-instance-attached?! mi_5 #t)))))"
"(define-values"
"(module-force-bulk-binding!)"
"(lambda(m_7 ns_28)(begin((module-force-bulk-binding m_7)(namespace-bulk-binding-registry ns_28)))))"
"(define-values"
"(namespace-module-instantiate!96.1)"
"(lambda(otherwise-available?87_0 run-phase85_0 seen88_0 skip-run?86_0 ns93_0 mpi94_0 instance-phase95_0)"
"(begin"
" 'namespace-module-instantiate!96"
"(let-values(((ns_29) ns93_0))"
"(let-values(((mpi_16) mpi94_0))"
"(let-values(((instance-phase_0) instance-phase95_0))"
"(let-values(((run-phase_0)"
"(if(eq? run-phase85_0 unsafe-undefined)(namespace-phase ns_29) run-phase85_0)))"
"(let-values(((skip-run?_0) skip-run?86_0))"
"(let-values(((otherwise-available?_0) otherwise-available?87_0))"
"(let-values(((seen_17)(if(eq? seen88_0 unsafe-undefined) '#hasheq() seen88_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/module-path-index? mpi_16)"
"(void)"
"                                        (let-values () (error \"not a module path index:\" mpi_16)))"
"(values))))"
"(let-values(((name_34)(1/module-path-index-resolve mpi_16 #t)))"
"(let-values(((m_8)(namespace->module ns_29 name_34)))"
"(let-values((()"
"(begin"
"(if m_8"
"(void)"
"(let-values()(raise-unknown-module-error 'instantiate name_34)))"
"(values))))"
"(let-values(((instantiate!_0)"
"(lambda(instance-phase_1 run-phase_1 ns_30)"
"(begin"
" 'instantiate!"
"(let-values(((mi_6)"
"(let-values(((or-part_154)"
"(let-values(((ns203_0) ns_30)"
"((name204_0) name_34)"
"((instance-phase205_0)"
" instance-phase_1))"
"(namespace->module-instance70.1"
" #f"
" #f"
" unsafe-undefined"
" ns203_0"
" name204_0"
" instance-phase205_0))))"
"(if or-part_154"
" or-part_154"
"(namespace-create-module-instance!"
" ns_30"
" name_34"
" instance-phase_1"
" m_8"
" mpi_16)))))"
"(let-values(((mi197_0) mi_6)"
"((ns198_0) ns_30)"
"((run-phase199_0) run-phase_1)"
"((skip-run?200_0) skip-run?_0)"
"((otherwise-available?201_0) otherwise-available?_0)"
"((seen202_0) seen_17))"
"(run-module-instance!125.1"
" otherwise-available?201_0"
" run-phase199_0"
" seen202_0"
" skip-run?200_0"
" mi197_0"
" ns198_0)))))))"
"(if(module-cross-phase-persistent? m_8)"
"(let-values()"
"(instantiate!_0"
" 0"
" 0"
"(let-values(((or-part_155)(namespace-root-namespace ns_29)))"
"(if or-part_155 or-part_155 ns_29))))"
"(let-values()(instantiate!_0 instance-phase_0 run-phase_0 ns_29)))))))))))))))))))"
"(define-values"
"(namespace-module-visit!104.1)"
"(lambda(visit-phase99_0 ns101_0 mpi102_0 instance-phase103_0)"
"(begin"
" 'namespace-module-visit!104"
"(let-values(((ns_31) ns101_0))"
"(let-values(((mpi_17) mpi102_0))"
"(let-values(((instance-phase_2) instance-phase103_0))"
"(let-values(((visit-phase_0)"
"(if(eq? visit-phase99_0 unsafe-undefined)(namespace-phase ns_31) visit-phase99_0)))"
"(let-values()"
"(let-values(((ns206_0) ns_31)"
"((mpi207_0) mpi_17)"
"((instance-phase208_0) instance-phase_2)"
"((temp209_0)(add1 visit-phase_0)))"
"(namespace-module-instantiate!96.1"
" #t"
" temp209_0"
" unsafe-undefined"
" #f"
" ns206_0"
" mpi207_0"
" instance-phase208_0))))))))))"
"(define-values"
"(namespace-module-make-available!112.1)"
"(lambda(visit-phase107_0 ns109_0 mpi110_0 instance-phase111_0)"
"(begin"
" 'namespace-module-make-available!112"
"(let-values(((ns_32) ns109_0))"
"(let-values(((mpi_18) mpi110_0))"
"(let-values(((instance-phase_3) instance-phase111_0))"
"(let-values(((visit-phase_1)"
"(if(eq? visit-phase107_0 unsafe-undefined)(namespace-phase ns_32) visit-phase107_0)))"
"(let-values()"
"(let-values(((ns210_0) ns_32)"
"((mpi211_0) mpi_18)"
"((instance-phase212_0) instance-phase_3)"
"((temp213_0)(add1 visit-phase_1))"
"((temp214_0) #t))"
"(namespace-module-instantiate!96.1"
" #t"
" temp213_0"
" unsafe-undefined"
" temp214_0"
" ns210_0"
" mpi211_0"
" instance-phase212_0))))))))))"
"(define-values"
"(run-module-instance!125.1)"
"(lambda(otherwise-available?117_0 run-phase115_0 seen118_0 skip-run?116_0 mi123_0 ns124_0)"
"(begin"
" 'run-module-instance!125"
"(let-values(((mi_7) mi123_0))"
"(let-values(((ns_33) ns124_0))"
"(let-values(((run-phase_2) run-phase115_0))"
"(let-values(((skip-run?_1) skip-run?116_0))"
"(let-values(((otherwise-available?_1) otherwise-available?117_0))"
"(let-values(((seen_18)(if(eq? seen118_0 unsafe-undefined) '#hasheq() seen118_0)))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_5)(module-instance-namespace mi_7)))"
"(let-values(((instance-phase_4)(namespace-0-phase m-ns_5)))"
"(let-values(((run-phase-level_0)(phase- run-phase_2 instance-phase_4)))"
"(if(if(let-values(((or-part_156) skip-run?_1))"
"(if or-part_156"
" or-part_156"
"(eq?"
" 'started"
"(small-hash-ref"
"(module-instance-phase-level-to-state mi_7)"
" run-phase-level_0"
" #f))))"
"(let-values(((or-part_157)(not otherwise-available?_1)))"
"(if or-part_157 or-part_157(module-instance-made-available? mi_7)))"
" #f)"
"(void)"
"(let-values()"
"(let-values(((m_9)(module-instance-module mi_7)))"
"(let-values((()"
"(begin"
"(if m_9"
"(void)"
"(let-values()"
"(error"
" 'require"
"                                                       \"import cycle detected; trying to run module being expanded\")))"
"(values))))"
"(let-values(((mpi_19)(namespace-mpi m-ns_5)))"
"(let-values(((phase-shift_3) instance-phase_4))"
"(let-values(((bulk-binding-registry_3)"
"(namespace-bulk-binding-registry m-ns_5)))"
"(begin"
"(if(hash-ref seen_18 mi_7 #f)"
"(let-values()"
"                                                (error 'require \"import cycle detected during module instantiation\"))"
"(void))"
"(if(module-instance-shifted-requires mi_7)"
"(void)"
"(let-values()"
"(set-module-instance-shifted-requires!"
" mi_7"
"(reverse$1"
"(let-values(((lst_59)(module-requires m_9)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_59)))"
"((letrec-values(((for-loop_86)"
"(lambda(fold-var_43 lst_60)"
"(begin"
" 'for-loop"
"(if(pair? lst_60)"
"(let-values(((phase+mpis_0)"
"(unsafe-car lst_60))"
"((rest_27)"
"(unsafe-cdr lst_60)))"
"(let-values(((fold-var_44)"
"(let-values(((fold-var_45)"
" fold-var_43))"
"(let-values(((fold-var_46)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car"
" phase+mpis_0)"
"(reverse$1"
"(let-values(((lst_61)"
"(cdr"
" phase+mpis_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_61)))"
"((letrec-values(((for-loop_87)"
"(lambda(fold-var_47"
" lst_62)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_62)"
"(let-values(((req-mpi_0)"
"(unsafe-car"
" lst_62))"
"((rest_28)"
"(unsafe-cdr"
" lst_62)))"
"(let-values(((fold-var_48)"
"(let-values(((fold-var_49)"
" fold-var_47))"
"(let-values(((fold-var_50)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" req-mpi_0"
"(module-self"
" m_9)"
" mpi_19))"
" fold-var_49))))"
"(values"
" fold-var_50)))))"
"(if(not"
" #f)"
"(for-loop_87"
" fold-var_48"
" rest_28)"
" fold-var_48)))"
" fold-var_47)))))"
" for-loop_87)"
" null"
" lst_61))))))"
" fold-var_45))))"
"(values"
" fold-var_46)))))"
"(if(not #f)"
"(for-loop_86 fold-var_44 rest_27)"
" fold-var_44)))"
" fold-var_43)))))"
" for-loop_86)"
" null"
" lst_59)))))))"
"(let-values(((lst_63)(module-instance-shifted-requires mi_7)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_63)))"
"((letrec-values(((for-loop_88)"
"(lambda(lst_64)"
"(begin"
" 'for-loop"
"(if(pair? lst_64)"
"(let-values(((phase+mpis_1)"
"(unsafe-car lst_64))"
"((rest_29)(unsafe-cdr lst_64)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((req-phase_0)"
"(car"
" phase+mpis_1)))"
"(begin"
"(let-values(((lst_65)"
"(cdr"
" phase+mpis_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_65)))"
"((letrec-values(((for-loop_89)"
"(lambda(lst_66)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_66)"
"(let-values(((req-mpi_1)"
"(unsafe-car"
" lst_66))"
"((rest_30)"
"(unsafe-cdr"
" lst_66)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ns215_0)"
" ns_33)"
"((req-mpi216_0)"
" req-mpi_1)"
"((temp217_0)"
"(phase+"
" instance-phase_4"
" req-phase_0))"
"((run-phase218_0)"
" run-phase_2)"
"((skip-run?219_0)"
" skip-run?_1)"
"((otherwise-available?220_0)"
" otherwise-available?_1)"
"((temp221_0)"
"(hash-set"
" seen_18"
" mi_7"
" #t)))"
"(namespace-module-instantiate!96.1"
" otherwise-available?220_0"
" run-phase218_0"
" temp221_0"
" skip-run?219_0"
" ns215_0"
" req-mpi216_0"
" temp217_0)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_89"
" rest_30)"
"(values))))"
"(values))))))"
" for-loop_89)"
" lst_65)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_88 rest_29)"
"(values))))"
"(values))))))"
" for-loop_88)"
" lst_63)))"
"(void)"
"(if(label-phase? instance-phase_4)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((start_13)(module-max-phase-level m_9))"
"((end_9)(sub1(module-min-phase-level m_9)))"
"((inc_3) -1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_13 end_9 inc_3)))"
"((letrec-values(((for-loop_90)"
"(lambda(pos_11)"
"(begin"
" 'for-loop"
"(if(> pos_11 end_9)"
"(let-values(((phase-level_13) pos_11))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_31)"
"(phase+"
" phase-level_13"
" phase-shift_3)))"
"(if(if(not"
" skip-run?_1)"
"(eqv?"
" phase_31"
" run-phase_2)"
" #f)"
"(let-values()"
"(if(eq?"
" 'started"
"(small-hash-ref"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_13"
" #f))"
"(void)"
"(let-values()"
"(let-values((()"
"(begin"
"(small-hash-set!"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_13"
" 'started)"
"(values))))"
"(let-values((()"
"(begin"
"(void"
"(namespace->definitions"
" m-ns_5"
" phase-level_13))"
"(values))))"
"(let-values(((p-ns_2)"
"(namespace->namespace-at-phase"
" m-ns_5"
" phase_31)))"
"(let-values(((insp_5)"
"(module-inspector"
" m_9)))"
"(let-values(((data-box_0)"
"(module-instance-data-box"
" mi_7)))"
"(let-values(((prep_0)"
"(module-prepare-instance"
" m_9)))"
"(let-values(((go_0)"
"(module-instantiate-phase"
" m_9)))"
"(begin"
"(prep_0"
" data-box_0"
" p-ns_2"
" phase-shift_3"
" mpi_19"
" bulk-binding-registry_3"
" insp_5)"
"(go_0"
" data-box_0"
" p-ns_2"
" phase-shift_3"
" phase-level_13"
" mpi_19"
" bulk-binding-registry_3"
" insp_5))))))))))))"
"(if(if otherwise-available?_1"
"(if(not"
"(negative?"
" run-phase_2))"
"(not"
"(small-hash-ref"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_13"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(namespace-available-module-instances"
" ns_33)"
" phase_31"
"(lambda(l_47)"
"(cons"
" mi_7"
" l_47))"
" null)"
"(small-hash-set!"
"(module-instance-phase-level-to-state"
" mi_7)"
" phase-level_13"
" 'available)))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_90(+ pos_11 inc_3))"
"(values))))"
"(values))))))"
" for-loop_90)"
" start_13)))"
"(void))))"
"(if otherwise-available?_1"
"(let-values()(set-module-instance-made-available?! mi_7 #t))"
"(void))"
"(if skip-run?_1"
"(void)"
"(let-values()"
"(small-hash-set!"
"(module-instance-phase-level-to-state mi_7)"
" run-phase-level_0"
" 'started)))))))))))))))))))))))))"
"(define-values"
"(namespace-visit-available-modules!)"
"(let-values(((namespace-visit-available-modules!130_0)"
"(lambda(ns129_0 run-phase128_0)"
"(begin"
" 'namespace-visit-available-modules!130"
"(let-values(((ns_34) ns129_0))"
"(let-values(((run-phase_3)"
"(if(eq? run-phase128_0 unsafe-undefined)(namespace-phase ns_34) run-phase128_0)))"
"(let-values()(namespace-run-available-modules! ns_34(add1 run-phase_3)))))))))"
"(case-lambda"
"((ns_35)(begin(namespace-visit-available-modules!130_0 ns_35 unsafe-undefined)))"
"((ns_36 run-phase128_1)(namespace-visit-available-modules!130_0 ns_36 run-phase128_1)))))"
"(define-values"
"(namespace-run-available-modules!)"
"(let-values(((namespace-run-available-modules!134_0)"
"(lambda(ns133_0 run-phase132_0)"
"(begin"
" 'namespace-run-available-modules!134"
"(let-values(((ns_37) ns133_0))"
"(let-values(((run-phase_4)"
"(if(eq? run-phase132_0 unsafe-undefined)(namespace-phase ns_37) run-phase132_0)))"
"(let-values()"
"(if(null?(hash-ref(namespace-available-module-instances ns_37) run-phase_4 null))"
"(void)"
"(let-values()"
"(registry-call-with-lock"
"(namespace-module-registry$1 ns_37)"
"(lambda()"
"((letrec-values(((loop_79)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((mis_0)"
"(hash-ref"
"(namespace-available-module-instances ns_37)"
" run-phase_4"
" null)))"
"(if(null? mis_0)"
"(void)"
"(let-values()"
"(begin"
"(hash-set!"
"(namespace-available-module-instances ns_37)"
" run-phase_4"
" null)"
"(let-values(((lst_67)(reverse$1 mis_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_67)))"
"((letrec-values(((for-loop_91)"
"(lambda(lst_68)"
"(begin"
" 'for-loop"
"(if(pair? lst_68)"
"(let-values(((mi_8)"
"(unsafe-car"
" lst_68))"
"((rest_31)"
"(unsafe-cdr"
" lst_68)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mi222_0)"
" mi_8)"
"((ns223_0)"
" ns_37)"
"((run-phase224_0)"
" run-phase_4)"
"((temp225_0)"
" #f)"
"((temp226_0)"
" #f))"
"(run-module-instance!125.1"
" temp226_0"
" run-phase224_0"
" unsafe-undefined"
" temp225_0"
" mi222_0"
" ns223_0)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_91 rest_31)"
"(values))))"
"(values))))))"
" for-loop_91)"
" lst_67)))"
"(void)"
"(loop_79)))))))))"
" loop_79)))))))))))))"
"(case-lambda"
"((ns_38)(begin(namespace-run-available-modules!134_0 ns_38 unsafe-undefined)))"
"((ns_39 run-phase132_1)(namespace-run-available-modules!134_0 ns_39 run-phase132_1)))))"
"(define-values"
"(namespace-primitive-module-visit!)"
"(lambda(ns_40 name_35)"
"(begin"
"(let-values(((mi_9)(hash-ref(namespace-module-instances ns_40)(1/make-resolved-module-path name_35))))"
"(let-values(((mi227_0) mi_9)((ns228_0) ns_40)((temp229_0) 1)((temp230_0) #f)((temp231_0) #t))"
"(run-module-instance!125.1 temp231_0 temp229_0 unsafe-undefined temp230_0 mi227_0 ns228_0))))))"
"(define-values"
"(namespace-module-use->module+linklet-instances144.1)"
"(lambda(phase-shift138_0 shift-from136_0 shift-to137_0 ns142_0 mu143_0)"
"(begin"
" 'namespace-module-use->module+linklet-instances144"
"(let-values(((ns_41) ns142_0))"
"(let-values(((mu_0) mu143_0))"
"(let-values(((shift-from_0) shift-from136_0))"
"(let-values(((shift-to_0) shift-to137_0))"
"(let-values(((phase-shift_4) phase-shift138_0))"
"(let-values()"
"(let-values(((mod_1)(module-use-module mu_0)))"
"(let-values(((mi_10)"
"(let-values(((ns232_0) ns_41)"
"((temp233_0)"
"(1/module-path-index-resolve"
"(if shift-from_0"
"(module-path-index-shift mod_1 shift-from_0 shift-to_0)"
" mod_1)))"
"((phase-shift234_0) phase-shift_4)"
"((temp235_0) #t))"
"(namespace->module-instance70.1"
" #f"
" temp235_0"
" unsafe-undefined"
" ns232_0"
" temp233_0"
" phase-shift234_0))))"
"(let-values(((m-ns_6)(module-instance-namespace mi_10)))"
"(let-values(((d_17)"
"(small-hash-ref"
"(namespace-phase-level-to-definitions m-ns_6)"
"(module-use-phase mu_0)"
" #f)))"
"(if d_17"
"(values mi_10(definitions-variables d_17))"
"(error"
" 'eval"
"(string-append"
"                              \"namespace mismatch: phase level not found;\\n\""
"                              \"  module: ~a\\n\""
"                              \"  phase level: ~a\\n\""
"                              \"  found phase levels: ~a\")"
" mod_1"
"(module-use-phase mu_0)"
"(small-hash-keys(namespace-phase-level-to-definitions m-ns_6)))))))))))))))))"
"(define-values"
"(unresolve-requires)"
"(lambda(requires_1)"
"(begin"
"(reverse$1"
"(let-values(((lst_69) requires_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_69)))"
"((letrec-values(((for-loop_92)"
"(lambda(fold-var_51 lst_70)"
"(begin"
" 'for-loop"
"(if(pair? lst_70)"
"(let-values(((phase+mpis_2)(unsafe-car lst_70))((rest_32)(unsafe-cdr lst_70)))"
"(let-values(((fold-var_52)"
"(let-values(((fold-var_53) fold-var_51))"
"(let-values(((fold-var_54)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
"(car phase+mpis_2)"
"(reverse$1"
"(let-values(((lst_71)(cdr phase+mpis_2)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_71)))"
"((letrec-values(((for-loop_93)"
"(lambda(fold-var_55"
" lst_72)"
"(begin"
" 'for-loop"
"(if(pair? lst_72)"
"(let-values(((req-mpi_2)"
"(unsafe-car"
" lst_72))"
"((rest_33)"
"(unsafe-cdr"
" lst_72)))"
"(let-values(((fold-var_56)"
"(let-values(((fold-var_57)"
" fold-var_55))"
"(let-values(((fold-var_58)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-unresolve"
" req-mpi_2))"
" fold-var_57))))"
"(values"
" fold-var_58)))))"
"(if(not #f)"
"(for-loop_93"
" fold-var_56"
" rest_33)"
" fold-var_56)))"
" fold-var_55)))))"
" for-loop_93)"
" null"
" lst_71))))))"
" fold-var_53))))"
"(values fold-var_54)))))"
"(if(not #f)(for-loop_92 fold-var_52 rest_32) fold-var_52)))"
" fold-var_51)))))"
" for-loop_92)"
" null"
" lst_69)))))))"
"(define-values"
"(module-compute-access!)"
"(lambda(m_10)"
"(begin"
"(let-values(((access_0)"
"(let-values(((ht_71)(module-provides m_10)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_71)))"
"((letrec-values(((for-loop_94)"
"(lambda(table_103 i_89)"
"(begin"
" 'for-loop"
"(if i_89"
"(let-values(((phase_32 at-phase_6)"
"(hash-iterate-key+value ht_71 i_89)))"
"(let-values(((table_104)"
"(let-values(((table_105) table_103))"
"(let-values(((table_106)"
"(let-values()"
"(let-values(((key_40 val_33)"
"(let-values()"
"(values"
" phase_32"
"(let-values(((ht_72)"
" at-phase_6))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_72)))"
"((letrec-values(((for-loop_95)"
"(lambda(table_107"
" i_90)"
"(begin"
" 'for-loop"
"(if i_90"
"(let-values(((sym_23"
" binding/p_1)"
"(hash-iterate-key+value"
" ht_72"
" i_90)))"
"(let-values(((table_108)"
"(let-values(((table_109)"
" table_107))"
"(let-values(((table_110)"
"(let-values()"
"(let-values(((key_41"
" val_34)"
"(let-values()"
"(values"
"(module-binding-sym"
"(provided-as-binding"
" binding/p_1))"
"(if(provided-as-protected?"
" binding/p_1)"
" 'protected"
" 'provided)))))"
"(hash-set"
" table_109"
" key_41"
" val_34)))))"
"(values"
" table_110)))))"
"(if(not"
" #f)"
"(for-loop_95"
" table_108"
"(hash-iterate-next"
" ht_72"
" i_90))"
" table_108)))"
" table_107)))))"
" for-loop_95)"
" '#hash()"
"(hash-iterate-first"
" ht_72))))))))"
"(hash-set"
" table_105"
" key_40"
" val_33)))))"
"(values table_106)))))"
"(if(not #f)"
"(for-loop_94 table_104(hash-iterate-next ht_71 i_89))"
" table_104)))"
" table_103)))))"
" for-loop_94)"
" '#hasheqv()"
"(hash-iterate-first ht_71))))))"
"(begin(set-module-access! m_10 access_0) access_0)))))"
"(define-values"
"(binding->module-instance)"
"(lambda(b_42 ns_42 phase_33 id_11)"
"(begin"
"(let-values(((at-phase_7)(phase- phase_33(module-binding-phase b_42))))"
"(let-values(((mi_11)"
"(let-values(((ns1_0) ns_42)"
"((temp2_0)(1/module-path-index-resolve(module-binding-module b_42)))"
"((at-phase3_0) at-phase_7)"
"((temp4_0)(module-binding-phase b_42))"
"((temp5_0)(lambda(mi_12) 'unavailable)))"
"(namespace->module-instance70.1 temp4_0 #f temp5_0 ns1_0 temp2_0 at-phase3_0))))"
"(begin"
"(if(eq? mi_11 'unavailable)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(format"
"(string-append"
"                   \"module mismatch;\\n\""
"                   \" attempted to use a module that is not available\\n\""
"                   \"  possible cause:\\n\""
"                   \"   using (dynamic-require .... #f)\\n\""
"                   \"   but need (dynamic-require .... 0)\\n\""
"                   \"  module: ~s\\n\""
"                   \"  phase: ~s\")"
"(module-binding-module b_42)"
"(phase+ at-phase_7(module-binding-phase b_42)))"
" id_11))"
"(void))"
"(if mi_11"
"(void)"
"(let-values()"
"(error"
" 'expand"
"(string-append"
"                  \"namespace mismatch; cannot locate module instance\\n\""
"                  \"  module: ~s\\n\""
"                  \"  use phase: ~a\\n\""
"                  \"  definition phase: ~a\\n\""
"                  \"  for identifier: ~s\")"
"(module-binding-module b_42)"
" phase_33"
"(module-binding-phase b_42)"
" id_11)))"
" mi_11))))))"
"(define-values"
"(check-access)"
"(lambda(b_42 mi_13 id_12 in-s_0 what_0)"
"(begin"
"(let-values(((m_11)(module-instance-module mi_13)))"
"(if(if m_11(not(module-no-protected? m_11)) #f)"
"(let-values()"
"(let-values(((access_1)"
"(let-values(((or-part_27)(module-access m_11)))"
"(if or-part_27 or-part_27(module-compute-access! m_11)))))"
"(let-values(((a_39)"
"(hash-ref"
"(hash-ref access_1(module-binding-phase b_42) '#hasheq())"
"(module-binding-sym b_42)"
" 'unexported)))"
"(if(let-values(((or-part_10)(eq? a_39 'unexported)))"
"(if or-part_10 or-part_10(eq? a_39 'protected)))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_158)"
"(inspector-superior?"
"(let-values(((or-part_12)(syntax-inspector id_12)))"
"(if or-part_12 or-part_12(current-code-inspector)))"
"(namespace-inspector(module-instance-namespace mi_13)))))"
"(if or-part_158"
" or-part_158"
"(if(module-binding-extra-inspector b_42)"
"(inspector-superior?"
"(module-binding-extra-inspector b_42)"
"(namespace-inspector(module-instance-namespace mi_13)))"
" #f)))"
"(void)"
"(let-values()"
"(let-values(((complain-id_0)"
"(let-values(((c-id_0)"
"(let-values(((or-part_3) in-s_0))"
"(if or-part_3 or-part_3(module-binding-sym b_42)))))"
"(if(not"
"(eq?"
"(if(syntax?$1 c-id_0)(syntax-content c-id_0) c-id_0)"
"(syntax-content id_12)))"
" c-id_0"
" #f))))"
"(raise-syntax-error$1"
" #f"
"(format"
"                              \"access disallowed by code inspector to ~a ~a\\n  from module: ~a\""
" a_39"
" what_0"
"(1/module-path-index-resolve(namespace-mpi(module-instance-namespace mi_13))))"
" complain-id_0"
" id_12"
" null))))"
" #t))"
"(let-values() #f)))))"
"(let-values() #f))))))"
"(define-values"
"(resolve+shift/extra-inspector)"
"(lambda(id_13 phase_34 ns_43)"
"(begin"
"((letrec-values(((loop_80)"
"(lambda(id_14 in-s_1)"
"(begin"
" 'loop"
"(let-values(((b_59)"
"(let-values(((id1_2) id_14)((phase2_0) phase_34)((temp3_0) #t))"
"(resolve+shift28.1 #f #f null temp3_0 #f id1_2 phase2_0))))"
"(let-values(((c1_24)(binding-free=id b_59)))"
"(if c1_24"
"((lambda(next-id_0)"
"(let-values((()"
"(begin"
"(if(if(module-binding? b_59)"
"(not"
"(top-level-module-path-index?(module-binding-module b_59)))"
" #f)"
"(let-values()"
"(let-values(((mi_14)"
"(binding->module-instance"
" b_59"
" ns_43"
" phase_34"
" id_14)))"
"                                                           (check-access b_59 mi_14 id_14 in-s_1 \"provided binding\")))"
"(void))"
"(values))))"
"(let-values(((next-b_0)"
"(loop_80"
" next-id_0"
"(let-values(((or-part_75) in-s_1))"
"(if or-part_75 or-part_75 id_14)))))"
"(if(not next-b_0)"
"(let-values() b_59)"
"(if(if(module-binding? next-b_0)"
"(if(not(module-binding-extra-inspector next-b_0))"
"(syntax-inspector id_14)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((next-b4_0) next-b_0)((temp5_1)(syntax-inspector id_14)))"
"(module-binding-update48.1"
" temp5_1"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" next-b4_0)))"
"(let-values() next-b_0))))))"
" c1_24)"
"(let-values() b_59))))))))"
" loop_80)"
" id_13"
" #f))))"
"(define-values"
"(1/prop:set!-transformer 1/set!-transformer? set!-transformer-value)"
"(make-struct-type-property"
" 'set!-transformer"
"(lambda(v_28 info_1)"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_11)"
"(if(procedure? v_28)"
"(let-values(((or-part_2)(procedure-arity-includes? v_28 1)))"
"(if or-part_2 or-part_2(procedure-arity-includes? v_28 2)))"
" #f)))"
"(if or-part_11 or-part_11(exact-nonnegative-integer? v_28)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:set!-transformer"
"(string-append"
"                           \"(or/c (procedure-arity-includes? proc 1)\\n\""
"                           \"      (procedure-arity-includes? proc 2)\\n\""
"                           \"      exact-nonnegative-integer?)\")"
" v_28)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? v_28)"
"(let-values()"
"(begin"
"(if(<= v_28(list-ref info_1 1))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index >= initialized-field count for structure type\""
"                                  \"field index\""
" v_28"
"                                  \"initialized-field count\""
"(list-ref info_1 1))))"
"(if(member v_28(list-ref info_1 5))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'guard-for-prop:set!-transformer"
"                                  \"field index not declared immutable\""
"                                  \"field index\""
" v_28)))))"
"(void))"
"(values))))"
"(let-values(((ref_0)(list-ref info_1 3)))"
"(if(integer? v_28)"
"(let-values()"
"(lambda(t_36)"
"(let-values(((p_32)(ref_0 t_36 v_28)))"
"(if(if(procedure? p_32)(procedure-arity-includes? p_32 1) #f)"
" p_32"
"                     (lambda (s_3) (error \"bad syntax:\" s_3))))))"
"(let-values()(lambda(t_15) v_28)))))))))"
"(define-values"
"(1/make-set!-transformer)"
"(let-values()"
"(let-values(((struct:set!-transformer_0 set!-transformer1_0 set!-transformer?_0 set!-transformer-proc_0)"
"(let-values(((struct:_41 make-_41 ?_41 -ref_41 -set!_41)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'set!-transformer"
" #f"
" 1"
" 0"
" #f"
"(list(cons 1/prop:set!-transformer 0))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'set!-transformer)))))"
"(values struct:_41 make-_41 ?_41(make-struct-field-accessor -ref_41 0 'proc)))))"
"(lambda(proc_3)"
"(begin"
" 'make-set!-transformer"
"(begin"
"(if(if(procedure? proc_3)(procedure-arity-includes? proc_3 1) #f)"
"(void)"
"              (let-values () (raise-argument-error 'make-set!-transformer \"(procedure-arity-includes/c 1)\" proc_3)))"
"(set!-transformer1_0 proc_3)))))))"
"(define-values"
"(1/set!-transformer-procedure)"
"(lambda(t_39)"
"(begin"
" 'set!-transformer-procedure"
"(let-values(((v_99)((set!-transformer-value t_39) t_39)))"
"(if(procedure-arity-includes? v_99 1) v_99(lambda(s_167)(v_99 t_39 s_167)))))))"
"(define-values(empty-env) '#hasheq())"
"(define-values(env-extend)(lambda(env_0 key_42 val_21)(begin(hash-set env_0 key_42 val_21))))"
"(define-values(variable)(gensym 'variable))"
"(define-values"
"(variable?)"
"(lambda(t_15)"
"(begin(let-values(((or-part_10)(eq? t_15 variable)))(if or-part_10 or-part_10(local-variable? t_15))))))"
"(define-values"
"(struct:local-variable local-variable1.1 local-variable? local-variable-id)"
"(let-values(((struct:_31 make-_31 ?_31 -ref_31 -set!_31)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'local-variable"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'local-variable)))))"
"(values struct:_31 make-_31 ?_31(make-struct-field-accessor -ref_31 0 'id))))"
"(define-values"
"(substitute-variable6.1)"
"(lambda(no-stops?2_0 id4_0 t5_0)"
"(begin"
" 'substitute-variable6"
"(let-values(((id_5) id4_0))"
"(let-values(((t_40) t5_0))"
"(let-values(((no-stops?_0) no-stops?2_0))"
"(let-values()"
"(if(if no-stops?_0(local-variable? t_40) #f)"
"(let-values(((bind-id_0)(local-variable-id t_40)))"
"(syntax-rearm$1(datum->syntax$1(syntax-disarm$1 bind-id_0)(syntax-e$1 bind-id_0) id_5 id_5) id_5))"
" id_5))))))))"
"(define-values(missing)(gensym 'missing))"
"(define-values"
"(transformer?)"
"(lambda(t_41)"
"(begin"
"(let-values(((or-part_32)(procedure? t_41)))"
"(if or-part_32"
" or-part_32"
"(let-values(((or-part_159)(1/set!-transformer? t_41)))"
"(if or-part_159 or-part_159(1/rename-transformer? t_41))))))))"
"(define-values"
"(transformer->procedure)"
"(lambda(t_42)"
"(begin"
"(if(1/set!-transformer? t_42)"
"(let-values()(1/set!-transformer-procedure t_42))"
"(if(1/rename-transformer? t_42)(let-values()(lambda(s_168) s_168))(let-values() t_42))))))"
"(define-values"
"(struct:core-form core-form9.1 core-form? core-form-expander core-form-name)"
"(let-values(((struct:_24 make-_24 ?_24 -ref_24 -set!_24)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'core-form"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '(0 1)"
" #f"
" 'core-form)))))"
"(values"
" struct:_24"
" make-_24"
" ?_24"
"(make-struct-field-accessor -ref_24 0 'expander)"
"(make-struct-field-accessor -ref_24 1 'name))))"
"(define-values"
"(add-binding!17.1)"
"(lambda(in10_0 just-for-nominal?11_0 id14_0 binding15_0 phase16_0)"
"(begin"
" 'add-binding!17"
"(let-values(((id_15) id14_0))"
"(let-values(((binding_8) binding15_0))"
"(let-values(((phase_35) phase16_0))"
"(let-values(((in-s_2) in10_0))"
"(let-values(((just-for-nominal?_2) just-for-nominal?11_0))"
"(let-values()"
"(begin"
"(check-id-taint id_15 in-s_2)"
"(let-values(((temp55_0)(syntax-scope-set id_15 phase_35))"
"((temp56_1)(syntax-e$1 id_15))"
"((binding57_0) binding_8)"
"((just-for-nominal?58_0) just-for-nominal?_2))"
"(add-binding-in-scopes!20.1 just-for-nominal?58_0 temp55_0 temp56_1 binding57_0))))))))))))"
"(define-values"
"(add-bulk-binding!27.1)"
"(lambda(in20_0 shadow-except21_0 s24_0 binding25_0 phase26_1)"
"(begin"
" 'add-bulk-binding!27"
"(let-values(((s_70) s24_0))"
"(let-values(((binding_9) binding25_0))"
"(let-values(((phase_36) phase26_1))"
"(let-values(((in-s_3) in20_0))"
"(let-values(((shadow-except_2) shadow-except21_0))"
"(let-values()"
"(begin"
"(if(syntax-tainted?$1 s_70)"
"                      (let-values () (raise-syntax-error$1 #f \"cannot bind from tainted syntax\" in-s_3 s_70))"
"(void))"
"(let-values(((temp59_1)(syntax-scope-set s_70 phase_36))"
"((binding60_0) binding_9)"
"((shadow-except61_0) shadow-except_2))"
"(add-bulk-binding-in-scopes!27.1 shadow-except61_0 temp59_1 binding60_0))))))))))))"
"(define-values"
"(add-local-binding!37.1)"
"(lambda(frame-id30_0 in31_0 id34_0 phase35_0 counter36_0)"
"(begin"
" 'add-local-binding!37"
"(let-values(((id_16) id34_0))"
"(let-values(((phase_37) phase35_0))"
"(let-values(((counter_1) counter36_0))"
"(let-values(((frame-id_5) frame-id30_0))"
"(let-values(((in-s_4) in31_0))"
"(let-values()"
"(let-values((()(begin(check-id-taint id_16 in-s_4)(values))))"
"(let-values((()(begin(set-box! counter_1(add1(unbox counter_1)))(values))))"
"(let-values(((key_43)"
"                                    (string->uninterned-symbol (format \"~a_~a\" (syntax-e$1 id_16) (unbox counter_1)))))"
"(begin"
"(let-values(((temp62_1)(syntax-scope-set id_16 phase_37))"
"((temp63_1)(syntax-e$1 id_16))"
"((temp64_1)"
"(let-values(((key65_0) key_43)((frame-id66_0) frame-id_5))"
"(make-local-binding7.1 frame-id66_0 #f key65_0))))"
"(add-binding-in-scopes!20.1 #f temp62_1 temp63_1 temp64_1))"
" key_43)))))))))))))"
"(define-values"
"(check-id-taint)"
"(lambda(id_17 in-s_5)"
"(begin"
"(if(syntax-tainted?$1 id_17)"
"        (let-values () (raise-syntax-error$1 #f \"cannot bind tainted identifier\" in-s_5 id_17))"
"(void)))))"
"(define-values"
"(binding-lookup50.1)"
"(lambda(in40_0 out-of-context-as-variable?41_0 b44_0 env45_0 lift-envs46_0 ns47_0 phase48_0 id49_0)"
"(begin"
" 'binding-lookup50"
"(let-values(((b_60) b44_0))"
"(let-values(((env_1) env45_0))"
"(let-values(((lift-envs_0) lift-envs46_0))"
"(let-values(((ns_44) ns47_0))"
"(let-values(((phase_38) phase48_0))"
"(let-values(((id_18) id49_0))"
"(let-values(((in-s_6) in40_0))"
"(let-values(((out-of-context-as-variable?_0) out-of-context-as-variable?41_0))"
"(let-values()"
"(if(module-binding? b_60)"
"(let-values()"
"(let-values(((top-level?_0)(top-level-module-path-index?(module-binding-module b_60))))"
"(let-values(((mi_15)"
"(if(not top-level?_0)"
"(binding->module-instance b_60 ns_44 phase_38 id_18)"
" #f)))"
"(let-values(((m_12)(if mi_15(module-instance-module mi_15) #f)))"
"(let-values(((primitive?_1)(if m_12(module-primitive? m_12) #f)))"
"(let-values(((m-ns_7)"
"(if top-level?_0"
" ns_44"
"(if mi_15(module-instance-namespace mi_15) #f))))"
"(let-values((()(begin(check-taint id_18)(values))))"
"(let-values(((t_43)"
"(namespace-get-transformer"
" m-ns_7"
"(module-binding-phase b_60)"
"(module-binding-sym b_60)"
" variable)))"
"(let-values(((protected?_1)"
"(if mi_15"
"(check-access"
" b_60"
" mi_15"
" id_18"
" in-s_6"
"                                                           (if (variable? t_43) \"variable\" \"transformer\"))"
" #f)))"
"(let-values(((insp_6)"
"(if mi_15"
"(if(module-instance-module mi_15)"
"(module-inspector(module-instance-module mi_15))"
" #f)"
" #f)))"
"(values t_43 primitive?_1 insp_6 protected?_1)))))))))))"
"(if(local-binding? b_60)"
"(let-values()"
"(let-values(((t_44)(hash-ref env_1(local-binding-key b_60) missing)))"
"(if(eq? t_44 missing)"
"(let-values()"
"(values"
"(let-values(((or-part_103)"
"(let-values(((lst_73) lift-envs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_73)))"
"((letrec-values(((for-loop_96)"
"(lambda(result_59 lst_74)"
"(begin"
" 'for-loop"
"(if(pair? lst_74)"
"(let-values(((lift-env_0)"
"(unsafe-car lst_74))"
"((rest_34)"
"(unsafe-cdr lst_74)))"
"(let-values(((result_60)"
"(let-values()"
"(let-values(((result_61)"
"(let-values()"
"(let-values()"
"(hash-ref"
"(unbox"
" lift-env_0)"
"(local-binding-key"
" b_60)"
" #f)))))"
"(values"
" result_61)))))"
"(if(if(not"
"((lambda x_41 result_60)"
" lift-env_0))"
"(not #f)"
" #f)"
"(for-loop_96 result_60 rest_34)"
" result_60)))"
" result_59)))))"
" for-loop_96)"
" #f"
" lst_73)))))"
"(if or-part_103"
" or-part_103"
"(if out-of-context-as-variable?_0"
" variable"
"                                           (error \"identifier used out of context:\" id_18))))"
" #f"
" #f"
" #f))"
"(let-values()(begin(check-taint id_18)(values t_44 #f #f #f))))))"
"                            (let-values () (error \"internal error: unknown binding for lookup:\" b_60))))))))))))))))"
"(define-values"
"(check-taint)"
"(lambda(id_19)"
"(begin"
"(if(syntax-tainted?$1 id_19)"
"        (let-values () (raise-syntax-error$1 #f \"cannot use identifier tainted by macro transformation\" id_19))"
"(void)))))"
"(define-values(cons-ish)(lambda(a_40 b_61)(begin(if(null? b_61) a_40(cons a_40 b_61)))))"
"(define-values"
"(free-id-set)"
"(lambda(phase_39 ids_0)"
"(begin"
"(let-values(((lst_75) ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_75)))"
"((letrec-values(((for-loop_97)"
"(lambda(ht_73 lst_76)"
"(begin"
" 'for-loop"
"(if(pair? lst_76)"
"(let-values(((id_10)(unsafe-car lst_76))((rest_35)(unsafe-cdr lst_76)))"
"(let-values(((ht_74)"
"(let-values(((ht_75) ht_73))"
"(let-values(((ht_76)"
"(let-values()"
"(let-values(((sym_24)"
"(identifier-binding-symbol$1"
" id_10"
" phase_39)))"
"(hash-set"
" ht_75"
" sym_24"
"(cons-ish"
" id_10"
"(hash-ref ht_75 sym_24 null)))))))"
"(values ht_76)))))"
"(if(not #f)(for-loop_97 ht_74 rest_35) ht_74)))"
" ht_73)))))"
" for-loop_97)"
" '#hasheq()"
" lst_75))))))"
"(define-values(empty-free-id-set)(free-id-set 0 null))"
"(define-values(free-id-set-empty?)(lambda(fs_0)(begin(eq? fs_0 empty-free-id-set))))"
"(define-values"
"(free-id-set-member?)"
"(lambda(fs_1 phase_40 given-id_0)"
"(begin"
"(if(free-id-set-empty? fs_1)"
" #f"
"(let-values(((lst_77)(hash-ref fs_1(identifier-binding-symbol$1 given-id_0 phase_40) null)))"
"(begin"
"(void)"
"((letrec-values(((for-loop_98)"
"(lambda(result_3 lst_78)"
"(begin"
" 'for-loop"
"(if(not(null? lst_78))"
"(let-values(((id_2)(if(pair? lst_78)(car lst_78) lst_78))"
"((rest_36)(if(pair? lst_78)(cdr lst_78) null)))"
"(let-values(((result_62)"
"(let-values()"
"(let-values(((result_63)"
"(let-values()"
"(let-values()"
"(free-identifier=?$1"
" id_2"
" given-id_0"
" phase_40"
" phase_40)))))"
"(values result_63)))))"
"(if(if(not((lambda x_42 result_62) id_2))(not #f) #f)"
"(for-loop_98 result_62 rest_36)"
" result_62)))"
" result_3)))))"
" for-loop_98)"
" #f"
" lst_77)))))))"
"(define-values"
"(free-id-set-empty-or-just-module*?)"
"(lambda(fs_2)(begin(let-values(((c_17)(hash-count fs_2)))(<= c_17 1)))))"
"(define-values"
"(struct:expand-context/outer"
" expand-context/outer1.1"
" expand-context/outer?"
" expand-context/outer-context"
" expand-context/outer-env"
" expand-context/outer-scopes"
" expand-context/outer-def-ctx-scopes"
" expand-context/outer-binding-layer"
" expand-context/outer-reference-records"
" expand-context/outer-only-immediate?"
" expand-context/outer-need-eventually-defined"
" expand-context/outer-current-introduction-scopes"
" expand-context/outer-current-use-scopes"
" expand-context/outer-name)"
"(let-values(((struct:_36 make-_36 ?_36 -ref_36 -set!_36)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context"
" struct:root-expand-context/outer"
" 11"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10)"
" #f"
" 'expand-context/outer)))))"
"(values"
" struct:_36"
" make-_36"
" ?_36"
"(make-struct-field-accessor -ref_36 0 'context)"
"(make-struct-field-accessor -ref_36 1 'env)"
"(make-struct-field-accessor -ref_36 2 'scopes)"
"(make-struct-field-accessor -ref_36 3 'def-ctx-scopes)"
"(make-struct-field-accessor -ref_36 4 'binding-layer)"
"(make-struct-field-accessor -ref_36 5 'reference-records)"
"(make-struct-field-accessor -ref_36 6 'only-immediate?)"
"(make-struct-field-accessor -ref_36 7 'need-eventually-defined)"
"(make-struct-field-accessor -ref_36 8 'current-introduction-scopes)"
"(make-struct-field-accessor -ref_36 9 'current-use-scopes)"
"(make-struct-field-accessor -ref_36 10 'name))))"
"(define-values"
"(struct:expand-context/inner"
" expand-context/inner2.1"
" expand-context/inner?"
" expand-context/inner-to-parsed?"
" expand-context/inner-phase"
" expand-context/inner-namespace"
" expand-context/inner-just-once?"
" expand-context/inner-module-begin-k"
" expand-context/inner-allow-unbound?"
" expand-context/inner-in-local-expand?"
" expand-context/inner-keep-#%expression?"
" expand-context/inner-stops"
" expand-context/inner-declared-submodule-names"
" expand-context/inner-lifts"
" expand-context/inner-lift-envs"
" expand-context/inner-module-lifts"
" expand-context/inner-require-lifts"
" expand-context/inner-to-module-lifts"
" expand-context/inner-requires+provides"
" expand-context/inner-observer"
" expand-context/inner-for-serializable?"
" expand-context/inner-should-not-encounter-macros?)"
"(let-values(((struct:_42 make-_42 ?_42 -ref_42 -set!_42)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expand-context/inner"
" struct:root-expand-context/inner"
" 19"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)"
" #f"
" 'expand-context/inner)))))"
"(values"
" struct:_42"
" make-_42"
" ?_42"
"(make-struct-field-accessor -ref_42 0 'to-parsed?)"
"(make-struct-field-accessor -ref_42 1 'phase)"
"(make-struct-field-accessor -ref_42 2 'namespace)"
"(make-struct-field-accessor -ref_42 3 'just-once?)"
"(make-struct-field-accessor -ref_42 4 'module-begin-k)"
"(make-struct-field-accessor -ref_42 5 'allow-unbound?)"
"(make-struct-field-accessor -ref_42 6 'in-local-expand?)"
"(make-struct-field-accessor -ref_42 7 'keep-#%expression?)"
"(make-struct-field-accessor -ref_42 8 'stops)"
"(make-struct-field-accessor -ref_42 9 'declared-submodule-names)"
"(make-struct-field-accessor -ref_42 10 'lifts)"
"(make-struct-field-accessor -ref_42 11 'lift-envs)"
"(make-struct-field-accessor -ref_42 12 'module-lifts)"
"(make-struct-field-accessor -ref_42 13 'require-lifts)"
"(make-struct-field-accessor -ref_42 14 'to-module-lifts)"
"(make-struct-field-accessor -ref_42 15 'requires+provides)"
"(make-struct-field-accessor -ref_42 16 'observer)"
"(make-struct-field-accessor -ref_42 17 'for-serializable?)"
"(make-struct-field-accessor -ref_42 18 'should-not-encounter-macros?))))"
"(define-values"
"(expand-context/make)"
"(lambda(self-mpi_2"
" module-scopes_2"
" post-expansion_1"
" top-level-bind-scope_1"
" all-scopes-stx_2"
" use-site-scopes_1"
" defined-syms_1"
" frame-id_6"
" counter_2"
" lift-key_1"
" to-parsed?_0"
" context_0"
" phase_41"
" namespace_0"
" env_2"
" scopes_18"
" def-ctx-scopes_0"
" binding-layer_0"
" reference-records_0"
" only-immediate?_0"
" just-once?_0"
" module-begin-k_0"
" need-eventually-defined_0"
" allow-unbound?_0"
" in-local-expand?_0"
" keep-#%expression?_0"
" stops_0"
" current-introduction-scopes_0"
" current-use-scopes_0"
" declared-submodule-names_0"
" lifts_0"
" lift-envs_1"
" module-lifts_0"
" require-lifts_0"
" to-module-lifts_0"
" requires+provides_0"
" name_36"
" observer_0"
" for-serializable?_0"
" should-not-encounter-macros?_0)"
"(begin"
"(expand-context/outer1.1"
"(expand-context/inner2.1"
" self-mpi_2"
" module-scopes_2"
" top-level-bind-scope_1"
" all-scopes-stx_2"
" defined-syms_1"
" counter_2"
" lift-key_1"
" to-parsed?_0"
" phase_41"
" namespace_0"
" just-once?_0"
" module-begin-k_0"
" allow-unbound?_0"
" in-local-expand?_0"
" keep-#%expression?_0"
" stops_0"
" declared-submodule-names_0"
" lifts_0"
" lift-envs_1"
" module-lifts_0"
" require-lifts_0"
" to-module-lifts_0"
" requires+provides_0"
" observer_0"
" for-serializable?_0"
" should-not-encounter-macros?_0)"
" post-expansion_1"
" use-site-scopes_1"
" frame-id_6"
" context_0"
" env_2"
" scopes_18"
" def-ctx-scopes_0"
" binding-layer_0"
" reference-records_0"
" only-immediate?_0"
" need-eventually-defined_0"
" current-introduction-scopes_0"
" current-use-scopes_0"
" name_36))))"
"(define-values(expand-context-context)(lambda(v_100)(begin(expand-context/outer-context v_100))))"
"(define-values(expand-context-env)(lambda(v_101)(begin(expand-context/outer-env v_101))))"
"(define-values(expand-context-scopes)(lambda(v_102)(begin(expand-context/outer-scopes v_102))))"
"(define-values(expand-context-def-ctx-scopes)(lambda(v_103)(begin(expand-context/outer-def-ctx-scopes v_103))))"
"(define-values(expand-context-binding-layer)(lambda(v_104)(begin(expand-context/outer-binding-layer v_104))))"
"(define-values"
"(expand-context-reference-records)"
"(lambda(v_105)(begin(expand-context/outer-reference-records v_105))))"
"(define-values(expand-context-only-immediate?)(lambda(v_106)(begin(expand-context/outer-only-immediate? v_106))))"
"(define-values"
"(expand-context-need-eventually-defined)"
"(lambda(v_107)(begin(expand-context/outer-need-eventually-defined v_107))))"
"(define-values"
"(expand-context-current-introduction-scopes)"
"(lambda(v_108)(begin(expand-context/outer-current-introduction-scopes v_108))))"
"(define-values"
"(expand-context-current-use-scopes)"
"(lambda(v_109)(begin(expand-context/outer-current-use-scopes v_109))))"
"(define-values(expand-context-name)(lambda(v_110)(begin(expand-context/outer-name v_110))))"
"(define-values"
"(expand-context-to-parsed?)"
"(lambda(v_111)(begin(expand-context/inner-to-parsed?(root-expand-context/outer-inner v_111)))))"
"(define-values"
"(expand-context-phase)"
"(lambda(v_112)(begin(expand-context/inner-phase(root-expand-context/outer-inner v_112)))))"
"(define-values"
"(expand-context-namespace)"
"(lambda(v_113)(begin(expand-context/inner-namespace(root-expand-context/outer-inner v_113)))))"
"(define-values"
"(expand-context-just-once?)"
"(lambda(v_114)(begin(expand-context/inner-just-once?(root-expand-context/outer-inner v_114)))))"
"(define-values"
"(expand-context-module-begin-k)"
"(lambda(v_115)(begin(expand-context/inner-module-begin-k(root-expand-context/outer-inner v_115)))))"
"(define-values"
"(expand-context-allow-unbound?)"
"(lambda(v_116)(begin(expand-context/inner-allow-unbound?(root-expand-context/outer-inner v_116)))))"
"(define-values"
"(expand-context-in-local-expand?)"
"(lambda(v_117)(begin(expand-context/inner-in-local-expand?(root-expand-context/outer-inner v_117)))))"
"(define-values"
"(expand-context-keep-#%expression?)"
"(lambda(v_118)(begin(expand-context/inner-keep-#%expression?(root-expand-context/outer-inner v_118)))))"
"(define-values"
"(expand-context-stops)"
"(lambda(v_119)(begin(expand-context/inner-stops(root-expand-context/outer-inner v_119)))))"
"(define-values"
"(expand-context-declared-submodule-names)"
"(lambda(v_120)(begin(expand-context/inner-declared-submodule-names(root-expand-context/outer-inner v_120)))))"
"(define-values"
"(expand-context-lifts)"
"(lambda(v_121)(begin(expand-context/inner-lifts(root-expand-context/outer-inner v_121)))))"
"(define-values"
"(expand-context-lift-envs)"
"(lambda(v_122)(begin(expand-context/inner-lift-envs(root-expand-context/outer-inner v_122)))))"
"(define-values"
"(expand-context-module-lifts)"
"(lambda(v_123)(begin(expand-context/inner-module-lifts(root-expand-context/outer-inner v_123)))))"
"(define-values"
"(expand-context-require-lifts)"
"(lambda(v_124)(begin(expand-context/inner-require-lifts(root-expand-context/outer-inner v_124)))))"
"(define-values"
"(expand-context-to-module-lifts)"
"(lambda(v_125)(begin(expand-context/inner-to-module-lifts(root-expand-context/outer-inner v_125)))))"
"(define-values"
"(expand-context-requires+provides)"
"(lambda(v_126)(begin(expand-context/inner-requires+provides(root-expand-context/outer-inner v_126)))))"
"(define-values"
"(expand-context-observer)"
"(lambda(v_127)(begin(expand-context/inner-observer(root-expand-context/outer-inner v_127)))))"
"(define-values"
"(expand-context-for-serializable?)"
"(lambda(v_128)(begin(expand-context/inner-for-serializable?(root-expand-context/outer-inner v_128)))))"
"(define-values"
"(expand-context-should-not-encounter-macros?)"
"(lambda(v_129)(begin(expand-context/inner-should-not-encounter-macros?(root-expand-context/outer-inner v_129)))))"
"(define-values"
"(make-expand-context10.1)"
"(lambda(for-serializable?4_0 observer5_0 to-parsed?3_0 ns9_0)"
"(begin"
" 'make-expand-context10"
"(let-values(((ns_45) ns9_0))"
"(let-values(((to-parsed?_1) to-parsed?3_0))"
"(let-values(((for-serializable?_1) for-serializable?4_0))"
"(let-values(((observer_1) observer5_0))"
"(let-values()"
"(let-values(((root-ctx_1)(namespace-get-root-expand-ctx ns_45)))"
"(expand-context/make"
"(root-expand-context-self-mpi root-ctx_1)"
"(root-expand-context-module-scopes root-ctx_1)"
"(root-expand-context-post-expansion root-ctx_1)"
"(root-expand-context-top-level-bind-scope root-ctx_1)"
"(root-expand-context-all-scopes-stx root-ctx_1)"
"(root-expand-context-use-site-scopes root-ctx_1)"
"(root-expand-context-defined-syms root-ctx_1)"
"(root-expand-context-frame-id root-ctx_1)"
"(root-expand-context-counter root-ctx_1)"
"(root-expand-context-lift-key root-ctx_1)"
" to-parsed?_1"
" 'top-level"
"(namespace-phase ns_45)"
" ns_45"
" empty-env"
" null"
" #f"
"(root-expand-context-frame-id root-ctx_1)"
" null"
" #f"
" #f"
" #f"
" #f"
" #t"
" #f"
" #f"
" empty-free-id-set"
" null"
" null"
" '#hasheq()"
" #f"
" '()"
" #f"
" #f"
" #f"
" #f"
" #f"
" observer_1"
" for-serializable?_1"
" #f))))))))))"
"(define-values"
"(copy-root-expand-context)"
"(lambda(ctx_1 root-ctx_2)"
"(begin"
"(let-values(((v_130) ctx_1))"
"(let-values(((the-struct_14) v_130))"
"(if(expand-context/outer? the-struct_14)"
"(let-values(((post-expansion27_0)(root-expand-context-post-expansion root-ctx_2))"
"((use-site-scopes28_0)(root-expand-context-use-site-scopes root-ctx_2))"
"((frame-id29_0)(root-expand-context-frame-id root-ctx_2))"
"((binding-layer30_0)(root-expand-context-frame-id root-ctx_2))"
"((inner31_0)"
"(let-values(((the-struct_41)(root-expand-context/outer-inner v_130)))"
"(if(expand-context/inner? the-struct_41)"
"(let-values(((self-mpi32_0)(root-expand-context-self-mpi root-ctx_2))"
"((module-scopes33_0)(root-expand-context-module-scopes root-ctx_2))"
"((top-level-bind-scope34_0)"
"(root-expand-context-top-level-bind-scope root-ctx_2))"
"((all-scopes-stx35_0)(root-expand-context-all-scopes-stx root-ctx_2))"
"((defined-syms36_0)(root-expand-context-defined-syms root-ctx_2))"
"((counter37_0)(root-expand-context-counter root-ctx_2))"
"((lift-key38_0)(root-expand-context-lift-key root-ctx_2)))"
"(expand-context/inner2.1"
" self-mpi32_0"
" module-scopes33_0"
" top-level-bind-scope34_0"
" all-scopes-stx35_0"
" defined-syms36_0"
" counter37_0"
" lift-key38_0"
"(expand-context/inner-to-parsed? the-struct_41)"
"(expand-context/inner-phase the-struct_41)"
"(expand-context/inner-namespace the-struct_41)"
"(expand-context/inner-just-once? the-struct_41)"
"(expand-context/inner-module-begin-k the-struct_41)"
"(expand-context/inner-allow-unbound? the-struct_41)"
"(expand-context/inner-in-local-expand? the-struct_41)"
"(expand-context/inner-keep-#%expression? the-struct_41)"
"(expand-context/inner-stops the-struct_41)"
"(expand-context/inner-declared-submodule-names the-struct_41)"
"(expand-context/inner-lifts the-struct_41)"
"(expand-context/inner-lift-envs the-struct_41)"
"(expand-context/inner-module-lifts the-struct_41)"
"(expand-context/inner-require-lifts the-struct_41)"
"(expand-context/inner-to-module-lifts the-struct_41)"
"(expand-context/inner-requires+provides the-struct_41)"
"(expand-context/inner-observer the-struct_41)"
"(expand-context/inner-for-serializable? the-struct_41)"
"(expand-context/inner-should-not-encounter-macros? the-struct_41)))"
"                              (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_41)))))"
"(expand-context/outer1.1"
" inner31_0"
" post-expansion27_0"
" use-site-scopes28_0"
" frame-id29_0"
"(expand-context/outer-context the-struct_14)"
"(expand-context/outer-env the-struct_14)"
"(expand-context/outer-scopes the-struct_14)"
"(expand-context/outer-def-ctx-scopes the-struct_14)"
" binding-layer30_0"
"(expand-context/outer-reference-records the-struct_14)"
"(expand-context/outer-only-immediate? the-struct_14)"
"(expand-context/outer-need-eventually-defined the-struct_14)"
"(expand-context/outer-current-introduction-scopes the-struct_14)"
"(expand-context/outer-current-use-scopes the-struct_14)"
"(expand-context/outer-name the-struct_14)))"
"            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_14)))))))"
"(define-values(current-expand-context)(make-parameter #f))"
"(define-values"
"(get-current-expand-context16.1)"
"(lambda(fail-ok?13_0 who15_0)"
"(begin"
" 'get-current-expand-context16"
"(let-values(((who_10) who15_0))"
"(let-values(((fail-ok?_0) fail-ok?13_0))"
"(let-values()"
"(let-values(((or-part_160)(force(current-expand-context))))"
"(if or-part_160"
" or-part_160"
"                (if fail-ok?_0 #f (raise-arguments-error who_10 \"not currently expanding\"))))))))))"
"(define-values"
"(current-expand-observe)"
"(make-parameter"
" #f"
"(lambda(v_131)"
"(begin"
"(if(let-values(((or-part_161)(not v_131)))"
"(if or-part_161 or-part_161(if(procedure? v_131)(procedure-arity-includes? v_131 2) #f)))"
"(void)"
"(let-values()"
"           (raise-argument-error 'current-expand-observe \"(or/c (procedure-arity-includes/c 2) #f)\" v_131)))"
" v_131))))"
"(define-values"
"(as-expression-context)"
"(lambda(ctx_2)"
"(begin"
"(if(if(eq? 'expression(expand-context-context ctx_2))(not(expand-context-name ctx_2)) #f)"
"(let-values() ctx_2)"
"(let-values()"
"(let-values(((v_132) ctx_2))"
"(let-values(((the-struct_16) v_132))"
"(if(expand-context/outer? the-struct_16)"
"(let-values(((context39_0) 'expression)"
"((name40_0) #f)"
"((post-expansion41_0) #f)"
"((inner42_0)(root-expand-context/outer-inner v_132)))"
"(expand-context/outer1.1"
" inner42_0"
" post-expansion41_0"
"(root-expand-context/outer-use-site-scopes the-struct_16)"
"(root-expand-context/outer-frame-id the-struct_16)"
" context39_0"
"(expand-context/outer-env the-struct_16)"
"(expand-context/outer-scopes the-struct_16)"
"(expand-context/outer-def-ctx-scopes the-struct_16)"
"(expand-context/outer-binding-layer the-struct_16)"
"(expand-context/outer-reference-records the-struct_16)"
"(expand-context/outer-only-immediate? the-struct_16)"
"(expand-context/outer-need-eventually-defined the-struct_16)"
"(expand-context/outer-current-introduction-scopes the-struct_16)"
"(expand-context/outer-current-use-scopes the-struct_16)"
" name40_0))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_16)))))))))"
"(define-values"
"(as-begin-expression-context)"
"(lambda(ctx_3)"
"(begin"
"(if(not(expand-context-name ctx_3))"
"(let-values() ctx_3)"
"(let-values()"
"(let-values(((v_133) ctx_3))"
"(let-values(((the-struct_42) v_133))"
"(if(expand-context/outer? the-struct_42)"
"(let-values(((name43_0) #f)((inner44_0)(root-expand-context/outer-inner v_133)))"
"(expand-context/outer1.1"
" inner44_0"
"(root-expand-context/outer-post-expansion the-struct_42)"
"(root-expand-context/outer-use-site-scopes the-struct_42)"
"(root-expand-context/outer-frame-id the-struct_42)"
"(expand-context/outer-context the-struct_42)"
"(expand-context/outer-env the-struct_42)"
"(expand-context/outer-scopes the-struct_42)"
"(expand-context/outer-def-ctx-scopes the-struct_42)"
"(expand-context/outer-binding-layer the-struct_42)"
"(expand-context/outer-reference-records the-struct_42)"
"(expand-context/outer-only-immediate? the-struct_42)"
"(expand-context/outer-need-eventually-defined the-struct_42)"
"(expand-context/outer-current-introduction-scopes the-struct_42)"
"(expand-context/outer-current-use-scopes the-struct_42)"
" name43_0))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_42)))))))))"
"(define-values"
"(as-tail-context22.1)"
"(lambda(wrt19_0 ctx21_0)"
"(begin"
" 'as-tail-context22"
"(let-values(((ctx_4) ctx21_0))"
"(let-values(((wrt-ctx_0) wrt19_0))"
"(let-values()"
"(if(expand-context-name wrt-ctx_0)"
"(let-values()"
"(let-values(((v_134) ctx_4))"
"(let-values(((the-struct_43) v_134))"
"(if(expand-context/outer? the-struct_43)"
"(let-values(((name45_0)(expand-context-name wrt-ctx_0))"
"((inner46_0)(root-expand-context/outer-inner v_134)))"
"(expand-context/outer1.1"
" inner46_0"
"(root-expand-context/outer-post-expansion the-struct_43)"
"(root-expand-context/outer-use-site-scopes the-struct_43)"
"(root-expand-context/outer-frame-id the-struct_43)"
"(expand-context/outer-context the-struct_43)"
"(expand-context/outer-env the-struct_43)"
"(expand-context/outer-scopes the-struct_43)"
"(expand-context/outer-def-ctx-scopes the-struct_43)"
"(expand-context/outer-binding-layer the-struct_43)"
"(expand-context/outer-reference-records the-struct_43)"
"(expand-context/outer-only-immediate? the-struct_43)"
"(expand-context/outer-need-eventually-defined the-struct_43)"
"(expand-context/outer-current-introduction-scopes the-struct_43)"
"(expand-context/outer-current-use-scopes the-struct_43)"
" name45_0))"
"                      (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_43)))))"
"(let-values() ctx_4))))))))"
"(define-values"
"(as-named-context)"
"(lambda(ctx_5 ids_1)"
"(begin"
"(if(if(pair? ids_1)(null?(cdr ids_1)) #f)"
"(let-values()"
"(let-values(((v_135) ctx_5))"
"(let-values(((the-struct_44) v_135))"
"(if(expand-context/outer? the-struct_44)"
"(let-values(((name47_0)(car ids_1))((inner48_0)(root-expand-context/outer-inner v_135)))"
"(expand-context/outer1.1"
" inner48_0"
"(root-expand-context/outer-post-expansion the-struct_44)"
"(root-expand-context/outer-use-site-scopes the-struct_44)"
"(root-expand-context/outer-frame-id the-struct_44)"
"(expand-context/outer-context the-struct_44)"
"(expand-context/outer-env the-struct_44)"
"(expand-context/outer-scopes the-struct_44)"
"(expand-context/outer-def-ctx-scopes the-struct_44)"
"(expand-context/outer-binding-layer the-struct_44)"
"(expand-context/outer-reference-records the-struct_44)"
"(expand-context/outer-only-immediate? the-struct_44)"
"(expand-context/outer-need-eventually-defined the-struct_44)"
"(expand-context/outer-current-introduction-scopes the-struct_44)"
"(expand-context/outer-current-use-scopes the-struct_44)"
" name47_0))"
"                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_44)))))"
"(let-values() ctx_5)))))"
"(define-values"
"(as-to-parsed-context)"
"(lambda(ctx_6)"
"(begin"
"(let-values(((v_136) ctx_6))"
"(let-values(((the-struct_45) v_136))"
"(if(expand-context/outer? the-struct_45)"
"(let-values(((inner49_0)"
"(let-values(((the-struct_46)(root-expand-context/outer-inner v_136)))"
"(if(expand-context/inner? the-struct_46)"
"(let-values(((to-parsed?50_0) #t)"
"((observer51_0) #f)"
"((should-not-encounter-macros?52_0) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_46)"
"(root-expand-context/inner-module-scopes the-struct_46)"
"(root-expand-context/inner-top-level-bind-scope the-struct_46)"
"(root-expand-context/inner-all-scopes-stx the-struct_46)"
"(root-expand-context/inner-defined-syms the-struct_46)"
"(root-expand-context/inner-counter the-struct_46)"
"(root-expand-context/inner-lift-key the-struct_46)"
" to-parsed?50_0"
"(expand-context/inner-phase the-struct_46)"
"(expand-context/inner-namespace the-struct_46)"
"(expand-context/inner-just-once? the-struct_46)"
"(expand-context/inner-module-begin-k the-struct_46)"
"(expand-context/inner-allow-unbound? the-struct_46)"
"(expand-context/inner-in-local-expand? the-struct_46)"
"(expand-context/inner-keep-#%expression? the-struct_46)"
"(expand-context/inner-stops the-struct_46)"
"(expand-context/inner-declared-submodule-names the-struct_46)"
"(expand-context/inner-lifts the-struct_46)"
"(expand-context/inner-lift-envs the-struct_46)"
"(expand-context/inner-module-lifts the-struct_46)"
"(expand-context/inner-require-lifts the-struct_46)"
"(expand-context/inner-to-module-lifts the-struct_46)"
"(expand-context/inner-requires+provides the-struct_46)"
" observer51_0"
"(expand-context/inner-for-serializable? the-struct_46)"
" should-not-encounter-macros?52_0))"
"                              (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_46)))))"
"(expand-context/outer1.1"
" inner49_0"
"(root-expand-context/outer-post-expansion the-struct_45)"
"(root-expand-context/outer-use-site-scopes the-struct_45)"
"(root-expand-context/outer-frame-id the-struct_45)"
"(expand-context/outer-context the-struct_45)"
"(expand-context/outer-env the-struct_45)"
"(expand-context/outer-scopes the-struct_45)"
"(expand-context/outer-def-ctx-scopes the-struct_45)"
"(expand-context/outer-binding-layer the-struct_45)"
"(expand-context/outer-reference-records the-struct_45)"
"(expand-context/outer-only-immediate? the-struct_45)"
"(expand-context/outer-need-eventually-defined the-struct_45)"
"(expand-context/outer-current-introduction-scopes the-struct_45)"
"(expand-context/outer-current-use-scopes the-struct_45)"
"(expand-context/outer-name the-struct_45)))"
"            (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_45)))))))"
"(define-values"
"(to-syntax-list.1)"
"(lambda(s_169)"
"(begin"
" 'to-syntax-list"
"(if(list? s_169)"
"(let-values() s_169)"
"(if(pair? s_169)"
"(let-values()(let-values(((r_28)(to-syntax-list.1(cdr s_169))))(if r_28(cons(car s_169) r_28) #f)))"
"(if(syntax?$1 s_169)(let-values()(to-syntax-list.1(syntax-e$1 s_169)))(let-values() #f)))))))"
"(define-values(core-scope)(new-multi-scope))"
"(define-values(core-stx)(add-scope empty-syntax core-scope))"
"(define-values(core-module-name)(1/make-resolved-module-path '#%core))"
"(define-values(core-mpi)(1/module-path-index-join ''#%core #f))"
"(define-values(id-cache-0)(make-hasheq))"
"(define-values(id-cache-1)(make-hasheq))"
"(define-values"
"(core-id)"
"(lambda(sym_12 phase_34)"
"(begin"
"(if(eqv? phase_34 0)"
"(let-values()"
"(let-values(((or-part_6)(hash-ref id-cache-0 sym_12 #f)))"
"(if or-part_6"
" or-part_6"
"(let-values(((s_170)(datum->syntax$1 core-stx sym_12)))"
"(begin(hash-set! id-cache-0 sym_12 s_170) s_170)))))"
"(if(eq? phase_34 1)"
"(let-values()"
"(let-values(((or-part_28)(hash-ref id-cache-1 sym_12 #f)))"
"(if or-part_28"
" or-part_28"
"(let-values(((s_10)(datum->syntax$1(syntax-shift-phase-level$1 core-stx 1) sym_12)))"
"(begin(hash-set! id-cache-1 sym_12 s_10) s_10)))))"
"(let-values()(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_34) sym_12)))))))"
"(define-values(core-forms) '#hasheq())"
"(define-values(core-primitives) '#hasheq())"
"(define-values"
"(add-core-form!*)"
"(lambda(sym_25 proc_4)"
"(begin(begin(add-core-binding! sym_25)(set! core-forms(hash-set core-forms sym_25 proc_4))))))"
"(define-values"
"(add-core-primitive!)"
"(lambda(sym_26 val_35)"
"(begin(begin(add-core-binding! sym_26)(set! core-primitives(hash-set core-primitives sym_26 val_35))))))"
"(define-values"
"(add-core-binding!)"
"(lambda(sym_27)"
"(begin"
"(let-values(((temp1_0)(datum->syntax$1 core-stx sym_27))"
"((temp2_1)"
"(let-values(((core-mpi4_0) core-mpi)((temp5_2) 0)((sym6_0) sym_27))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" core-mpi4_0"
" temp5_2"
" sym6_0)))"
"((temp3_1) 0))"
"(add-binding!17.1 #f #f temp1_0 temp2_1 temp3_1)))))"
"(define-values"
"(declare-core-module!)"
"(lambda(ns_46)"
"(begin"
"(let-values(((ns7_0) ns_46)"
"((temp8_0)"
"(let-values(((temp10_0) #t)"
"((temp11_0) #t)"
"((temp12_0) #t)"
"((core-mpi13_0) core-mpi)"
"((temp14_1)"
"(hasheqv"
" 0"
"(let-values(((lst_79)(list core-primitives core-forms))((lst_80) '(#f #t)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_79)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_80)))"
"((letrec-values(((for-loop_99)"
"(lambda(table_111 lst_81 lst_82)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_81)(pair? lst_82) #f)"
"(let-values(((syms_12)(unsafe-car lst_81))"
"((rest_37)(unsafe-cdr lst_81))"
"((syntax?_2)(unsafe-car lst_82))"
"((rest_38)(unsafe-cdr lst_82)))"
"(let-values(((table_112)"
"(let-values(((table_113) table_111))"
"(let-values(((ht_77) syms_12))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-keys ht_77)))"
"((letrec-values(((for-loop_100)"
"(lambda(table_114"
" i_42)"
"(begin"
" 'for-loop"
"(if i_42"
"(let-values(((sym_28)"
"(hash-iterate-key"
" ht_77"
" i_42)))"
"(let-values(((table_115)"
"(let-values(((table_116)"
" table_114))"
"(let-values(((table_117)"
"(let-values()"
"(let-values(((key_44"
" val_36)"
"(let-values()"
"(let-values(((b_62)"
"(let-values(((core-mpi17_0)"
" core-mpi)"
"((temp18_3)"
" 0)"
"((sym19_0)"
" sym_28))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" core-mpi17_0"
" temp18_3"
" sym19_0))))"
"(values"
" sym_28"
"(if syntax?_2"
"(provided1.1"
" b_62"
" #f"
" #t)"
" b_62))))))"
"(hash-set"
" table_116"
" key_44"
" val_36)))))"
"(values"
" table_117)))))"
"(if(not"
" #f)"
"(for-loop_100"
" table_115"
"(hash-iterate-next"
" ht_77"
" i_42))"
" table_115)))"
" table_114)))))"
" for-loop_100)"
" table_113"
"(hash-iterate-first ht_77)))))))"
"(if(not #f)"
"(for-loop_99 table_112 rest_37 rest_38)"
" table_112)))"
" table_111)))))"
" for-loop_99)"
" '#hasheq()"
" lst_79"
" lst_80)))))"
"((temp15_1)"
"(lambda(phase-level_14 ns_47 insp_7)"
"(if(zero? phase-level_14)"
"(let-values(((ns_48)"
"(let-values(((ns20_0) ns_47)"
"((core-module-name21_0) core-module-name)"
"((temp22_1) 0))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" ns20_0"
" core-module-name21_0"
" temp22_1))))"
"(if ns_48"
"(module-linklet-info2.1(namespace->instance ns_48 0) #f core-mpi #f #f #f)"
" #f))"
" #f)))"
"((temp16_1)"
"(lambda(data-box_1"
" ns_49"
" phase_42"
" phase-level_15"
" self_5"
" bulk-binding-registry_4"
" insp_8)"
"(let-values(((tmp_14) phase-level_15))"
"(if(equal? tmp_14 0)"
"(let-values()"
"(begin"
"(let-values(((ht_78) core-primitives))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_78)))"
"((letrec-values(((for-loop_101)"
"(lambda(i_28)"
"(begin"
" 'for-loop"
"(if i_28"
"(let-values(((sym_29 val_37)"
"(hash-iterate-key+value"
" ht_78"
" i_28)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-consistent!"
" ns_49"
" 0"
" sym_29"
" val_37))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_101"
"(hash-iterate-next ht_78 i_28))"
"(values))))"
"(values))))))"
" for-loop_101)"
"(hash-iterate-first ht_78))))"
"(void)"
"(let-values(((ht_79) core-forms))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_79)))"
"((letrec-values(((for-loop_102)"
"(lambda(i_91)"
"(begin"
" 'for-loop"
"(if i_91"
"(let-values(((sym_30 proc_5)"
"(hash-iterate-key+value"
" ht_79"
" i_91)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-transformer!"
" ns_49"
" 0"
" sym_30"
"(if(procedure-arity-includes?"
" proc_5"
" 2)"
"(core-form9.1"
" proc_5"
" sym_30)"
" proc_5)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_102"
"(hash-iterate-next ht_79 i_91))"
"(values))))"
"(values))))))"
" for-loop_102)"
"(hash-iterate-first ht_79))))"
"(void)))"
"(let-values()(void)))))))"
"(make-module39.1"
" temp10_0"
" unsafe-undefined"
" unsafe-undefined"
" temp16_1"
" #f"
" 0"
" 0"
" temp11_0"
" temp15_1"
" temp12_0"
" unsafe-undefined"
" #f"
" temp14_1"
" null"
" core-mpi13_0"
" #f"
" null"
" #f)))"
"((core-module-name9_0) core-module-name))"
"(declare-module!58.1 #t ns7_0 temp8_0 core-module-name9_0)))))"
"(define-values"
"(core-form-sym)"
"(lambda(s_19 phase_43)"
"(begin"
"(let-values(((ok?_0 id23_0 _24_0)"
"(let-values(((s_171) s_19))"
"(if(let-values(((s_85)(if(syntax?$1 s_171)(syntax-e$1 s_171) s_171)))"
"(if(pair? s_85)"
"(if(let-values(((s_172)(car s_85)))"
"(let-values(((or-part_162)(if(syntax?$1 s_172)(symbol?(syntax-e$1 s_172)) #f)))"
"(if or-part_162 or-part_162(symbol? s_172))))"
"(let-values(((s_173)(cdr s_85))) #t)"
" #f)"
" #f))"
"(let-values()"
"(let-values(((id23_1 _24_1)"
"(let-values(((s_174)(if(syntax?$1 s_171)(syntax-e$1 s_171) s_171)))"
"(let-values(((id25_0)(let-values(((s_175)(car s_174))) s_175))"
"((_26_0)(let-values(((s_176)(cdr s_174))) s_176)))"
"(values id25_0 _26_0)))))"
"(values #t id23_1 _24_1)))"
"(values #f #f #f)))))"
"(if ok?_0"
"(let-values(((b_63)"
"(let-values(((temp27_1) id23_0)((phase28_0) phase_43))"
"(resolve+shift28.1 #f #f null unsafe-undefined #f temp27_1 phase28_0))))"
"(if(module-binding? b_63)"
"(if(eq? core-module-name(1/module-path-index-resolve(module-binding-module b_63)))"
"(module-binding-sym b_63)"
" #f)"
" #f))"
" #f)))))"
"(define-values"
"(taint-dispatch)"
"(lambda(s_0 proc_6 phase_33)"
"(begin"
"((letrec-values(((loop_81)"
"(lambda(s_73 mode_11)"
"(begin"
" 'loop"
"(let-values(((tmp_4) mode_11))"
"(if(equal? tmp_4 'none)"
"(let-values() s_73)"
"(if(equal? tmp_4 'opaque)"
"(let-values()(proc_6 s_73))"
"(if(equal? tmp_4 'transparent)"
"(let-values()"
"(let-values(((c_18)"
"(let-values(((s_177)"
"(let-values(((or-part_13)(syntax->list$1 s_73)))"
"(if or-part_13 or-part_13(syntax-e$1 s_73))))"
"((f_1)(lambda(tail?_40 d_18)(begin 'f d_18)))"
"((s->_3)"
"(lambda(s_178)"
"(begin"
" 's->"
"(loop_81"
" s_178"
"(syntax-taint-mode-property s_178)))))"
"((seen_19) #f))"
"(let-values(((s_179) s_177)"
"((f_2) f_1)"
"((gf_8)"
"(lambda(tail?_41 v_31)"
"(begin"
" 'gf"
"(if(syntax?$1 v_31)"
"(let-values()(s->_3 v_31))"
"(let-values()(f_1 tail?_41 v_31))))))"
"((seen_20) seen_19))"
"((letrec-values(((loop_82)"
"(lambda(tail?_42 s_4 prev-depth_8)"
"(begin"
" 'loop"
"(let-values(((depth_8)"
"(fx+ 1 prev-depth_8)))"
"(if(if seen_20(fx> depth_8 32) #f)"
"(let-values()"
"(datum-map-slow"
" tail?_42"
" s_4"
"(lambda(tail?_43 s_180)"
"(gf_8 tail?_43 s_180))"
" seen_20))"
"(if(null? s_4)"
"(let-values()(f_2 tail?_42 s_4))"
"(if(pair? s_4)"
"(let-values()"
"(f_2"
" tail?_42"
"(cons"
"(loop_82 #f(car s_4) depth_8)"
"(loop_82"
" #t"
"(cdr s_4)"
" depth_8))))"
"(if(symbol? s_4)"
"(let-values()(f_2 #f s_4))"
"(if(boolean? s_4)"
"(let-values()(f_2 #f s_4))"
"(if(number? s_4)"
"(let-values()(f_2 #f s_4))"
"(if(let-values(((or-part_74)"
"(vector?"
" s_4)))"
"(if or-part_74"
" or-part_74"
"(let-values(((or-part_75)"
"(box?"
" s_4)))"
"(if or-part_75"
" or-part_75"
"(let-values(((or-part_76)"
"(prefab-struct-key"
" s_4)))"
"(if or-part_76"
" or-part_76"
"(hash?"
" s_4)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_42"
" s_4"
"(lambda(tail?_44"
" s_181)"
"(gf_8"
" tail?_44"
" s_181))"
" seen_20))"
"(let-values()"
"(gf_8"
" #f"
" s_4))))))))))))))"
" loop_82)"
" #f"
" s_179"
" 0)))))"
"(datum->syntax$1"
" #f"
" c_18"
" s_73"
"(if(syntax-any-macro-scopes? s_73)"
"(1/syntax-property-remove s_73 original-property-sym)"
" s_73))))"
"(if(equal? tmp_4 'transparent-binding)"
"(let-values()"
"(let-values(((c_19)(syntax-e$1 s_73)))"
"(if(pair? c_19)"
"(let-values()"
"(let-values(((cd_0)(cdr c_19)))"
"(if(let-values(((or-part_80)(pair? cd_0)))"
"(if or-part_80"
" or-part_80"
"(if(syntax?$1 cd_0)(pair?(syntax-e$1 cd_0)) #f)))"
"(let-values()"
"(let-values(((d_19)(if(syntax?$1 cd_0)(syntax-e$1 cd_0) cd_0)))"
"(datum->syntax$1"
" #f"
"(cons"
"(loop_81(car c_19)(syntax-taint-mode-property(car c_19)))"
"(cons"
"(loop_81(car d_19) 'transparent)"
"(let-values(((s_5)"
"(let-values(((or-part_163)"
"(syntax->list$1(cdr d_19))))"
"(if or-part_163 or-part_163(cdr d_19))))"
"((f_38)(lambda(tail?_1 d_20)(begin 'f d_20)))"
"((s->_4)"
"(lambda(s_182)"
"(begin"
" 's->"
"(loop_81"
" s_182"
"(syntax-taint-mode-property s_182)))))"
"((seen_0) #f))"
"(let-values(((s_42) s_5)"
"((f_39) f_38)"
"((gf_9)"
"(lambda(tail?_45 v_41)"
"(begin"
" 'gf"
"(if(syntax?$1 v_41)"
"(let-values()(s->_4 v_41))"
"(let-values()(f_38 tail?_45 v_41))))))"
"((seen_21) seen_0))"
"((letrec-values(((loop_83)"
"(lambda(tail?_46 s_183 prev-depth_9)"
"(begin"
" 'loop"
"(let-values(((depth_9)"
"(fx+ 1 prev-depth_9)))"
"(if(if seen_21"
"(fx> depth_9 32)"
" #f)"
"(let-values()"
"(datum-map-slow"
" tail?_46"
" s_183"
"(lambda(tail?_47 s_184)"
"(gf_9 tail?_47 s_184))"
" seen_21))"
"(if(null? s_183)"
"(let-values()"
"(f_39 tail?_46 s_183))"
"(if(pair? s_183)"
"(let-values()"
"(f_39"
" tail?_46"
"(cons"
"(loop_83"
" #f"
"(car s_183)"
" depth_9)"
"(loop_83"
" #t"
"(cdr s_183)"
" depth_9))))"
"(if(symbol? s_183)"
"(let-values()"
"(f_39 #f s_183))"
"(if(boolean? s_183)"
"(let-values()"
"(f_39 #f s_183))"
"(if(number? s_183)"
"(let-values()"
"(f_39 #f s_183))"
"(if(let-values(((or-part_164)"
"(vector?"
" s_183)))"
"(if or-part_164"
" or-part_164"
"(let-values(((or-part_21)"
"(box?"
" s_183)))"
"(if or-part_21"
" or-part_21"
"(let-values(((or-part_165)"
"(prefab-struct-key"
" s_183)))"
"(if or-part_165"
" or-part_165"
"(hash?"
" s_183)))))))"
"(let-values()"
"(datum-map-slow"
" tail?_46"
" s_183"
"(lambda(tail?_48"
" s_185)"
"(gf_9"
" tail?_48"
" s_185))"
" seen_21))"
"(let-values()"
"(gf_9"
" #f"
" s_183))))))))))))))"
" loop_83)"
" #f"
" s_42"
" 0)))))"
" s_73"
"(if(syntax-any-macro-scopes? s_73)"
"(1/syntax-property-remove s_73 original-property-sym)"
" s_73))))"
"(let-values()(loop_81 s_73 'transparent)))))"
"(let-values()(loop_81 s_73 'transparent)))))"
"(let-values()"
"(let-values(((c_20)(syntax-e$1 s_73)))"
"(let-values(((tmp_15)(core-form-sym c_20 phase_33)))"
"(if(if(equal? tmp_15 'begin)"
" #t"
"(if(equal? tmp_15 'begin-for-syntax)"
" #t"
"(equal? tmp_15 '#%module-begin)))"
"(let-values()(loop_81 s_73 'transparent))"
"(if(if(equal? tmp_15 'define-values)"
" #t"
"(equal? tmp_15 'define-syntaxes))"
"(let-values()(loop_81 s_73 'transparent-binding))"
"(let-values()(loop_81 s_73 'opaque))))))))))))))))"
" loop_81)"
" s_0"
"(syntax-taint-mode-property s_0)))))"
"(define-values"
"(syntax-taint-mode-property)"
"(lambda(s_186)"
"(begin"
"(let-values(((or-part_166)(syntax-property$1 s_186 'taint-mode)))"
"(if or-part_166 or-part_166(syntax-property$1 s_186 'certify-mode))))))"
"(define-values"
"(syntax-remove-taint-dispatch-properties)"
"(lambda(s_187)(begin(1/syntax-property-remove(1/syntax-property-remove s_187 'taint-mode) 'certify-mode))))"
"(define-values(current-module-code-inspector)(make-parameter #f))"
"(define-values"
"(syntax-debug-info$1)"
"(lambda(s_0 phase_44 all-bindings?_0)"
"(begin"
" 'syntax-debug-info"
"(let-values(((hts_0)"
"(reverse$1"
"(let-values(((lst_76)(fallback->list(syntax-shifted-multi-scopes s_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_76)))"
"((letrec-values(((for-loop_103)"
"(lambda(fold-var_59 lst_83)"
"(begin"
" 'for-loop"
"(if(pair? lst_83)"
"(let-values(((smss_26)(unsafe-car lst_83))"
"((rest_39)(unsafe-cdr lst_83)))"
"(let-values(((fold-var_60)"
"(let-values(((fold-var_61) fold-var_59))"
"(let-values(((fold-var_62)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((init-ht_0)"
"(if(identifier?"
" s_0)"
"(hasheq"
" 'name"
"(syntax-e$1 s_0))"
" '#hasheq())))"
"(let-values(((s-scs_0)"
"(scope-set-at-fallback"
" s_0"
" smss_26"
" phase_44)))"
"(let-values(((context_1)"
"(scope-set->context"
" s-scs_0)))"
"(let-values(((context-ht_0)"
"(hash-set"
" init-ht_0"
" 'context"
" context_1)))"
"(let-values(((sym_18)"
"(syntax-e$1"
" s_0)))"
"(let-values(((classify-binding_0)"
"(lambda(b_43)"
"(begin"
" 'classify-binding"
"(if(local-binding?"
" b_43)"
" 'local"
" 'module)))))"
"(let-values(((extract-binding_0)"
"(lambda(b_64)"
"(begin"
" 'extract-binding"
"(if(local-binding?"
" b_64)"
"(local-binding-key"
" b_64)"
"(vector"
"(module-binding-sym"
" b_64)"
"(module-binding-module"
" b_64)"
"(module-binding-phase"
" b_64)))))))"
"(let-values(((bindings_0)"
"(append"
"(if(identifier?"
" s_0)"
"(let-values()"
"(let-values(((bindings_1"
" covered-scopess_0)"
"(let-values(((ht_80)"
" s-scs_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys"
" ht_80)))"
"((letrec-values(((for-loop_104)"
"(lambda(bindings_2"
" covered-scope-sets_0"
" i_92)"
"(begin"
" 'for-loop"
"(if i_92"
"(let-values(((sc_28)"
"(unsafe-immutable-hash-iterate-key"
" ht_80"
" i_92)))"
"(let-values(((bindings_3"
" covered-scope-sets_1)"
"(let-values(((ht_81"
" bulk-bindings_3)"
"(let-values(((table_118)"
"(scope-binding-table"
" sc_28)))"
"(if(hash?"
" table_118)"
"(values"
"(hash-ref"
" table_118"
" sym_18"
" '#hash())"
" null)"
"(values"
"(hash-ref"
"(table-with-bulk-bindings-syms"
" table_118)"
" sym_18"
" '#hash())"
"(table-with-bulk-bindings-bulk-bindings"
" table_118)))))"
"((s_188)"
" s_0)"
"((extra-shifts_5)"
" null))"
"(begin"
" #t"
"((letrec-values(((for-loop_20)"
"(lambda(bindings_4"
" covered-scope-sets_2"
" i_38)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" i_38))"
"(let-values(((scs_15)"
"(if(pair?"
" i_38)"
"(let-values()"
"(bulk-binding-at-scopes"
"(car"
" i_38)))"
"(let-values()"
"(hash-iterate-key"
" ht_81"
" i_38))))"
"((b_65)"
"(if(pair?"
" i_38)"
"(let-values()"
"(let-values(((bulk_4)"
"(bulk-binding-at-bulk"
"(car"
" i_38))))"
"(let-values(((b-info_1)"
"(if(symbol-interned?"
" sym_18)"
"(hash-ref"
"(bulk-binding-symbols"
" bulk_4"
" s_188"
" extra-shifts_5)"
" sym_18"
" #f)"
" #f)))"
"(if b-info_1"
"((bulk-binding-create"
" bulk_4)"
" bulk_4"
" b-info_1"
" sym_18)"
" #f))))"
"(let-values()"
"(hash-iterate-value"
" ht_81"
" i_38)))))"
"(let-values(((bindings_5"
" covered-scope-sets_3)"
"(let-values(((bindings_6)"
" bindings_4)"
"((covered-scope-sets_4)"
" covered-scope-sets_2))"
"(if(if scs_15"
"(if b_65"
"(not"
"(set-member?"
" covered-scope-sets_4"
" scs_15))"
" #f)"
" #f)"
"(let-values(((bindings_7)"
" bindings_6)"
"((covered-scope-sets_5)"
" covered-scope-sets_4))"
"(let-values(((bindings_8"
" covered-scope-sets_6)"
"(let-values()"
"(values"
"(cons"
"(hasheq"
" 'name"
"(syntax-e$1"
" s_0)"
" 'context"
"(scope-set->context"
" scs_15)"
" 'match?"
"(subset?"
" scs_15"
" s-scs_0)"
"(classify-binding_0"
" b_65)"
"(extract-binding_0"
" b_65))"
" bindings_7)"
"(set-add"
" covered-scope-sets_5"
" scs_15)))))"
"(values"
" bindings_8"
" covered-scope-sets_6)))"
"(values"
" bindings_6"
" covered-scope-sets_4)))))"
"(if(not"
" #f)"
"(for-loop_20"
" bindings_5"
" covered-scope-sets_3"
"(if(pair?"
" i_38)"
"(let-values()"
"(cdr"
" i_38))"
"(let-values()"
"(let-values(((or-part_30)"
"(hash-iterate-next"
" ht_81"
" i_38)))"
"(if or-part_30"
" or-part_30"
" bulk-bindings_3)))))"
"(values"
" bindings_5"
" covered-scope-sets_3))))"
"(values"
" bindings_4"
" covered-scope-sets_2))))))"
" for-loop_20)"
" bindings_2"
" covered-scope-sets_0"
"(let-values(((or-part_31)"
"(hash-iterate-first"
" ht_81)))"
"(if or-part_31"
" or-part_31"
" bulk-bindings_3)))))))"
"(if(not"
" #f)"
"(for-loop_104"
" bindings_3"
" covered-scope-sets_1"
"(unsafe-immutable-hash-iterate-next"
" ht_80"
" i_92))"
"(values"
" bindings_3"
" covered-scope-sets_1))))"
"(values"
" bindings_2"
" covered-scope-sets_0))))))"
" for-loop_104)"
" null"
"(set)"
"(unsafe-immutable-hash-iterate-first"
" ht_80))))))"
" bindings_1))"
"(let-values()"
" null))"
"(if all-bindings?_0"
"(let-values()"
"(reverse$1"
"(let-values(((ht_82)"
" s-scs_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys"
" ht_82)))"
"((letrec-values(((for-loop_15)"
"(lambda(fold-var_63"
" i_43)"
"(begin"
" 'for-loop"
"(if i_43"
"(let-values(((sc_29)"
"(unsafe-immutable-hash-iterate-key"
" ht_82"
" i_43)))"
"(let-values(((fold-var_64)"
"(let-values(((sym-ht_1)"
"(let-values(((table_63)"
"(scope-binding-table"
" sc_29)))"
"(if(hash?"
" table_63)"
" table_63"
"(table-with-bulk-bindings-syms"
" table_63)))))"
"(begin"
" #t"
"((letrec-values(((for-loop_105)"
"(lambda(fold-var_65"
" state_25)"
"(begin"
" 'for-loop"
"(if(car"
" state_25)"
"(let-values(((o-sym_0)"
"(vector-ref"
"(car"
" state_25)"
" 1))"
"((scs_16)"
"(hash-iterate-key"
"(vector-ref"
"(car"
" state_25)"
" 2)"
"(cdr"
" state_25)))"
"((b_66)"
"(hash-iterate-value"
"(vector-ref"
"(car"
" state_25)"
" 2)"
"(cdr"
" state_25))))"
"(let-values(((fold-var_17)"
"(let-values(((fold-var_66)"
" fold-var_65))"
"(if(eq?"
" o-sym_0"
" sym_18)"
" fold-var_66"
"(let-values(((fold-var_67)"
" fold-var_66))"
"(let-values(((fold-var_18)"
"(let-values()"
"(cons"
"(let-values()"
"(hasheq"
" 'name"
" o-sym_0"
" 'context"
"(scope-set->context"
" scs_16)"
" 'match?"
" #f"
"(classify-binding_0"
" b_66)"
"(extract-binding_0"
" b_66)))"
" fold-var_67))))"
"(values"
" fold-var_18)))))))"
"(if(not"
" #f)"
"(for-loop_105"
" fold-var_17"
"(let-values(((ht_22)"
"(vector-ref"
"(car"
" state_25)"
" 2)))"
"(let-values(((i_93)"
"(hash-iterate-next"
" ht_22"
"(cdr"
" state_25))))"
"(if i_93"
"(cons"
"(car"
" state_25)"
" i_93)"
"(next-state-in-full-binding-table"
" sym-ht_1"
"(hash-iterate-next"
" sym-ht_1"
"(vector-ref"
"(car"
" state_25)"
" 0)))))))"
" fold-var_17)))"
" fold-var_65)))))"
" for-loop_105)"
" fold-var_63"
"((letrec-values(((loop_84)"
"(lambda(sym-i_1)"
"(begin"
" 'loop"
"(if sym-i_1"
"(next-state-in-full-binding-table"
" sym-ht_1"
" sym-i_1)"
" '(#f"
" ."
" #f))))))"
" loop_84)"
"(hash-iterate-first"
" sym-ht_1)))))))"
"(if(not"
" #f)"
"(for-loop_15"
" fold-var_64"
"(unsafe-immutable-hash-iterate-next"
" ht_82"
" i_43))"
" fold-var_64)))"
" fold-var_63)))))"
" for-loop_15)"
" null"
"(unsafe-immutable-hash-iterate-first"
" ht_82))))))"
"(let-values()"
" null)))))"
"(if(null?"
" bindings_0)"
" context-ht_0"
"(hash-set"
" context-ht_0"
" 'bindings"
" bindings_0)))))))))))"
" fold-var_61))))"
"(values fold-var_62)))))"
"(if(not #f)(for-loop_103 fold-var_60 rest_39) fold-var_60)))"
" fold-var_59)))))"
" for-loop_103)"
" null"
" lst_76))))))"
"(let-values(((ht_73)(car hts_0)))(if(null?(cdr hts_0)) ht_73(hash-set ht_73 'fallbacks(cdr hts_0))))))))"
"(define-values"
"(scope-set->context)"
"(lambda(scs_17)"
"(begin"
"(let-values(((temp1_1)"
"(reverse$1"
"(let-values(((ht_83) scs_17))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_83)))"
"((letrec-values(((for-loop_106)"
"(lambda(fold-var_68 i_28)"
"(begin"
" 'for-loop"
"(if i_28"
"(let-values(((sc_30)(unsafe-immutable-hash-iterate-key ht_83 i_28)))"
"(let-values(((fold-var_5)"
"(let-values(((fold-var_6) fold-var_68))"
"(let-values(((fold-var_7)"
"(let-values()"
"(cons"
"(let-values()"
"(if(interned-scope? sc_30)"
"(let-values()"
"(vector"
"(scope-id sc_30)"
"(scope-kind sc_30)"
"(interned-scope-key sc_30)))"
"(if(representative-scope?"
" sc_30)"
"(let-values()"
"(vector"
"(scope-id sc_30)"
"(scope-kind sc_30)"
"(multi-scope-name"
"(representative-scope-owner"
" sc_30))))"
"(let-values()"
"(vector"
"(scope-id sc_30)"
"(scope-kind sc_30))))))"
" fold-var_6))))"
"(values fold-var_7)))))"
"(if(not #f)"
"(for-loop_106"
" fold-var_5"
"(unsafe-immutable-hash-iterate-next ht_83 i_28))"
" fold-var_5)))"
" fold-var_68)))))"
" for-loop_106)"
" null"
"(unsafe-immutable-hash-iterate-first ht_83))))))"
"((<2_0) <)"
"((temp3_2)(lambda(v_137)(vector-ref v_137 0))))"
"(sort7.1 #f temp3_2 temp1_1 <2_0)))))"
"(define-values"
"(raise-ambiguous-error)"
"(lambda(id_20 ctx_7)"
"(begin"
"(raise-syntax-error$1"
" #f"
"       \"identifier's binding is ambiguous\""
" id_20"
" #f"
" null"
"(syntax-debug-info-string id_20 ctx_7)))))"
"(define-values"
"(syntax-debug-info-string)"
"(lambda(s_189 ctx_8)"
"(begin"
"(let-values(((info_3)(syntax-debug-info$1 s_189(expand-context-phase ctx_8) #f)))"
"(if(not"
"(let-values(((or-part_26)(pair?(hash-ref info_3 'bindings null))))"
"(if or-part_26"
" or-part_26"
"(let-values(((lst_84)(hash-ref info_3 'fallbacks null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_84)))"
"((letrec-values(((for-loop_107)"
"(lambda(result_64 lst_85)"
"(begin"
" 'for-loop"
"(if(pair? lst_85)"
"(let-values(((fb-info_0)(unsafe-car lst_85))"
"((rest_40)(unsafe-cdr lst_85)))"
"(let-values(((result_1)"
"(let-values()"
"(let-values(((result_65)"
"(let-values()"
"(let-values()"
"(pair?"
"(hash-ref"
" fb-info_0"
" 'bindings"
" null))))))"
"(values result_65)))))"
"(if(if(not((lambda x_28 result_1) fb-info_0))(not #f) #f)"
"(for-loop_107 result_1 rest_40)"
" result_1)))"
" result_64)))))"
" for-loop_107)"
" #f"
" lst_84))))))"
"          (let-values () \"\")"
"(let-values()"
"(let-values(((relevant-scope-sets_0)"
"((letrec-values(((loop_80)"
"(lambda(info_4 layer_0)"
"(begin"
" 'loop"
"(apply"
" append"
"(cons"
"(hash-ref info_4 'context)"
"(reverse$1"
"(let-values(((lst_86)(hash-ref info_4 'bindings null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_86)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_69 lst_87)"
"(begin"
" 'for-loop"
"(if(pair? lst_87)"
"(let-values(((b_21)(unsafe-car lst_87))"
"((rest_41)"
"(unsafe-cdr lst_87)))"
"(let-values(((fold-var_70)"
"(let-values(((fold-var_27)"
" fold-var_69))"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" b_21"
" 'context))"
" fold-var_27))))"
"(values"
" fold-var_28)))))"
"(if(not #f)"
"(for-loop_108 fold-var_70 rest_41)"
" fold-var_70)))"
" fold-var_69)))))"
" for-loop_108)"
" null"
" lst_86)))))"
"(let-values(((fallbacks_0)(hash-ref info_4 'fallbacks null)))"
"(reverse$1"
"(let-values(((lst_88) fallbacks_0)((start_14)(add1 layer_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_88)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_14)))"
"((letrec-values(((for-loop_109)"
"(lambda(fold-var_71 lst_89 pos_12)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_89) #t #f)"
"(let-values(((fallback_0)"
"(unsafe-car lst_89))"
"((rest_42)"
"(unsafe-cdr lst_89))"
"((layer_1) pos_12))"
"(let-values(((fold-var_9)"
"(let-values(((fold-var_72)"
" fold-var_71))"
"(let-values(((fold-var_73)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_80"
" fallback_0"
" layer_1))"
" fold-var_72))))"
"(values"
" fold-var_73)))))"
"(if(not #f)"
"(for-loop_109"
" fold-var_9"
" rest_42"
"(+ pos_12 1))"
" fold-var_9)))"
" fold-var_71)))))"
" for-loop_109)"
" null"
" lst_88"
" start_14))))))))))"
" loop_80)"
" info_3"
" 0)))"
"(let-values(((common-scopes_0)"
"(if(null? relevant-scope-sets_0)"
"(set)"
"(let-values(((lst_90) relevant-scope-sets_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_90)))"
"((letrec-values(((for-loop_110)"
"(lambda(s_182 lst_91)"
"(begin"
" 'for-loop"
"(if(pair? lst_91)"
"(let-values(((l_48)(unsafe-car lst_91))"
"((rest_43)(unsafe-cdr lst_91)))"
"(let-values(((s_89)"
"(let-values(((s_43) s_182))"
"(let-values(((s_190)"
"(let-values()"
"(set-intersect"
" s_43"
"(list->set l_48)))))"
"(values s_190)))))"
"(if(not #f)(for-loop_110 s_89 rest_43) s_89)))"
" s_182)))))"
" for-loop_110)"
"(list->set(car relevant-scope-sets_0))"
" lst_90))))))"
"(string-append"
"((letrec-values(((loop_83)"
"(lambda(info_5 layer_2)"
"(begin"
" 'loop"
"(string-append"
"                                        \"\\n  context\""
"(layer->string layer_2)"
"                                        \"...:\""
"(describe-context(hash-ref info_5 'context) common-scopes_0)"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_92)"
"(let-values(((temp1_2)(hash-ref info_5 'bindings null))"
"((temp2_2)"
"(lambda(a_41 b_67)"
"(begin"
" 'temp2"
"(if(hash-ref a_41 'match? #f)"
"(not(hash-ref b_67 'match? #f))"
" #f)))))"
"(sort7.1 #f #f temp1_2 temp2_2))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_92)))"
"((letrec-values(((for-loop_111)"
"(lambda(fold-var_74 lst_93)"
"(begin"
" 'for-loop"
"(if(pair? lst_93)"
"(let-values(((b_39)(unsafe-car lst_93))"
"((rest_44)(unsafe-cdr lst_93)))"
"(let-values(((fold-var_75)"
"(let-values(((fold-var_65)"
" fold-var_74))"
"(let-values(((fold-var_76)"
"(let-values()"
"(cons"
"(let-values()"
"(string-append"
"                                                                                                            \"\\n  \""
"(if(hash-ref"
" b_39"
" 'match?"
" #f)"
"                                                                                                              \"matching\""
"                                                                                                              \"other\")"
"                                                                                                            \" binding\""
"(layer->string"
" layer_2)"
"                                                                                                            \"...:\""
"                                                                                                            \"\\n   \""
"(if(hash-ref"
" b_39"
" 'local"
" #f)"
"                                                                                                              \"local\""
"(format"
"                                                                                                               \"~a\""
"(hash-ref"
" b_39"
" 'module"
" #f)))"
"(describe-context"
"(hash-ref"
" b_39"
" 'context)"
" common-scopes_0)))"
" fold-var_65))))"
"(values fold-var_76)))))"
"(if(not #f)"
"(for-loop_111 fold-var_75 rest_44)"
" fold-var_75)))"
" fold-var_74)))))"
" for-loop_111)"
" null"
" lst_92)))))"
"(let-values(((fallbacks_1)(hash-ref info_5 'fallbacks null)))"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_94) fallbacks_1)((start_15)(add1 layer_2)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_94)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_15)))"
"((letrec-values(((for-loop_112)"
"(lambda(fold-var_66 lst_95 pos_13)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_95) #t #f)"
"(let-values(((fallback_1)(unsafe-car lst_95))"
"((rest_45)(unsafe-cdr lst_95))"
"((layer_3) pos_13))"
"(let-values(((fold-var_77)"
"(let-values(((fold-var_78)"
" fold-var_66))"
"(let-values(((fold-var_79)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_83"
" fallback_1"
" layer_3))"
" fold-var_78))))"
"(values fold-var_79)))))"
"(if(not #f)"
"(for-loop_112"
" fold-var_77"
" rest_45"
"(+ pos_13 1))"
" fold-var_77)))"
" fold-var_66)))))"
" for-loop_112)"
" null"
" lst_94"
" start_15)))))))))))"
" loop_83)"
" info_3"
" 0)"
"(if(set-empty? common-scopes_0)"
"                   \"\""
"(string-append"
"                    \"\\n  common scopes...:\""
"(describe-context"
"(reverse$1"
"(let-values(((lst_96)(hash-ref info_3 'context)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_96)))"
"((letrec-values(((for-loop_113)"
"(lambda(fold-var_80 lst_97)"
"(begin"
" 'for-loop"
"(if(pair? lst_97)"
"(let-values(((s_191)(unsafe-car lst_97))"
"((rest_46)(unsafe-cdr lst_97)))"
"(let-values(((fold-var_81)"
"(let-values(((fold-var_82) fold-var_80))"
"(if(set-member? common-scopes_0 s_191)"
"(let-values(((fold-var_5) fold-var_82))"
"(let-values(((fold-var_6)"
"(let-values()"
"(cons"
"(let-values() s_191)"
" fold-var_5))))"
"(values fold-var_6)))"
" fold-var_82))))"
"(if(not #f)(for-loop_113 fold-var_81 rest_46) fold-var_81)))"
" fold-var_80)))))"
" for-loop_113)"
" null"
" lst_96))))"
"(set)))))))))))))"
"(define-values"
"(describe-context)"
"(lambda(scopes_19 common-scopes_1)"
"(begin"
"(let-values(((strs_0)"
"((letrec-values(((loop_44)"
"(lambda(strs_1 scopes_20)"
"(begin"
" 'loop"
"(if(null? scopes_20)"
"(let-values()(reverse$1 strs_1))"
"(let-values()"
"                                              (let-values (((str_3) (format \" ~a\" (car scopes_20))))"
"(if(if(pair? strs_1)"
"(<(+(string-length str_3)(string-length(car strs_1))) 72)"
" #f)"
"(loop_44"
"(cons(string-append(car strs_1) str_3)(cdr strs_1))"
"(cdr scopes_20))"
"(loop_44(cons str_3 strs_1)(cdr scopes_20))))))))))"
" loop_44)"
" null"
"(if(set-empty? common-scopes_1)"
" scopes_19"
"(append"
"(reverse$1"
"(let-values(((lst_98) scopes_19))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_98)))"
"((letrec-values(((for-loop_114)"
"(lambda(fold-var_83 lst_99)"
"(begin"
" 'for-loop"
"(if(pair? lst_99)"
"(let-values(((s_24)(unsafe-car lst_99))"
"((rest_47)(unsafe-cdr lst_99)))"
"(let-values(((fold-var_84)"
"(let-values(((fold-var_85) fold-var_83))"
"(if(not(set-member? common-scopes_1 s_24))"
"(let-values(((fold-var_86) fold-var_85))"
"(let-values(((fold-var_87)"
"(let-values()"
"(cons"
"(let-values() s_24)"
" fold-var_86))))"
"(values fold-var_87)))"
" fold-var_85))))"
"(if(not #f)(for-loop_114 fold-var_84 rest_47) fold-var_84)))"
" fold-var_83)))))"
" for-loop_114)"
" null"
" lst_98))))"
"                        (list \"[common scopes]\"))))))"
"(if(null? strs_0)"
"          (let-values () \"\\n   [empty]\")"
"(let-values()"
"(apply"
" string-append"
"(reverse$1"
"(let-values(((lst_100) strs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_100)))"
"((letrec-values(((for-loop_115)"
"(lambda(fold-var_88 lst_101)"
"(begin"
" 'for-loop"
"(if(pair? lst_101)"
"(let-values(((str_4)(unsafe-car lst_101))((rest_48)(unsafe-cdr lst_101)))"
"(let-values(((fold-var_89)"
"(let-values(((fold-var_90) fold-var_88))"
"(let-values(((fold-var_14)"
"(let-values()"
"(cons"
"(let-values()"
"                                                                               (string-append \"\\n  \" str_4))"
" fold-var_90))))"
"(values fold-var_14)))))"
"(if(not #f)(for-loop_115 fold-var_89 rest_48) fold-var_89)))"
" fold-var_88)))))"
" for-loop_115)"
" null"
" lst_100)))))))))))"
" (define-values (layer->string) (lambda (layer_4) (begin (if (zero? layer_4) \"\" (format \" at layer ~a\" layer_4)))))"
"(define-values"
"(raise-syntax-implicit-error)"
"(lambda(s_0 sym_31 trigger-id_0 ctx_8)"
"(begin"
"(let-values(((phase_45)(expand-context-phase ctx_8)))"
"(let-values(((what_1)"
"(let-values(((tmp_16) sym_31))"
"(if(equal? tmp_16 '#%app)"
"                          (let-values () \"function application\")"
"(if(equal? tmp_16 '#%datum)"
"                            (let-values () \"literal data\")"
"(if(equal? tmp_16 '#%top)"
"(let-values()"
"(if(expand-context-allow-unbound? ctx_8)"
"                                  \"reference to a top-level identifier\""
"                                  \"reference to an unbound identifier\"))"
"(let-values()(void))))))))"
"(let-values(((unbound?_0)"
"(if trigger-id_0"
"(not"
"(let-values(((trigger-id1_0) trigger-id_0)((phase2_1) phase_45))"
"(resolve40.1 #f #f null #f trigger-id1_0 phase2_1)))"
" #f)))"
"(let-values(((unbound-form_0)"
"(if unbound?_0(if(not(eq?(syntax-e$1 s_0)(syntax-e$1 trigger-id_0))) s_0 #f) #f)))"
"(raise-syntax-error$1"
" #f"
"(format"
"(if unbound?_0"
"                  \"unbound identifier;\\n also, no ~a syntax transformer is bound~a\""
"                  (string-append what_1 \" is not allowed;\\n no ~a syntax transformer is bound~a\"))"
" sym_31"
"(let-values(((tmp_17) phase_45))"
"(if(equal? tmp_17 0)"
"                    (let-values () \"\")"
"(if(equal? tmp_17 1)"
"                      (let-values () \" in the transformer phase\")"
"                      (let-values () (format \" at phase ~a\" phase_45))))))"
"(if unbound?_0(let-values(((or-part_13) unbound-form_0))(if or-part_13 or-part_13 trigger-id_0)) #f)"
"(if unbound?_0(if unbound-form_0 trigger-id_0 #f) s_0)"
" null"
"               (if unbound?_0 (syntax-debug-info-string trigger-id_0 ctx_8) \"\")))))))))"
"(define-values(make-check-no-duplicate-table)(lambda()(begin '#hasheq())))"
"(define-values"
"(check-no-duplicate-ids7.1)"
"(lambda(what1_0 ids4_0 phase5_0 s6_0 ht3_0)"
"(begin"
" 'check-no-duplicate-ids7"
"(let-values(((ids_2) ids4_0))"
"(let-values(((phase_46) phase5_0))"
"(let-values(((s_3) s6_0))"
"(let-values(((ht_74)(if(eq? ht3_0 unsafe-undefined)(make-check-no-duplicate-table) ht3_0)))"
"              (let-values (((what_2) (if (eq? what1_0 unsafe-undefined) \"binding name\" what1_0)))"
"(let-values()"
"((letrec-values(((loop_6)"
"(lambda(v_138 ht_84)"
"(begin"
" 'loop"
"(if(identifier? v_138)"
"(let-values()"
"(let-values(((l_49)(hash-ref ht_84(syntax-e$1 v_138) null)))"
"(begin"
"(let-values(((lst_102) l_49))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_102)))"
"((letrec-values(((for-loop_116)"
"(lambda(lst_77)"
"(begin"
" 'for-loop"
"(if(pair? lst_77)"
"(let-values(((id_21)(unsafe-car lst_77))"
"((rest_49)"
"(unsafe-cdr lst_77)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(bound-identifier=?$1"
" id_21"
" v_138"
" phase_46)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                                                                                                                        \"duplicate \""
" what_2)"
" s_3"
" v_138))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_116 rest_49)"
"(values))))"
"(values))))))"
" for-loop_116)"
" lst_102)))"
"(void)"
"(hash-set ht_84(syntax-e$1 v_138)(cons v_138 l_49)))))"
"(if(pair? v_138)"
"(let-values()(loop_6(cdr v_138)(loop_6(car v_138) ht_84)))"
"(let-values() ht_84)))))))"
" loop_6)"
" ids_2"
" ht_74))))))))))"
"(define-values"
"(remove-use-site-scopes)"
"(lambda(s_0 ctx_7)"
"(begin"
"(let-values(((use-sites_0)(root-expand-context-use-site-scopes ctx_7)))"
"(if(if use-sites_0(pair?(unbox use-sites_0)) #f)"
"(if(syntax?$1 s_0)"
"(remove-scopes s_0(unbox use-sites_0))"
"(reverse$1"
"(let-values(((lst_103) s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_103)))"
"((letrec-values(((for-loop_117)"
"(lambda(fold-var_91 lst_84)"
"(begin"
" 'for-loop"
"(if(pair? lst_84)"
"(let-values(((id_22)(unsafe-car lst_84))((rest_50)(unsafe-cdr lst_84)))"
"(let-values(((fold-var_92)"
"(let-values(((fold-var_93) fold-var_91))"
"(let-values(((fold-var_60)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-scopes id_22(unbox use-sites_0)))"
" fold-var_93))))"
"(values fold-var_60)))))"
"(if(not #f)(for-loop_117 fold-var_92 rest_50) fold-var_92)))"
" fold-var_91)))))"
" for-loop_117)"
" null"
" lst_103)))))"
" s_0)))))"
"(define-values"
"(struct:compile-context"
" compile-context1.1"
" compile-context?"
" compile-context-namespace"
" compile-context-phase"
" compile-context-self"
" compile-context-module-self"
" compile-context-full-module-name"
" compile-context-lazy-syntax-literals?"
" compile-context-header)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compile-context"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'compile-context)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'namespace)"
"(make-struct-field-accessor -ref_0 1 'phase)"
"(make-struct-field-accessor -ref_0 2 'self)"
"(make-struct-field-accessor -ref_0 3 'module-self)"
"(make-struct-field-accessor -ref_0 4 'full-module-name)"
"(make-struct-field-accessor -ref_0 5 'lazy-syntax-literals?)"
"(make-struct-field-accessor -ref_0 6 'header))))"
"(define-values"
"(make-compile-context14.1)"
"(lambda(full-module-name6_0 lazy-syntax-literals?7_0 module-self5_0 namespace2_0 phase3_1 self4_1)"
"(begin"
" 'make-compile-context14"
"(let-values(((namespace_1)(if(eq? namespace2_0 unsafe-undefined)(1/current-namespace) namespace2_0)))"
"(let-values(((phase_47)(if(eq? phase3_1 unsafe-undefined)(namespace-phase namespace_1) phase3_1)))"
"(let-values(((self_6)(if(eq? self4_1 unsafe-undefined)(namespace-self-mpi namespace_1) self4_1)))"
"(let-values(((module-self_0) module-self5_0))"
"(let-values(((full-module-name_0) full-module-name6_0))"
"(let-values(((lazy-syntax-literals?_0)"
"(if(eq? lazy-syntax-literals?7_0 unsafe-undefined)"
"(if module-self_0 #t #f)"
" lazy-syntax-literals?7_0)))"
"(let-values()"
"(begin"
"(if(if module-self_0(not full-module-name_0) #f)"
"                        (let-values () (error \"internal error: module-self provided without full name\"))"
"(void))"
"(compile-context1.1"
" namespace_1"
" phase_47"
" self_6"
" module-self_0"
" full-module-name_0"
" lazy-syntax-literals?_0"
" #f))))))))))))"
"(define-values"
"(struct:mpi-intern-table mpi-intern-table1.1 mpi-intern-table? mpi-intern-table-normal mpi-intern-table-fast)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'mpi-intern-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'mpi-intern-table)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'normal)"
"(make-struct-field-accessor -ref_0 1 'fast))))"
"(define-values"
"(make-module-path-index-intern-table)"
"(lambda()(begin(mpi-intern-table1.1(make-hash)(make-hasheq)))))"
"(define-values"
"(intern-module-path-index!)"
"(lambda(t_45 mpi_20)"
"(begin"
"(let-values(((or-part_72)(hash-ref(mpi-intern-table-fast t_45) mpi_20 #f)))"
"(if or-part_72"
" or-part_72"
"(let-values(((name_2 base_15)(1/module-path-index-split mpi_20)))"
"(if(not name_2)"
"(let-values()(begin(hash-set!(mpi-intern-table-fast t_45) mpi_20 mpi_20) mpi_20))"
"(let-values()"
"(let-values(((interned-base_0)(if base_15(intern-module-path-index! t_45 base_15) #f)))"
"(let-values(((at-name_0)"
"(let-values(((or-part_29)(hash-ref(mpi-intern-table-normal t_45) name_2 #f)))"
"(if or-part_29"
" or-part_29"
"(let-values(((at-name_1)(make-hasheq)))"
"(begin(hash-set!(mpi-intern-table-normal t_45) name_2 at-name_1) at-name_1))))))"
"(let-values(((i-mpi_0)"
"(let-values(((or-part_79)(hash-ref at-name_0 interned-base_0 #f)))"
"(if or-part_79"
" or-part_79"
"(let-values(((mpi_21)"
"(if(eq? base_15 interned-base_0)"
" mpi_20"
"(let-values(((the-struct_47) mpi_20))"
"(if(1/module-path-index? the-struct_47)"
"(let-values(((base3_0) interned-base_0))"
"(module-path-index2.1"
"(module-path-index-path the-struct_47)"
" base3_0"
"(module-path-index-resolved the-struct_47)"
"(module-path-index-shift-cache the-struct_47)))"
"(raise-argument-error"
" 'struct-copy"
"                                                           \"module-path-index?\""
" the-struct_47))))))"
"(begin(hash-set! at-name_0 interned-base_0 mpi_21) mpi_21))))))"
"(begin(hash-set!(mpi-intern-table-fast t_45) mpi_20 i-mpi_0) i-mpi_0))))))))))))"
"(define-values(built-in-symbols)(make-hasheq))"
"(define-values(register-built-in-symbol!)(lambda(s_0)(begin(hash-set! built-in-symbols s_0 #t))))"
"(define-values(built-in-symbol?)(lambda(s_72)(begin(hash-ref built-in-symbols s_72 #f))))"
"(define-values"
"(make-built-in-symbol!)"
"(lambda(s_189)"
"(begin"
"      (let-values (((built-in-s_0) (string->symbol (format \".~s\" s_189))))"
"(begin(register-built-in-symbol! built-in-s_0) built-in-s_0)))))"
"(void"
"(begin"
"(for-each2"
" register-built-in-symbol!"
" '(lambda case-lambda"
" if"
" begin"
" begin0"
" let-values"
" letrec-values"
" set!"
" quote"
" with-continuation-mark"
" #%variable-reference))"
"(for-each2"
" register-built-in-symbol!"
" '(check-not-undefined"
" instance-variable-box"
" variable-reference"
" variable-reference?"
" variable-reference->instance"
" variable-reference-constant?"
" variable-reference-from-unsafe?))"
"(for-each2"
" register-built-in-symbol!"
" '(let letrec* define"
" or"
" and"
" pariah"
" variable-set!"
" variable-ref"
" variable-ref/no-check"
" make-instance-variable-reference"
" annotation?"
" annotation-expression"
" #%app"
" #%call-with-values"
" make-pthread-parameter))))"
"(define-values(phase-shift-id)(make-built-in-symbol! 'phase))"
"(define-values(dest-phase-id)(make-built-in-symbol! 'dest-phase))"
"(define-values(ns-id)(make-built-in-symbol! 'namespace))"
"(define-values(self-id)(make-built-in-symbol! 'self))"
"(define-values(syntax-literals-id)(make-built-in-symbol! 'syntax-literals))"
"(define-values(get-syntax-literal!-id)(make-built-in-symbol! 'get-syntax-literal!))"
"(define-values(bulk-binding-registry-id)(make-built-in-symbol! 'bulk-binding-registry))"
"(define-values(inspector-id)(make-built-in-symbol! 'inspector))"
"(define-values(deserialize-syntax-id)(make-built-in-symbol! 'deserialize-syntax))"
"(define-values(deserialized-syntax-vector-id)(make-built-in-symbol! 'deserialized-syntax-vector))"
"(define-values(set-transformer!-id)(make-built-in-symbol! 'set-transformer!))"
"(define-values(top-level-bind!-id)(make-built-in-symbol! 'top-level-bind!))"
"(define-values(top-level-require!-id)(make-built-in-symbol! 'top-level-require!))"
"(define-values(mpi-vector-id)(make-built-in-symbol! 'mpi-vector))"
"(define-values"
"(struct:module-path-index-table"
" module-path-index-table1.1"
" module-path-index-table?"
" module-path-index-table-positions"
" module-path-index-table-intern)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-path-index-table"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'module-path-index-table)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'positions)"
"(make-struct-field-accessor -ref_0 1 'intern))))"
"(define-values"
"(make-module-path-index-table)"
"(lambda()(begin(module-path-index-table1.1(make-hasheq)(make-module-path-index-intern-table)))))"
"(define-values"
"(add-module-path-index!)"
"(lambda(mpis_0 mpi_20)"
"(begin"
"(let-values(((pos_14)(add-module-path-index!/pos mpis_0 mpi_20)))"
"(if pos_14(list 'unsafe-vector*-ref mpi-vector-id pos_14) #f)))))"
"(define-values"
"(add-module-path-index!/pos)"
"(lambda(mpis_1 mpi_22)"
"(begin"
"(if(not mpi_22)"
"(let-values() #f)"
"(if mpi_22"
"(let-values()"
"(let-values(((mpi_23)(intern-module-path-index!(module-path-index-table-intern mpis_1) mpi_22))"
"((positions_0)(module-path-index-table-positions mpis_1)))"
"(let-values(((or-part_77)(hash-ref positions_0 mpi_23 #f)))"
"(if or-part_77"
" or-part_77"
"(let-values(((pos_15)(hash-count positions_0)))"
"(begin(hash-set! positions_0 mpi_23 pos_15) pos_15))))))"
"(void))))))"
"(define-values"
"(generate-module-path-index-deserialize)"
"(lambda(mpis_2)"
"(begin"
"(let-values(((unique-list_0)"
"(lambda(v_139)"
"(begin"
" 'unique-list"
"(if(pair? v_139)"
"(reverse$1"
"(let-values(((lst_104) v_139))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_104)))"
"((letrec-values(((for-loop_118)"
"(lambda(fold-var_10 lst_80)"
"(begin"
" 'for-loop"
"(if(pair? lst_80)"
"(let-values(((i_94)(unsafe-car lst_80))"
"((rest_51)(unsafe-cdr lst_80)))"
"(let-values(((fold-var_94)"
"(let-values(((fold-var_95) fold-var_10))"
"(let-values(((fold-var_96)"
"(let-values()"
"(cons"
"(let-values() i_94)"
" fold-var_95))))"
"(values fold-var_96)))))"
"(if(not #f)"
"(for-loop_118 fold-var_94 rest_51)"
" fold-var_94)))"
" fold-var_10)))))"
" for-loop_118)"
" null"
" lst_104))))"
" v_139)))))"
"(let-values(((positions_1)(module-path-index-table-positions mpis_2)))"
"(let-values(((gen-order_0)(make-hasheqv)))"
"(let-values(((rev-positions_0)"
"(let-values(((ht_85) positions_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_85)))"
"((letrec-values(((for-loop_119)"
"(lambda(table_119 i_95)"
"(begin"
" 'for-loop"
"(if i_95"
"(let-values(((k_19 v_69)(hash-iterate-key+value ht_85 i_95)))"
"(let-values(((table_120)"
"(let-values(((table_114) table_119))"
"(let-values(((table_121)"
"(let-values()"
"(let-values(((key_45 val_38)"
"(let-values()"
"(values"
" v_69"
" k_19))))"
"(hash-set"
" table_114"
" key_45"
" val_38)))))"
"(values table_121)))))"
"(if(not #f)"
"(for-loop_119 table_120(hash-iterate-next ht_85 i_95))"
" table_120)))"
" table_119)))))"
" for-loop_119)"
" '#hasheqv()"
"(hash-iterate-first ht_85))))))"
"(let-values((()"
"(begin"
"(let-values(((start_16) 0)((end_10)(hash-count rev-positions_0))((inc_4) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_16 end_10 inc_4)))"
"((letrec-values(((for-loop_105)"
"(lambda(pos_16)"
"(begin"
" 'for-loop"
"(if(< pos_16 end_10)"
"(let-values(((i_96) pos_16))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_24)"
"(hash-ref"
" rev-positions_0"
" i_96)))"
"((letrec-values(((loop_85)"
"(lambda(mpi_25)"
"(begin"
" 'loop"
"(if(hash-ref"
" gen-order_0"
" mpi_25"
" #f)"
"(void)"
"(let-values()"
"(let-values(((name_37"
" base_16)"
"(1/module-path-index-split"
" mpi_25)))"
"(begin"
"(if base_16"
"(let-values()"
"(loop_85"
" base_16))"
"(void))"
"(hash-set!"
" gen-order_0"
" mpi_25"
"(hash-count"
" gen-order_0))))))))))"
" loop_85)"
" mpi_24)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_105(+ pos_16 inc_4))(values))))"
"(values))))))"
" for-loop_105)"
" start_16)))"
"(values))))"
"(let-values()"
"(let-values(((rev-gen-order_0)"
"(let-values(((ht_86) gen-order_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_86)))"
"((letrec-values(((for-loop_120)"
"(lambda(table_122 i_93)"
"(begin"
" 'for-loop"
"(if i_93"
"(let-values(((k_20 v_38)"
"(hash-iterate-key+value ht_86 i_93)))"
"(let-values(((table_15)"
"(let-values(((table_123) table_122))"
"(let-values(((table_9)"
"(let-values()"
"(let-values(((key_46"
" val_39)"
"(let-values()"
"(values"
" v_38"
" k_20))))"
"(hash-set"
" table_123"
" key_46"
" val_39)))))"
"(values table_9)))))"
"(if(not #f)"
"(for-loop_120 table_15(hash-iterate-next ht_86 i_93))"
" table_15)))"
" table_122)))))"
" for-loop_120)"
" '#hasheqv()"
"(hash-iterate-first ht_86))))))"
"(let-values(((gens_0)"
"(let-values(((len_12)(hash-count gen-order_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_12)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_12)))"
"(let-values(((v_140)(make-vector len_12 0)))"
"(begin"
"(if(zero? len_12)"
"(void)"
"(let-values()"
"(let-values(((start_17) 0)"
"((end_11)(hash-count gen-order_0))"
"((inc_5) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_17 end_11 inc_5)))"
"((letrec-values(((for-loop_28)"
"(lambda(i_97 pos_17)"
"(begin"
" 'for-loop"
"(if(< pos_17 end_11)"
"(let-values(((i_91) pos_17))"
"(let-values(((i_98)"
"(let-values(((i_99) i_97))"
"(let-values(((i_29)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_140"
" i_99"
"(let-values()"
"(let-values(((mpi_26)"
"(hash-ref"
" rev-gen-order_0"
" i_91)))"
"(let-values(((path_6"
" base_17)"
"(1/module-path-index-split"
" mpi_26)))"
"(if(top-level-module-path-index?"
" mpi_26)"
"(let-values()"
" 'top)"
"(if(not"
" path_6)"
"(let-values()"
"(box"
"(let-values(((or-part_167)"
"(unique-list_0"
"(1/resolved-module-path-name"
"(module-path-index-resolved"
" mpi_26)))))"
"(if or-part_167"
" or-part_167"
" 'self))))"
"(if(not"
" base_17)"
"(let-values()"
"(vector"
" path_6))"
"(if base_17"
"(let-values()"
"(vector"
" path_6"
"(hash-ref"
" gen-order_0"
" base_17)))"
"(void)))))))))"
"(unsafe-fx+"
" 1"
" i_99)))))"
"(values i_29)))))"
"(if(if(not"
"((lambda x_43"
"(unsafe-fx= i_98 len_12))"
" i_91))"
"(not #f)"
" #f)"
"(for-loop_28 i_98(+ pos_17 inc_5))"
" i_98)))"
" i_97)))))"
" for-loop_28)"
" 0"
" start_17)))))"
" v_140))))))"
"(list"
" 'deserialize-module-path-indexes"
"(list 'quote gens_0)"
"(list"
" 'quote"
"(let-values(((vec_30 i_46)"
"(let-values(((start_18) 0)((end_12)(hash-count rev-positions_0))((inc_6) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_18 end_12 inc_6)))"
"((letrec-values(((for-loop_53)"
"(lambda(vec_31 i_100 pos_18)"
"(begin"
" 'for-loop"
"(if(< pos_18 end_12)"
"(let-values(((i_101) pos_18))"
"(let-values(((vec_32 i_102)"
"(let-values(((vec_33) vec_31)"
"((i_39) i_100))"
"(let-values(((vec_34 i_103)"
"(let-values()"
"(let-values(((new-vec_2)"
"(if(eq?"
" i_39"
"(unsafe-vector*-length"
" vec_33))"
"(grow-vector"
" vec_33)"
" vec_33)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_2"
" i_39"
"(let-values()"
"(hash-ref"
" gen-order_0"
"(hash-ref"
" rev-positions_0"
" i_101))))"
"(values"
" new-vec_2"
"(unsafe-fx+"
" i_39"
" 1)))))))"
"(values vec_34 i_103)))))"
"(if(not #f)"
"(for-loop_53 vec_32 i_102(+ pos_18 inc_6))"
"(values vec_32 i_102))))"
"(values vec_31 i_100))))))"
" for-loop_53)"
"(make-vector 16)"
" 0"
" start_18)))))"
"(shrink-vector vec_30 i_46)))))))))))))))"
"(define-values"
"(deserialize-module-path-indexes)"
"(lambda(gen-vec_0 order-vec_0)"
"(begin"
"(let-values(((gen_0)(make-vector(vector-length gen-vec_0) #f)))"
"(begin"
"(let-values(((vec_35 len_13)"
"(let-values(((vec_23) gen-vec_0))"
"(begin(check-vector vec_23)(values vec_23(unsafe-vector-length vec_23)))))"
"((start_19) 0))"
"(begin"
" #f"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_19)))"
"((letrec-values(((for-loop_121)"
"(lambda(pos_19 pos_20)"
"(begin"
" 'for-loop"
"(if(if(unsafe-fx< pos_19 len_13) #t #f)"
"(let-values(((d_21)(unsafe-vector-ref vec_35 pos_19))((i_104) pos_20))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" gen_0"
" i_104"
"(if(eq? d_21 'top)"
"(let-values()"
"(deserialize-module-path-index))"
"(if(box? d_21)"
"(let-values()"
"(deserialize-module-path-index"
"(unbox d_21)))"
"(let-values()"
"(deserialize-module-path-index"
"(vector*-ref d_21 0)"
"(if(>(vector*-length d_21) 1)"
"(vector*-ref"
" gen_0"
"(vector*-ref d_21 1))"
" #f)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_121(unsafe-fx+ 1 pos_19)(+ pos_20 1))(values))))"
"(values))))))"
" for-loop_121)"
" 0"
" start_19)))"
"(void)"
"(let-values(((len_14)(vector-length order-vec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_14)"
"(void)"
"                (let-values () (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_14)))"
"(let-values(((v_141)(make-vector len_14 0)))"
"(begin"
"(if(zero? len_14)"
"(void)"
"(let-values()"
"(let-values(((vec_36 len_4)"
"(let-values(((vec_11) order-vec_0))"
"(begin(check-vector vec_11)(values vec_11(unsafe-vector-length vec_11))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_122)"
"(lambda(i_105 pos_21)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_21 len_4)"
"(let-values(((p_33)(unsafe-vector-ref vec_36 pos_21)))"
"(let-values(((i_48)"
"(let-values(((i_106) i_105))"
"(let-values(((i_107)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_141"
" i_106"
"(let-values()"
"(vector*-ref gen_0 p_33)))"
"(unsafe-fx+ 1 i_106)))))"
"(values i_107)))))"
"(if(if(not((lambda x_44(unsafe-fx= i_48 len_14)) p_33))"
"(not #f)"
" #f)"
"(for-loop_122 i_48(unsafe-fx+ 1 pos_21))"
" i_48)))"
" i_105)))))"
" for-loop_122)"
" 0"
" 0)))))"
" v_141)))))))))"
"(define-values"
"(mpis-as-vector)"
"(lambda(mpis_3)"
"(begin"
"(let-values(((positions_2)(module-path-index-table-positions mpis_3)))"
"(let-values(((vec_37)(make-vector(hash-count positions_2) #f)))"
"(begin"
"(let-values(((ht_87) positions_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_87)))"
"((letrec-values(((for-loop_123)"
"(lambda(i_24)"
"(begin"
" 'for-loop"
"(if i_24"
"(let-values(((mpi_27 pos_22)(hash-iterate-key+value ht_87 i_24)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set! vec_37 pos_22 mpi_27))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_123(hash-iterate-next ht_87 i_24))(values))))"
"(values))))))"
" for-loop_123)"
"(hash-iterate-first ht_87))))"
"(void)"
" vec_37))))))"
"(define-values"
"(serialize-module-uses)"
"(lambda(mus_0 mpis_4)"
"(begin"
"(reverse$1"
"(let-values(((lst_105) mus_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_105)))"
"((letrec-values(((for-loop_124)"
"(lambda(fold-var_97 lst_11)"
"(begin"
" 'for-loop"
"(if(pair? lst_11)"
"(let-values(((mu_1)(unsafe-car lst_11))((rest_52)(unsafe-cdr lst_11)))"
"(let-values(((fold-var_98)"
"(let-values(((fold-var_99) fold-var_97))"
"(let-values(((fold-var_100)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" 'module-use"
"(add-module-path-index!"
" mpis_4"
"(module-use-module mu_1))"
"(module-use-phase mu_1)))"
" fold-var_99))))"
"(values fold-var_100)))))"
"(if(not #f)(for-loop_124 fold-var_98 rest_52) fold-var_98)))"
" fold-var_97)))))"
" for-loop_124)"
" null"
" lst_105)))))))"
"(define-values"
"(interned-literal?)"
"(lambda(v_142)"
"(begin"
"(let-values(((or-part_168)(null? v_142)))"
"(if or-part_168"
" or-part_168"
"(let-values(((or-part_169)(boolean? v_142)))"
"(if or-part_169"
" or-part_169"
"(let-values(((or-part_140)"
"(if(fixnum? v_142)(if(< v_142(sub1(expt 2 30)))(> v_142(-(expt 2 30))) #f) #f)))"
"(if or-part_140"
" or-part_140"
"(let-values(((or-part_170)(symbol? v_142)))"
"(if or-part_170"
" or-part_170"
"(let-values(((or-part_46)(char? v_142)))(if or-part_46 or-part_46(keyword? v_142))))))))))))))"
"(define-values"
"(serialize-phase-to-link-module-uses)"
"(lambda(phase-to-link-module-uses_0 mpis_5)"
"(begin"
"(let-values(((phases-in-order_0)"
"(let-values(((temp10_1)(hash-keys phase-to-link-module-uses_0))((<11_0) <))"
"(sort7.1 #f #f temp10_1 <11_0))))"
"(list*"
" 'hasheqv"
"(apply"
" append"
"(reverse$1"
"(let-values(((lst_106) phases-in-order_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_106)))"
"((letrec-values(((for-loop_80)"
"(lambda(fold-var_101 lst_50)"
"(begin"
" 'for-loop"
"(if(pair? lst_50)"
"(let-values(((phase_9)(unsafe-car lst_50))((rest_53)(unsafe-cdr lst_50)))"
"(let-values(((fold-var_102)"
"(let-values(((fold-var_103) fold-var_101))"
"(let-values(((fold-var_104)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" phase_9"
"(list*"
" 'list"
"(serialize-module-uses"
"(hash-ref"
" phase-to-link-module-uses_0"
" phase_9)"
" mpis_5))))"
" fold-var_103))))"
"(values fold-var_104)))))"
"(if(not #f)(for-loop_80 fold-var_102 rest_53) fold-var_102)))"
" fold-var_101)))))"
" for-loop_80)"
" null"
" lst_106))))))))))"
"(define-values"
"(generate-deserialize6.1)"
"(lambda(syntax-support?2_0 v4_0 mpis5_0)"
"(begin"
" 'generate-deserialize6"
"(let-values(((v_143) v4_0))"
"(let-values(((mpis_6) mpis5_0))"
"(let-values(((syntax-support?_0) syntax-support?2_0))"
"(let-values()"
"(let-values(((reachable-scopes_4)(find-reachable-scopes v_143)))"
"(let-values(((state_26)(make-serialize-state reachable-scopes_4)))"
"(let-values(((mutables_0)(make-hasheq)))"
"(let-values(((objs_0)(make-hasheq)))"
"(let-values(((shares_0)(make-hasheq)))"
"(let-values(((obj-step_0) 0))"
"(let-values(((frontier_0) null))"
"(letrec-values(((add-frontier!_0)"
"(case-lambda"
"((v_144)(begin 'add-frontier!(set! frontier_0(cons v_144 frontier_0))))"
"((kind_3 v_100)(add-frontier!_0 v_100)))))"
"(let-values((()"
"(begin"
"((letrec-values(((frontier-loop_0)"
"(lambda(v_102)"
"(begin"
" 'frontier-loop"
"(begin"
"((letrec-values(((loop_11)"
"(lambda(v_104)"
"(begin"
" 'loop"
"(if(let-values(((or-part_171)"
"(interned-literal?"
" v_104)))"
"(if or-part_171"
" or-part_171"
"(1/module-path-index?"
" v_104)))"
"(let-values()(void))"
"(if(hash-ref"
" objs_0"
" v_104"
" #f)"
"(let-values()"
"(if(hash-ref"
" mutables_0"
" v_104"
" #f)"
"(void)"
"(let-values()"
"(hash-set!"
" shares_0"
" v_104"
" #t))))"
"(let-values()"
"(begin"
"(if(serialize-fill!?"
" v_104)"
"(let-values()"
"(begin"
"(hash-set!"
" mutables_0"
" v_104"
"(hash-count"
" mutables_0))"
"((serialize-fill!-ref"
" v_104)"
" v_104"
" add-frontier!_0"
" state_26)))"
"(if(serialize?"
" v_104)"
"(let-values()"
"((serialize-ref"
" v_104)"
" v_104"
"(case-lambda"
"((sub-v_0)"
"(loop_11"
" sub-v_0))"
"((kind_4"
" sub-v_1)"
"(loop_11"
" sub-v_1)))"
" state_26))"
"(if(pair?"
" v_104)"
"(let-values()"
"(begin"
"(loop_11"
"(car"
" v_104))"
"(loop_11"
"(cdr"
" v_104))))"
"(if(vector?"
" v_104)"
"(let-values()"
"(if(let-values(((or-part_172)"
"(immutable?"
" v_104)))"
"(if or-part_172"
" or-part_172"
"(zero?"
"(vector-length"
" v_104))))"
"(begin"
"(let-values(((vec_38"
" len_15)"
"(let-values(((vec_39)"
" v_104))"
"(begin"
"(check-vector"
" vec_39)"
"(values"
" vec_39"
"(unsafe-vector-length"
" vec_39))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_96)"
"(lambda(pos_23)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_23"
" len_15)"
"(let-values(((e_19)"
"(unsafe-vector-ref"
" vec_38"
" pos_23)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_11"
" e_19))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_96"
"(unsafe-fx+"
" 1"
" pos_23))"
"(values))))"
"(values))))))"
" for-loop_96)"
" 0)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_0"
" v_104"
"(hash-count"
" mutables_0))"
"(begin"
"(let-values(((vec_40"
" len_16)"
"(let-values(((vec_41)"
" v_104))"
"(begin"
"(check-vector"
" vec_41)"
"(values"
" vec_41"
"(unsafe-vector-length"
" vec_41))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_125)"
"(lambda(pos_24)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_24"
" len_16)"
"(let-values(((e_20)"
"(unsafe-vector-ref"
" vec_40"
" pos_24)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(add-frontier!_0"
" e_20))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_125"
"(unsafe-fx+"
" 1"
" pos_24))"
"(values))))"
"(values))))))"
" for-loop_125)"
" 0)))"
"(void)))))"
"(if(box?"
" v_104)"
"(let-values()"
"(if(immutable?"
" v_104)"
"(loop_11"
"(unbox"
" v_104))"
"(begin"
"(hash-set!"
" mutables_0"
" v_104"
"(hash-count"
" mutables_0))"
"(add-frontier!_0"
"(unbox"
" v_104)))))"
"(if(hash?"
" v_104)"
"(let-values()"
"(if(immutable?"
" v_104)"
"(begin"
"(let-values(((lst_107)"
"(sorted-hash-keys"
" v_104)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_107)))"
"((letrec-values(((for-loop_126)"
"(lambda(lst_108)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_108)"
"(let-values(((k_21)"
"(unsafe-car"
" lst_108))"
"((rest_54)"
"(unsafe-cdr"
" lst_108)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_11"
" k_21)"
"(loop_11"
"(hash-ref"
" v_104"
" k_21))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_126"
" rest_54)"
"(values))))"
"(values))))))"
" for-loop_126)"
" lst_107)))"
"(void))"
"(begin"
"(hash-set!"
" mutables_0"
" v_104"
"(hash-count"
" mutables_0))"
"(begin"
"(let-values(((lst_109)"
"(sorted-hash-keys"
" v_104)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_109)))"
"((letrec-values(((for-loop_127)"
"(lambda(lst_110)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_110)"
"(let-values(((k_22)"
"(unsafe-car"
" lst_110))"
"((rest_55)"
"(unsafe-cdr"
" lst_110)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(add-frontier!_0"
" k_22)"
"(add-frontier!_0"
"(hash-ref"
" v_104"
" k_22))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_127"
" rest_55)"
"(values))))"
"(values))))))"
" for-loop_127)"
" lst_109)))"
"(void)))))"
"(if(prefab-struct-key"
" v_104)"
"(let-values()"
"(begin"
"(let-values(((v*_2"
" start*_1"
" stop*_2"
" step*_1)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                     \"vector\""
"(lambda(x_45)"
"(vector?"
" x_45))"
"(lambda(x_46)"
"(unsafe-vector-length"
" x_46))"
"(struct->vector"
" v_104)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_128)"
"(lambda(idx_1)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_1"
" stop*_2)"
"(let-values(((e_21)"
"(unsafe-vector-ref"
" v*_2"
" idx_1)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_11"
" e_21))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_128"
"(unsafe-fx+"
" idx_1"
" 1))"
"(values))))"
"(values))))))"
" for-loop_128)"
" start*_1)))"
"(void)))"
"(if(srcloc?"
" v_104)"
"(let-values()"
"(if(path?"
"(srcloc-source"
" v_104))"
"(void)"
"(let-values()"
"(begin"
"(let-values(((v*_3"
" start*_2"
" stop*_3"
" step*_2)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                           \"vector\""
"(lambda(x_47)"
"(vector?"
" x_47))"
"(lambda(x_48)"
"(unsafe-vector-length"
" x_48))"
"(struct->vector"
" v_104)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_129)"
"(lambda(idx_2)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_2"
" stop*_3)"
"(let-values(((e_22)"
"(unsafe-vector-ref"
" v*_3"
" idx_2)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_11"
" e_22))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_129"
"(unsafe-fx+"
" idx_2"
" 1))"
"(values))))"
"(values))))))"
" for-loop_129)"
" start*_2)))"
"(void)))))"
"(let-values()"
"(void))))))))))"
"(hash-set!"
" objs_0"
" v_104"
" obj-step_0)"
"(set! obj-step_0"
"(add1"
" obj-step_0))))))))))"
" loop_11)"
" v_102)"
"(if(null? frontier_0)"
"(void)"
"(let-values()"
"(let-values(((l_50) frontier_0))"
"(begin"
"(set! frontier_0 null)"
"(let-values(((lst_111) l_50))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_111)))"
"((letrec-values(((for-loop_130)"
"(lambda(lst_112)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_112)"
"(let-values(((v_145)"
"(unsafe-car"
" lst_112))"
"((rest_56)"
"(unsafe-cdr"
" lst_112)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(frontier-loop_0"
" v_145))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_130"
" rest_56)"
"(values))))"
"(values))))))"
" for-loop_130)"
" lst_111)))"
"(void))))))))))"
" frontier-loop_0)"
" v_143)"
"(values))))"
"(let-values(((num-mutables_0)(hash-count mutables_0)))"
"(let-values(((share-step-positions_0)"
"(let-values(((share-steps_0)"
"(reverse$1"
"(let-values(((ht_88) shares_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_88)))"
"((letrec-values(((for-loop_131)"
"(lambda(fold-var_105 i_108)"
"(begin"
" 'for-loop"
"(if i_108"
"(let-values(((obj_0)"
"(hash-iterate-key"
" ht_88"
" i_108)))"
"(let-values(((fold-var_106)"
"(let-values(((fold-var_107)"
" fold-var_105))"
"(let-values(((fold-var_108)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" objs_0"
" obj_0))"
" fold-var_107))))"
"(values"
" fold-var_108)))))"
"(if(not #f)"
"(for-loop_131"
" fold-var_106"
"(hash-iterate-next"
" ht_88"
" i_108))"
" fold-var_106)))"
" fold-var_105)))))"
" for-loop_131)"
" null"
"(hash-iterate-first ht_88)))))))"
"(let-values(((lst_113)"
"(let-values(((share-steps12_0) share-steps_0)"
"((<13_0) <))"
"(sort7.1 #f #f share-steps12_0 <13_0)))"
"((start_20) num-mutables_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_113)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_20)))"
"((letrec-values(((for-loop_132)"
"(lambda(table_124 lst_114 pos_25)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_114) #t #f)"
"(let-values(((step_3)"
"(unsafe-car lst_114))"
"((rest_57)"
"(unsafe-cdr lst_114))"
"((pos_26) pos_25))"
"(let-values(((table_125)"
"(let-values(((table_35)"
" table_124))"
"(let-values(((table_36)"
"(let-values()"
"(let-values(((key_47"
" val_40)"
"(let-values()"
"(values"
" step_3"
" pos_26))))"
"(hash-set"
" table_35"
" key_47"
" val_40)))))"
"(values table_36)))))"
"(if(not #f)"
"(for-loop_132"
" table_125"
" rest_57"
"(+ pos_25 1))"
" table_125)))"
" table_124)))))"
" for-loop_132)"
" '#hasheqv()"
" lst_113"
" start_20))))))"
"(let-values(((stream_0) null))"
"(let-values(((stream-size_0) 0))"
"(let-values(((next-push-position_0)"
"(lambda()(begin 'next-push-position stream-size_0))))"
"(let-values(((quoted?_0)"
"(lambda(pos_27)"
"(begin"
" 'quoted?"
"(let-values(((v_146)"
"(list-ref"
" stream_0"
"(- stream-size_0(add1 pos_27)))))"
"(let-values(((or-part_173)(not(keyword? v_146))))"
"(if or-part_173 or-part_173(eq? '#:quote v_146))))))))"
"(let-values(((ser-reset!_0)"
"(lambda(pos_28)"
"(begin"
" 'ser-reset!"
"(begin"
"(set! stream_0"
"(list-tail stream_0(- stream-size_0 pos_28)))"
"(set! stream-size_0 pos_28))))))"
"(let-values(((reap-stream!_0)"
"(lambda()"
"(begin"
" 'reap-stream!"
"(begin0"
"(list->vector(reverse$1 stream_0))"
"(set! stream_0 null)"
"(set! stream-size_0 0))))))"
"(letrec-values(((ser-push!_16)"
"(case-lambda"
"((v_147)"
"(begin"
" 'ser-push!"
"(if(hash-ref shares_0 v_147 #f)"
"(let-values()"
"(let-values(((n_22)"
"(hash-ref"
" share-step-positions_0"
"(hash-ref objs_0 v_147))))"
"(begin"
"(ser-push!_16 'tag '#:ref)"
"(ser-push!_16 'exact n_22))))"
"(let-values(((c1_25)"
"(hash-ref mutables_0 v_147 #f)))"
"(if c1_25"
"((lambda(n_23)"
"(begin"
"(ser-push!_16 'tag '#:ref)"
"(ser-push!_16 'exact n_23)))"
" c1_25)"
"(let-values()"
"(ser-push-encoded!_0 v_147)))))))"
"((kind_5 v_148)"
"(let-values(((tmp_18) kind_5))"
"(if(equal? tmp_18 'exact)"
"(let-values()"
"(begin"
"(set! stream_0(cons v_148 stream_0))"
"(set! stream-size_0(add1 stream-size_0))))"
"(if(equal? tmp_18 'tag)"
"(let-values()(ser-push!_16 'exact v_148))"
"(if(equal? tmp_18 'reference)"
"(let-values()"
"(if(hash-ref shares_0 v_148 #f)"
"(let-values()"
"(let-values(((n_24)"
"(hash-ref"
" share-step-positions_0"
"(hash-ref"
" objs_0"
" v_148))))"
"(ser-push!_16 'exact n_24)))"
"(let-values(((c2_1)"
"(hash-ref"
" mutables_0"
" v_148"
" #f)))"
"(if c2_1"
"((lambda(n_25)"
"(ser-push!_16 'exact n_25))"
" c2_1)"
"(let-values()"
"(ser-push!_16 v_148))))))"
"(let-values()(ser-push!_16 v_148)))))))))"
"((ser-push-encoded!_0)"
"(lambda(v_149)"
"(begin"
" 'ser-push-encoded!"
"(if(keyword? v_149)"
"(let-values()"
"(begin"
"(ser-push!_16 'tag '#:quote)"
"(ser-push!_16 'exact v_149)))"
"(if(1/module-path-index? v_149)"
"(let-values()"
"(begin"
"(ser-push!_16 'tag '#:mpi)"
"(ser-push!_16"
" 'exact"
"(add-module-path-index!/pos"
" mpis_6"
" v_149))))"
"(if(serialize? v_149)"
"(let-values()"
"((serialize-ref v_149)"
" v_149"
" ser-push!_16"
" state_26))"
"(if(if(list? v_149)"
"(if(pair? v_149)"
"(pair?(cdr v_149))"
" #f)"
" #f)"
"(let-values()"
"(let-values(((start-pos_0)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'tag"
" '#:list)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'exact"
"(length v_149))"
"(values))))"
"(let-values(((all-quoted?_0)"
"(let-values(((lst_115)"
" v_149))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_115)))"
"((letrec-values(((for-loop_133)"
"(lambda(all-quoted?_1"
" lst_116)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_116)"
"(let-values(((i_109)"
"(unsafe-car"
" lst_116))"
"((rest_58)"
"(unsafe-cdr"
" lst_116)))"
"(let-values(((all-quoted?_2)"
"(let-values(((all-quoted?_3)"
" all-quoted?_1))"
"(let-values(((all-quoted?_4)"
"(let-values()"
"(let-values(((i-pos_0)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_16"
" i_109)"
"(if all-quoted?_3"
"(quoted?_0"
" i-pos_0)"
" #f))))))"
"(values"
" all-quoted?_4)))))"
"(if(not"
" #f)"
"(for-loop_133"
" all-quoted?_2"
" rest_58)"
" all-quoted?_2)))"
" all-quoted?_1)))))"
" for-loop_133)"
" #t"
" lst_115)))))"
"(if all-quoted?_0"
"(let-values()"
"(begin"
"(ser-reset!_0 start-pos_0)"
"(ser-push-optional-quote!_0)"
"(ser-push!_16"
" 'exact"
" v_149)))"
"(void)))))))"
"(if(pair? v_149)"
"(let-values()"
"(let-values(((start-pos_1)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'tag"
" '#:cons)"
"(values))))"
"(let-values(((a-pos_0)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_16"
"(car v_149))"
"(values))))"
"(let-values(((d-pos_0)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_16(cdr v_149))"
"(if(if(quoted?_0 a-pos_0)"
"(quoted?_0 d-pos_0)"
" #f)"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_1)"
"(ser-push-optional-quote!_0)"
"(ser-push!_16"
" 'exact"
" v_149)))"
"(void)))))))))"
"(if(box? v_149)"
"(let-values()"
"(let-values(((start-pos_2)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'tag"
" '#:box)"
"(values))))"
"(let-values(((v-pos_0)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_16(unbox v_149))"
"(if(quoted?_0 v-pos_0)"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_2)"
"(ser-push-optional-quote!_0)"
"(ser-push!_16"
" 'exact"
" v_149)))"
"(void)))))))"
"(if(vector? v_149)"
"(let-values()"
"(let-values(((start-pos_3)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'tag"
" '#:vector)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'exact"
"(vector-length"
" v_149))"
"(values))))"
"(let-values(((all-quoted?_5)"
"(let-values(((vec_42"
" len_17)"
"(let-values(((vec_43)"
" v_149))"
"(begin"
"(check-vector"
" vec_43)"
"(values"
" vec_43"
"(unsafe-vector-length"
" vec_43))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_38)"
"(lambda(all-quoted?_6"
" pos_29)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_29"
" len_17)"
"(let-values(((i_110)"
"(unsafe-vector-ref"
" vec_42"
" pos_29)))"
"(let-values(((all-quoted?_7)"
"(let-values(((all-quoted?_8)"
" all-quoted?_6))"
"(let-values(((all-quoted?_9)"
"(let-values()"
"(let-values(((i-pos_1)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_16"
" i_110)"
"(if all-quoted?_8"
"(quoted?_0"
" i-pos_1)"
" #f))))))"
"(values"
" all-quoted?_9)))))"
"(if(not"
" #f)"
"(for-loop_38"
" all-quoted?_7"
"(unsafe-fx+"
" 1"
" pos_29))"
" all-quoted?_7)))"
" all-quoted?_6)))))"
" for-loop_38)"
" #t"
" 0)))))"
"(if all-quoted?_5"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_3)"
"(ser-push-optional-quote!_0)"
"(ser-push!_16"
" 'exact"
" v_149)))"
"(void)))))))"
"(if(hash? v_149)"
"(let-values()"
"(let-values(((start-pos_4)"
"(next-push-position_0)))"
"(let-values(((as-set?_0)"
"(let-values(((ht_89)"
" v_149))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-values"
" ht_89)))"
"((letrec-values(((for-loop_134)"
"(lambda(result_66"
" i_111)"
"(begin"
" 'for-loop"
"(if i_111"
"(let-values(((val_41)"
"(hash-iterate-value"
" ht_89"
" i_111)))"
"(let-values(((result_67)"
"(let-values()"
"(let-values(((result_68)"
"(let-values()"
"(let-values()"
"(eq?"
" val_41"
" #t)))))"
"(values"
" result_68)))))"
"(if(if(not"
"((lambda x_49"
"(not"
" result_67))"
" val_41))"
"(not"
" #f)"
" #f)"
"(for-loop_134"
" result_67"
"(hash-iterate-next"
" ht_89"
" i_111))"
" result_67)))"
" result_66)))))"
" for-loop_134)"
" #t"
"(hash-iterate-first"
" ht_89))))))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'tag"
"(if as-set?_0"
"(if(hash-eq?"
" v_149)"
"(let-values()"
" '#:seteq)"
"(if(hash-eqv?"
" v_149)"
"(let-values()"
" '#:seteqv)"
"(let-values()"
" '#:set)))"
"(if(hash-eq?"
" v_149)"
"(let-values()"
" '#:hasheq)"
"(if(hash-eqv?"
" v_149)"
"(let-values()"
" '#:hasheqv)"
"(let-values()"
" '#:hash)))))"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'exact"
"(hash-count"
" v_149))"
"(values))))"
"(let-values(((ks_0)"
"(sorted-hash-keys"
" v_149)))"
"(let-values(((all-quoted?_10)"
"(let-values(((lst_117)"
" ks_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_117)))"
"((letrec-values(((for-loop_135)"
"(lambda(all-quoted?_11"
" lst_118)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_118)"
"(let-values(((k_23)"
"(unsafe-car"
" lst_118))"
"((rest_59)"
"(unsafe-cdr"
" lst_118)))"
"(let-values(((all-quoted?_12)"
"(let-values(((all-quoted?_13)"
" all-quoted?_11))"
"(let-values(((all-quoted?_14)"
"(let-values()"
"(let-values(((k-pos_0)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" k_23)"
"(values))))"
"(let-values(((v-pos_1)"
"(next-push-position_0)))"
"(begin"
"(if as-set?_0"
"(void)"
"(let-values()"
"(ser-push!_16"
"(hash-ref"
" v_149"
" k_23))))"
"(if all-quoted?_13"
"(if(quoted?_0"
" k-pos_0)"
"(let-values(((or-part_174)"
" as-set?_0))"
"(if or-part_174"
" or-part_174"
"(quoted?_0"
" v-pos_1)))"
" #f)"
" #f))))))))"
"(values"
" all-quoted?_14)))))"
"(if(not"
" #f)"
"(for-loop_135"
" all-quoted?_12"
" rest_59)"
" all-quoted?_12)))"
" all-quoted?_11)))))"
" for-loop_135)"
" #t"
" lst_117)))))"
"(if all-quoted?_10"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_4)"
"(ser-push-optional-quote!_0)"
"(ser-push!_16"
" 'exact"
" v_149)))"
"(void)))))))))"
"(let-values(((c3_0)"
"(prefab-struct-key"
" v_149)))"
"(if c3_0"
"((lambda(k_24)"
"(let-values(((vec_44)"
"(struct->vector"
" v_149)))"
"(let-values(((start-pos_5)"
"(next-push-position_0)))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'tag"
" '#:prefab)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'exact"
" k_24)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'exact"
"(sub1"
"(vector-length"
" vec_44)))"
"(values))))"
"(let-values(((all-quoted?_15)"
"(let-values(((v*_4"
" start*_3"
" stop*_4"
" step*_3)"
"(normalise-inputs"
" 'in-vector"
"                                                                                                                                   \"vector\""
"(lambda(x_50)"
"(vector?"
" x_50))"
"(lambda(x_51)"
"(unsafe-vector-length"
" x_51))"
" vec_44"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_42)"
"(lambda(all-quoted?_16"
" idx_3)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" idx_3"
" stop*_4)"
"(let-values(((i_112)"
"(unsafe-vector-ref"
" v*_4"
" idx_3)))"
"(let-values(((all-quoted?_17)"
"(let-values(((all-quoted?_18)"
" all-quoted?_16))"
"(let-values(((all-quoted?_19)"
"(let-values()"
"(let-values(((i-pos_2)"
"(next-push-position_0)))"
"(begin"
"(ser-push!_16"
" i_112)"
"(if all-quoted?_18"
"(quoted?_0"
" i-pos_2)"
" #f))))))"
"(values"
" all-quoted?_19)))))"
"(if(not"
" #f)"
"(for-loop_42"
" all-quoted?_17"
"(unsafe-fx+"
" idx_3"
" 1))"
" all-quoted?_17)))"
" all-quoted?_16)))))"
" for-loop_42)"
" #t"
" start*_3)))))"
"(if all-quoted?_15"
"(let-values()"
"(begin"
"(ser-reset!_0"
" start-pos_5)"
"(ser-push-optional-quote!_0)"
"(ser-push!_16"
" 'exact"
" v_149)))"
"(void)))))))))"
" c3_0)"
"(if(srcloc? v_149)"
"(let-values()"
"(if(path?"
"(srcloc-source v_149))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_0)"
"(ser-push!_16"
" 'exact"
" v_149)))"
"(let-values()"
"(begin"
"(ser-push!_16"
" 'tag"
" '#:srcloc)"
"(ser-push!_16"
"(srcloc-source"
" v_149))"
"(ser-push!_16"
"(srcloc-line v_149))"
"(ser-push!_16"
"(srcloc-column"
" v_149))"
"(ser-push!_16"
"(srcloc-position"
" v_149))"
"(ser-push!_16"
"(srcloc-span"
" v_149))))))"
"(let-values()"
"(begin"
"(ser-push-optional-quote!_0)"
"(ser-push!_16"
" 'exact"
" v_149)))))))))))))))))"
"((ser-push-optional-quote!_0)"
"(lambda()(begin 'ser-push-optional-quote!(void)))))"
"(let-values(((ser-shell!_0)"
"(lambda(v_150)"
"(begin"
" 'ser-shell!"
"(if(serialize-fill!? v_150)"
"(let-values()"
"((serialize-ref v_150)"
" v_150"
" ser-push!_16"
" state_26))"
"(if(box? v_150)"
"(let-values()(ser-push!_16 'tag '#:box))"
"(if(vector? v_150)"
"(let-values()"
"(begin"
"(ser-push!_16 'tag '#:vector)"
"(ser-push!_16"
" 'exact"
"(vector-length v_150))))"
"(if(hash? v_150)"
"(let-values()"
"(ser-push!_16"
" 'tag"
"(if(hash-eq? v_150)"
"(let-values() '#:hasheq)"
"(if(hash-eqv? v_150)"
"(let-values() '#:hasheqv)"
"(let-values() '#:hash)))))"
"(let-values()"
"(error"
" 'ser-shell"
"                                                                               \"unknown mutable: ~e\""
" v_150))))))))))"
"(let-values(((ser-shell-fill!_0)"
"(lambda(v_80)"
"(begin"
" 'ser-shell-fill!"
"(if(serialize-fill!? v_80)"
"(let-values()"
"((serialize-fill!-ref v_80)"
" v_80"
" ser-push!_16"
" state_26))"
"(if(box? v_80)"
"(let-values()"
"(begin"
"(ser-push!_16 'tag '#:set-box!)"
"(ser-push!_16(unbox v_80))))"
"(if(vector? v_80)"
"(let-values()"
"(begin"
"(ser-push!_16 'tag '#:set-vector!)"
"(ser-push!_16"
" 'exact"
"(vector-length v_80))"
"(let-values(((vec_45 len_18)"
"(let-values(((vec_46)"
" v_80))"
"(begin"
"(check-vector vec_46)"
"(values"
" vec_46"
"(unsafe-vector-length"
" vec_46))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_136)"
"(lambda(pos_30)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_30"
" len_18)"
"(let-values(((v_151)"
"(unsafe-vector-ref"
" vec_45"
" pos_30)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push!_16"
" v_151))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_136"
"(unsafe-fx+"
" 1"
" pos_30))"
"(values))))"
"(values))))))"
" for-loop_136)"
" 0)))"
"(void)))"
"(if(hash? v_80)"
"(let-values()"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'tag"
" '#:set-hash!)"
"(values))))"
"(let-values((()"
"(begin"
"(ser-push!_16"
" 'exact"
"(hash-count v_80))"
"(values))))"
"(let-values(((ks_1)"
"(sorted-hash-keys"
" v_80)))"
"(begin"
"(let-values(((lst_119) ks_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_119)))"
"((letrec-values(((for-loop_137)"
"(lambda(lst_120)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_120)"
"(let-values(((k_25)"
"(unsafe-car"
" lst_120))"
"((rest_60)"
"(unsafe-cdr"
" lst_120)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(ser-push!_16"
" k_25)"
"(ser-push!_16"
"(hash-ref"
" v_80"
" k_25))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_137"
" rest_60)"
"(values))))"
"(values))))))"
" for-loop_137)"
" lst_119)))"
"(void))))))"
"(let-values()"
"(error"
" 'ser-shell-fill"
"                                                                                 \"unknown mutable: ~e\""
" v_80))))))))))"
"(let-values(((rev-mutables_0)"
"(let-values(((ht_90) mutables_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_90)))"
"((letrec-values(((for-loop_138)"
"(lambda(table_126 i_113)"
"(begin"
" 'for-loop"
"(if i_113"
"(let-values(((k_26"
" v_152)"
"(hash-iterate-key+value"
" ht_90"
" i_113)))"
"(let-values(((table_59)"
"(let-values(((table_60)"
" table_126))"
"(let-values(((table_127)"
"(let-values()"
"(let-values(((key_48"
" val_42)"
"(let-values()"
"(values"
" v_152"
" k_26))))"
"(hash-set"
" table_60"
" key_48"
" val_42)))))"
"(values"
" table_127)))))"
"(if(not #f)"
"(for-loop_138"
" table_59"
"(hash-iterate-next"
" ht_90"
" i_113))"
" table_59)))"
" table_126)))))"
" for-loop_138)"
" '#hasheqv()"
"(hash-iterate-first ht_90))))))"
"(let-values(((mutable-shell-bindings_0)"
"(begin"
"(begin"
"(let-values(((start_21) 0)"
"((end_13)"
"(hash-count mutables_0))"
"((inc_7) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range start_21 end_13 inc_7)))"
"((letrec-values(((for-loop_139)"
"(lambda(pos_31)"
"(begin"
" 'for-loop"
"(if(<"
" pos_31"
" end_13)"
"(let-values(((i_59)"
" pos_31))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell!_0"
"(hash-ref"
" rev-mutables_0"
" i_59)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_139"
"(+"
" pos_31"
" inc_7))"
"(values))))"
"(values))))))"
" for-loop_139)"
" start_21)))"
"(void))"
"(reap-stream!_0))))"
"(let-values(((rev-shares_0)"
"(let-values(((ht_91) shares_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-keys ht_91)))"
"((letrec-values(((for-loop_140)"
"(lambda(table_128 i_60)"
"(begin"
" 'for-loop"
"(if i_60"
"(let-values(((obj_1)"
"(hash-iterate-key"
" ht_91"
" i_60)))"
"(let-values(((table_129)"
"(let-values(((table_130)"
" table_128))"
"(let-values(((table_131)"
"(let-values()"
"(let-values(((key_49"
" val_43)"
"(let-values()"
"(values"
"(hash-ref"
" share-step-positions_0"
"(hash-ref"
" objs_0"
" obj_1))"
" obj_1))))"
"(hash-set"
" table_130"
" key_49"
" val_43)))))"
"(values"
" table_131)))))"
"(if(not #f)"
"(for-loop_140"
" table_129"
"(hash-iterate-next"
" ht_91"
" i_60))"
" table_129)))"
" table_128)))))"
" for-loop_140)"
" '#hasheqv()"
"(hash-iterate-first ht_91))))))"
"(let-values(((shared-bindings_0)"
"(begin"
"(begin"
"(let-values(((start_22) num-mutables_0)"
"((end_14)"
"(+"
" num-mutables_0"
"(hash-count shares_0)))"
"((inc_8) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range"
" start_22"
" end_14"
" inc_8)))"
"((letrec-values(((for-loop_141)"
"(lambda(pos_32)"
"(begin"
" 'for-loop"
"(if(<"
" pos_32"
" end_14)"
"(let-values(((i_114)"
" pos_32))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-push-encoded!_0"
"(hash-ref"
" rev-shares_0"
" i_114)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_141"
"(+"
" pos_32"
" inc_8))"
"(values))))"
"(values))))))"
" for-loop_141)"
" start_22)))"
"(void))"
"(reap-stream!_0))))"
"(let-values(((mutable-fills_0)"
"(begin"
"(begin"
"(let-values(((start_23) 0)"
"((end_15)"
"(hash-count mutables_0))"
"((inc_9) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range"
" start_23"
" end_15"
" inc_9)))"
"((letrec-values(((for-loop_142)"
"(lambda(pos_33)"
"(begin"
" 'for-loop"
"(if(<"
" pos_33"
" end_15)"
"(let-values(((i_115)"
" pos_33))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(ser-shell-fill!_0"
"(hash-ref"
" rev-mutables_0"
" i_115)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_142"
"(+"
" pos_33"
" inc_9))"
"(values))))"
"(values))))))"
" for-loop_142)"
" start_23)))"
"(void))"
"(reap-stream!_0))))"
"(list"
" 'deserialize"
" mpi-vector-id"
"(if syntax-support?_0 inspector-id #f)"
"(if syntax-support?_0 bulk-binding-registry-id #f)"
"(list 'quote(hash-count mutables_0))"
"(list 'quote mutable-shell-bindings_0)"
"(list 'quote(hash-count shares_0))"
"(list 'quote shared-bindings_0)"
"(list 'quote mutable-fills_0)"
"(list"
" 'quote"
"(begin"
"(ser-push!_16 v_143)"
"(reap-stream!_0))))))))))))))))))))))))))))))))))))"
"(define-values"
"(sorted-hash-keys)"
"(lambda(ht_92)"
"(begin"
"(let-values(((ks_2)(hash-keys ht_92)))"
"(if(null? ks_2)"
"(let-values() ks_2)"
"(if(null?(cdr ks_2))"
"(let-values() ks_2)"
"(if(andmap2 symbol? ks_2)"
"(let-values()"
"(let-values(((ks14_0) ks_2)((symbol<?15_0) symbol<?))(sort7.1 #f #f ks14_0 symbol<?15_0)))"
"(if(andmap2 scope? ks_2)"
"(let-values()"
"(let-values(((ks16_0) ks_2)((scope<?17_0) scope<?))(sort7.1 #f #f ks16_0 scope<?17_0)))"
"(if(andmap2 shifted-multi-scope? ks_2)"
"(let-values()"
"(let-values(((ks18_0) ks_2)((shifted-multi-scope<?19_0) shifted-multi-scope<?))"
"(sort7.1 #f #f ks18_0 shifted-multi-scope<?19_0)))"
"(if(andmap2 real? ks_2)"
"(let-values()(let-values(((ks20_0) ks_2)((<21_0) <))(sort7.1 #f #f ks20_0 <21_0)))"
"(let-values() ks_2)))))))))))"
"(define-values"
"(deserialize)"
"(lambda(mpis_7"
" inspector_6"
" bulk-binding-registry_5"
" num-mutables_1"
" mutable-vec_0"
" num-shared_0"
" shared-vec_0"
" mutable-fill-vec_0"
" result-vec_0)"
"(begin"
"(let-values(((shared_0)(make-vector(+ num-mutables_1 num-shared_0) 'uninit)))"
"(let-values((()"
"(begin"
"(let-values(((start_24) 0)((end_16) num-mutables_1)((inc_10) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_24 end_16 inc_10)))"
"((letrec-values(((for-loop_143)"
"(lambda(pos_34 pos_35)"
"(begin"
" 'for-loop"
"(if(< pos_35 end_16)"
"(let-values(((i_116) pos_35))"
"(let-values(((pos_36)"
"(let-values(((pos_37) pos_34))"
"(let-values(((pos_38)"
"(let-values()"
"(let-values(((d_22 next-pos_0)"
"(decode-shell"
" mutable-vec_0"
" pos_37"
" mpis_7"
" inspector_6"
" bulk-binding-registry_5"
" shared_0)))"
"(begin"
"(vector-set!"
" shared_0"
" i_116"
" d_22)"
" next-pos_0)))))"
"(values pos_38)))))"
"(if(not #f)(for-loop_143 pos_36(+ pos_35 inc_10)) pos_36)))"
" pos_34)))))"
" for-loop_143)"
" 0"
" start_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_25) num-mutables_1)"
"((end_17)(+ num-mutables_1 num-shared_0))"
"((inc_11) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_25 end_17 inc_11)))"
"((letrec-values(((for-loop_144)"
"(lambda(pos_39 pos_40)"
"(begin"
" 'for-loop"
"(if(< pos_40 end_17)"
"(let-values(((i_117) pos_40))"
"(let-values(((pos_41)"
"(let-values(((pos_42) pos_39))"
"(let-values(((pos_43)"
"(let-values()"
"(let-values(((d_23 next-pos_1)"
"(decode"
" shared-vec_0"
" pos_42"
" mpis_7"
" inspector_6"
" bulk-binding-registry_5"
" shared_0)))"
"(begin"
"(vector-set!"
" shared_0"
" i_117"
" d_23)"
" next-pos_1)))))"
"(values pos_43)))))"
"(if(not #f)(for-loop_144 pos_41(+ pos_40 inc_11)) pos_41)))"
" pos_39)))))"
" for-loop_144)"
" 0"
" start_25)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((start_26) 0)"
"((end_18) num-mutables_1)"
"((inc_12) 1)"
"((vec_47 len_19)"
"(let-values(((vec_48) shared_0))"
"(begin"
"(check-vector vec_48)"
"(values vec_48(unsafe-vector-length vec_48))))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_26 end_18 inc_12)))"
" #f"
"((letrec-values(((for-loop_145)"
"(lambda(pos_44 pos_45 pos_46)"
"(begin"
" 'for-loop"
"(if(if(< pos_45 end_18)(unsafe-fx< pos_46 len_19) #f)"
"(let-values(((v_153)(unsafe-vector-ref vec_47 pos_46)))"
"(let-values(((pos_47)"
"(let-values(((pos_48) pos_44))"
"(let-values(((pos_49)"
"(let-values()"
"(decode-fill!"
" v_153"
" mutable-fill-vec_0"
" pos_48"
" mpis_7"
" inspector_6"
" bulk-binding-registry_5"
" shared_0))))"
"(values pos_49)))))"
"(if(not #f)"
"(for-loop_145"
" pos_47"
"(+ pos_45 inc_12)"
"(unsafe-fx+ 1 pos_46))"
" pos_47)))"
" pos_44)))))"
" for-loop_145)"
" 0"
" start_26"
" 0)))"
"(values))))"
"(let-values(((result_69 done-pos_0)"
"(decode result-vec_0 0 mpis_7 inspector_6 bulk-binding-registry_5 shared_0)))"
" result_69))))))))"
"(define-values"
"(decode-shell)"
"(lambda(vec_49 pos_50 mpis_8 inspector_7 bulk-binding-registry_6 shared_1)"
"(begin"
"(let-values(((tmp_19)(vector*-ref vec_49 pos_50)))"
"(if(equal? tmp_19 '#:box)"
"(let-values()(values(box #f)(add1 pos_50)))"
"(if(equal? tmp_19 '#:vector)"
"(let-values()(values(make-vector(vector*-ref vec_49(add1 pos_50)))(+ pos_50 2)))"
"(if(equal? tmp_19 '#:hash)"
"(let-values()(values(make-hasheq)(add1 pos_50)))"
"(if(equal? tmp_19 '#:hasheq)"
"(let-values()(values(make-hasheq)(add1 pos_50)))"
"(if(equal? tmp_19 '#:hasheqv)"
"(let-values()(values(make-hasheqv)(add1 pos_50)))"
"(let-values()(decode vec_49 pos_50 mpis_8 inspector_7 bulk-binding-registry_6 shared_1)))))))))))"
"(define-values"
"(decode)"
"(lambda(vec_50 pos_51 mpis_9 inspector_8 bulk-binding-registry_7 shared_2)"
"(begin"
"(let-values()"
"(let-values(((tmp_20)(vector*-ref vec_50 pos_51)))"
"(let-values(((index_0)"
"(if(keyword? tmp_20)"
"(hash-ref"
" '#hasheq((#:scope+kind . 17)"
"(#:seteqv . 14)"
"(#:ref . 1)"
"(#:list . 12)"
"(#:vector . 12)"
"(#:module-binding . 24)"
"(#:set . 14)"
"(#:srcloc . 7)"
"(#:bulk-binding-at . 22)"
"(#:multi-scope . 19)"
"(#:hasheq . 13)"
"(#:simple-module-binding . 25)"
"(#:scope . 16)"
"(#:bulk-binding-registry . 3)"
"(#:hash . 13)"
"(#:shifted-multi-scope . 20)"
"(#:mpi . 9)"
"(#:quote . 8)"
"(#:prefab . 15)"
"(#:box . 10)"
"(#:local-binding . 26)"
"(#:bulk-binding . 27)"
"(#:inspector . 2)"
"(#:table-with-bulk-bindings . 21)"
"(#:interned-scope . 18)"
"(#:seteq . 14)"
"(#:provided . 28)"
"(#:syntax . 4)"
"(#:cons . 11)"
"(#:hasheqv . 13)"
"(#:datum->syntax . 5)"
"(#:syntax+props . 6)"
"(#:representative-scope . 23))"
" tmp_20"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_0 14)"
"(if(unsafe-fx< index_0 6)"
"(if(unsafe-fx< index_0 2)"
"(if(unsafe-fx< index_0 1)"
"(let-values()(values(vector*-ref vec_50 pos_51)(add1 pos_51)))"
"(let-values()(values(vector*-ref shared_2(vector*-ref vec_50(add1 pos_51)))(+ pos_51 2))))"
"(if(unsafe-fx< index_0 3)"
"(let-values()(values inspector_8(add1 pos_51)))"
"(if(unsafe-fx< index_0 4)"
"(let-values()(values bulk-binding-registry_7(add1 pos_51)))"
"(if(unsafe-fx< index_0 5)"
"(let-values()"
"(let-values(((content_8 next-pos_2)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((context_2 next-pos_3)"
"(let-values(((i_118)(vector*-ref vec_50 next-pos_2)))"
"(if(exact-integer? i_118)"
"(values(vector*-ref shared_2 i_118)(add1 next-pos_2))"
"(decode"
" vec_50"
" next-pos_2"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))))"
"(let-values(((srcloc_3 next-pos_4)"
"(let-values(((i_119)(vector*-ref vec_50 next-pos_3)))"
"(if(exact-integer? i_119)"
"(values(vector*-ref shared_2 i_119)(add1 next-pos_3))"
"(decode"
" vec_50"
" next-pos_3"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))))"
"(values"
"(deserialize-syntax content_8 context_2 srcloc_3 #f #f inspector_8)"
" next-pos_4)))))"
"(let-values()"
"(let-values(((content_9 next-pos_5)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((context_3 next-pos_6)"
"(let-values(((i_120)(vector*-ref vec_50 next-pos_5)))"
"(if(exact-integer? i_120)"
"(values(vector*-ref shared_2 i_120)(add1 next-pos_5))"
"(decode"
" vec_50"
" next-pos_5"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))))"
"(let-values(((srcloc_4 next-pos_7)"
"(let-values(((i_121)(vector*-ref vec_50 next-pos_6)))"
"(if(exact-integer? i_121)"
"(values(vector*-ref shared_2 i_121)(add1 next-pos_6))"
"(decode"
" vec_50"
" next-pos_6"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))))"
"(values"
"(deserialize-datum->syntax content_9 context_3 srcloc_4 inspector_8)"
" next-pos_7)))))))))"
"(if(unsafe-fx< index_0 9)"
"(if(unsafe-fx< index_0 7)"
"(let-values()"
"(let-values(((content_10 next-pos_8)"
"(decode vec_50(add1 pos_51) mpis_9 inspector_8 bulk-binding-registry_7 shared_2)))"
"(let-values(((context_4 next-pos_9)"
"(let-values(((i_122)(vector*-ref vec_50 next-pos_8)))"
"(if(exact-integer? i_122)"
"(values(vector*-ref shared_2 i_122)(add1 next-pos_8))"
"(decode"
" vec_50"
" next-pos_8"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))))"
"(let-values(((srcloc_5 next-pos_10)"
"(let-values(((i_123)(vector*-ref vec_50 next-pos_9)))"
"(if(exact-integer? i_123)"
"(values(vector*-ref shared_2 i_123)(add1 next-pos_9))"
"(decode"
" vec_50"
" next-pos_9"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))))"
"(let-values(((props_1 next-pos_11)"
"(decode"
" vec_50"
" next-pos_10"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((tamper_2 next-pos_12)"
"(decode"
" vec_50"
" next-pos_11"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-syntax content_10 context_4 srcloc_5 props_1 tamper_2 inspector_8)"
" next-pos_12)))))))"
"(if(unsafe-fx< index_0 8)"
"(let-values()"
"(let-values(((source_0 next-pos_13)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((line_0 next-pos_14)"
"(decode"
" vec_50"
" next-pos_13"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((column_0 next-pos_15)"
"(decode"
" vec_50"
" next-pos_14"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((position_0 next-pos_16)"
"(decode"
" vec_50"
" next-pos_15"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((span_0 next-pos_17)"
"(decode"
" vec_50"
" next-pos_16"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values(srcloc source_0 line_0 column_0 position_0 span_0) next-pos_17)))))))"
"(let-values()(values(vector*-ref vec_50(add1 pos_51))(+ pos_51 2)))))"
"(if(unsafe-fx< index_0 11)"
"(if(unsafe-fx< index_0 10)"
"(let-values()(values(vector*-ref mpis_9(vector*-ref vec_50(add1 pos_51)))(+ pos_51 2)))"
"(let-values()"
"(let-values(((v_154 next-pos_18)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values(box-immutable v_154) next-pos_18))))"
"(if(unsafe-fx< index_0 12)"
"(let-values()"
"(let-values(((a_42 next-pos_19)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((d_24 next-pos_20)"
"(decode"
" vec_50"
" next-pos_19"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values(cons a_42 d_24) next-pos_20))))"
"(if(unsafe-fx< index_0 13)"
"(let-values()"
"(let-values(((len_20)(vector*-ref vec_50(add1 pos_51))))"
"(let-values(((r_29)(make-vector len_20)))"
"(let-values(((next-pos_21)"
"(let-values(((start_27) 0)((end_19) len_20)((inc_13) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_27 end_19 inc_13)))"
"((letrec-values(((for-loop_146)"
"(lambda(pos_52 pos_53)"
"(begin"
" 'for-loop"
"(if(< pos_53 end_19)"
"(let-values(((i_124) pos_53))"
"(let-values(((pos_54)"
"(let-values(((pos_55) pos_52))"
"(let-values(((pos_56)"
"(let-values()"
"(let-values(((v_155"
" next-pos_22)"
"(let-values(((v_156"
" next-pos_23)"
"(decode"
" vec_50"
" pos_55"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
" v_156"
" next-pos_23))))"
"(begin"
"(vector-set!"
" r_29"
" i_124"
" v_155)"
" next-pos_22)))))"
"(values pos_56)))))"
"(if(not #f)"
"(for-loop_146 pos_54(+ pos_53 inc_13))"
" pos_54)))"
" pos_52)))))"
" for-loop_146)"
"(+ pos_51 2)"
" start_27)))))"
"(values"
"(if(eq?(vector*-ref vec_50 pos_51) '#:list)"
"(vector->list r_29)"
"(vector->immutable-vector r_29))"
" next-pos_21)))))"
"(let-values()"
"(let-values(((ht_55)"
"(let-values(((tmp_21)(vector*-ref vec_50 pos_51)))"
"(if(equal? tmp_21 '#:hash)"
"(let-values()(hash))"
"(if(equal? tmp_21 '#:hasheq)"
"(let-values()(hasheq))"
"(if(equal? tmp_21 '#:hasheqv)"
"(let-values()(hasheqv))"
"(let-values()(void))))))))"
"(let-values(((len_21)(vector*-ref vec_50(add1 pos_51))))"
"(let-values(((start_28) 0)((end_20) len_21)((inc_14) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_28 end_20 inc_14)))"
"((letrec-values(((for-loop_147)"
"(lambda(ht_93 pos_57 pos_58)"
"(begin"
" 'for-loop"
"(if(< pos_58 end_20)"
"(let-values()"
"(let-values(((ht_94 pos_59)"
"(let-values(((ht_95) ht_93)"
"((pos_60) pos_57))"
"(let-values(((ht_96 pos_61)"
"(let-values()"
"(let-values(((k_27"
" next-pos_24)"
"(decode"
" vec_50"
" pos_60"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((v_157"
" next-pos_25)"
"(decode"
" vec_50"
" next-pos_24"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(hash-set"
" ht_95"
" k_27"
" v_157)"
" next-pos_25))))))"
"(values ht_96 pos_61)))))"
"(if(not #f)"
"(for-loop_147 ht_94 pos_59(+ pos_58 inc_14))"
"(values ht_94 pos_59))))"
"(values ht_93 pos_57))))))"
" for-loop_147)"
" ht_55"
"(+ pos_51 2)"
" start_28)))))))))))"
"(if(unsafe-fx< index_0 21)"
"(if(unsafe-fx< index_0 17)"
"(if(unsafe-fx< index_0 15)"
"(let-values()"
"(let-values(((s_192)"
"(let-values(((tmp_22)(vector*-ref vec_50 pos_51)))"
"(if(equal? tmp_22 '#:set)"
"(let-values()(set))"
"(if(equal? tmp_22 '#:seteq)"
"(let-values()(seteq))"
"(if(equal? tmp_22 '#:seteqv)"
"(let-values()(seteqv))"
"(let-values()(void))))))))"
"(let-values(((len_22)(vector*-ref vec_50(add1 pos_51))))"
"(let-values(((start_29) 0)((end_21) len_22)((inc_15) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_29 end_21 inc_15)))"
"((letrec-values(((for-loop_148)"
"(lambda(s_193 pos_62 pos_63)"
"(begin"
" 'for-loop"
"(if(< pos_63 end_21)"
"(let-values()"
"(let-values(((s_194 pos_64)"
"(let-values(((s_195) s_193)((pos_65) pos_62))"
"(let-values(((s_196 pos_66)"
"(let-values()"
"(let-values(((k_28 next-pos_26)"
"(decode"
" vec_50"
" pos_65"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(set-add s_195 k_28)"
" next-pos_26)))))"
"(values s_196 pos_66)))))"
"(if(not #f)"
"(for-loop_148 s_194 pos_64(+ pos_63 inc_15))"
"(values s_194 pos_64))))"
"(values s_193 pos_62))))))"
" for-loop_148)"
" s_192"
"(+ pos_51 2)"
" start_29))))))"
"(if(unsafe-fx< index_0 16)"
"(let-values()"
"(let-values(((key_50 next-pos_27)"
"(let-values(((k_29 next-pos_28)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values k_29 next-pos_28))))"
"(let-values(((len_23)(vector*-ref vec_50 next-pos_27)))"
"(let-values(((r_30 done-pos_1)"
"(let-values(((start_30) 0)((end_22) len_23)((inc_16) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_30 end_22 inc_16)))"
"((letrec-values(((for-loop_149)"
"(lambda(r_31 pos_67 pos_68)"
"(begin"
" 'for-loop"
"(if(< pos_68 end_22)"
"(let-values()"
"(let-values(((r_32 pos_69)"
"(let-values(((r_33) r_31)"
"((pos_70) pos_67))"
"(let-values(((r_34 pos_71)"
"(let-values()"
"(let-values(((v_158"
" next-pos_29)"
"(decode"
" vec_50"
" pos_70"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(cons"
" v_158"
" r_33)"
" next-pos_29)))))"
"(values r_34 pos_71)))))"
"(if(not #f)"
"(for-loop_149 r_32 pos_69(+ pos_68 inc_16))"
"(values r_32 pos_69))))"
"(values r_31 pos_67))))))"
" for-loop_149)"
" null"
"(add1 next-pos_27)"
" start_30)))))"
"(values(apply make-prefab-struct key_50(reverse$1 r_30)) done-pos_1)))))"
"(let-values()(values(deserialize-scope)(add1 pos_51)))))"
"(if(unsafe-fx< index_0 18)"
"(let-values()"
"(let-values(((kind_6 next-pos_30)"
"(decode vec_50(add1 pos_51) mpis_9 inspector_8 bulk-binding-registry_7 shared_2)))"
"(values(deserialize-scope kind_6) next-pos_30)))"
"(if(unsafe-fx< index_0 19)"
"(let-values()"
"(let-values(((id_23 next-pos_31)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values(make-interned-scope id_23) next-pos_31)))"
"(if(unsafe-fx< index_0 20)"
"(let-values()"
"(let-values(((name_38 next-pos_32)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((scopes_21 next-pos_33)"
"(decode"
" vec_50"
" next-pos_32"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-multi-scope name_38 scopes_21) next-pos_33))))"
"(let-values()"
"(let-values(((phase_48 next-pos_34)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((multi-scope_2 next-pos_35)"
"(decode"
" vec_50"
" next-pos_34"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-shifted-multi-scope phase_48 multi-scope_2) next-pos_35))))))))"
"(if(unsafe-fx< index_0 24)"
"(if(unsafe-fx< index_0 22)"
"(let-values()"
"(let-values(((syms_13 next-pos_36)"
"(decode vec_50(add1 pos_51) mpis_9 inspector_8 bulk-binding-registry_7 shared_2)))"
"(let-values(((bulk-bindings_4 next-pos_37)"
"(decode vec_50 next-pos_36 mpis_9 inspector_8 bulk-binding-registry_7 shared_2)))"
"(values(deserialize-table-with-bulk-bindings syms_13 bulk-bindings_4) next-pos_37))))"
"(if(unsafe-fx< index_0 23)"
"(let-values()"
"(let-values(((scopes_22 next-pos_38)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((bulk_5 next-pos_39)"
"(decode"
" vec_50"
" next-pos_38"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-bulk-binding-at scopes_22 bulk_5) next-pos_39))))"
"(let-values()"
"(let-values(((kind_7 next-pos_40)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((phase_49 next-pos_41)"
"(decode"
" vec_50"
" next-pos_40"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-representative-scope kind_7 phase_49) next-pos_41))))))"
"(if(unsafe-fx< index_0 26)"
"(if(unsafe-fx< index_0 25)"
"(let-values()"
"(let-values(((module_4 next-pos_42)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((sym_32 next-pos_43)"
"(decode"
" vec_50"
" next-pos_42"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((phase_50 next-pos_44)"
"(decode"
" vec_50"
" next-pos_43"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-module_4 next-pos_45)"
"(decode"
" vec_50"
" next-pos_44"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-phase_3 next-pos_46)"
"(decode"
" vec_50"
" next-pos_45"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-sym_3 next-pos_47)"
"(decode"
" vec_50"
" next-pos_46"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-require-phase_3 next-pos_48)"
"(decode"
" vec_50"
" next-pos_47"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((free=id_8 next-pos_49)"
"(decode"
" vec_50"
" next-pos_48"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((extra-inspector_3 next-pos_50)"
"(decode"
" vec_50"
" next-pos_49"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((extra-nominal-bindings_3 next-pos_51)"
"(decode"
" vec_50"
" next-pos_50"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-full-module-binding"
" module_4"
" sym_32"
" phase_50"
" nominal-module_4"
" nominal-phase_3"
" nominal-sym_3"
" nominal-require-phase_3"
" free=id_8"
" extra-inspector_3"
" extra-nominal-bindings_3)"
" next-pos_51))))))))))))"
"(let-values()"
"(let-values(((module_5 next-pos_52)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((sym_33 next-pos_53)"
"(decode"
" vec_50"
" next-pos_52"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((phase_51 next-pos_54)"
"(decode"
" vec_50"
" next-pos_53"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((nominal-module_5 next-pos_55)"
"(decode"
" vec_50"
" next-pos_54"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-simple-module-binding module_5 sym_33 phase_51 nominal-module_5)"
" next-pos_55)))))))"
"(if(unsafe-fx< index_0 27)"
"(let-values()"
"(let-values(((key_51 next-pos_56)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((free=id_9 next-pos_57)"
"(decode"
" vec_50"
" next-pos_56"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values(deserialize-full-local-binding key_51 free=id_9) next-pos_57))))"
"(if(unsafe-fx< index_0 28)"
"(let-values()"
"(let-values(((prefix_3 next-pos_58)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((excepts_3 next-pos_59)"
"(decode"
" vec_50"
" next-pos_58"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((mpi_28 next-pos_60)"
"(decode"
" vec_50"
" next-pos_59"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((provide-phase-level_2 next-pos_61)"
"(decode"
" vec_50"
" next-pos_60"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((phase-shift_5 next-pos_62)"
"(decode"
" vec_50"
" next-pos_61"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((bulk-binding-registry_8 next-pos_63)"
"(decode"
" vec_50"
" next-pos_62"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-bulk-binding"
" prefix_3"
" excepts_3"
" mpi_28"
" provide-phase-level_2"
" phase-shift_5"
" bulk-binding-registry_8)"
" next-pos_63))))))))"
"(let-values()"
"(let-values(((binding_10 next-pos_64)"
"(decode"
" vec_50"
"(add1 pos_51)"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((protected?_2 next-pos_65)"
"(decode"
" vec_50"
" next-pos_64"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(let-values(((syntax?_3 next-pos_66)"
"(decode"
" vec_50"
" next-pos_65"
" mpis_9"
" inspector_8"
" bulk-binding-registry_7"
" shared_2)))"
"(values"
"(deserialize-provided binding_10 protected?_2 syntax?_3)"
" next-pos_66)))))))))))))))))"
"(define-values"
"(decode-fill!)"
"(lambda(v_159 vec_51 pos_72 mpis_10 inspector_9 bulk-binding-registry_9 shared_3)"
"(begin"
"(let-values(((tmp_23)(vector*-ref vec_51 pos_72)))"
"(if(equal? tmp_23 #f)"
"(let-values()(add1 pos_72))"
"(if(equal? tmp_23 '#:set-box!)"
"(let-values()"
"(let-values(((c_21 next-pos_67)"
"(decode vec_51(add1 pos_72) mpis_10 inspector_9 bulk-binding-registry_9 shared_3)))"
"(begin(set-box! v_159 c_21) next-pos_67)))"
"(if(equal? tmp_23 '#:set-vector!)"
"(let-values()"
"(let-values(((len_24)(vector*-ref vec_51(add1 pos_72))))"
"(let-values(((start_31) 0)((end_23) len_24)((inc_17) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_31 end_23 inc_17)))"
"((letrec-values(((for-loop_150)"
"(lambda(pos_73 pos_74)"
"(begin"
" 'for-loop"
"(if(< pos_74 end_23)"
"(let-values(((i_78) pos_74))"
"(let-values(((pos_75)"
"(let-values(((pos_76) pos_73))"
"(let-values(((pos_77)"
"(let-values()"
"(let-values(((c_22 next-pos_68)"
"(decode"
" vec_51"
" pos_76"
" mpis_10"
" inspector_9"
" bulk-binding-registry_9"
" shared_3)))"
"(begin"
"(vector-set! v_159 i_78 c_22)"
" next-pos_68)))))"
"(values pos_77)))))"
"(if(not #f)(for-loop_150 pos_75(+ pos_74 inc_17)) pos_75)))"
" pos_73)))))"
" for-loop_150)"
"(+ pos_72 2)"
" start_31)))))"
"(if(equal? tmp_23 '#:set-hash!)"
"(let-values()"
"(let-values(((len_25)(vector*-ref vec_51(add1 pos_72))))"
"(let-values(((start_32) 0)((end_24) len_25)((inc_18) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_32 end_24 inc_18)))"
"((letrec-values(((for-loop_151)"
"(lambda(pos_78 pos_79)"
"(begin"
" 'for-loop"
"(if(< pos_79 end_24)"
"(let-values()"
"(let-values(((pos_80)"
"(let-values(((pos_81) pos_78))"
"(let-values(((pos_82)"
"(let-values()"
"(let-values(((key_52 next-pos_69)"
"(decode"
" vec_51"
" pos_81"
" mpis_10"
" inspector_9"
" bulk-binding-registry_9"
" shared_3)))"
"(let-values(((val_44 done-pos_2)"
"(decode"
" vec_51"
" next-pos_69"
" mpis_10"
" inspector_9"
" bulk-binding-registry_9"
" shared_3)))"
"(begin"
"(hash-set! v_159 key_52 val_44)"
" done-pos_2))))))"
"(values pos_82)))))"
"(if(not #f)(for-loop_151 pos_80(+ pos_79 inc_18)) pos_80)))"
" pos_78)))))"
" for-loop_151)"
"(+ pos_72 2)"
" start_32)))))"
"(if(equal? tmp_23 '#:scope-fill!)"
"(let-values()"
"(let-values(((c_23 next-pos_70)"
"(decode vec_51(add1 pos_72) mpis_10 inspector_9 bulk-binding-registry_9 shared_3)))"
"(begin(deserialize-scope-fill! v_159 c_23) next-pos_70)))"
"(if(equal? tmp_23 '#:representative-scope-fill!)"
"(let-values()"
"(let-values(((a_43 next-pos_71)"
"(decode vec_51(add1 pos_72) mpis_10 inspector_9 bulk-binding-registry_9 shared_3)))"
"(let-values(((d_25 done-pos_3)"
"(decode vec_51 next-pos_71 mpis_10 inspector_9 bulk-binding-registry_9 shared_3)))"
"(begin(deserialize-representative-scope-fill! v_159 a_43 d_25) done-pos_3))))"
"                    (let-values () (error 'deserialize \"bad fill encoding: ~v\" (vector*-ref vec_51 pos_72)))))))))))))"
"(define-values"
"(find-reachable-scopes)"
"(lambda(v_160)"
"(begin"
"(let-values(((seen_22)(make-hasheq)))"
"(let-values(((reachable-scopes_5)(seteq)))"
"(let-values(((get-reachable-scopes_4)(lambda()(begin 'get-reachable-scopes reachable-scopes_5))))"
"(let-values(((scope-triggers_0)(make-hasheq)))"
"(begin"
"((letrec-values(((loop_86)"
"(lambda(v_161)"
"(begin"
" 'loop"
"(if(interned-literal? v_161)"
"(let-values()(void))"
"(if(hash-ref seen_22 v_161 #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(hash-set! seen_22 v_161 #t)"
"(if(scope-with-bindings? v_161)"
"(let-values()"
"(begin"
"(set! reachable-scopes_5(set-add reachable-scopes_5 v_161))"
"((reach-scopes-ref v_161) v_161 loop_86)"
"(let-values(((lst_68)(hash-ref scope-triggers_0 v_161 null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_68)))"
"((letrec-values(((for-loop_152)"
"(lambda(lst_121)"
"(begin"
" 'for-loop"
"(if(pair? lst_121)"
"(let-values(((proc_7)"
"(unsafe-car lst_121))"
"((rest_61)"
"(unsafe-cdr lst_121)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(proc_7"
" loop_86))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_152 rest_61)"
"(values))))"
"(values))))))"
" for-loop_152)"
" lst_68)))"
"(void)"
"(hash-remove! scope-triggers_0 v_161)"
"((scope-with-bindings-ref v_161)"
" v_161"
" get-reachable-scopes_4"
" loop_86"
"(lambda(sc-unreachable_0 b_68)"
"(hash-update!"
" scope-triggers_0"
" sc-unreachable_0"
"(lambda(l_51)(cons b_68 l_51))"
" null)))))"
"(if(reach-scopes? v_161)"
"(let-values()((reach-scopes-ref v_161) v_161 loop_86))"
"(if(pair? v_161)"
"(let-values()(begin(loop_86(car v_161))(loop_86(cdr v_161))))"
"(if(vector? v_161)"
"(let-values()"
"(begin"
"(let-values(((vec_52 len_26)"
"(let-values(((vec_53) v_161))"
"(begin"
"(check-vector vec_53)"
"(values"
" vec_53"
"(unsafe-vector-length vec_53))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_153)"
"(lambda(pos_83)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_83 len_26)"
"(let-values(((e_23)"
"(unsafe-vector-ref"
" vec_52"
" pos_83)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_86"
" e_23))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_153"
"(unsafe-fx+ 1 pos_83))"
"(values))))"
"(values))))))"
" for-loop_153)"
" 0)))"
"(void)))"
"(if(box? v_161)"
"(let-values()(loop_86(unbox v_161)))"
"(if(hash? v_161)"
"(let-values()"
"(begin"
"(let-values(((ht_97) v_161))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_97)))"
"((letrec-values(((for-loop_154)"
"(lambda(i_125)"
"(begin"
" 'for-loop"
"(if i_125"
"(let-values(((k_30 v_162)"
"(hash-iterate-key+value"
" ht_97"
" i_125)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(loop_86"
" k_30)"
"(loop_86"
" v_162)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_154"
"(hash-iterate-next"
" ht_97"
" i_125))"
"(values))))"
"(values))))))"
" for-loop_154)"
"(hash-iterate-first ht_97))))"
"(void)))"
"(if(prefab-struct-key v_161)"
"(let-values()"
"(begin"
"(let-values(((v*_5 start*_4 stop*_5 step*_4)"
"(normalise-inputs"
" 'in-vector"
"                                                                               \"vector\""
"(lambda(x_52)(vector? x_52))"
"(lambda(x_53)"
"(unsafe-vector-length x_53))"
"(struct->vector v_161)"
" 1"
" #f"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_155)"
"(lambda(idx_4)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< idx_4 stop*_5)"
"(let-values(((e_24)"
"(unsafe-vector-ref"
" v*_5"
" idx_4)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_86"
" e_24))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_155"
"(unsafe-fx+ idx_4 1))"
"(values))))"
"(values))))))"
" for-loop_155)"
" start*_4)))"
"(void)))"
"(if(srcloc? v_161)"
"(let-values()(loop_86(srcloc-source v_161)))"
"(let-values()(void))))))))))))))))))"
" loop_86)"
" v_160)"
" reachable-scopes_5))))))))"
"(define-values"
"(deserialize-imports)"
" '(deserialize-module-path-indexes syntax-module-path-index-shift syntax-shift-phase-level module-use deserialize))"
"(define-values"
"(syntax-module-path-index-shift/no-keywords)"
"(let-values(((syntax-module-path-index-shift_0)"
"(let-values(((core26_0)"
"(lambda(s23_0 from-mpi24_0 to-mpi25_0 inspector22_0)"
"(begin"
" 'core26"
"(let-values(((s_197) s23_0))"
"(let-values(((from-mpi_4) from-mpi24_0))"
"(let-values(((to-mpi_3) to-mpi25_0))"
"(let-values(((inspector_10) inspector22_0))"
"(let-values()"
"(let-values(((s28_0) s_197)"
"((from-mpi29_0) from-mpi_4)"
"((to-mpi30_0) to-mpi_3)"
"((inspector31_0) inspector_10))"
"(syntax-module-path-index-shift13.1"
" #f"
" s28_0"
" from-mpi29_0"
" to-mpi30_0"
" inspector31_0)))))))))))"
"(case-lambda"
"((s_198 from-mpi_5 to-mpi_4)"
"(begin 'syntax-module-path-index-shift(core26_0 s_198 from-mpi_5 to-mpi_4 #f)))"
"((s_199 from-mpi_6 to-mpi_5 inspector22_1)(core26_0 s_199 from-mpi_6 to-mpi_5 inspector22_1))))))"
" syntax-module-path-index-shift_0))"
"(define-values"
"(deserialize-instance)"
"(1/make-instance"
" 'deserialize"
" #f"
" 'constant"
" 'deserialize-module-path-indexes"
" deserialize-module-path-indexes"
" 'syntax-module-path-index-shift"
" syntax-module-path-index-shift/no-keywords"
" 'syntax-shift-phase-level"
" syntax-shift-phase-level$1"
" 'module-use"
" module-use1.1"
" 'deserialize"
" deserialize))"
"(define-values"
"(struct:parsed parsed1.1 parsed? parsed-s)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'parsed #f 1 0 #f(list(cons prop:authentic #t)) #f #f '(0) #f 'parsed)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 's))))"
"(define-values"
"(struct:parsed-id parsed-id2.1 parsed-id? parsed-id-binding parsed-id-inspector)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-id"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-id)))))"
"(values"
" struct:_1"
" make-_1"
" ?_1"
"(make-struct-field-accessor -ref_1 0 'binding)"
"(make-struct-field-accessor -ref_1 1 'inspector))))"
"(define-values"
"(struct:parsed-primitive-id parsed-primitive-id3.1 parsed-primitive-id?)"
"(let-values(((struct:_43 make-_43 ?_43 -ref_43 -set!_43)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-primitive-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-primitive-id)))))"
"(values struct:_43 make-_43 ?_43)))"
"(define-values"
"(struct:parsed-top-id parsed-top-id4.1 parsed-top-id?)"
"(let-values(((struct:_10 make-_10 ?_10 -ref_10 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-top-id"
" struct:parsed-id"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-top-id)))))"
"(values struct:_10 make-_10 ?_10)))"
"(define-values"
"(struct:parsed-lambda parsed-lambda5.1 parsed-lambda? parsed-lambda-keys parsed-lambda-body)"
"(let-values(((struct:_42 make-_42 ?_42 -ref_42 -set!_42)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-lambda"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-lambda)))))"
"(values"
" struct:_42"
" make-_42"
" ?_42"
"(make-struct-field-accessor -ref_42 0 'keys)"
"(make-struct-field-accessor -ref_42 1 'body))))"
"(define-values"
"(struct:parsed-case-lambda parsed-case-lambda6.1 parsed-case-lambda? parsed-case-lambda-clauses)"
"(let-values(((struct:_44 make-_44 ?_44 -ref_44 -set!_44)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-case-lambda"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-case-lambda)))))"
"(values struct:_44 make-_44 ?_44(make-struct-field-accessor -ref_44 0 'clauses))))"
"(define-values"
"(struct:parsed-app parsed-app7.1 parsed-app? parsed-app-rator parsed-app-rands)"
"(let-values(((struct:_45 make-_45 ?_45 -ref_45 -set!_45)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-app"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-app)))))"
"(values"
" struct:_45"
" make-_45"
" ?_45"
"(make-struct-field-accessor -ref_45 0 'rator)"
"(make-struct-field-accessor -ref_45 1 'rands))))"
"(define-values"
"(struct:parsed-if parsed-if8.1 parsed-if? parsed-if-tst parsed-if-thn parsed-if-els)"
"(let-values(((struct:_46 make-_46 ?_46 -ref_46 -set!_46)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-if"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-if)))))"
"(values"
" struct:_46"
" make-_46"
" ?_46"
"(make-struct-field-accessor -ref_46 0 'tst)"
"(make-struct-field-accessor -ref_46 1 'thn)"
"(make-struct-field-accessor -ref_46 2 'els))))"
"(define-values"
"(struct:parsed-set! parsed-set!9.1 parsed-set!? parsed-set!-id parsed-set!-rhs)"
"(let-values(((struct:_47 make-_47 ?_47 -ref_47 -set!_47)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-set!"
" struct:parsed"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'parsed-set!)))))"
"(values"
" struct:_47"
" make-_47"
" ?_47"
"(make-struct-field-accessor -ref_47 0 'id)"
"(make-struct-field-accessor -ref_47 1 'rhs))))"
"(define-values"
"(struct:parsed-with-continuation-mark"
" parsed-with-continuation-mark10.1"
" parsed-with-continuation-mark?"
" parsed-with-continuation-mark-key"
" parsed-with-continuation-mark-val"
" parsed-with-continuation-mark-body)"
"(let-values(((struct:_48 make-_48 ?_48 -ref_48 -set!_48)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-with-continuation-mark"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-with-continuation-mark)))))"
"(values"
" struct:_48"
" make-_48"
" ?_48"
"(make-struct-field-accessor -ref_48 0 'key)"
"(make-struct-field-accessor -ref_48 1 'val)"
"(make-struct-field-accessor -ref_48 2 'body))))"
"(define-values"
"(struct:parsed-#%variable-reference"
" parsed-#%variable-reference11.1"
" parsed-#%variable-reference?"
" parsed-#%variable-reference-id)"
"(let-values(((struct:_49 make-_49 ?_49 -ref_49 -set!_49)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%variable-reference"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%variable-reference)))))"
"(values struct:_49 make-_49 ?_49(make-struct-field-accessor -ref_49 0 'id))))"
"(define-values"
"(struct:parsed-begin parsed-begin12.1 parsed-begin? parsed-begin-body)"
"(let-values(((struct:_50 make-_50 ?_50 -ref_50 -set!_50)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin)))))"
"(values struct:_50 make-_50 ?_50(make-struct-field-accessor -ref_50 0 'body))))"
"(define-values"
"(struct:parsed-begin0 parsed-begin013.1 parsed-begin0? parsed-begin0-body)"
"(let-values(((struct:_51 make-_51 ?_51 -ref_51 -set!_51)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin0"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin0)))))"
"(values struct:_51 make-_51 ?_51(make-struct-field-accessor -ref_51 0 'body))))"
"(define-values"
"(struct:parsed-quote parsed-quote14.1 parsed-quote? parsed-quote-datum)"
"(let-values(((struct:_52 make-_52 ?_52 -ref_52 -set!_52)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote)))))"
"(values struct:_52 make-_52 ?_52(make-struct-field-accessor -ref_52 0 'datum))))"
"(define-values"
"(struct:parsed-quote-syntax parsed-quote-syntax15.1 parsed-quote-syntax? parsed-quote-syntax-datum)"
"(let-values(((struct:_53 make-_53 ?_53 -ref_53 -set!_53)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-quote-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-quote-syntax)))))"
"(values struct:_53 make-_53 ?_53(make-struct-field-accessor -ref_53 0 'datum))))"
"(define-values"
"(struct:parsed-let_-values"
" parsed-let_-values16.1"
" parsed-let_-values?"
" parsed-let_-values-idss"
" parsed-let_-values-clauses"
" parsed-let_-values-body)"
"(let-values(((struct:_54 make-_54 ?_54 -ref_54 -set!_54)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let_-values"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-let_-values)))))"
"(values"
" struct:_54"
" make-_54"
" ?_54"
"(make-struct-field-accessor -ref_54 0 'idss)"
"(make-struct-field-accessor -ref_54 1 'clauses)"
"(make-struct-field-accessor -ref_54 2 'body))))"
"(define-values"
"(struct:parsed-let-values parsed-let-values17.1 parsed-let-values?)"
"(let-values(((struct:_55 make-_55 ?_55 -ref_55 -set!_55)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-let-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-let-values)))))"
"(values struct:_55 make-_55 ?_55)))"
"(define-values"
"(struct:parsed-letrec-values parsed-letrec-values18.1 parsed-letrec-values?)"
"(let-values(((struct:_56 make-_56 ?_56 -ref_56 -set!_56)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-letrec-values"
" struct:parsed-let_-values"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-letrec-values)))))"
"(values struct:_56 make-_56 ?_56)))"
"(define-values"
"(struct:parsed-define-values"
" parsed-define-values19.1"
" parsed-define-values?"
" parsed-define-values-ids"
" parsed-define-values-syms"
" parsed-define-values-rhs)"
"(let-values(((struct:_57 make-_57 ?_57 -ref_57 -set!_57)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-values"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-values)))))"
"(values"
" struct:_57"
" make-_57"
" ?_57"
"(make-struct-field-accessor -ref_57 0 'ids)"
"(make-struct-field-accessor -ref_57 1 'syms)"
"(make-struct-field-accessor -ref_57 2 'rhs))))"
"(define-values"
"(struct:parsed-define-syntaxes"
" parsed-define-syntaxes20.1"
" parsed-define-syntaxes?"
" parsed-define-syntaxes-ids"
" parsed-define-syntaxes-syms"
" parsed-define-syntaxes-rhs)"
"(let-values(((struct:_58 make-_58 ?_58 -ref_58 -set!_58)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-define-syntaxes"
" struct:parsed"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'parsed-define-syntaxes)))))"
"(values"
" struct:_58"
" make-_58"
" ?_58"
"(make-struct-field-accessor -ref_58 0 'ids)"
"(make-struct-field-accessor -ref_58 1 'syms)"
"(make-struct-field-accessor -ref_58 2 'rhs))))"
"(define-values"
"(struct:parsed-begin-for-syntax parsed-begin-for-syntax21.1 parsed-begin-for-syntax? parsed-begin-for-syntax-body)"
"(let-values(((struct:_59 make-_59 ?_59 -ref_59 -set!_59)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-begin-for-syntax"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-begin-for-syntax)))))"
"(values struct:_59 make-_59 ?_59(make-struct-field-accessor -ref_59 0 'body))))"
"(define-values"
"(struct:parsed-#%declare parsed-#%declare22.1 parsed-#%declare?)"
"(let-values(((struct:_60 make-_60 ?_60 -ref_60 -set!_60)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%declare"
" struct:parsed"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-#%declare)))))"
"(values struct:_60 make-_60 ?_60)))"
"(define-values"
"(struct:parsed-require parsed-require23.1 parsed-require?)"
"(let-values(((struct:_61 make-_61 ?_61 -ref_61 -set!_61)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-require"
" struct:parsed"
" 0"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'parsed-require)))))"
"(values struct:_61 make-_61 ?_61)))"
"(define-values"
"(struct:parsed-#%module-begin parsed-#%module-begin24.1 parsed-#%module-begin? parsed-#%module-begin-body)"
"(let-values(((struct:_62 make-_62 ?_62 -ref_62 -set!_62)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-#%module-begin"
" struct:parsed"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'parsed-#%module-begin)))))"
"(values struct:_62 make-_62 ?_62(make-struct-field-accessor -ref_62 0 'body))))"
"(define-values"
"(struct:parsed-module"
" parsed-module25.1"
" parsed-module?"
" parsed-module-star?"
" parsed-module-name-id"
" parsed-module-self"
" parsed-module-requires"
" parsed-module-provides"
" parsed-module-root-ctx-simple?"
" parsed-module-encoded-root-ctx"
" parsed-module-body"
" parsed-module-compiled-module"
" parsed-module-compiled-submodules)"
"(let-values(((struct:_63 make-_63 ?_63 -ref_63 -set!_63)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'parsed-module"
" struct:parsed"
" 10"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9)"
" #f"
" 'parsed-module)))))"
"(values"
" struct:_63"
" make-_63"
" ?_63"
"(make-struct-field-accessor -ref_63 0 'star?)"
"(make-struct-field-accessor -ref_63 1 'name-id)"
"(make-struct-field-accessor -ref_63 2 'self)"
"(make-struct-field-accessor -ref_63 3 'requires)"
"(make-struct-field-accessor -ref_63 4 'provides)"
"(make-struct-field-accessor -ref_63 5 'root-ctx-simple?)"
"(make-struct-field-accessor -ref_63 6 'encoded-root-ctx)"
"(make-struct-field-accessor -ref_63 7 'body)"
"(make-struct-field-accessor -ref_63 8 'compiled-module)"
"(make-struct-field-accessor -ref_63 9 'compiled-submodules))))"
"(define-values"
"(module-path->mpi5.1)"
"(lambda(declared-submodule-names1_0 mod-path3_0 self4_2)"
"(begin"
" 'module-path->mpi5"
"(let-values(((mod-path_4) mod-path3_0))"
"(let-values(((self_7) self4_2))"
"(let-values(((declared-submodule-names_1)"
"(if(eq? declared-submodule-names1_0 unsafe-undefined) '#hasheq() declared-submodule-names1_0)))"
"(let-values()"
"(if(if(list? mod-path_4)"
"(if(= 2(length mod-path_4))"
"(if(eq? 'quote(car mod-path_4))"
"(if(symbol?(cadr mod-path_4))(hash-ref declared-submodule-names_1(cadr mod-path_4) #f) #f)"
" #f)"
" #f)"
" #f)"
"                (let-values () (1/module-path-index-join (list 'submod \".\" (cadr mod-path_4)) self_7))"
"(if(if(list? mod-path_4)"
"(if(eq? 'submod(car mod-path_4))"
"(let-values(((mod-path_5)(cadr mod-path_4)))"
"(if(list? mod-path_5)"
"(if(= 2(length mod-path_5))"
"(if(eq? 'quote(car mod-path_5))"
"(if(symbol?(cadr mod-path_5))"
"(hash-ref declared-submodule-names_1(cadr mod-path_5) #f)"
" #f)"
" #f)"
" #f)"
" #f))"
" #f)"
" #f)"
"(let-values()"
"                    (1/module-path-index-join (list* 'submod \".\" (cadr (cadr mod-path_4)) (cddr mod-path_4)) self_7))"
"(let-values()(1/module-path-index-join mod-path_4 self_7)))))))))))"
"(define-values"
"(module-path->mpi/context)"
"(lambda(mod-path_6 ctx_9)"
"(begin"
"(let-values(((mod-path8_1) mod-path_6)"
"((temp9_0)(namespace-mpi(expand-context-namespace ctx_9)))"
"((temp10_2)(expand-context-declared-submodule-names ctx_9)))"
"(module-path->mpi5.1 temp10_2 mod-path8_1 temp9_0)))))"
"(define-values"
"(syntax-mapped-names)"
"(lambda(s_0 phase_44)"
"(begin"
"(let-values(((s-scs_1)(syntax-scope-set s_0 phase_44)))"
"(let-values(((ht_98) s-scs_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_98)))"
"((letrec-values(((for-loop_117)"
"(lambda(syms_14 i_126)"
"(begin"
" 'for-loop"
"(if i_126"
"(let-values(((sc_31)(unsafe-immutable-hash-iterate-key ht_98 i_126)))"
"(let-values(((syms_15)"
"(let-values(((syms_16) syms_14))"
"(let-values(((syms_17)"
"(let-values()"
"(set-union"
" syms_16"
"(binding-table-symbols"
"(scope-binding-table sc_31)"
" s-scs_1"
" s_0"
" null)))))"
"(values syms_17)))))"
"(if(not #f)"
"(for-loop_117 syms_15(unsafe-immutable-hash-iterate-next ht_98 i_126))"
" syms_15)))"
" syms_14)))))"
" for-loop_117)"
"(seteq)"
"(unsafe-immutable-hash-iterate-first ht_98))))))))"
"(define-values"
"(struct:requires+provides"
" requires+provides1.1"
" requires+provides?"
" requires+provides-self"
" requires+provides-require-mpis"
" requires+provides-require-mpis-in-order"
" requires+provides-requires"
" requires+provides-provides"
" requires+provides-phase-to-defined-syms"
" requires+provides-also-required"
" requires+provides-can-cross-phase-persistent?"
" requires+provides-all-bindings-simple?"
" set-requires+provides-can-cross-phase-persistent?!"
" set-requires+provides-all-bindings-simple?!)"
"(let-values(((struct:_64 make-_64 ?_64 -ref_64 -set!_64)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'requires+provides"
" #f"
" 9"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'requires+provides)))))"
"(values"
" struct:_64"
" make-_64"
" ?_64"
"(make-struct-field-accessor -ref_64 0 'self)"
"(make-struct-field-accessor -ref_64 1 'require-mpis)"
"(make-struct-field-accessor -ref_64 2 'require-mpis-in-order)"
"(make-struct-field-accessor -ref_64 3 'requires)"
"(make-struct-field-accessor -ref_64 4 'provides)"
"(make-struct-field-accessor -ref_64 5 'phase-to-defined-syms)"
"(make-struct-field-accessor -ref_64 6 'also-required)"
"(make-struct-field-accessor -ref_64 7 'can-cross-phase-persistent?)"
"(make-struct-field-accessor -ref_64 8 'all-bindings-simple?)"
"(make-struct-field-mutator -set!_64 7 'can-cross-phase-persistent?)"
"(make-struct-field-mutator -set!_64 8 'all-bindings-simple?))))"
"(define-values"
"(struct:required required2.1 required? required-id required-phase required-can-be-shadowed? required-as-transformer?)"
"(let-values(((struct:_11 make-_11 ?_11 -ref_11 -set!_11)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'required"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'required)))))"
"(values"
" struct:_11"
" make-_11"
" ?_11"
"(make-struct-field-accessor -ref_11 0 'id)"
"(make-struct-field-accessor -ref_11 1 'phase)"
"(make-struct-field-accessor -ref_11 2 'can-be-shadowed?)"
"(make-struct-field-accessor -ref_11 3 'as-transformer?))))"
"(define-values"
"(struct:nominal nominal3.1 nominal? nominal-module nominal-provide-phase nominal-require-phase nominal-sym)"
"(let-values(((struct:_65 make-_65 ?_65 -ref_65 -set!_65)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'nominal"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '(0 1 2 3)"
" #f"
" 'nominal)))))"
"(values"
" struct:_65"
" make-_65"
" ?_65"
"(make-struct-field-accessor -ref_65 0 'module)"
"(make-struct-field-accessor -ref_65 1 'provide-phase)"
"(make-struct-field-accessor -ref_65 2 'require-phase)"
"(make-struct-field-accessor -ref_65 3 'sym))))"
"(define-values"
"(struct:bulk-required"
" bulk-required4.1"
" bulk-required?"
" bulk-required-provides"
" bulk-required-prefix-len"
" bulk-required-s"
" bulk-required-provide-phase-level"
" bulk-required-can-be-shadowed?)"
"(let-values(((struct:_66 make-_66 ?_66 -ref_66 -set!_66)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'bulk-required"
" #f"
" 5"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'bulk-required)))))"
"(values"
" struct:_66"
" make-_66"
" ?_66"
"(make-struct-field-accessor -ref_66 0 'provides)"
"(make-struct-field-accessor -ref_66 1 'prefix-len)"
"(make-struct-field-accessor -ref_66 2 's)"
"(make-struct-field-accessor -ref_66 3 'provide-phase-level)"
"(make-struct-field-accessor -ref_66 4 'can-be-shadowed?))))"
"(define-values"
"(make-requires+provides8.1)"
"(lambda(copy-requires5_0 self7_0)"
"(begin"
" 'make-requires+provides8"
"(let-values(((self_2) self7_0))"
"(let-values(((copy-r+p_0) copy-requires5_0))"
"(let-values()"
"(requires+provides1.1"
" self_2"
"(if copy-r+p_0(requires+provides-require-mpis copy-r+p_0)(make-module-path-index-intern-table))"
"(if copy-r+p_0(hash-copy(requires+provides-require-mpis-in-order copy-r+p_0))(make-hasheqv))"
"(make-hasheq)"
"(make-hasheqv)"
"(make-hasheqv)"
"(make-hasheq)"
" #t"
" #t)))))))"
"(define-values"
"(requires+provides-reset!)"
"(lambda(r+p_0)"
"(begin"
"(begin"
"(hash-clear!(requires+provides-requires r+p_0))"
"(hash-clear!(requires+provides-provides r+p_0))"
"(hash-clear!(requires+provides-phase-to-defined-syms r+p_0))"
"(hash-clear!(requires+provides-also-required r+p_0))))))"
"(define-values"
"(intern-mpi)"
"(lambda(r+p_1 mpi_29)(begin(intern-module-path-index!(requires+provides-require-mpis r+p_1) mpi_29))))"
"(define-values"
"(add-required-module!)"
"(lambda(r+p_2 mod-name_8 phase-shift_2 is-cross-phase-persistent?_0)"
"(begin"
"(let-values(((mpi_30)(intern-mpi r+p_2 mod-name_8)))"
"(begin"
"(if(hash-ref(hash-ref(requires+provides-requires r+p_2) mpi_30 '#hasheqv()) phase-shift_2 #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-update!"
"(requires+provides-require-mpis-in-order r+p_2)"
" phase-shift_2"
"(lambda(l_52)(cons mpi_30 l_52))"
" null)"
"(hash-set!"
"(hash-ref!(requires+provides-requires r+p_2) mpi_30 make-hasheqv)"
" phase-shift_2"
"(make-hasheq)))))"
"(if is-cross-phase-persistent?_0"
"(void)"
"(let-values()(set-requires+provides-can-cross-phase-persistent?! r+p_2 #f)))"
" mpi_30)))))"
"(define-values"
"(add-defined-or-required-id!19.1)"
"(lambda(as-transformer?12_0 can-be-shadowed?11_0 r+p15_0 id16_0 phase17_0 binding18_0)"
"(begin"
" 'add-defined-or-required-id!19"
"(let-values(((r+p_3) r+p15_0))"
"(let-values(((id_24) id16_0))"
"(let-values(((phase_52) phase17_0))"
"(let-values(((binding_11) binding18_0))"
"(let-values(((can-be-shadowed?_0) can-be-shadowed?11_0))"
"(let-values(((as-transformer?_0) as-transformer?12_0))"
"(let-values()"
"(begin"
"(if(equal?"
" phase_52"
"(phase+"
"(module-binding-nominal-phase binding_11)"
"(module-binding-nominal-require-phase binding_11)))"
"(void)"
"                        (let-values () (error \"internal error: binding phase does not match nominal info\")))"
"(let-values(((r+p124_0) r+p_3)"
"((id125_0) id_24)"
"((phase126_0) phase_52)"
"((temp127_0)(module-binding-nominal-module binding_11))"
"((temp128_0)(module-binding-nominal-require-phase binding_11))"
"((can-be-shadowed?129_0) can-be-shadowed?_0)"
"((as-transformer?130_0) as-transformer?_0))"
"(add-defined-or-required-id-at-nominal!33.1"
" as-transformer?130_0"
" can-be-shadowed?129_0"
" temp127_0"
" temp128_0"
" r+p124_0"
" id125_0"
" phase126_0)))))))))))))"
"(define-values"
"(add-defined-or-required-id-at-nominal!33.1)"
"(lambda(as-transformer?25_0"
" can-be-shadowed?24_0"
" nominal-module22_0"
" nominal-require-phase23_0"
" r+p30_0"
" id31_0"
" phase32_0)"
"(begin"
" 'add-defined-or-required-id-at-nominal!33"
"(let-values(((r+p_4) r+p30_0))"
"(let-values(((id_25) id31_0))"
"(let-values(((phase_53) phase32_0))"
"(let-values(((nominal-module_6) nominal-module22_0))"
"(let-values(((nominal-require-phase_4) nominal-require-phase23_0))"
"(let-values(((can-be-shadowed?_1) can-be-shadowed?24_0))"
"(let-values(((as-transformer?_1) as-transformer?25_0))"
"(let-values()"
"(let-values(((at-mod_0)"
"(hash-ref!"
"(requires+provides-requires r+p_4)"
"(intern-mpi r+p_4 nominal-module_6)"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_0)(hash-ref! at-mod_0 nominal-require-phase_4 make-hasheq)))"
"(let-values(((sym_34)(syntax-e$1 id_25)))"
"(hash-set!"
" sym-to-reqds_0"
" sym_34"
"(cons-ish"
"(required2.1 id_25 phase_53 can-be-shadowed?_1 as-transformer?_1)"
"(hash-ref sym-to-reqds_0 sym_34 null)))))))))))))))))"
"(define-values"
"(add-bulk-required-ids!59.1)"
"(lambda(accum-update-nominals42_0"
" can-be-shadowed?40_0"
" check-and-remove?41_0"
" excepts37_0"
" in39_0"
" prefix36_0"
" symbols-accum38_0"
" who43_0"
" r+p52_0"
" s53_0"
" self54_0"
" nominal-module55_0"
" phase-shift56_0"
" provides57_0"
" provide-phase-level58_0)"
"(begin"
" 'add-bulk-required-ids!59"
"(let-values(((r+p_5) r+p52_0))"
"(let-values(((s_114) s53_0))"
"(let-values(((self_8) self54_0))"
"(let-values(((nominal-module_7) nominal-module55_0))"
"(let-values(((phase-shift_6) phase-shift56_0))"
"(let-values(((provides_4) provides57_0))"
"(let-values(((provide-phase-level_3) provide-phase-level58_0))"
"(let-values(((bulk-prefix_0) prefix36_0))"
"(let-values(((bulk-excepts_0) excepts37_0))"
"(let-values(((symbols-accum_0) symbols-accum38_0))"
"(let-values(((orig-s_0) in39_0))"
"(let-values(((can-be-shadowed?_2) can-be-shadowed?40_0))"
"(let-values(((check-and-remove?_0) check-and-remove?41_0))"
"(let-values(((accum-update-nominals_0) accum-update-nominals42_0))"
"(let-values(((who_11) who43_0))"
"(let-values()"
"(let-values(((phase_54)(phase+ provide-phase-level_3 phase-shift_6)))"
"(let-values(((shortcut-table_0)"
"(if check-and-remove?_0"
"(if(>(hash-count provides_4) 64)"
"(syntax-mapped-names s_114 phase_54)"
" #f)"
" #f)))"
"(let-values(((mpi_13)(intern-mpi r+p_5 nominal-module_7)))"
"(let-values(((at-mod_1)"
"(hash-ref!"
"(requires+provides-requires r+p_5)"
" mpi_13"
" make-hasheqv)))"
"(let-values(((sym-to-reqds_1)"
"(hash-ref! at-mod_1 phase-shift_6 make-hasheq)))"
"(let-values(((prefix-len_0)"
"(if bulk-prefix_0"
"(string-length(symbol->string bulk-prefix_0))"
" 0)))"
"(let-values(((br_0)"
"(bulk-required4.1"
" provides_4"
" prefix-len_0"
" s_114"
" provide-phase-level_3"
" can-be-shadowed?_2)))"
"(let-values(((ht_99) provides_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_99)))"
"((letrec-values(((for-loop_156)"
"(lambda(result_70 i_127)"
"(begin"
" 'for-loop"
"(if i_127"
"(let-values(((out-sym_0 binding/p_2)"
"(hash-iterate-key+value"
" ht_99"
" i_127)))"
"(let-values(((result_71)"
"(let-values(((result_72)"
" result_70))"
"(if(not"
"(symbol-interned?"
" out-sym_0))"
" result_72"
"(let-values()"
"(let-values(((result_73)"
"(let-values()"
"(let-values()"
"(begin"
"(if symbols-accum_0"
"(let-values()"
"(hash-set!"
" symbols-accum_0"
" out-sym_0"
" #t))"
"(void))"
"(if(hash-ref"
" bulk-excepts_0"
" out-sym_0"
" #f)"
"(let-values()"
" #f)"
"(let-values()"
"(let-values(((sym_35)"
"(if(not"
" bulk-prefix_0)"
"(let-values()"
" out-sym_0)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                                  \"~a~a\""
" bulk-prefix_0"
" out-sym_0))))))"
"(let-values(((already-defined?_0)"
"(if(if check-and-remove?_0"
"(let-values(((or-part_175)"
"(not"
" shortcut-table_0)))"
"(if or-part_175"
" or-part_175"
"(hash-ref"
" shortcut-table_0"
" sym_35"
" #f)))"
" #f)"
"(let-values()"
"(let-values(((temp131_0)"
" #t)"
"((temp132_0)"
" #t)"
"((r+p133_0)"
" r+p_5)"
"((temp134_0)"
"(datum->syntax$1"
" s_114"
" sym_35"
" s_114))"
"((phase135_0)"
" phase_54)"
"((orig-s136_0)"
" orig-s_0)"
"((temp137_0)"
"(lambda()"
"(let-values(((binding/p141_0)"
" binding/p_2)"
"((sym142_0)"
" sym_35)"
"((self143_0)"
" self_8)"
"((mpi144_0)"
" mpi_13)"
"((provide-phase-level145_0)"
" provide-phase-level_3)"
"((phase-shift146_0)"
" phase-shift_6))"
"(provide-binding-to-require-binding11.1"
" mpi144_0"
" phase-shift146_0"
" provide-phase-level145_0"
" self143_0"
" binding/p141_0"
" sym142_0))))"
"((temp138_0)"
" #t)"
"((accum-update-nominals139_0)"
" accum-update-nominals_0)"
"((who140_0)"
" who_11))"
"(check-not-defined95.1"
" accum-update-nominals139_0"
" temp132_0"
" temp131_0"
" orig-s136_0"
" temp138_0"
" temp137_0"
" who140_0"
" r+p133_0"
" temp134_0"
" phase135_0)))"
"(let-values()"
" #f))))"
"(begin"
"(if already-defined?_0"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_1"
" sym_35"
"(cons-ish"
" br_0"
"(hash-ref"
" sym-to-reqds_1"
" sym_35"
" null)))))"
" already-defined?_0))))))))))"
"(values"
" result_73)))))))"
"(if(if(not"
"((lambda x_54 result_71)"
" out-sym_0"
" binding/p_2))"
"(not #f)"
" #f)"
"(for-loop_156"
" result_71"
"(hash-iterate-next ht_99 i_127))"
" result_71)))"
" result_70)))))"
" for-loop_156)"
" #f"
"(hash-iterate-first ht_99))))))))))))))))))))))))))))))"
"(define-values"
"(bulk-required->required)"
"(lambda(br_1 nominal-module_8 phase_55 sym_36)"
"(begin"
"(let-values(((prefix-len_1)(bulk-required-prefix-len br_1)))"
"(let-values(((out-sym_1)"
"(if(zero? prefix-len_1)"
" sym_36"
"(string->symbol(substring(symbol->string sym_36) prefix-len_1)))))"
"(let-values(((binding/p_3)(hash-ref(bulk-required-provides br_1) out-sym_1)))"
"(required2.1"
"(datum->syntax$1(bulk-required-s br_1) sym_36)"
"(phase+ phase_55(bulk-required-provide-phase-level br_1))"
"(bulk-required-can-be-shadowed? br_1)"
"(provided-as-transformer? binding/p_3))))))))"
"(define-values"
"(normalize-required)"
"(lambda(r_35 mod-name_9 phase_56 sym_37)"
"(begin(if(bulk-required? r_35)(bulk-required->required r_35 mod-name_9 phase_56 sym_37) r_35))))"
"(define-values"
"(add-enclosing-module-defined-and-required!67.1)"
"(lambda(enclosing-requires+provides62_0 r+p64_0 enclosing-mod65_0 phase-shift66_0)"
"(begin"
" 'add-enclosing-module-defined-and-required!67"
"(let-values(((r+p_6) r+p64_0))"
"(let-values(((enclosing-r+p_0) enclosing-requires+provides62_0))"
"(let-values(((enclosing-mod_0) enclosing-mod65_0))"
"(let-values(((phase-shift_7) phase-shift66_0))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?! r+p_6 #f)"
"(let-values(((ht_100)(requires+provides-requires enclosing-r+p_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_100)))"
"((letrec-values(((for-loop_157)"
"(lambda(i_128)"
"(begin"
" 'for-loop"
"(if i_128"
"(let-values(((mod-name_10 at-mod_2)"
"(hash-iterate-key+value ht_100 i_128)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((ht_101) at-mod_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_101)))"
"((letrec-values(((for-loop_158)"
"(lambda(i_129)"
"(begin"
" 'for-loop"
"(if i_129"
"(let-values(((phase_57"
" at-phase_8)"
"(hash-iterate-key+value"
" ht_101"
" i_129)))"
"(let-values((()"
"(let-values(((ht_102)"
" at-phase_8))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_102)))"
"((letrec-values(((for-loop_159)"
"(lambda(i_117)"
"(begin"
" 'for-loop"
"(if i_117"
"(let-values(((sym_38"
" reqds_0)"
"(hash-iterate-key+value"
" ht_102"
" i_117)))"
"(let-values((()"
"(let-values(((lst_122)"
" reqds_0))"
"(begin"
"(void)"
"((letrec-values(((for-loop_160)"
"(lambda(lst_123)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" lst_123))"
"(let-values(((reqd/maybe-bulk_0)"
"(if(pair?"
" lst_123)"
"(car"
" lst_123)"
" lst_123))"
"((rest_62)"
"(if(pair?"
" lst_123)"
"(cdr"
" lst_123)"
" null)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((reqd_0)"
"(normalize-required"
" reqd/maybe-bulk_0"
" mod-name_10"
" phase_57"
" sym_38)))"
"(let-values(((r+p147_0)"
" r+p_6)"
"((temp148_0)"
"(syntax-shift-phase-level$1"
"(let-values(((temp154_0)"
"(required-id"
" reqd_0))"
"((temp155_0)"
"(requires+provides-self"
" enclosing-r+p_0))"
"((enclosing-mod156_0)"
" enclosing-mod_0))"
"(syntax-module-path-index-shift13.1"
" #f"
" temp154_0"
" temp155_0"
" enclosing-mod156_0"
" #f))"
" phase-shift_7))"
"((temp149_0)"
"(phase+"
"(required-phase"
" reqd_0)"
" phase-shift_7))"
"((enclosing-mod150_0)"
" enclosing-mod_0)"
"((phase-shift151_0)"
" phase-shift_7)"
"((temp152_0)"
" #t)"
"((temp153_0)"
"(required-as-transformer?"
" reqd_0)))"
"(add-defined-or-required-id-at-nominal!33.1"
" temp153_0"
" temp152_0"
" enclosing-mod150_0"
" phase-shift151_0"
" r+p147_0"
" temp148_0"
" temp149_0))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_160"
" rest_62)"
"(values))))"
"(values))))))"
" for-loop_160)"
" lst_122)))))"
"(if(not"
" #f)"
"(for-loop_159"
"(hash-iterate-next"
" ht_102"
" i_117))"
"(values))))"
"(values))))))"
" for-loop_159)"
"(hash-iterate-first"
" ht_102))))))"
"(if(not"
" #f)"
"(for-loop_158"
"(hash-iterate-next"
" ht_101"
" i_129))"
"(values))))"
"(values))))))"
" for-loop_158)"
"(hash-iterate-first"
" ht_101))))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_157(hash-iterate-next ht_100 i_128))"
"(values))))"
"(values))))))"
" for-loop_157)"
"(hash-iterate-first ht_100))))"
"(void))))))))))"
"(define-values"
"(remove-required-id!75.1)"
"(lambda(unless-matches70_0 r+p72_0 id73_0 phase74_0)"
"(begin"
" 'remove-required-id!75"
"(let-values(((r+p_7) r+p72_0))"
"(let-values(((id_26) id73_0))"
"(let-values(((phase_58) phase74_0))"
"(let-values(((binding_12) unless-matches70_0))"
"(let-values()"
"(let-values(((b_69)"
"(let-values(((id157_0) id_26)((phase158_0) phase_58)((temp159_0) #t))"
"(resolve+shift28.1 #f temp159_0 null unsafe-undefined #f id157_0 phase158_0))))"
"(if b_69"
"(let-values()"
"(let-values(((mpi_31)(intern-mpi r+p_7(module-binding-nominal-module b_69))))"
"(let-values(((at-mod_3)(hash-ref(requires+provides-requires r+p_7) mpi_31 #f)))"
"(if at-mod_3"
"(let-values()"
"(let-values(((nominal-phase_4)(module-binding-nominal-require-phase b_69)))"
"(let-values(((sym-to-reqds_2)(hash-ref at-mod_3 nominal-phase_4 #f)))"
"(if sym-to-reqds_2"
"(let-values()"
"(let-values(((sym_39)(syntax-e$1 id_26)))"
"(let-values(((l_53)(hash-ref sym-to-reqds_2 sym_39 null)))"
"(if(null? l_53)"
"(void)"
"(let-values()"
"(if(same-binding? b_69 binding_12)"
"(void)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_2"
" sym_39"
"(remove-non-matching-requireds"
" l_53"
" id_26"
" phase_58"
" mpi_31"
" nominal-phase_4"
" sym_39)))))))))"
"(void)))))"
"(void)))))"
"(void)))))))))))"
"(define-values"
"(remove-non-matching-requireds)"
"(lambda(reqds_1 id_27 phase_59 mpi_32 nominal-phase_5 sym_40)"
"(begin"
"(reverse$1"
"(let-values(((lst_124) reqds_1))"
"(begin"
"(void)"
"((letrec-values(((for-loop_161)"
"(lambda(fold-var_109 lst_125)"
"(begin"
" 'for-loop"
"(if(not(null? lst_125))"
"(let-values(((r_36)(if(pair? lst_125)(car lst_125) lst_125))"
"((rest_63)(if(pair? lst_125)(cdr lst_125) null)))"
"(let-values(((fold-var_110)"
"(let-values(((r_37)"
"(normalize-required"
" r_36"
" mpi_32"
" nominal-phase_5"
" sym_40)))"
"(begin"
" #t"
"((letrec-values(((for-loop_162)"
"(lambda(fold-var_111)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_112)"
"(let-values(((fold-var_113)"
" fold-var_111))"
"(if(if(eqv?"
" phase_59"
"(required-phase"
" r_37))"
"(free-identifier=?$1"
"(required-id r_37)"
" id_27"
" phase_59"
" phase_59)"
" #f)"
" fold-var_113"
"(let-values(((fold-var_114)"
" fold-var_113))"
"(let-values(((fold-var_115)"
"(let-values()"
"(cons"
"(let-values()"
" r_37)"
" fold-var_114))))"
"(values"
" fold-var_115)))))))"
" fold-var_112))))))"
" for-loop_162)"
" fold-var_109)))))"
"(if(not #f)(for-loop_161 fold-var_110 rest_63) fold-var_110)))"
" fold-var_109)))))"
" for-loop_161)"
" null"
" lst_124)))))))"
"(define-values"
"(check-not-defined95.1)"
"(lambda(accum-update-nominals83_0"
" allow-defined?79_0"
" check-not-required?78_0"
" in80_0"
" remove-shadowed!?82_0"
" unless-matches81_0"
" who84_0"
" r+p92_0"
" id93_0"
" phase94_0)"
"(begin"
" 'check-not-defined95"
"(let-values(((check-not-required?_0) check-not-required?78_0))"
"(let-values(((allow-defined?_0) allow-defined?79_0))"
"(let-values(((r+p_8) r+p92_0))"
"(let-values(((id_28) id93_0))"
"(let-values(((phase_60) phase94_0))"
"(let-values(((orig-s_1) in80_0))"
"(let-values(((ok-binding/delayed_0) unless-matches81_0))"
"(let-values(((remove-shadowed!?_0) remove-shadowed!?82_0))"
"(let-values(((accum-update-nominals_1) accum-update-nominals83_0))"
"(let-values(((who_12) who84_0))"
"(let-values()"
"(let-values(((b_70)"
"(let-values(((id160_0) id_28)((phase161_0) phase_60)((temp162_0) #t))"
"(resolve+shift28.1"
" #f"
" temp162_0"
" null"
" unsafe-undefined"
" #f"
" id160_0"
" phase161_0))))"
"(if(not b_70)"
"(let-values() #f)"
"(if(not(module-binding? b_70))"
"                                  (let-values () (raise-syntax-error$1 #f \"identifier out of context\" id_28))"
"(let-values()"
"(let-values(((defined?_0)"
"(if b_70"
"(eq?(requires+provides-self r+p_8)(module-binding-module b_70))"
" #f)))"
"(if(if defined?_0"
"(not"
"(hash-ref"
"(hash-ref"
"(requires+provides-phase-to-defined-syms r+p_8)"
" phase_60"
" '#hasheq())"
"(module-binding-sym b_70)"
" #f))"
" #f)"
"(let-values() #f)"
"(let-values()"
"(let-values(((define-shadowing-require?_0)"
"(if(not defined?_0)(not check-not-required?_0) #f)))"
"(let-values(((mpi_33)"
"(intern-mpi r+p_8(module-binding-nominal-module b_70))))"
"(let-values(((at-mod_4)"
"(hash-ref(requires+provides-requires r+p_8) mpi_33 #f)))"
"(let-values(((ok-binding_0)"
"(if(not define-shadowing-require?_0)"
"(if(procedure? ok-binding/delayed_0)"
"(ok-binding/delayed_0)"
" ok-binding/delayed_0)"
" #f)))"
"(let-values(((raise-already-bound_0)"
"(lambda(defined?_1)"
"(begin"
" 'raise-already-bound"
"(raise-syntax-error$1"
" who_12"
"(string-append"
"                                                                      \"identifier already \""
"                                                                      (if defined?_1 \"defined\" \"required\")"
"(if(zero-phase? phase_60)"
"                                                                        (let-values () \"\")"
"(if(label-phase? phase_60)"
"                                                                          (let-values () \" for label\")"
"(if(= 1 phase_60)"
"                                                                            (let-values () \" for syntax\")"
"(let-values()"
"                                                                              (format \" for phase ~a\" phase_60))))))"
" orig-s_1"
" id_28)))))"
"(if(if(not at-mod_4)(not define-shadowing-require?_0) #f)"
"(let-values() #f)"
"(if(if ok-binding_0(same-binding? b_70 ok-binding_0) #f)"
"(let-values()"
"(begin"
"(if(same-binding-nominals? b_70 ok-binding_0)"
"(void)"
"(let-values()"
"(let-values(((update!_0)"
"(lambda()"
"(begin"
" 'update!"
"(let-values(((temp163_1) #t)"
"((id164_0) id_28)"
"((temp165_1)"
"(let-values(((ok-binding167_0)"
" ok-binding_0)"
"((temp168_1)"
"(cons"
" b_70"
"(module-binding-extra-nominal-bindings"
" b_70))))"
"(module-binding-update48.1"
" unsafe-undefined"
" temp168_1"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" ok-binding167_0)))"
"((phase166_1) phase_60))"
"(add-binding!17.1"
" #f"
" temp163_1"
" id164_0"
" temp165_1"
" phase166_1))))))"
"(if accum-update-nominals_1"
"(let-values()"
"(set-box!"
" accum-update-nominals_1"
"(cons"
" update!_0"
"(unbox accum-update-nominals_1))))"
"(let-values()(update!_0))))))"
" defined?_0))"
"(if(if defined?_0 allow-defined?_0 #f)"
"(let-values()"
"(let-values(((also-required_0)"
"(requires+provides-also-required r+p_8)))"
"(let-values(((prev-b_0)"
"(hash-ref"
" also-required_0"
"(module-binding-sym b_70)"
" #f)))"
"(begin"
"(if(if prev-b_0"
"(not(same-binding? ok-binding_0 prev-b_0))"
" #f)"
"(let-values()(raise-already-bound_0 #f))"
"(void))"
"(hash-set!"
" also-required_0"
"(module-binding-sym b_70)"
" ok-binding_0)"
"(set-requires+provides-all-bindings-simple?! r+p_8 #f)"
" #t))))"
"(let-values()"
"(let-values(((nominal-phase_6)"
"(module-binding-nominal-require-phase b_70)))"
"(let-values(((sym-to-reqds_3)"
"(hash-ref"
" at-mod_4"
" nominal-phase_6"
" '#hasheq())))"
"(let-values(((reqds_2)"
"(hash-ref"
" sym-to-reqds_3"
"(syntax-e$1 id_28)"
" null)))"
"(let-values(((only-can-can-shadow-require?_0)"
"(let-values(((lst_126) reqds_2))"
"(begin"
"(void)"
"((letrec-values(((for-loop_163)"
"(lambda(only-can-can-shadow-require?_1"
" lst_127)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" lst_127))"
"(let-values(((r_38)"
"(if(pair?"
" lst_127)"
"(car"
" lst_127)"
" lst_127))"
"((rest_64)"
"(if(pair?"
" lst_127)"
"(cdr"
" lst_127)"
" null)))"
"(let-values(((only-can-can-shadow-require?_2)"
"(let-values(((only-can-can-shadow-require?_3)"
" only-can-can-shadow-require?_1))"
"(let-values(((only-can-can-shadow-require?_4)"
"(let-values()"
"(if(if(bulk-required?"
" r_38)"
"(bulk-required-can-be-shadowed?"
" r_38)"
"(required-can-be-shadowed?"
" r_38))"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?!"
" r+p_8"
" #f)"
" only-can-can-shadow-require?_3))"
"(if define-shadowing-require?_0"
"(let-values()"
" #f)"
"(let-values()"
"(raise-already-bound_0"
" defined?_0)))))))"
"(values"
" only-can-can-shadow-require?_4)))))"
"(if(not"
" #f)"
"(for-loop_163"
" only-can-can-shadow-require?_2"
" rest_64)"
" only-can-can-shadow-require?_2)))"
" only-can-can-shadow-require?_1)))))"
" for-loop_163)"
" #t"
" lst_126)))))"
"(begin"
"(if define-shadowing-require?_0"
"(let-values()"
"(begin"
"(set-requires+provides-all-bindings-simple?!"
" r+p_8"
" #f)"
"(if only-can-can-shadow-require?_0"
"(void)"
"(let-values()"
"(hash-set!"
"(requires+provides-also-required r+p_8)"
"(module-binding-sym b_70)"
" b_70)))))"
"(let-values()"
"(if(if remove-shadowed!?_0"
"(not(null? reqds_2))"
" #f)"
"(let-values()"
"(hash-set!"
" sym-to-reqds_3"
"(syntax-e$1 id_28)"
"(remove-non-matching-requireds"
" reqds_2"
" id_28"
" phase_60"
" mpi_33"
" nominal-phase_6"
"(syntax-e$1 id_28))))"
"(void))))"
" #f)))))))))))))))))))))))))))))))))))"
"(define-values"
"(add-defined-syms!103.1)"
"(lambda(as-transformer?98_0 r+p100_0 syms101_0 phase102_0)"
"(begin"
" 'add-defined-syms!103"
"(let-values(((r+p_9) r+p100_0))"
"(let-values(((syms_18) syms101_0))"
"(let-values(((phase_61) phase102_0))"
"(let-values(((as-transformer?_2) as-transformer?98_0))"
"(let-values()"
"(let-values(((phase-to-defined-syms_0)(requires+provides-phase-to-defined-syms r+p_9)))"
"(let-values(((defined-syms_2)(hash-ref phase-to-defined-syms_0 phase_61 '#hasheq())))"
"(let-values(((new-defined-syms_0)"
"(let-values(((lst_128) syms_18))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_128)))"
"((letrec-values(((for-loop_164)"
"(lambda(defined-syms_3 lst_129)"
"(begin"
" 'for-loop"
"(if(pair? lst_129)"
"(let-values(((sym_41)(unsafe-car lst_129))"
"((rest_65)(unsafe-cdr lst_129)))"
"(let-values(((defined-syms_4)"
"(let-values(((defined-syms_5)"
" defined-syms_3))"
"(let-values(((defined-syms_6)"
"(let-values()"
"(hash-set"
" defined-syms_5"
" sym_41"
"(if as-transformer?_2"
" 'transformer"
" 'variable)))))"
"(values defined-syms_6)))))"
"(if(not #f)"
"(for-loop_164 defined-syms_4 rest_65)"
" defined-syms_4)))"
" defined-syms_3)))))"
" for-loop_164)"
" defined-syms_2"
" lst_128)))))"
"(hash-set! phase-to-defined-syms_0 phase_61 new-defined-syms_0))))))))))))"
"(define-values"
"(defined-sym-kind)"
"(lambda(r+p_10 sym_42 phase_62)"
"(begin"
"(let-values(((phase-to-defined-syms_1)(requires+provides-phase-to-defined-syms r+p_10)))"
"(let-values(((defined-syms_7)(hash-ref phase-to-defined-syms_1 phase_62 '#hasheq())))"
"(hash-ref defined-syms_7 sym_42 #f))))))"
"(define-values"
"(extract-module-requires)"
"(lambda(r+p_11 mod-name_11 phase_63)"
"(begin"
"(let-values(((mpi_34)(intern-mpi r+p_11 mod-name_11)))"
"(let-values(((at-mod_5)(hash-ref(requires+provides-requires r+p_11) mpi_34 #f)))"
"(if at-mod_5"
"(reverse$1"
"(let-values(((ht_103)(hash-ref at-mod_5 phase_63 '#hasheq())))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_103)))"
"((letrec-values(((for-loop_165)"
"(lambda(fold-var_116 i_130)"
"(begin"
" 'for-loop"
"(if i_130"
"(let-values(((sym_43 reqds_3)(hash-iterate-key+value ht_103 i_130)))"
"(let-values(((fold-var_117)"
"(let-values(((lst_130) reqds_3))"
"(begin"
"(void)"
"((letrec-values(((for-loop_166)"
"(lambda(fold-var_118 lst_131)"
"(begin"
" 'for-loop"
"(if(not(null? lst_131))"
"(let-values(((reqd_1)"
"(if(pair? lst_131)"
"(car lst_131)"
" lst_131))"
"((rest_66)"
"(if(pair? lst_131)"
"(cdr lst_131)"
" null)))"
"(let-values(((fold-var_119)"
"(let-values(((fold-var_120)"
" fold-var_118))"
"(let-values(((fold-var_121)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_1"
" mpi_34"
" phase_63"
" sym_43))"
" fold-var_120))))"
"(values"
" fold-var_121)))))"
"(if(not #f)"
"(for-loop_166"
" fold-var_119"
" rest_66)"
" fold-var_119)))"
" fold-var_118)))))"
" for-loop_166)"
" fold-var_116"
" lst_130)))))"
"(if(not #f)"
"(for-loop_165 fold-var_117(hash-iterate-next ht_103 i_130))"
" fold-var_117)))"
" fold-var_116)))))"
" for-loop_165)"
" null"
"(hash-iterate-first ht_103)))))"
" #f))))))"
"(define-values"
"(extract-module-definitions)"
"(lambda(r+p_12)"
"(begin"
"(let-values(((or-part_176)(extract-module-requires r+p_12(requires+provides-self r+p_12) 0)))"
"(if or-part_176 or-part_176 null)))))"
"(define-values"
"(extract-all-module-requires)"
"(lambda(r+p_13 mod-name_12 phase_64)"
"(begin"
"(let-values(((self_9)(requires+provides-self r+p_13)))"
"(let-values(((requires_2)(requires+provides-requires r+p_13)))"
"(call/ec"
"(lambda(esc_0)"
"(reverse$1"
"(let-values(((lst_132)(if mod-name_12(list(intern-mpi r+p_13 mod-name_12))(hash-keys requires_2))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_132)))"
"((letrec-values(((for-loop_167)"
"(lambda(fold-var_46 lst_61)"
"(begin"
" 'for-loop"
"(if(pair? lst_61)"
"(let-values(((mod-name_13)(unsafe-car lst_61))"
"((rest_67)(unsafe-cdr lst_61)))"
"(let-values(((fold-var_122)"
"(let-values(((fold-var_123) fold-var_46))"
"(if(eq? mod-name_13 self_9)"
" fold-var_123"
"(let-values(((phase-to-requireds_0)"
"(hash-ref"
" requires_2"
" mod-name_13"
" '#hasheqv())))"
"(begin"
" #t"
"((letrec-values(((for-loop_168)"
"(lambda(fold-var_49)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_50)"
"(let-values(((lst_63)"
"(if(eq?"
" phase_64"
" 'all)"
"(hash-keys"
" phase-to-requireds_0)"
"(list"
" phase_64))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_63)))"
"((letrec-values(((for-loop_88)"
"(lambda(fold-var_124"
" lst_133)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_133)"
"(let-values(((phase_65)"
"(unsafe-car"
" lst_133))"
"((rest_68)"
"(unsafe-cdr"
" lst_133)))"
"(let-values(((fold-var_125)"
"(let-values(((ht_104)"
"(hash-ref"
" phase-to-requireds_0"
" phase_65"
"(lambda()"
"(esc_0"
" #f)))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_104)))"
"((letrec-values(((for-loop_169)"
"(lambda(fold-var_126"
" i_131)"
"(begin"
" 'for-loop"
"(if i_131"
"(let-values(((sym_44"
" reqds_4)"
"(hash-iterate-key+value"
" ht_104"
" i_131)))"
"(let-values(((fold-var_127)"
"(let-values(((lst_134)"
" reqds_4))"
"(begin"
"(void)"
"((letrec-values(((for-loop_170)"
"(lambda(fold-var_128"
" lst_135)"
"(begin"
" 'for-loop"
"(if(not"
"(null?"
" lst_135))"
"(let-values(((reqd_2)"
"(if(pair?"
" lst_135)"
"(car"
" lst_135)"
" lst_135))"
"((rest_69)"
"(if(pair?"
" lst_135)"
"(cdr"
" lst_135)"
" null)))"
"(let-values(((fold-var_129)"
"(let-values(((fold-var_130)"
" fold-var_128))"
"(let-values(((fold-var_131)"
"(let-values()"
"(cons"
"(let-values()"
"(normalize-required"
" reqd_2"
" mod-name_13"
" phase_65"
" sym_44))"
" fold-var_130))))"
"(values"
" fold-var_131)))))"
"(if(not"
" #f)"
"(for-loop_170"
" fold-var_129"
" rest_69)"
" fold-var_129)))"
" fold-var_128)))))"
" for-loop_170)"
" fold-var_126"
" lst_134)))))"
"(if(not"
" #f)"
"(for-loop_169"
" fold-var_127"
"(hash-iterate-next"
" ht_104"
" i_131))"
" fold-var_127)))"
" fold-var_126)))))"
" for-loop_169)"
" fold-var_124"
"(hash-iterate-first"
" ht_104))))))"
"(if(not"
" #f)"
"(for-loop_88"
" fold-var_125"
" rest_68)"
" fold-var_125)))"
" fold-var_124)))))"
" for-loop_88)"
" fold-var_49"
" lst_63)))))"
" fold-var_50))))))"
" for-loop_168)"
" fold-var_123)))))))"
"(if(not #f)(for-loop_167 fold-var_122 rest_67) fold-var_122)))"
" fold-var_46)))))"
" for-loop_167)"
" null"
" lst_132)))))))))))"
"(define-values"
"(add-provide!117.1)"
"(lambda(as-protected?106_0"
" as-transformer?107_0"
" r+p110_0"
" sym111_0"
" phase112_0"
" binding113_0"
" immed-binding114_0"
" id115_0"
" orig-s116_0)"
"(begin"
" 'add-provide!117"
"(let-values(((r+p_14) r+p110_0))"
"(let-values(((sym_45) sym111_0))"
"(let-values(((phase_66) phase112_0))"
"(let-values(((binding_13) binding113_0))"
"(let-values(((immed-binding_0) immed-binding114_0))"
"(let-values(((id_29) id115_0))"
"(let-values(((orig-s_2) orig-s116_0))"
"(let-values(((as-protected?_0) as-protected?106_0))"
"(let-values(((as-transformer?_3) as-transformer?107_0))"
"(let-values()"
"(begin"
"(if(if as-protected?_0"
"(not(eq?(module-binding-module immed-binding_0)(requires+provides-self r+p_14)))"
" #f)"
"(let-values()"
"                                (raise-syntax-error$1 #f \"cannot protect required identifier in re-provide\" sym_45))"
"(void))"
"(hash-update!"
"(requires+provides-provides r+p_14)"
" phase_66"
"(lambda(at-phase_9)"
"(let-values(((b/p_0)(hash-ref at-phase_9 sym_45 #f)))"
"(let-values(((b_71)(provided-as-binding b/p_0)))"
"(if(not b_71)"
"(let-values()"
"(let-values(((plain-binding_0)"
"(if(binding-free=id binding_13)"
"(let-values(((binding169_0) binding_13)((temp170_0) #f))"
"(module-binding-update48.1"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" temp170_0"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" unsafe-undefined"
" binding169_0))"
" binding_13)))"
"(hash-set"
" at-phase_9"
" sym_45"
"(if(let-values(((or-part_177) as-protected?_0))"
"(if or-part_177 or-part_177 as-transformer?_3))"
"(provided1.1 plain-binding_0 as-protected?_0 as-transformer?_3)"
" plain-binding_0))))"
"(if(same-binding? b_71 binding_13)"
"(let-values() at-phase_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                          \"identifier already provided (as a different binding)\""
" orig-s_2"
" id_29)))))))"
" '#hasheq())))))))))))))))"
"(define-values"
"(extract-requires-and-provides)"
"(lambda(r+p_15 old-self_0 new-self_1)"
"(begin"
"(let-values(((extract-requires_0)"
"(lambda()"
"(begin"
" 'extract-requires"
"(let-values(((phase-to-mpis-in-order_0)(requires+provides-require-mpis-in-order r+p_15)))"
"(let-values(((phases-in-order_1)"
"(let-values(((temp171_0)(hash-keys phase-to-mpis-in-order_0))"
"((phase<?172_0) phase<?))"
"(sort7.1 #f #f temp171_0 phase<?172_0))))"
"(reverse$1"
"(let-values(((lst_136) phases-in-order_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_136)))"
"((letrec-values(((for-loop_171)"
"(lambda(fold-var_132 lst_137)"
"(begin"
" 'for-loop"
"(if(pair? lst_137)"
"(let-values(((phase_67)(unsafe-car lst_137))"
"((rest_70)(unsafe-cdr lst_137)))"
"(let-values(((fold-var_133)"
"(let-values(((fold-var_134) fold-var_132))"
"(let-values(((fold-var_135)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_67"
"(reverse$1"
"(let-values(((lst_138)"
"(reverse$1"
"(hash-ref"
" phase-to-mpis-in-order_0"
" phase_67))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_138)))"
"((letrec-values(((for-loop_172)"
"(lambda(fold-var_136"
" lst_139)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_139)"
"(let-values(((mpi_35)"
"(unsafe-car"
" lst_139))"
"((rest_71)"
"(unsafe-cdr"
" lst_139)))"
"(let-values(((fold-var_137)"
"(let-values(((fold-var_138)"
" fold-var_136))"
"(if(eq?"
" mpi_35"
" old-self_0)"
" fold-var_138"
"(let-values(((fold-var_139)"
" fold-var_138))"
"(let-values(((fold-var_140)"
"(let-values()"
"(cons"
"(let-values()"
"(module-path-index-shift"
" mpi_35"
" old-self_0"
" new-self_1))"
" fold-var_139))))"
"(values"
" fold-var_140)))))))"
"(if(not"
" #f)"
"(for-loop_172"
" fold-var_137"
" rest_71)"
" fold-var_137)))"
" fold-var_136)))))"
" for-loop_172)"
" null"
" lst_138))))))"
" fold-var_134))))"
"(values fold-var_135)))))"
"(if(not #f)"
"(for-loop_171 fold-var_133 rest_70)"
" fold-var_133)))"
" fold-var_132)))))"
" for-loop_171)"
" null"
" lst_136))))))))))"
"(let-values(((extract-provides_0)"
"(lambda()"
"(begin"
" 'extract-provides"
"(shift-provides-module-path-index"
"(requires+provides-provides r+p_15)"
" old-self_0"
" new-self_1)))))"
"(values(extract-requires_0)(extract-provides_0)))))))"
"(define-values"
"(shift-provides-module-path-index)"
"(lambda(provides_5 from-mpi_7 to-mpi_6)"
"(begin"
"(let-values(((ht_105) provides_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_105)))"
"((letrec-values(((for-loop_93)"
"(lambda(table_132 i_132)"
"(begin"
" 'for-loop"
"(if i_132"
"(let-values(((phase_68 at-phase_10)(hash-iterate-key+value ht_105 i_132)))"
"(let-values(((table_133)"
"(let-values(((table_134) table_132))"
"(let-values(((table_135)"
"(let-values()"
"(let-values(((key_53 val_45)"
"(let-values()"
"(values"
" phase_68"
"(let-values(((ht_71) at-phase_10))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_71)))"
"((letrec-values(((for-loop_94)"
"(lambda(table_103"
" i_89)"
"(begin"
" 'for-loop"
"(if i_89"
"(let-values(((sym_46"
" binding_14)"
"(hash-iterate-key+value"
" ht_71"
" i_89)))"
"(let-values(((table_104)"
"(let-values(((table_105)"
" table_103))"
"(let-values(((table_106)"
"(let-values()"
"(let-values(((key_40"
" val_33)"
"(let-values()"
"(values"
" sym_46"
"(if(eq?"
" from-mpi_7"
" to-mpi_6)"
"(let-values()"
" binding_14)"
"(let-values()"
"((letrec-values(((loop_87)"
"(lambda(binding_15)"
"(begin"
" 'loop"
"(if(provided?"
" binding_15)"
"(let-values()"
"(provided1.1"
"(loop_87"
"(provided-binding"
" binding_15))"
"(provided-protected?"
" binding_15)"
"(provided-syntax?"
" binding_15)))"
"(let-values()"
"(binding-module-path-index-shift"
" binding_15"
" from-mpi_7"
" to-mpi_6)))))))"
" loop_87)"
" binding_14)))))))"
"(hash-set"
" table_105"
" key_40"
" val_33)))))"
"(values"
" table_106)))))"
"(if(not"
" #f)"
"(for-loop_94"
" table_104"
"(hash-iterate-next"
" ht_71"
" i_89))"
" table_104)))"
" table_103)))))"
" for-loop_94)"
" '#hasheq()"
"(hash-iterate-first"
" ht_71))))))))"
"(hash-set table_134 key_53 val_45)))))"
"(values table_135)))))"
"(if(not #f)(for-loop_93 table_133(hash-iterate-next ht_105 i_132)) table_133)))"
" table_132)))))"
" for-loop_93)"
" '#hasheqv()"
"(hash-iterate-first ht_105)))))))"
"(define-values"
"(struct:adjust-only adjust-only1.1 adjust-only? adjust-only-syms)"
"(let-values(((struct:_1 make-_1 ?_1 -ref_1 -set!_1)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-only #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-only)))))"
"(values struct:_1 make-_1 ?_1(make-struct-field-accessor -ref_1 0 'syms))))"
"(define-values"
"(struct:adjust-prefix adjust-prefix2.1 adjust-prefix? adjust-prefix-sym)"
"(let-values(((struct:_9 make-_9 ?_9 -ref_9 -set!_9)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-prefix #f 1 0 #f null(current-inspector) #f '(0) #f 'adjust-prefix)))))"
"(values struct:_9 make-_9 ?_9(make-struct-field-accessor -ref_9 0 'sym))))"
"(define-values"
"(struct:adjust-all-except adjust-all-except3.1 adjust-all-except? adjust-all-except-prefix-sym adjust-all-except-syms)"
"(let-values(((struct:_10 make-_10 ?_10 -ref_10 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'adjust-all-except"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'adjust-all-except)))))"
"(values"
" struct:_10"
" make-_10"
" ?_10"
"(make-struct-field-accessor -ref_10 0 'prefix-sym)"
"(make-struct-field-accessor -ref_10 1 'syms))))"
"(define-values"
"(struct:adjust-rename adjust-rename4.1 adjust-rename? adjust-rename-to-id adjust-rename-from-sym)"
"(let-values(((struct:_67 make-_67 ?_67 -ref_67 -set!_67)"
"(let-values()"
"(let-values()"
"(make-struct-type 'adjust-rename #f 2 0 #f null(current-inspector) #f '(0 1) #f 'adjust-rename)))))"
"(values"
" struct:_67"
" make-_67"
" ?_67"
"(make-struct-field-accessor -ref_67 0 'to-id)"
"(make-struct-field-accessor -ref_67 1 'from-sym))))"
"(define-values(layers$1) '(raw phaseless path))"
"(define-values"
"(parse-and-perform-requires!30.1)"
"(lambda(copy-variable-as-constant?11_0"
" copy-variable-phase-level10_0"
" declared-submodule-names9_0"
" initial-require?13_0"
" run-phase6_0"
" run?7_0"
" self5_0"
" skip-variable-phase-level12_0"
" visit?8_0"
" who14_0"
" reqs25_0"
" orig-s26_0"
" m-ns27_0"
" phase-shift28_0"
" requires+provides29_0)"
"(begin"
" 'parse-and-perform-requires!30"
"(let-values(((reqs_0) reqs25_0))"
"(let-values(((orig-s_3) orig-s26_0))"
"(let-values(((m-ns_8) m-ns27_0))"
"(let-values(((phase-shift_8) phase-shift28_0))"
"(let-values(((requires+provides_1) requires+provides29_0))"
"(let-values(((self_10) self5_0))"
"(let-values(((run-phase_5)"
"(if(eq? run-phase6_0 unsafe-undefined)(namespace-phase m-ns_8) run-phase6_0)))"
"(let-values(((run?_1) run?7_0))"
"(let-values(((visit?_1) visit?8_0))"
"(let-values(((declared-submodule-names_2)"
"(if(eq? declared-submodule-names9_0 unsafe-undefined)"
" '#hasheq()"
" declared-submodule-names9_0)))"
"(let-values(((copy-variable-phase-level_0) copy-variable-phase-level10_0))"
"(let-values(((copy-variable-as-constant?_0) copy-variable-as-constant?11_0))"
"(let-values(((skip-variable-phase-level_0) skip-variable-phase-level12_0))"
"(let-values(((initial-require?_0) initial-require?13_0))"
"(let-values(((who_13) who14_0))"
"(let-values()"
"((letrec-values(((loop_88)"
"(lambda(reqs_1"
" top-req_0"
" phase-shift_9"
" just-meta_0"
" adjust_0"
" for-meta-ok?_0"
" just-meta-ok?_0"
" layer_5)"
"(begin"
" 'loop"
"(let-values(((lst_140) reqs_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_140)))"
"((letrec-values(((for-loop_173)"
"(lambda(result_74 lst_141)"
"(begin"
" 'for-loop"
"(if(pair? lst_141)"
"(let-values(((req_0)"
"(unsafe-car"
" lst_141))"
"((rest_72)"
"(unsafe-cdr"
" lst_141)))"
"(let-values(((result_75)"
"(let-values()"
"(let-values(((result_76)"
"(let-values()"
"(let-values()"
"(let-values(((check-nested_0)"
"(let-values(((check-nested116_0)"
"(lambda(want-layer115_0"
" ok?114_0)"
"(begin"
" 'check-nested116"
"(let-values(((want-layer_0)"
" want-layer115_0))"
"(let-values(((ok?_1)"
" ok?114_0))"
"(let-values()"
"(if(if ok?_1"
"(member"
" want-layer_0"
"(member"
" layer_5"
" layers$1))"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"invalid nesting\""
" orig-s_3"
" req_0))))))))))"
"(case-lambda"
"((want-layer_1)"
"(begin"
" 'check-nested"
"(check-nested116_0"
" want-layer_1"
" #t)))"
"((want-layer_2"
" ok?114_1)"
"(check-nested116_0"
" want-layer_2"
" ok?114_1))))))"
"(let-values(((fm_0)"
"(if(pair?"
"(syntax-e$1"
" req_0))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" req_0)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" req_0)))"
" #f)"
" #f)))"
"(let-values(((tmp_24)"
" fm_0))"
"(if(equal?"
" tmp_24"
" 'for-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_2"
" for-meta118_0"
" phase-level119_0"
" spec120_0)"
"(let-values(((s_200)"
" req_0))"
"(let-values(((orig-s_4)"
" s_200))"
"(let-values(((for-meta118_1"
" phase-level119_1"
" spec120_1)"
"(let-values(((s_201)"
"(if(syntax?$1"
" s_200)"
"(syntax-e$1"
" s_200)"
" s_200)))"
"(if(pair?"
" s_201)"
"(let-values(((for-meta121_0)"
"(let-values(((s_202)"
"(car"
" s_201)))"
" s_202))"
"((phase-level122_0"
" spec123_0)"
"(let-values(((s_203)"
"(cdr"
" s_201)))"
"(let-values(((s_204)"
"(if(syntax?$1"
" s_203)"
"(syntax-e$1"
" s_203)"
" s_203)))"
"(if(pair?"
" s_204)"
"(let-values(((phase-level124_0)"
"(let-values(((s_205)"
"(car"
" s_204)))"
" s_205))"
"((spec125_0)"
"(let-values(((s_206)"
"(cdr"
" s_204)))"
"(let-values(((s_62)"
"(if(syntax?$1"
" s_206)"
"(syntax-e$1"
" s_206)"
" s_206)))"
"(let-values(((flat-s_0)"
"(to-syntax-list.1"
" s_62)))"
"(if(not"
" flat-s_0)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_4))"
"(let-values()"
" flat-s_0)))))))"
"(values"
" phase-level124_0"
" spec125_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_4))))))"
"(values"
" for-meta121_0"
" phase-level122_0"
" spec123_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_4)))))"
"(values"
" #t"
" for-meta118_1"
" phase-level119_1"
" spec120_1))))))"
"(let-values(((p_34)"
"(syntax-e$1"
" phase-level119_0)))"
"(begin"
"(if(phase?"
" p_34)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad phase\""
" orig-s_3"
" req_0)))"
"(loop_88"
" spec120_0"
"(let-values(((or-part_178)"
" top-req_0))"
"(if or-part_178"
" or-part_178"
" req_0))"
"(phase+"
" phase-shift_9"
" p_34)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))))"
"(if(equal?"
" tmp_24"
" 'for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_3"
" for-syntax126_0"
" spec127_0)"
"(let-values(((s_67)"
" req_0))"
"(let-values(((orig-s_5)"
" s_67))"
"(let-values(((for-syntax126_1"
" spec127_1)"
"(let-values(((s_207)"
"(if(syntax?$1"
" s_67)"
"(syntax-e$1"
" s_67)"
" s_67)))"
"(if(pair?"
" s_207)"
"(let-values(((for-syntax128_0)"
"(let-values(((s_208)"
"(car"
" s_207)))"
" s_208))"
"((spec129_0)"
"(let-values(((s_209)"
"(cdr"
" s_207)))"
"(let-values(((s_38)"
"(if(syntax?$1"
" s_209)"
"(syntax-e$1"
" s_209)"
" s_209)))"
"(let-values(((flat-s_1)"
"(to-syntax-list.1"
" s_38)))"
"(if(not"
" flat-s_1)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_5))"
"(let-values()"
" flat-s_1)))))))"
"(values"
" for-syntax128_0"
" spec129_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_5)))))"
"(values"
" #t"
" for-syntax126_1"
" spec127_1))))))"
"(loop_88"
" spec127_0"
"(let-values(((or-part_179)"
" top-req_0))"
"(if or-part_179"
" or-part_179"
" req_0))"
"(phase+"
" phase-shift_9"
" 1)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_24"
" 'for-template)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_4"
" for-template130_0"
" spec131_0)"
"(let-values(((s_210)"
" req_0))"
"(let-values(((orig-s_6)"
" s_210))"
"(let-values(((for-template130_1"
" spec131_1)"
"(let-values(((s_211)"
"(if(syntax?$1"
" s_210)"
"(syntax-e$1"
" s_210)"
" s_210)))"
"(if(pair?"
" s_211)"
"(let-values(((for-template132_0)"
"(let-values(((s_97)"
"(car"
" s_211)))"
" s_97))"
"((spec133_0)"
"(let-values(((s_212)"
"(cdr"
" s_211)))"
"(let-values(((s_213)"
"(if(syntax?$1"
" s_212)"
"(syntax-e$1"
" s_212)"
" s_212)))"
"(let-values(((flat-s_2)"
"(to-syntax-list.1"
" s_213)))"
"(if(not"
" flat-s_2)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_6))"
"(let-values()"
" flat-s_2)))))))"
"(values"
" for-template132_0"
" spec133_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_6)))))"
"(values"
" #t"
" for-template130_1"
" spec131_1))))))"
"(loop_88"
" spec131_0"
"(let-values(((or-part_180)"
" top-req_0))"
"(if or-part_180"
" or-part_180"
" req_0))"
"(phase+"
" phase-shift_9"
" -1)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_24"
" 'for-label)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" for-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_5"
" for-label134_0"
" spec135_0)"
"(let-values(((s_71)"
" req_0))"
"(let-values(((orig-s_7)"
" s_71))"
"(let-values(((for-label134_1"
" spec135_1)"
"(let-values(((s_214)"
"(if(syntax?$1"
" s_71)"
"(syntax-e$1"
" s_71)"
" s_71)))"
"(if(pair?"
" s_214)"
"(let-values(((for-label136_0)"
"(let-values(((s_215)"
"(car"
" s_214)))"
" s_215))"
"((spec137_0)"
"(let-values(((s_169)"
"(cdr"
" s_214)))"
"(let-values(((s_216)"
"(if(syntax?$1"
" s_169)"
"(syntax-e$1"
" s_169)"
" s_169)))"
"(let-values(((flat-s_3)"
"(to-syntax-list.1"
" s_216)))"
"(if(not"
" flat-s_3)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_7))"
"(let-values()"
" flat-s_3)))))))"
"(values"
" for-label136_0"
" spec137_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_7)))))"
"(values"
" #t"
" for-label134_1"
" spec135_1))))))"
"(loop_88"
" spec135_0"
"(let-values(((or-part_181)"
" top-req_0))"
"(if or-part_181"
" or-part_181"
" req_0))"
"(phase+"
" phase-shift_9"
" #f)"
" just-meta_0"
" adjust_0"
" #f"
" just-meta-ok?_0"
" 'raw))))"
"(if(equal?"
" tmp_24"
" 'just-meta)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'raw"
" just-meta-ok?_0)"
"(values))))"
"(let-values(((ok?_6"
" just-meta138_0"
" phase-level139_0"
" spec140_0)"
"(let-values(((s_217)"
" req_0))"
"(let-values(((orig-s_8)"
" s_217))"
"(let-values(((just-meta138_1"
" phase-level139_1"
" spec140_1)"
"(let-values(((s_218)"
"(if(syntax?$1"
" s_217)"
"(syntax-e$1"
" s_217)"
" s_217)))"
"(if(pair?"
" s_218)"
"(let-values(((just-meta141_0)"
"(let-values(((s_219)"
"(car"
" s_218)))"
" s_219))"
"((phase-level142_0"
" spec143_0)"
"(let-values(((s_220)"
"(cdr"
" s_218)))"
"(let-values(((s_221)"
"(if(syntax?$1"
" s_220)"
"(syntax-e$1"
" s_220)"
" s_220)))"
"(if(pair?"
" s_221)"
"(let-values(((phase-level144_0)"
"(let-values(((s_107)"
"(car"
" s_221)))"
" s_107))"
"((spec145_0)"
"(let-values(((s_222)"
"(cdr"
" s_221)))"
"(let-values(((s_223)"
"(if(syntax?$1"
" s_222)"
"(syntax-e$1"
" s_222)"
" s_222)))"
"(let-values(((flat-s_4)"
"(to-syntax-list.1"
" s_223)))"
"(if(not"
" flat-s_4)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_8))"
"(let-values()"
" flat-s_4)))))))"
"(values"
" phase-level144_0"
" spec145_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                         \"bad syntax\""
" orig-s_8))))))"
"(values"
" just-meta141_0"
" phase-level142_0"
" spec143_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_8)))))"
"(values"
" #t"
" just-meta138_1"
" phase-level139_1"
" spec140_1))))))"
"(let-values(((p_35)"
"(syntax-e$1"
" phase-level139_0)))"
"(begin"
"(if(phase?"
" p_35)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad phase\""
" orig-s_3"
" req_0)))"
"(loop_88"
" spec140_0"
"(let-values(((or-part_182)"
" top-req_0))"
"(if or-part_182"
" or-part_182"
" req_0))"
" phase-shift_9"
" p_35"
" adjust_0"
" for-meta-ok?_0"
" #f"
" 'raw))))))"
"(if(equal?"
" tmp_24"
" 'only)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_7"
" only146_0"
" spec147_0"
" id148_0)"
"(let-values(((s_162)"
" req_0))"
"(let-values(((orig-s_9)"
" s_162))"
"(let-values(((only146_1"
" spec147_1"
" id148_1)"
"(let-values(((s_224)"
"(if(syntax?$1"
" s_162)"
"(syntax-e$1"
" s_162)"
" s_162)))"
"(if(pair?"
" s_224)"
"(let-values(((only149_0)"
"(let-values(((s_118)"
"(car"
" s_224)))"
" s_118))"
"((spec150_0"
" id151_0)"
"(let-values(((s_119)"
"(cdr"
" s_224)))"
"(let-values(((s_225)"
"(if(syntax?$1"
" s_119)"
"(syntax-e$1"
" s_119)"
" s_119)))"
"(if(pair?"
" s_225)"
"(let-values(((spec152_0)"
"(let-values(((s_121)"
"(car"
" s_225)))"
" s_121))"
"((id153_0)"
"(let-values(((s_226)"
"(cdr"
" s_225)))"
"(let-values(((s_227)"
"(if(syntax?$1"
" s_226)"
"(syntax-e$1"
" s_226)"
" s_226)))"
"(let-values(((flat-s_5)"
"(to-syntax-list.1"
" s_227)))"
"(if(not"
" flat-s_5)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_9))"
"(let-values()"
"(let-values(((id_30)"
"(let-values(((lst_142)"
" flat-s_5))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_142)))"
"((letrec-values(((for-loop_174)"
"(lambda(id_31"
" lst_143)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_143)"
"(let-values(((s_228)"
"(unsafe-car"
" lst_143))"
"((rest_73)"
"(unsafe-cdr"
" lst_143)))"
"(let-values(((id_32)"
"(let-values(((id_33)"
" id_31))"
"(let-values(((id_34)"
"(let-values()"
"(let-values(((id154_0)"
"(let-values()"
"(if(let-values(((or-part_183)"
"(if(syntax?$1"
" s_228)"
"(symbol?"
"(syntax-e$1"
" s_228))"
" #f)))"
"(if or-part_183"
" or-part_183"
"(symbol?"
" s_228)))"
" s_228"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_9"
" s_228)))))"
"(cons"
" id154_0"
" id_33)))))"
"(values"
" id_34)))))"
"(if(not"
" #f)"
"(for-loop_174"
" id_32"
" rest_73)"
" id_32)))"
" id_31)))))"
" for-loop_174)"
" null"
" lst_142)))))"
"(reverse$1"
" id_30)))))))))"
"(values"
" spec152_0"
" id153_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_9))))))"
"(values"
" only149_0"
" spec150_0"
" id151_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_9)))))"
"(values"
" #t"
" only146_1"
" spec147_1"
" id148_1))))))"
"(loop_88"
"(list"
" spec147_0)"
"(let-values(((or-part_184)"
" top-req_0))"
"(if or-part_184"
" or-part_184"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-only1.1"
"(ids->sym-set"
" id148_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_24"
" 'prefix)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_8"
" prefix155_0"
" id:prefix156_0"
" spec157_0)"
"(let-values(((s_129)"
" req_0))"
"(let-values(((orig-s_10)"
" s_129))"
"(let-values(((prefix155_1"
" id:prefix156_1"
" spec157_1)"
"(let-values(((s_229)"
"(if(syntax?$1"
" s_129)"
"(syntax-e$1"
" s_129)"
" s_129)))"
"(if(pair?"
" s_229)"
"(let-values(((prefix158_0)"
"(let-values(((s_230)"
"(car"
" s_229)))"
" s_230))"
"((id:prefix159_0"
" spec160_0)"
"(let-values(((s_231)"
"(cdr"
" s_229)))"
"(let-values(((s_232)"
"(if(syntax?$1"
" s_231)"
"(syntax-e$1"
" s_231)"
" s_231)))"
"(if(pair?"
" s_232)"
"(let-values(((id:prefix161_0)"
"(let-values(((s_233)"
"(car"
" s_232)))"
"(if(let-values(((or-part_185)"
"(if(syntax?$1"
" s_233)"
"(symbol?"
"(syntax-e$1"
" s_233))"
" #f)))"
"(if or-part_185"
" or-part_185"
"(symbol?"
" s_233)))"
" s_233"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_10"
" s_233))))"
"((spec162_0)"
"(let-values(((s_234)"
"(cdr"
" s_232)))"
"(let-values(((s_235)"
"(if(syntax?$1"
" s_234)"
"(syntax-e$1"
" s_234)"
" s_234)))"
"(if(pair?"
" s_235)"
"(let-values(((spec163_0)"
"(let-values(((s_133)"
"(car"
" s_235)))"
" s_133))"
"(()"
"(let-values(((s_236)"
"(cdr"
" s_235)))"
"(let-values(((s_237)"
"(if(syntax?$1"
" s_236)"
"(syntax-e$1"
" s_236)"
" s_236)))"
"(if(null?"
" s_237)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_10))))))"
"(values"
" spec163_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_10))))))"
"(values"
" id:prefix161_0"
" spec162_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_10))))))"
"(values"
" prefix158_0"
" id:prefix159_0"
" spec160_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                         \"bad syntax\""
" orig-s_10)))))"
"(values"
" #t"
" prefix155_1"
" id:prefix156_1"
" spec157_1))))))"
"(loop_88"
"(list"
" spec157_0)"
"(let-values(((or-part_113)"
" top-req_0))"
"(if or-part_113"
" or-part_113"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-prefix2.1"
"(syntax-e$1"
" id:prefix156_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_24"
" 'all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_9"
" all-except164_0"
" spec165_0"
" id166_0)"
"(let-values(((s_238)"
" req_0))"
"(let-values(((orig-s_11)"
" s_238))"
"(let-values(((all-except164_1"
" spec165_1"
" id166_1)"
"(let-values(((s_239)"
"(if(syntax?$1"
" s_238)"
"(syntax-e$1"
" s_238)"
" s_238)))"
"(if(pair?"
" s_239)"
"(let-values(((all-except167_0)"
"(let-values(((s_240)"
"(car"
" s_239)))"
" s_240))"
"((spec168_0"
" id169_0)"
"(let-values(((s_241)"
"(cdr"
" s_239)))"
"(let-values(((s_242)"
"(if(syntax?$1"
" s_241)"
"(syntax-e$1"
" s_241)"
" s_241)))"
"(if(pair?"
" s_242)"
"(let-values(((spec170_0)"
"(let-values(((s_243)"
"(car"
" s_242)))"
" s_243))"
"((id171_0)"
"(let-values(((s_244)"
"(cdr"
" s_242)))"
"(let-values(((s_245)"
"(if(syntax?$1"
" s_244)"
"(syntax-e$1"
" s_244)"
" s_244)))"
"(let-values(((flat-s_6)"
"(to-syntax-list.1"
" s_245)))"
"(if(not"
" flat-s_6)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_11))"
"(let-values()"
"(let-values(((id_35)"
"(let-values(((lst_144)"
" flat-s_6))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_144)))"
"((letrec-values(((for-loop_175)"
"(lambda(id_36"
" lst_145)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_145)"
"(let-values(((s_246)"
"(unsafe-car"
" lst_145))"
"((rest_74)"
"(unsafe-cdr"
" lst_145)))"
"(let-values(((id_37)"
"(let-values(((id_38)"
" id_36))"
"(let-values(((id_39)"
"(let-values()"
"(let-values(((id172_0)"
"(let-values()"
"(if(let-values(((or-part_186)"
"(if(syntax?$1"
" s_246)"
"(symbol?"
"(syntax-e$1"
" s_246))"
" #f)))"
"(if or-part_186"
" or-part_186"
"(symbol?"
" s_246)))"
" s_246"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_11"
" s_246)))))"
"(cons"
" id172_0"
" id_38)))))"
"(values"
" id_39)))))"
"(if(not"
" #f)"
"(for-loop_175"
" id_37"
" rest_74)"
" id_37)))"
" id_36)))))"
" for-loop_175)"
" null"
" lst_144)))))"
"(reverse$1"
" id_35)))))))))"
"(values"
" spec170_0"
" id171_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_11))))))"
"(values"
" all-except167_0"
" spec168_0"
" id169_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_11)))))"
"(values"
" #t"
" all-except164_1"
" spec165_1"
" id166_1))))))"
"(loop_88"
"(list"
" spec165_0)"
"(let-values(((or-part_187)"
" top-req_0))"
"(if or-part_187"
" or-part_187"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-all-except3.1"
" '||"
"(ids->sym-set"
" id166_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_24"
" 'prefix-all-except)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_10"
" prefix-all-except173_0"
" id:prefix174_0"
" spec175_0"
" id176_0)"
"(let-values(((s_247)"
" req_0))"
"(let-values(((orig-s_12)"
" s_247))"
"(let-values(((prefix-all-except173_1"
" id:prefix174_1"
" spec175_1"
" id176_1)"
"(let-values(((s_248)"
"(if(syntax?$1"
" s_247)"
"(syntax-e$1"
" s_247)"
" s_247)))"
"(if(pair?"
" s_248)"
"(let-values(((prefix-all-except177_0)"
"(let-values(((s_249)"
"(car"
" s_248)))"
" s_249))"
"((id:prefix178_0"
" spec179_0"
" id180_0)"
"(let-values(((s_250)"
"(cdr"
" s_248)))"
"(let-values(((s_251)"
"(if(syntax?$1"
" s_250)"
"(syntax-e$1"
" s_250)"
" s_250)))"
"(if(pair?"
" s_251)"
"(let-values(((id:prefix181_0)"
"(let-values(((s_252)"
"(car"
" s_251)))"
"(if(let-values(((or-part_188)"
"(if(syntax?$1"
" s_252)"
"(symbol?"
"(syntax-e$1"
" s_252))"
" #f)))"
"(if or-part_188"
" or-part_188"
"(symbol?"
" s_252)))"
" s_252"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_12"
" s_252))))"
"((spec182_0"
" id183_0)"
"(let-values(((s_253)"
"(cdr"
" s_251)))"
"(let-values(((s_254)"
"(if(syntax?$1"
" s_253)"
"(syntax-e$1"
" s_253)"
" s_253)))"
"(if(pair?"
" s_254)"
"(let-values(((spec184_0)"
"(let-values(((s_255)"
"(car"
" s_254)))"
" s_255))"
"((id185_0)"
"(let-values(((s_256)"
"(cdr"
" s_254)))"
"(let-values(((s_257)"
"(if(syntax?$1"
" s_256)"
"(syntax-e$1"
" s_256)"
" s_256)))"
"(let-values(((flat-s_7)"
"(to-syntax-list.1"
" s_257)))"
"(if(not"
" flat-s_7)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_12))"
"(let-values()"
"(let-values(((id_40)"
"(let-values(((lst_146)"
" flat-s_7))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_146)))"
"((letrec-values(((for-loop_176)"
"(lambda(id_41"
" lst_147)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_147)"
"(let-values(((s_258)"
"(unsafe-car"
" lst_147))"
"((rest_75)"
"(unsafe-cdr"
" lst_147)))"
"(let-values(((id_42)"
"(let-values(((id_43)"
" id_41))"
"(let-values(((id_44)"
"(let-values()"
"(let-values(((id186_0)"
"(let-values()"
"(if(let-values(((or-part_189)"
"(if(syntax?$1"
" s_258)"
"(symbol?"
"(syntax-e$1"
" s_258))"
" #f)))"
"(if or-part_189"
" or-part_189"
"(symbol?"
" s_258)))"
" s_258"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_12"
" s_258)))))"
"(cons"
" id186_0"
" id_43)))))"
"(values"
" id_44)))))"
"(if(not"
" #f)"
"(for-loop_176"
" id_42"
" rest_75)"
" id_42)))"
" id_41)))))"
" for-loop_176)"
" null"
" lst_146)))))"
"(reverse$1"
" id_40)))))))))"
"(values"
" spec184_0"
" id185_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_12))))))"
"(values"
" id:prefix181_0"
" spec182_0"
" id183_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_12))))))"
"(values"
" prefix-all-except177_0"
" id:prefix178_0"
" spec179_0"
" id180_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                             \"bad syntax\""
" orig-s_12)))))"
"(values"
" #t"
" prefix-all-except173_1"
" id:prefix174_1"
" spec175_1"
" id176_1))))))"
"(loop_88"
"(list"
" spec175_0)"
"(let-values(((or-part_190)"
" top-req_0))"
"(if or-part_190"
" or-part_190"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-all-except3.1"
"(syntax-e$1"
" id:prefix174_0)"
"(ids->sym-set"
" id176_0))"
" #f"
" #f"
" 'path))))"
"(if(equal?"
" tmp_24"
" 'rename)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_0"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_11"
" rename187_0"
" spec188_0"
" id:to189_0"
" id:from190_0)"
"(let-values(((s_259)"
" req_0))"
"(let-values(((orig-s_13)"
" s_259))"
"(let-values(((rename187_1"
" spec188_1"
" id:to189_1"
" id:from190_1)"
"(let-values(((s_260)"
"(if(syntax?$1"
" s_259)"
"(syntax-e$1"
" s_259)"
" s_259)))"
"(if(pair?"
" s_260)"
"(let-values(((rename191_0)"
"(let-values(((s_261)"
"(car"
" s_260)))"
" s_261))"
"((spec192_0"
" id:to193_0"
" id:from194_0)"
"(let-values(((s_262)"
"(cdr"
" s_260)))"
"(let-values(((s_263)"
"(if(syntax?$1"
" s_262)"
"(syntax-e$1"
" s_262)"
" s_262)))"
"(if(pair?"
" s_263)"
"(let-values(((spec195_0)"
"(let-values(((s_264)"
"(car"
" s_263)))"
" s_264))"
"((id:to196_0"
" id:from197_0)"
"(let-values(((s_265)"
"(cdr"
" s_263)))"
"(let-values(((s_266)"
"(if(syntax?$1"
" s_265)"
"(syntax-e$1"
" s_265)"
" s_265)))"
"(if(pair?"
" s_266)"
"(let-values(((id:to198_0)"
"(let-values(((s_267)"
"(car"
" s_266)))"
"(if(let-values(((or-part_191)"
"(if(syntax?$1"
" s_267)"
"(symbol?"
"(syntax-e$1"
" s_267))"
" #f)))"
"(if or-part_191"
" or-part_191"
"(symbol?"
" s_267)))"
" s_267"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_13"
" s_267))))"
"((id:from199_0)"
"(let-values(((s_268)"
"(cdr"
" s_266)))"
"(let-values(((s_269)"
"(if(syntax?$1"
" s_268)"
"(syntax-e$1"
" s_268)"
" s_268)))"
"(if(pair?"
" s_269)"
"(let-values(((id:from200_0)"
"(let-values(((s_270)"
"(car"
" s_269)))"
"(if(let-values(((or-part_192)"
"(if(syntax?$1"
" s_270)"
"(symbol?"
"(syntax-e$1"
" s_270))"
" #f)))"
"(if or-part_192"
" or-part_192"
"(symbol?"
" s_270)))"
" s_270"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_13"
" s_270))))"
"(()"
"(let-values(((s_135)"
"(cdr"
" s_269)))"
"(let-values(((s_271)"
"(if(syntax?$1"
" s_135)"
"(syntax-e$1"
" s_135)"
" s_135)))"
"(if(null?"
" s_271)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_13))))))"
"(values"
" id:from200_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_13))))))"
"(values"
" id:to198_0"
" id:from199_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_13))))))"
"(values"
" spec195_0"
" id:to196_0"
" id:from197_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_13))))))"
"(values"
" rename191_0"
" spec192_0"
" id:to193_0"
" id:from194_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_13)))))"
"(values"
" #t"
" rename187_1"
" spec188_1"
" id:to189_1"
" id:from190_1))))))"
"(loop_88"
"(list"
" spec188_0)"
"(let-values(((or-part_193)"
" top-req_0))"
"(if or-part_193"
" or-part_193"
" req_0))"
" phase-shift_9"
" just-meta_0"
"(adjust-rename4.1"
" id:to189_0"
"(syntax-e$1"
" id:from190_0))"
" #f"
" #f"
" 'path))))"
"(let-values()"
"(let-values(((maybe-mp_0)"
"(syntax->datum$1"
" req_0)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_194)"
"(1/module-path?"
" maybe-mp_0)))"
"(if or-part_194"
" or-part_194"
"(1/resolved-module-path?"
" maybe-mp_0)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad require spec\""
" orig-s_3"
" req_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_195)"
" adjust_0))"
"(if or-part_195"
" or-part_195"
"(not"
"(eq?"
" just-meta_0"
" 'all))))"
"(let-values()"
"(set-requires+provides-all-bindings-simple?!"
" requires+provides_1"
" #f))"
"(void))"
"(values))))"
"(let-values(((mp_0)"
"(if(1/resolved-module-path?"
" maybe-mp_0)"
"(resolved-module-path->module-path"
" maybe-mp_0)"
" maybe-mp_0)))"
"(let-values(((mpi_16)"
"(let-values(((mp218_0)"
" mp_0)"
"((self219_0)"
" self_10)"
"((declared-submodule-names220_0)"
" declared-submodule-names_2))"
"(module-path->mpi5.1"
" declared-submodule-names220_0"
" mp218_0"
" self219_0))))"
"(begin"
"(let-values(((mpi201_0)"
" mpi_16)"
"((req202_0)"
" req_0)"
"((self203_0)"
" self_10)"
"((temp204_0)"
"(let-values(((or-part_196)"
" req_0))"
"(if or-part_196"
" or-part_196"
" top-req_0)))"
"((m-ns205_0)"
" m-ns_8)"
"((phase-shift206_0)"
" phase-shift_9)"
"((run-phase207_0)"
" run-phase_5)"
"((just-meta208_0)"
" just-meta_0)"
"((adjust209_0)"
" adjust_0)"
"((requires+provides210_0)"
" requires+provides_1)"
"((run?211_0)"
" run?_1)"
"((visit?212_0)"
" visit?_1)"
"((copy-variable-phase-level213_0)"
" copy-variable-phase-level_0)"
"((copy-variable-as-constant?214_0)"
" copy-variable-as-constant?_0)"
"((skip-variable-phase-level215_0)"
" skip-variable-phase-level_0)"
"((initial-require?216_0)"
" initial-require?_0)"
"((who217_0)"
" who_13))"
"(perform-require!78.1"
" adjust209_0"
" #t"
" #f"
" copy-variable-as-constant?214_0"
" copy-variable-phase-level213_0"
" initial-require?216_0"
" just-meta208_0"
" phase-shift206_0"
" requires+provides210_0"
" run-phase207_0"
" run?211_0"
" skip-variable-phase-level215_0"
" visit?212_0"
" who217_0"
" mpi201_0"
" req202_0"
" self203_0"
" temp204_0"
" m-ns205_0))"
"(set! initial-require?_0"
" #f)))))))))))))))))))))))))"
"(values"
" result_76)))))"
"(if(if(not"
"((lambda x_55"
"(not result_75))"
" req_0))"
"(not #f)"
" #f)"
"(for-loop_173"
" result_75"
" rest_72)"
" result_75)))"
" result_74)))))"
" for-loop_173)"
" #t"
" lst_140)))))))"
" loop_88)"
" reqs_0"
" #f"
" phase-shift_8"
" 'all"
" #f"
" #t"
" #t"
" 'raw))))))))))))))))))))"
"(define-values"
"(ids->sym-set)"
"(lambda(ids_3)"
"(begin"
"(let-values(((lst_148) ids_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_148)))"
"((letrec-values(((for-loop_177)"
"(lambda(table_136 lst_149)"
"(begin"
" 'for-loop"
"(if(pair? lst_149)"
"(let-values(((id_45)(unsafe-car lst_149))((rest_76)(unsafe-cdr lst_149)))"
"(let-values(((table_137)"
"(let-values(((table_138) table_136))"
"(let-values(((table_139)"
"(let-values()"
"(let-values(((key_54 val_46)"
"(let-values()"
"(values"
"(let-values()(syntax-e$1 id_45))"
" #t))))"
"(hash-set table_138 key_54 val_46)))))"
"(values table_139)))))"
"(if(not #f)(for-loop_177 table_137 rest_76) table_137)))"
" table_136)))))"
" for-loop_177)"
" '#hash()"
" lst_148))))))"
"(define-values"
"(perform-initial-require!42.1)"
"(lambda(bind?33_0 who34_0 mod-path37_0 self38_0 in-stx39_0 m-ns40_0 requires+provides41_0)"
"(begin"
" 'perform-initial-require!42"
"(let-values(((mod-path_7) mod-path37_0))"
"(let-values(((self_11) self38_0))"
"(let-values(((in-stx_0) in-stx39_0))"
"(let-values(((m-ns_9) m-ns40_0))"
"(let-values(((requires+provides_2) requires+provides41_0))"
"(let-values(((bind?_0) bind?33_0))"
"(let-values(((who_14) who34_0))"
"(let-values()"
"(let-values(((temp221_1)"
"(let-values(((mod-path233_0) mod-path_7)((self234_0) self_11))"
"(module-path->mpi5.1 unsafe-undefined mod-path233_0 self234_0)))"
"((temp222_0) #f)"
"((self223_0) self_11)"
"((in-stx224_0) in-stx_0)"
"((m-ns225_0) m-ns_9)"
"((temp226_1) 0)"
"((temp227_0) 0)"
"((requires+provides228_0) requires+provides_2)"
"((temp229_1) #t)"
"((temp230_1) #t)"
"((bind?231_0) bind?_0)"
"((who232_0) who_14))"
"(perform-require!78.1"
" #f"
" bind?231_0"
" temp229_1"
" #f"
" #f"
" temp230_1"
" 'all"
" temp226_1"
" requires+provides228_0"
" temp227_0"
" #f"
" #f"
" #t"
" who232_0"
" temp221_1"
" temp222_0"
" self223_0"
" in-stx224_0"
" m-ns225_0)))))))))))))"
"(define-values"
"(perform-require!78.1)"
"(lambda(adjust48_0"
" bind?57_0"
" can-be-shadowed?52_0"
" copy-variable-as-constant?55_0"
" copy-variable-phase-level54_0"
" initial-require?53_0"
" just-meta47_0"
" phase-shift45_0"
" requires+provides49_0"
" run-phase46_0"
" run?51_0"
" skip-variable-phase-level56_0"
" visit?50_0"
" who58_0"
" mpi73_0"
" orig-s74_0"
" self75_0"
" in-stx76_0"
" m-ns77_0)"
"(begin"
" 'perform-require!78"
"(let-values(((mpi_36) mpi73_0))"
"(let-values(((orig-s_14) orig-s74_0))"
"(let-values()"
"(let-values(((in-stx_1) in-stx76_0))"
"(let-values(((m-ns_10) m-ns77_0))"
"(let-values(((phase-shift_10) phase-shift45_0))"
"(let-values(((run-phase_6) run-phase46_0))"
"(let-values(((just-meta_1) just-meta47_0))"
"(let-values(((adjust_1) adjust48_0))"
"(let-values(((requires+provides_3) requires+provides49_0))"
"(let-values(((visit?_2) visit?50_0))"
"(let-values(((run?_2) run?51_0))"
"(let-values(((can-be-shadowed?_3) can-be-shadowed?52_0))"
"(let-values(((initial-require?_1) initial-require?53_0))"
"(let-values(((copy-variable-phase-level_1) copy-variable-phase-level54_0))"
"(let-values(((copy-variable-as-constant?_1) copy-variable-as-constant?55_0))"
"(let-values(((skip-variable-phase-level_1) skip-variable-phase-level56_0))"
"(let-values(((bind?_1) bind?57_0))"
"(let-values(((who_15) who58_0))"
"(let-values()"
"(let-values()"
"(let-values(((module-name_0)(1/module-path-index-resolve mpi_36 #t)))"
"(let-values(((bind-in-stx_0)"
"(if(adjust-rename? adjust_1)"
"(adjust-rename-to-id adjust_1)"
" in-stx_1)))"
"(let-values(((done-syms_0)(if adjust_1(make-hash) #f)))"
"(let-values(((m_13)(namespace->module m-ns_10 module-name_0)))"
"(let-values((()"
"(begin"
"(if m_13"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'require"
" module-name_0)))"
"(values))))"
"(let-values(((interned-mpi_0)"
"(if requires+provides_3"
"(add-required-module!"
" requires+provides_3"
" mpi_36"
" phase-shift_10"
"(module-cross-phase-persistent? m_13))"
" mpi_36)))"
"(let-values((()"
"(begin"
"(if visit?_2"
"(let-values()"
"(let-values(((m-ns251_0) m-ns_10)"
"((interned-mpi252_0)"
" interned-mpi_0)"
"((phase-shift253_0)"
" phase-shift_10)"
"((run-phase254_0)"
" run-phase_6))"
"(namespace-module-visit!104.1"
" run-phase254_0"
" m-ns251_0"
" interned-mpi252_0"
" phase-shift253_0)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if run?_2"
"(let-values()"
"(let-values(((m-ns255_0) m-ns_10)"
"((interned-mpi256_0)"
" interned-mpi_0)"
"((phase-shift257_0)"
" phase-shift_10)"
"((run-phase258_0)"
" run-phase_6))"
"(namespace-module-instantiate!96.1"
" #t"
" run-phase258_0"
" unsafe-undefined"
" #f"
" m-ns255_0"
" interned-mpi256_0"
" phase-shift257_0)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(not"
"(let-values(((or-part_197)"
" visit?_2))"
"(if or-part_197"
" or-part_197"
" run?_2)))"
"(let-values()"
"(let-values(((m-ns259_0) m-ns_10)"
"((interned-mpi260_0)"
" interned-mpi_0)"
"((phase-shift261_0)"
" phase-shift_10)"
"((run-phase262_0)"
" run-phase_6))"
"(namespace-module-make-available!112.1"
" run-phase262_0"
" m-ns259_0"
" interned-mpi260_0"
" phase-shift261_0)))"
"(void))"
"(values))))"
"(let-values(((can-bulk-bind?_0)"
"(if(let-values(((or-part_198)"
"(not adjust_1)))"
"(if or-part_198"
" or-part_198"
"(let-values(((or-part_199)"
"(adjust-prefix?"
" adjust_1)))"
"(if or-part_199"
" or-part_199"
"(adjust-all-except?"
" adjust_1)))))"
"(not skip-variable-phase-level_1)"
" #f)))"
"(let-values(((bulk-prefix_1)"
"(if(adjust-prefix? adjust_1)"
"(let-values()"
"(adjust-prefix-sym adjust_1))"
"(if(adjust-all-except? adjust_1)"
"(let-values()"
"(adjust-all-except-prefix-sym"
" adjust_1))"
"(let-values() #f)))))"
"(let-values(((bulk-excepts_1)"
"(if(adjust-all-except? adjust_1)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_1))"
"(let-values() '#hasheq()))))"
"(let-values(((update-nominals-box_0)"
"(if can-bulk-bind?_0"
"(box null)"
" #f)))"
"(let-values((()"
"(begin"
"(let-values(((m235_0) m_13)"
"((bind-in-stx236_0)"
" bind-in-stx_0)"
"((phase-shift237_0)"
" phase-shift_10)"
"((m-ns238_0)"
" m-ns_10)"
"((interned-mpi239_0)"
" interned-mpi_0)"
"((module-name240_0)"
" module-name_0)"
"((orig-s241_0)"
" orig-s_14)"
"((temp242_0)"
"(if requires+provides_3"
"(requires+provides-self"
" requires+provides_3)"
" #f))"
"((temp243_0)"
"(if(adjust-only?"
" adjust_1)"
"(let-values()"
"(set->list"
"(adjust-only-syms"
" adjust_1)))"
"(if(adjust-rename?"
" adjust_1)"
"(let-values()"
"(list"
"(adjust-rename-from-sym"
" adjust_1)))"
"(let-values()"
" #f))))"
"((just-meta244_0)"
" just-meta_1)"
"((bind?245_0)"
" bind?_1)"
"((can-bulk-bind?246_0)"
" can-bulk-bind?_0)"
"((bulk-prefix247_0)"
" bulk-prefix_1)"
"((bulk-excepts248_0)"
" bulk-excepts_1)"
"((temp249_0)"
"(if requires+provides_3"
"(if can-bulk-bind?_0"
"(lambda(provides_6"
" provide-phase-level_4)"
"(begin"
" 'temp249"
"(let-values(((requires+provides263_0)"
" requires+provides_3)"
"((bind-in-stx264_0)"
" bind-in-stx_0)"
"((temp265_0)"
"(module-self"
" m_13))"
"((mpi266_0)"
" mpi_36)"
"((phase-shift267_0)"
" phase-shift_10)"
"((provides268_0)"
" provides_6)"
"((provide-phase-level269_0)"
" provide-phase-level_4)"
"((bulk-prefix270_0)"
" bulk-prefix_1)"
"((bulk-excepts271_0)"
" bulk-excepts_1)"
"((temp272_0)"
"(if(positive?"
"(hash-count"
" bulk-excepts_1))"
" done-syms_0"
" #f))"
"((can-be-shadowed?273_0)"
" can-be-shadowed?_3)"
"((temp274_0)"
"(not"
" initial-require?_1))"
"((orig-s275_0)"
" orig-s_14)"
"((update-nominals-box276_0)"
" update-nominals-box_0)"
"((who277_0)"
" who_15))"
"(add-bulk-required-ids!59.1"
" update-nominals-box276_0"
" can-be-shadowed?273_0"
" temp274_0"
" bulk-excepts271_0"
" orig-s275_0"
" bulk-prefix270_0"
" temp272_0"
" who277_0"
" requires+provides263_0"
" bind-in-stx264_0"
" temp265_0"
" mpi266_0"
" phase-shift267_0"
" provides268_0"
" provide-phase-level269_0))))"
" #f)"
" #f))"
"((temp250_0)"
"(if(let-values(((or-part_200)"
"(not"
" can-bulk-bind?_0)))"
"(if or-part_200"
" or-part_200"
" copy-variable-phase-level_1))"
"(lambda(binding_16"
" as-transformer?_4)"
"(begin"
" 'temp250"
"(let-values(((sym_47)"
"(module-binding-nominal-sym"
" binding_16)))"
"(let-values(((provide-phase_0)"
"(module-binding-nominal-phase"
" binding_16)))"
"(let-values(((adjusted-sym_0)"
"(if(not"
"(symbol-interned?"
" sym_47))"
"(let-values()"
" #f)"
"(if(if skip-variable-phase-level_1"
"(if(not"
" as-transformer?_4)"
"(equal?"
" provide-phase_0"
" skip-variable-phase-level_1)"
" #f)"
" #f)"
"(let-values()"
" #f)"
"(if(not"
" adjust_1)"
"(let-values()"
" sym_47)"
"(if(adjust-only?"
" adjust_1)"
"(let-values()"
"(if(set-member?"
"(adjust-only-syms"
" adjust_1)"
" sym_47)"
"(if(hash-set!"
" done-syms_0"
" sym_47"
" #t)"
" sym_47"
" #f)"
" #f))"
"(if(adjust-prefix?"
" adjust_1)"
"(let-values()"
"(string->symbol"
"(format"
"                                                                                                                                              \"~a~a\""
"(adjust-prefix-sym"
" adjust_1)"
" sym_47)))"
"(if(adjust-all-except?"
" adjust_1)"
"(let-values()"
"(if(not"
"(if(set-member?"
"(adjust-all-except-syms"
" adjust_1)"
" sym_47)"
"(hash-set!"
" done-syms_0"
" sym_47"
" #t)"
" #f))"
"(string->symbol"
"(format"
"                                                                                                                                                  \"~a~a\""
"(adjust-all-except-prefix-sym"
" adjust_1)"
" sym_47))"
" #f))"
"(if(adjust-rename?"
" adjust_1)"
"(let-values()"
"(if(eq?"
" sym_47"
"(adjust-rename-from-sym"
" adjust_1))"
"(if(hash-set!"
" done-syms_0"
" sym_47"
" #t)"
"(adjust-rename-to-id"
" adjust_1)"
" #f)"
" #f))"
"(void))))))))))"
"(let-values(((skip-bind?_0)"
"(if(if adjusted-sym_0"
" requires+provides_3"
" #f)"
"(let-values()"
"(let-values(((s_272)"
"(datum->syntax$1"
" bind-in-stx_0"
" adjusted-sym_0)))"
"(let-values(((bind-phase_0)"
"(phase+"
" phase-shift_10"
" provide-phase_0)))"
"(let-values(((skip-bind?_1)"
"(if initial-require?_1"
"(let-values()"
" #f)"
"(let-values()"
"(let-values(((temp278_0)"
" #t)"
"((temp279_0)"
" #t)"
"((requires+provides280_0)"
" requires+provides_3)"
"((s281_0)"
" s_272)"
"((bind-phase282_0)"
" bind-phase_0)"
"((binding283_0)"
" binding_16)"
"((orig-s284_0)"
" orig-s_14)"
"((temp285_0)"
" #t)"
"((who286_0)"
" who_15))"
"(check-not-defined95.1"
" #f"
" temp279_0"
" temp278_0"
" orig-s284_0"
" temp285_0"
" binding283_0"
" who286_0"
" requires+provides280_0"
" s281_0"
" bind-phase282_0))))))"
"(begin"
"(if skip-bind?_1"
"(void)"
"(let-values()"
"(let-values(((requires+provides287_0)"
" requires+provides_3)"
"((s288_0)"
" s_272)"
"((bind-phase289_0)"
" bind-phase_0)"
"((binding290_0)"
" binding_16)"
"((can-be-shadowed?291_0)"
" can-be-shadowed?_3)"
"((as-transformer?292_0)"
" as-transformer?_4))"
"(add-defined-or-required-id!19.1"
" as-transformer?292_0"
" can-be-shadowed?291_0"
" requires+provides287_0"
" s288_0"
" bind-phase289_0"
" binding290_0))))"
" skip-bind?_1)))))"
"(let-values()"
" #f))))"
"(begin"
"(if(if copy-variable-phase-level_1"
"(if(not"
" as-transformer?_4)"
"(equal?"
" provide-phase_0"
" copy-variable-phase-level_1)"
" #f)"
" #f)"
"(let-values()"
"(copy-namespace-value"
" m-ns_10"
" sym_47"
" binding_16"
" copy-variable-phase-level_1"
" phase-shift_10"
" copy-variable-as-constant?_1))"
"(void))"
"(if(not"
" skip-bind?_0)"
" adjusted-sym_0"
" #f))))))))"
" #f)))"
"(bind-all-provides!107.1"
" bind?245_0"
" temp249_0"
" bulk-excepts248_0"
" bulk-prefix247_0"
" can-bulk-bind?246_0"
" temp242_0"
" temp250_0"
" orig-s241_0"
" just-meta244_0"
" temp243_0"
" m235_0"
" bind-in-stx236_0"
" phase-shift237_0"
" m-ns238_0"
" interned-mpi239_0"
" module-name240_0))"
"(values))))"
"(let-values((()"
"(begin"
"(if update-nominals-box_0"
"(let-values()"
"(begin"
"(let-values(((lst_150)"
"(unbox"
" update-nominals-box_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_150)))"
"((letrec-values(((for-loop_178)"
"(lambda(lst_151)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_151)"
"(let-values(((update!_1)"
"(unsafe-car"
" lst_151))"
"((rest_77)"
"(unsafe-cdr"
" lst_151)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(update!_1))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_178"
" rest_77)"
"(values))))"
"(values))))))"
" for-loop_178)"
" lst_150)))"
"(void)))"
"(void))"
"(values))))"
"(let-values(((need-syms_0)"
"(if(adjust-only? adjust_1)"
"(let-values()"
"(adjust-only-syms"
" adjust_1))"
"(if(adjust-all-except?"
" adjust_1)"
"(let-values()"
"(adjust-all-except-syms"
" adjust_1))"
"(if(adjust-rename?"
" adjust_1)"
"(let-values()"
"(set"
"(adjust-rename-from-sym"
" adjust_1)))"
"(let-values()"
" #f))))))"
"(if(if need-syms_0"
"(not"
"(="
"(set-count need-syms_0)"
"(hash-count done-syms_0)))"
" #f)"
"(let-values()"
"(begin"
"(let-values(((ht_106)"
" need-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-immutable-hash-keys"
" ht_106)))"
"((letrec-values(((for-loop_179)"
"(lambda(i_133)"
"(begin"
" 'for-loop"
"(if i_133"
"(let-values(((sym_48)"
"(unsafe-immutable-hash-iterate-key"
" ht_106"
" i_133)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(hash-ref"
" done-syms_0"
" sym_48"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" who_15"
"                                                                                                                                                             \"not in nested spec\""
" orig-s_14"
" sym_48))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_179"
"(unsafe-immutable-hash-iterate-next"
" ht_106"
" i_133))"
"(values))))"
"(values))))))"
" for-loop_179)"
"(unsafe-immutable-hash-iterate-first"
" ht_106))))"
"(void)))"
"(void))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(bind-all-provides!107.1)"
"(lambda(bind?85_0"
" bulk-callback90_0"
" bulk-excepts88_0"
" bulk-prefix87_0"
" can-bulk?86_0"
" defines-mpi82_0"
" filter89_0"
" in81_0"
" just-meta84_0"
" only83_0"
" m101_0"
" in-stx102_0"
" phase-shift103_0"
" ns104_0"
" mpi105_0"
" module-name106_0)"
"(begin"
" 'bind-all-provides!107"
"(let-values(((m_14) m101_0))"
"(let-values(((in-stx_2) in-stx102_0))"
"(let-values(((phase-shift_11) phase-shift103_0))"
"(let-values(((ns_50) ns104_0))"
"(let-values(((mpi_37) mpi105_0))"
"(let-values(((module-name_1) module-name106_0))"
"(let-values(((orig-s_15) in81_0))"
"(let-values(((defines-mpi_0) defines-mpi82_0))"
"(let-values(((only-syms_0) only83_0))"
"(let-values(((just-meta_2) just-meta84_0))"
"(let-values(((bind?_2) bind?85_0))"
"(let-values(((can-bulk?_0) can-bulk?86_0))"
"(let-values(((bulk-prefix_2) bulk-prefix87_0))"
"(let-values(((bulk-excepts_2) bulk-excepts88_0))"
"(let-values(((filter_0) filter89_0))"
"(let-values(((bulk-callback_0) bulk-callback90_0))"
"(let-values()"
"(let-values(((self_12)(module-self m_14)))"
"(begin"
"(let-values(((ht_107)(module-provides m_14)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_107)))"
"((letrec-values(((for-loop_180)"
"(lambda(i_134)"
"(begin"
" 'for-loop"
"(if i_134"
"(let-values(((provide-phase-level_5 provides_7)"
"(hash-iterate-key+value"
" ht_107"
" i_134)))"
"(let-values((()"
"(let-values()"
"(if(let-values(((or-part_201)"
"(eq?"
" just-meta_2"
" 'all)))"
"(if or-part_201"
" or-part_201"
"(eqv?"
" just-meta_2"
" provide-phase-level_5)))"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_69)"
"(phase+"
" phase-shift_11"
" provide-phase-level_5)))"
"(let-values(((need-except?_0)"
"(if bulk-callback_0"
"(bulk-callback_0"
" provides_7"
" provide-phase-level_5)"
" #f)))"
"(if bind?_2"
"(let-values()"
"(begin"
"(if filter_0"
"(let-values()"
"(begin"
"(let-values(((lst_152)"
"(let-values(((or-part_202)"
" only-syms_0))"
"(if or-part_202"
" or-part_202"
"(hash-keys"
" provides_7)))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_152)))"
"((letrec-values(((for-loop_181)"
"(lambda(lst_153)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_153)"
"(let-values(((sym_49)"
"(unsafe-car"
" lst_153))"
"((rest_78)"
"(unsafe-cdr"
" lst_153)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((binding/p_4)"
"(hash-ref"
" provides_7"
" sym_49"
" #f)))"
"(if binding/p_4"
"(let-values()"
"(let-values(((b_72)"
"(let-values(((binding/p293_0)"
" binding/p_4)"
"((sym294_0)"
" sym_49)"
"((self295_0)"
" self_12)"
"((mpi296_0)"
" mpi_37)"
"((provide-phase-level297_0)"
" provide-phase-level_5)"
"((phase-shift298_0)"
" phase-shift_11))"
"(provide-binding-to-require-binding11.1"
" mpi296_0"
" phase-shift298_0"
" provide-phase-level297_0"
" self295_0"
" binding/p293_0"
" sym294_0))))"
"(let-values(((sym_50)"
"(filter_0"
" b_72"
"(provided-as-transformer?"
" binding/p_4))))"
"(if(if sym_50"
"(not"
" can-bulk?_0)"
" #f)"
"(let-values()"
"(let-values(((temp299_0)"
"(datum->syntax$1"
" in-stx_2"
" sym_50))"
"((b300_0)"
" b_72)"
"((phase301_0)"
" phase_69))"
"(add-binding!17.1"
" #f"
" #f"
" temp299_0"
" b300_0"
" phase301_0)))"
"(void)))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_181"
" rest_78)"
"(values))))"
"(values))))))"
" for-loop_181)"
" lst_152)))"
"(void)))"
"(void))"
"(if can-bulk?_0"
"(let-values()"
"(let-values(((bulk-binding-registry_10)"
"(namespace-bulk-binding-registry"
" ns_50)))"
"(let-values(((in-stx302_0)"
" in-stx_2)"
"((temp303_0)"
"(bulk-binding14.1"
"(let-values(((or-part_203)"
"(if(not"
" bulk-prefix_2)"
"(if(zero?"
"(hash-count"
" bulk-excepts_2))"
" provides_7"
" #f)"
" #f)))"
"(if or-part_203"
" or-part_203"
"(if(not"
"(registered-bulk-provide?"
" bulk-binding-registry_10"
" module-name_1))"
"(bulk-provides-add-prefix-remove-exceptions"
" provides_7"
" bulk-prefix_2"
" bulk-excepts_2)"
" #f)))"
" bulk-prefix_2"
" bulk-excepts_2"
" self_12"
" mpi_37"
" provide-phase-level_5"
" phase-shift_11"
" bulk-binding-registry_10))"
"((phase304_0)"
" phase_69)"
"((orig-s305_0)"
" orig-s_15)"
"((temp306_0)"
"(if need-except?_0"
" defines-mpi_0"
" #f)))"
"(add-bulk-binding!27.1"
" orig-s305_0"
" temp306_0"
" in-stx302_0"
" temp303_0"
" phase304_0))))"
"(void))))"
"(void)))))"
"(values)))))"
"(values)))"
"(values)))))"
"(if(not #f)"
"(for-loop_180"
"(hash-iterate-next ht_107 i_134))"
"(values))))"
"(values))))))"
" for-loop_180)"
"(hash-iterate-first ht_107))))"
"(void)))))))))))))))))))))))"
"(define-values"
"(require-spec-shift-for-syntax)"
"(lambda(req_1)"
"(begin"
"(let-values(((rebuild-req_0)"
"(lambda(req_2 new-req_0)(begin 'rebuild-req(datum->syntax$1 req_2 new-req_0 req_2 req_2)))))"
"(letrec-values(((loop_89)"
"(lambda(shifted?_0)"
"(begin"
" 'loop"
"(lambda(req_3)"
"(let-values(((fm_1)"
"(if(pair?(syntax-e$1 req_3))"
"(if(identifier?(car(syntax-e$1 req_3)))"
"(syntax-e$1(car(syntax-e$1 req_3)))"
" #f)"
" #f)))"
"(let-values(((tmp_25) fm_1))"
"(if(equal? tmp_25 'for-meta)"
"(let-values()"
"(let-values(((ok?_12 for-meta307_0 phase-level308_0 spec309_0)"
"(let-values(((s_273) req_3))"
"(let-values(((orig-s_16) s_273))"
"(let-values(((for-meta307_1 phase-level308_1 spec309_1)"
"(let-values(((s_274)"
"(if(syntax?$1 s_273)"
"(syntax-e$1 s_273)"
" s_273)))"
"(if(pair? s_274)"
"(let-values(((for-meta310_0)"
"(let-values(((s_275)"
"(car s_274)))"
" s_275))"
"((phase-level311_0 spec312_0)"
"(let-values(((s_276)"
"(cdr s_274)))"
"(let-values(((s_277)"
"(if(syntax?$1"
" s_276)"
"(syntax-e$1"
" s_276)"
" s_276)))"
"(if(pair? s_277)"
"(let-values(((phase-level313_0)"
"(let-values(((s_278)"
"(car"
" s_277)))"
" s_278))"
"((spec314_0)"
"(let-values(((s_279)"
"(cdr"
" s_277)))"
"(let-values(((s_280)"
"(if(syntax?$1"
" s_279)"
"(syntax-e$1"
" s_279)"
" s_279)))"
"(let-values(((flat-s_8)"
"(to-syntax-list.1"
" s_280)))"
"(if(not"
" flat-s_8)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                        \"bad syntax\""
" orig-s_16))"
"(let-values()"
" flat-s_8)))))))"
"(values"
" phase-level313_0"
" spec314_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_16))))))"
"(values"
" for-meta310_0"
" phase-level311_0"
" spec312_0))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_16)))))"
"(values #t for-meta307_1 phase-level308_1 spec309_1))))))"
"(let-values(((p_36)(syntax-e$1 phase-level308_0)))"
"(begin"
"(if(phase? p_36)"
"(void)"
"                                               (let-values () (raise-syntax-error$1 #f \"bad phase\" req_3)))"
"(rebuild-req_0"
" req_3"
"(list* for-meta307_0(phase+ p_36 1)(map2(loop_89 #t) spec309_0)))))))"
"(if(equal? tmp_25 'for-syntax)"
"(let-values()"
"(let-values(((ok?_13 for-syntax315_0 spec316_0)"
"(let-values(((s_281) req_3))"
"(let-values(((orig-s_17) s_281))"
"(let-values(((for-syntax315_1 spec316_1)"
"(let-values(((s_282)"
"(if(syntax?$1 s_281)"
"(syntax-e$1 s_281)"
" s_281)))"
"(if(pair? s_282)"
"(let-values(((for-syntax317_0)"
"(let-values(((s_283)"
"(car s_282)))"
" s_283))"
"((spec318_0)"
"(let-values(((s_284)"
"(cdr s_282)))"
"(let-values(((s_285)"
"(if(syntax?$1"
" s_284)"
"(syntax-e$1"
" s_284)"
" s_284)))"
"(let-values(((flat-s_9)"
"(to-syntax-list.1"
" s_285)))"
"(if(not flat-s_9)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                      \"bad syntax\""
" orig-s_17))"
"(let-values()"
" flat-s_9)))))))"
"(values for-syntax317_0 spec318_0))"
"(raise-syntax-error$1"
" #f"
"                                                                              \"bad syntax\""
" orig-s_17)))))"
"(values #t for-syntax315_1 spec316_1))))))"
"(rebuild-req_0 req_3(list* 'for-meta 2(map2(loop_89 #t) spec316_0)))))"
"(if(equal? tmp_25 'for-template)"
"(let-values()"
"(let-values(((ok?_14 for-template319_0 spec320_0)"
"(let-values(((s_286) req_3))"
"(let-values(((orig-s_18) s_286))"
"(let-values(((for-template319_1 spec320_1)"
"(let-values(((s_287)"
"(if(syntax?$1 s_286)"
"(syntax-e$1 s_286)"
" s_286)))"
"(if(pair? s_287)"
"(let-values(((for-template321_0)"
"(let-values(((s_288)"
"(car s_287)))"
" s_288))"
"((spec322_0)"
"(let-values(((s_289)"
"(cdr s_287)))"
"(let-values(((s_290)"
"(if(syntax?$1"
" s_289)"
"(syntax-e$1"
" s_289)"
" s_289)))"
"(let-values(((flat-s_10)"
"(to-syntax-list.1"
" s_290)))"
"(if(not flat-s_10)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_18))"
"(let-values()"
" flat-s_10)))))))"
"(values for-template321_0 spec322_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                \"bad syntax\""
" orig-s_18)))))"
"(values #t for-template319_1 spec320_1))))))"
"(rebuild-req_0 req_3(list* 'for-meta 0(map2(loop_89 #t) spec320_0)))))"
"(if(equal? tmp_25 'for-label)"
"(let-values()"
"(let-values(((ok?_15 for-label323_0 spec324_0)"
"(let-values(((s_291) req_3))"
"(let-values(((orig-s_19) s_291))"
"(let-values(((for-label323_1 spec324_1)"
"(let-values(((s_292)"
"(if(syntax?$1 s_291)"
"(syntax-e$1 s_291)"
" s_291)))"
"(if(pair? s_292)"
"(let-values(((for-label325_0)"
"(let-values(((s_293)"
"(car"
" s_292)))"
" s_293))"
"((spec326_0)"
"(let-values(((s_294)"
"(cdr"
" s_292)))"
"(let-values(((s_295)"
"(if(syntax?$1"
" s_294)"
"(syntax-e$1"
" s_294)"
" s_294)))"
"(let-values(((flat-s_11)"
"(to-syntax-list.1"
" s_295)))"
"(if(not flat-s_11)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_19))"
"(let-values()"
" flat-s_11)))))))"
"(values for-label325_0 spec326_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                  \"bad syntax\""
" orig-s_19)))))"
"(values #t for-label323_1 spec324_1))))))"
"(rebuild-req_0"
" req_3"
"(list* for-label323_0(map2(loop_89 #t) spec324_0)))))"
"(if(equal? tmp_25 'just-meta)"
"(let-values()"
"(let-values(((ok?_16 just-meta327_0 phase-level328_0 spec329_0)"
"(let-values(((s_296) req_3))"
"(let-values(((orig-s_20) s_296))"
"(let-values(((just-meta327_1"
" phase-level328_1"
" spec329_1)"
"(let-values(((s_297)"
"(if(syntax?$1 s_296)"
"(syntax-e$1 s_296)"
" s_296)))"
"(if(pair? s_297)"
"(let-values(((just-meta330_0)"
"(let-values(((s_298)"
"(car"
" s_297)))"
" s_298))"
"((phase-level331_0"
" spec332_0)"
"(let-values(((s_299)"
"(cdr"
" s_297)))"
"(let-values(((s_300)"
"(if(syntax?$1"
" s_299)"
"(syntax-e$1"
" s_299)"
" s_299)))"
"(if(pair? s_300)"
"(let-values(((phase-level333_0)"
"(let-values(((s_301)"
"(car"
" s_300)))"
" s_301))"
"((spec334_0)"
"(let-values(((s_302)"
"(cdr"
" s_300)))"
"(let-values(((s_303)"
"(if(syntax?$1"
" s_302)"
"(syntax-e$1"
" s_302)"
" s_302)))"
"(let-values(((flat-s_12)"
"(to-syntax-list.1"
" s_303)))"
"(if(not"
" flat-s_12)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                \"bad syntax\""
" orig-s_20))"
"(let-values()"
" flat-s_12)))))))"
"(values"
" phase-level333_0"
" spec334_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                        \"bad syntax\""
" orig-s_20))))))"
"(values"
" just-meta330_0"
" phase-level331_0"
" spec332_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                    \"bad syntax\""
" orig-s_20)))))"
"(values"
" #t"
" just-meta327_1"
" phase-level328_1"
" spec329_1))))))"
"(rebuild-req_0"
" req_3"
"(list*"
" just-meta327_0"
" phase-level328_0"
"(map2(loop_89 #f) spec329_0)))))"
"(let-values()"
"(if shifted?_0"
" req_3"
"(datum->syntax$1 #f(list 'for-syntax req_3))))))))))))))))"
"((loop_89 #f) req_1))))))"
"(define-values"
"(copy-namespace-value)"
"(lambda(m-ns_11 adjusted-sym_1 binding_17 phase-level_16 phase-shift_12 as-constant?_1)"
"(begin"
"(let-values(((i-ns_0)"
"(let-values(((m-ns335_0) m-ns_11)"
"((temp336_0)(1/module-path-index-resolve(module-binding-module binding_17)))"
"((temp337_0)(phase-(module-binding-phase binding_17) phase-level_16))"
"((temp338_0) #t))"
"(namespace->module-namespace82.1 #f temp338_0 unsafe-undefined m-ns335_0 temp336_0 temp337_0))))"
"(let-values(((val_47)"
"(namespace-get-variable"
" i-ns_0"
"(module-binding-phase binding_17)"
"(module-binding-sym binding_17)"
"(lambda()"
"(error"
" 'namespace-require/copy"
"(format"
"(string-append"
"                            \"namespace mismatch;\\n\""
"                            \" variable not found\\n\""
"                            \"  module: ~a\\n\""
"                            \"  variable name: ~s\\n\""
"                            \"  phase level: ~s\")"
"(module-binding-module binding_17)"
"(module-binding-sym binding_17)"
"(module-binding-phase binding_17)))))))"
"(namespace-set-variable!"
" m-ns_11"
"(phase+ phase-shift_12 phase-level_16)"
" adjusted-sym_1"
" val_47"
" as-constant?_1))))))"
"(define-values"
"(top-level-instance)"
"(1/make-instance"
" 'top-level"
" #f"
" 'constant"
" top-level-bind!-id"
"(lambda(id_20 mpi_38 orig-phase_0 phase-shift_13 ns_51 sym_51 trans?_0 trans-val_0)"
"(let-values(((phase_70)(phase+ orig-phase_0 phase-shift_13)))"
"(let-values(((b_73)"
"(let-values(((mpi4_1) mpi_38)"
"((phase5_1) phase_70)"
"((sym6_1) sym_51)"
"((temp7_0)(root-expand-context-frame-id(namespace-get-root-expand-ctx ns_51))))"
"(make-module-binding22.1"
" #f"
" null"
" temp7_0"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" mpi4_1"
" phase5_1"
" sym6_1))))"
"(begin"
"(let-values(((id1_3) id_20)((b2_4) b_73)((phase3_2) phase_70))"
"(add-binding!17.1 #f #f id1_3 b2_4 phase3_2))"
"(if trans?_0"
"(let-values()(if trans-val_0(let-values()(maybe-install-free=id! trans-val_0 id_20 phase_70))(void)))"
"(let-values()(namespace-unset-transformer! ns_51 phase_70 sym_51)))))))"
" top-level-require!-id"
"(lambda(stx_13 ns_52)"
"(let-values(((reqs_2)(cdr(syntax->list$1 stx_13))))"
"(let-values(((temp8_1) #t)"
"((temp9_1) #f)"
"((reqs10_0) reqs_2)"
"((temp11_1) #f)"
"((ns12_1) ns_52)"
"((temp13_0)(namespace-phase ns_52))"
"((temp14_2)(let-values(((temp17_1) #f))(make-requires+provides8.1 #f temp17_1)))"
"((temp15_2) 'require)"
"((temp16_2) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" unsafe-undefined"
" temp16_2"
" unsafe-undefined"
" temp8_1"
" #f"
" #f"
" temp9_1"
" temp15_2"
" reqs10_0"
" temp11_1"
" ns12_1"
" temp13_0"
" temp14_2))))))"
"(define-values"
"(struct:compiled-in-memory"
" compiled-in-memory1.1"
" compiled-in-memory?"
" compiled-in-memory-linklet-directory"
" compiled-in-memory-original-self"
" compiled-in-memory-requires"
" compiled-in-memory-provides"
" compiled-in-memory-phase-to-link-module-uses"
" compiled-in-memory-compile-time-inspector"
" compiled-in-memory-phase-to-link-extra-inspectorsss"
" compiled-in-memory-mpis"
" compiled-in-memory-syntax-literals"
" compiled-in-memory-pre-compiled-in-memorys"
" compiled-in-memory-post-compiled-in-memorys"
" compiled-in-memory-namespace-scopes"
" compiled-in-memory-purely-functional?)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'compiled-in-memory"
" #f"
" 13"
" 0"
" #f"
"(list"
"(cons"
" prop:custom-write"
"(lambda(cim_0 port_11 mode_12)(write(compiled-in-memory-linklet-directory cim_0) port_11))))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11 12)"
" #f"
" 'compiled-in-memory)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'linklet-directory)"
"(make-struct-field-accessor -ref_0 1 'original-self)"
"(make-struct-field-accessor -ref_0 2 'requires)"
"(make-struct-field-accessor -ref_0 3 'provides)"
"(make-struct-field-accessor -ref_0 4 'phase-to-link-module-uses)"
"(make-struct-field-accessor -ref_0 5 'compile-time-inspector)"
"(make-struct-field-accessor -ref_0 6 'phase-to-link-extra-inspectorsss)"
"(make-struct-field-accessor -ref_0 7 'mpis)"
"(make-struct-field-accessor -ref_0 8 'syntax-literals)"
"(make-struct-field-accessor -ref_0 9 'pre-compiled-in-memorys)"
"(make-struct-field-accessor -ref_0 10 'post-compiled-in-memorys)"
"(make-struct-field-accessor -ref_0 11 'namespace-scopes)"
"(make-struct-field-accessor -ref_0 12 'purely-functional?))))"
"(define-values"
"(struct:namespace-scopes namespace-scopes1.1 namespace-scopes? namespace-scopes-post namespace-scopes-other)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'namespace-scopes #f 2 0 #f null 'prefab #f '(0 1) #f 'namespace-scopes)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'post)"
"(make-struct-field-accessor -ref_0 1 'other))))"
"(define-values"
"(swap-top-level-scopes)"
"(lambda(s_304 original-scopes-s_0 new-ns_0)"
"(begin"
"(let-values(((old-scs-post_0 old-scs-other_0)"
"(if(namespace-scopes? original-scopes-s_0)"
"(values(namespace-scopes-post original-scopes-s_0)(namespace-scopes-other original-scopes-s_0))"
"(decode-namespace-scopes original-scopes-s_0))))"
"(let-values(((new-scs-post_0 new-scs-other_0)(extract-namespace-scopes/values new-ns_0)))"
"(syntax-swap-scopes"
"(syntax-swap-scopes s_304 old-scs-post_0 new-scs-post_0)"
" old-scs-other_0"
" new-scs-other_0))))))"
"(define-values"
"(extract-namespace-scopes/values)"
"(lambda(ns_46)"
"(begin"
"(let-values(((root-ctx_3)(namespace-get-root-expand-ctx ns_46)))"
"(let-values(((post-expansion-sc_0)(post-expansion-scope(root-expand-context-post-expansion root-ctx_3))))"
"(values"
"(seteq post-expansion-sc_0)"
"(set-remove(list->seteq(root-expand-context-module-scopes root-ctx_3)) post-expansion-sc_0)))))))"
"(define-values"
"(extract-namespace-scopes)"
"(lambda(ns_53)"
"(begin"
"(let-values(((scs-post_0 scs-other_0)(extract-namespace-scopes/values ns_53)))"
"(namespace-scopes1.1 scs-post_0 scs-other_0)))))"
"(define-values"
"(encode-namespace-scopes)"
"(lambda(ns_54)"
"(begin"
"(let-values(((post-expansion-scs_0 other-scs_0)(extract-namespace-scopes/values ns_54)))"
"(let-values(((post-expansion-s_0)(add-scopes(datum->syntax$1 #f 'post)(set->list post-expansion-scs_0))))"
"(let-values(((other-s_0)(add-scopes(datum->syntax$1 #f 'other)(set->list other-scs_0))))"
"(datum->syntax$1 #f(vector post-expansion-s_0 other-s_0))))))))"
"(define-values"
"(decode-namespace-scopes)"
"(lambda(stx_14)"
"(begin"
"(let-values(((vec_54)(syntax-e$1 stx_14)))"
"(values(syntax-scope-set(vector-ref vec_54 0) 0)(syntax-scope-set(vector-ref vec_54 1) 0))))))"
"(define-values"
"(namespace-scopes=?)"
"(lambda(nss1_0 nss2_0)"
"(begin"
"(if(set=?(namespace-scopes-post nss1_0)(namespace-scopes-post nss2_0))"
"(set=?(namespace-scopes-other nss1_0)(namespace-scopes-other nss2_0))"
" #f))))"
"(define-values"
"(struct:syntax-literals"
" syntax-literals1.1"
" syntax-literals?"
" syntax-literals-stxes"
" syntax-literals-count"
" set-syntax-literals-stxes!"
" set-syntax-literals-count!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'syntax-literals"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'syntax-literals)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'stxes)"
"(make-struct-field-accessor -ref_0 1 'count)"
"(make-struct-field-mutator -set!_0 0 'stxes)"
"(make-struct-field-mutator -set!_0 1 'count))))"
"(define-values"
"(struct:header"
" header2.1"
" header?"
" header-module-path-indexes"
" header-binding-sym-to-define-sym"
" header-binding-syms-in-order"
" header-require-var-to-import-sym"
" header-import-sym-to-extra-inspectors"
" header-require-vars-in-order"
" header-define-and-import-syms"
" header-syntax-literals"
" set-header-binding-syms-in-order!"
" set-header-require-vars-in-order!)"
"(let-values(((struct:_68 make-_68 ?_68 -ref_68 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type 'header #f 8 0 #f null(current-inspector) #f '(0 1 3 4 6 7) #f 'header)))))"
"(values"
" struct:_68"
" make-_68"
" ?_68"
"(make-struct-field-accessor -ref_68 0 'module-path-indexes)"
"(make-struct-field-accessor -ref_68 1 'binding-sym-to-define-sym)"
"(make-struct-field-accessor -ref_68 2 'binding-syms-in-order)"
"(make-struct-field-accessor -ref_68 3 'require-var-to-import-sym)"
"(make-struct-field-accessor -ref_68 4 'import-sym-to-extra-inspectors)"
"(make-struct-field-accessor -ref_68 5 'require-vars-in-order)"
"(make-struct-field-accessor -ref_68 6 'define-and-import-syms)"
"(make-struct-field-accessor -ref_68 7 'syntax-literals)"
"(make-struct-field-mutator -set!_68 2 'binding-syms-in-order)"
"(make-struct-field-mutator -set!_68 5 'require-vars-in-order))))"
"(define-values"
"(struct:variable-use variable-use3.1 variable-use? variable-use-module-use variable-use-sym)"
"(let-values(((struct:_69 make-_69 ?_69 -ref_69 -set!_69)"
"(let-values()"
"(let-values()(make-struct-type 'variable-use #f 2 0 #f null #f #f '(0 1) #f 'variable-use)))))"
"(values"
" struct:_69"
" make-_69"
" ?_69"
"(make-struct-field-accessor -ref_69 0 'module-use)"
"(make-struct-field-accessor -ref_69 1 'sym))))"
"(define-values(make-syntax-literals)(lambda()(begin(syntax-literals1.1 null 0))))"
"(define-values"
"(make-header)"
"(lambda(mpis_11 syntax-literals_0)"
"(begin"
"(header2.1 mpis_11(make-hasheq) null(make-variable-uses)(make-hasheq) null(make-hasheq) syntax-literals_0))))"
"(define-values(make-variable-uses)(lambda()(begin(make-hash))))"
"(define-values"
"(add-syntax-literal!)"
"(lambda(header-or-literals_0 q_0)"
"(begin"
"(let-values(((sl_0)"
"(if(header? header-or-literals_0)"
"(header-syntax-literals header-or-literals_0)"
" header-or-literals_0)))"
"(let-values(((pos_84)(syntax-literals-count sl_0)))"
"(begin"
"(set-syntax-literals-count! sl_0(add1 pos_84))"
"(set-syntax-literals-stxes! sl_0(cons q_0(syntax-literals-stxes sl_0)))"
" pos_84))))))"
"(define-values"
"(add-syntax-literals!)"
"(lambda(sl_1 vec_55)"
"(begin"
"(let-values(((pos_85)(syntax-literals-count sl_1)))"
"(begin"
"(let-values(((vec_56 len_27)"
"(let-values(((vec_57) vec_55))"
"(begin(check-vector vec_57)(values vec_57(unsafe-vector-length vec_57))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_182)"
"(lambda(pos_86)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_86 len_27)"
"(let-values(((e_11)(unsafe-vector-ref vec_56 pos_86)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(add-syntax-literal! sl_1 e_11))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_182(unsafe-fx+ 1 pos_86))(values))))"
"(values))))))"
" for-loop_182)"
" 0)))"
"(void)"
"(cons pos_85(vector-length vec_55)))))))"
"(define-values(syntax-literals-empty?)(lambda(sl_2)(begin(null?(syntax-literals-stxes sl_2)))))"
"(define-values"
"(generate-lazy-syntax-literals!9.1)"
"(lambda(skip-deserialize?4_0 sl6_0 mpis7_0 self8_0)"
"(begin"
" 'generate-lazy-syntax-literals!9"
"(let-values(((sl_3) sl6_0))"
"(let-values(((mpis_12) mpis7_0))"
"(let-values(((self_13) self8_0))"
"(let-values(((skip-deserialize?_0) skip-deserialize?4_0))"
"(let-values()"
"(list"
"(list 'define-values(list syntax-literals-id)(list* 'make-vector(syntax-literals-count sl_3) '(#f)))"
"(list"
" 'define-values"
"(list get-syntax-literal!-id)"
"(list"
" 'lambda"
" '(pos)"
"(list"
" 'let-values"
"(list(list '(ready-stx)(list* 'unsafe-vector*-ref syntax-literals-id '(pos))))"
"(list"
" 'if"
" 'ready-stx"
" 'ready-stx"
"(list*"
" 'begin"
"(qq-append"
"(if skip-deserialize?_0"
" null"
"(list"
"(list"
" 'if"
"(list* 'unsafe-vector*-ref deserialized-syntax-vector-id '(0))"
" '(void)"
"(list deserialize-syntax-id bulk-binding-registry-id))))"
"(list"
"(list"
" 'let-values"
"(list"
"(list"
" '(stx)"
"(list"
" 'syntax-module-path-index-shift"
"(list"
" 'syntax-shift-phase-level"
"(list* 'unsafe-vector*-ref deserialized-syntax-vector-id '(pos))"
" phase-shift-id)"
"(add-module-path-index! mpis_12 self_13)"
" self-id"
" inspector-id)))"
"(list"
" 'begin"
"(list* 'vector-cas! syntax-literals-id '(pos #f stx))"
"(list* 'unsafe-vector*-ref syntax-literals-id '(pos))))))))))))))))))))"
"(define-values"
"(generate-lazy-syntax-literals-data!)"
"(lambda(sl_4 mpis_13)"
"(begin"
"(if(syntax-literals-empty? sl_4)"
"(let-values()(list(list* 'define-values(list deserialize-syntax-id) '(#f))))"
"(let-values()"
"(list"
"(list"
" 'define-values"
"(list deserialize-syntax-id)"
"(list"
" 'lambda"
"(list bulk-binding-registry-id)"
"(list"
" 'begin"
"(list"
" 'vector-copy!"
" deserialized-syntax-vector-id"
" ''0"
"(list"
" 'let-values"
"(list(list*(list inspector-id) '(#f)))"
"(let-values(((temp25_1)"
"(vector->immutable-vector(list->vector(reverse$1(syntax-literals-stxes sl_4)))))"
"((mpis26_0) mpis_13))"
"(generate-deserialize6.1 #t temp25_1 mpis26_0))))"
"(list* 'set! deserialize-syntax-id '(#f)))))))))))"
"(define-values(generate-lazy-syntax-literal-lookup)(lambda(pos_87)(begin(list get-syntax-literal!-id pos_87))))"
"(define-values"
"(generate-eager-syntax-literals!)"
"(lambda(sl_5 mpis_14 base-phase_0 self_14 ns_4)"
"(begin"
"(if(syntax-literals-empty? sl_5)"
"(let-values() #f)"
"(let-values()"
"(list"
" 'let-values"
"(list"
"(list"
" '(ns+stxss)"
"(let-values(((temp27_2)(cons(encode-namespace-scopes ns_4)(reverse$1(syntax-literals-stxes sl_5))))"
"((mpis28_0) mpis_14))"
"(generate-deserialize6.1 #t temp27_2 mpis28_0))))"
"(list"
" 'let-values"
" '(((ns-scope-s)(car ns+stxss)))"
"(list"
" 'list->vector"
"(list*"
" 'map"
"(list"
" 'lambda"
" '(stx)"
"(list"
" 'swap-top-level-scopes"
"(list"
" 'syntax-module-path-index-shift"
"(list 'syntax-shift-phase-level 'stx(list '- base-phase_0 dest-phase-id))"
"(add-module-path-index! mpis_14 self_14)"
" self-id)"
" 'ns-scope-s"
" ns-id))"
" '((cdr ns+stxss)))))))))))"
"(define-values"
"(generate-eager-syntax-literal-lookup)"
"(lambda(pos_88)(begin(list 'unsafe-vector*-ref syntax-literals-id pos_88))))"
"(define-values"
"(syntax-literals-as-vector)"
"(lambda(sl_6)(begin(list->vector(reverse$1(syntax-literals-stxes sl_6))))))"
"(define-values"
"(select-fresh)"
"(lambda(sym_52 header_0)"
"(begin"
"(if(symbol-conflicts? sym_52 header_0)"
"((letrec-values(((loop_90)"
"(lambda(pos_89)"
"(begin"
" 'loop"
"                              (let-values (((new-sym_0) (string->symbol (format \"~a/~a\" pos_89 sym_52))))"
"(if(symbol-conflicts? new-sym_0 header_0)(loop_90(add1 pos_89)) new-sym_0))))))"
" loop_90)"
" 1)"
" sym_52))))"
"(define-values"
"(symbol-conflicts?)"
"(lambda(sym_53 header_1)"
"(begin"
"(let-values(((or-part_204)(built-in-symbol? sym_53)))"
"(if or-part_204 or-part_204(hash-ref(header-define-and-import-syms header_1) sym_53 #f))))))"
"(define-values"
"(register-required-variable-use!19.1)"
"(lambda(defined?12_0 header14_0 mpi15_0 phase16_1 sym17_0 extra-inspector18_0)"
"(begin"
" 'register-required-variable-use!19"
"(let-values(((header_2) header14_0))"
"(let-values(((mpi_39) mpi15_0))"
"(let-values(((phase_71) phase16_1))"
"(let-values(((sym_54) sym17_0))"
"(let-values(((extra-inspector_4) extra-inspector18_0))"
"(let-values(((defined?_2) defined?12_0))"
"(let-values()"
"(let-values(((key_55)(variable-use3.1(module-use1.1 mpi_39 phase_71) sym_54)))"
"(let-values(((variable-uses_0)(header-require-var-to-import-sym header_2)))"
"(let-values(((prev-var-sym_0)(hash-ref variable-uses_0 key_55 #f)))"
"(let-values(((var-sym_0)"
"(let-values(((or-part_205) prev-var-sym_0))"
"(if or-part_205"
" or-part_205"
"(let-values(((sym_55)(select-fresh(variable-use-sym key_55) header_2)))"
"(begin"
"(hash-set! variable-uses_0 key_55 sym_55)"
"(set-header-require-vars-in-order!"
" header_2"
"(cons key_55(header-require-vars-in-order header_2)))"
"(hash-set!"
"(header-define-and-import-syms header_2)"
" sym_55"
"(if defined?_2 'defined 'required))"
" sym_55))))))"
"(begin"
"(if(if extra-inspector_4(not prev-var-sym_0) #f)"
"(let-values()"
"(let-values(((extra-inspectors_0)(header-import-sym-to-extra-inspectors header_2)))"
"(hash-update!"
" extra-inspectors_0"
" var-sym_0"
"(lambda(s_305)(set-add s_305 extra-inspector_4))"
" '#hasheq())))"
"(void))"
" var-sym_0)))))))))))))))"
"(define-values"
"(register-as-defined!)"
"(lambda(header_3 def-sym_0)(begin(hash-set!(header-define-and-import-syms header_3) def-sym_0 'defined))))"
"(define-values"
"(registered-as-required?)"
"(lambda(header_4 var-sym_1)"
"(begin(eq? 'required(hash-ref(header-define-and-import-syms header_4) var-sym_1 #f)))))"
"(define-values"
"(generate-links+imports)"
"(lambda(header_5 phase_38 cctx_0 cross-linklet-inlining?_0)"
"(begin"
"(let-values(((mod-use-ht_0 link-mod-uses_0)"
"(let-values(((lst_154)(header-require-vars-in-order header_5)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_154)))"
"((letrec-values(((for-loop_183)"
"(lambda(ht_108 link-mod-uses_1 lst_155)"
"(begin"
" 'for-loop"
"(if(pair? lst_155)"
"(let-values(((vu_0)(unsafe-car lst_155))"
"((rest_79)(unsafe-cdr lst_155)))"
"(let-values(((ht_109 link-mod-uses_2)"
"(let-values(((ht_110) ht_108)"
"((link-mod-uses_3) link-mod-uses_1))"
"(let-values(((ht_111 link-mod-uses_4)"
"(let-values()"
"(let-values(((mu_2)"
"(variable-use-module-use"
" vu_0)))"
"(if(let-values(((or-part_206)"
"(hash-ref"
" ht_110"
" mu_2"
" #f)))"
"(if or-part_206"
" or-part_206"
"(let-values(((or-part_207)"
"(eq?"
"(module-use-module"
" mu_2)"
"(compile-context-self"
" cctx_0))))"
"(if or-part_207"
" or-part_207"
"(top-level-module-path-index?"
"(module-use-module"
" mu_2))))))"
"(values ht_110 link-mod-uses_3)"
"(values"
"(hash-set ht_110 mu_2 #t)"
"(cons mu_2 link-mod-uses_3)))))))"
"(values ht_111 link-mod-uses_4)))))"
"(if(not #f)"
"(for-loop_183 ht_109 link-mod-uses_2 rest_79)"
"(values ht_109 link-mod-uses_2))))"
"(values ht_108 link-mod-uses_1))))))"
" for-loop_183)"
" '#hash()"
" null"
" lst_154)))))"
"(values"
" link-mod-uses_0"
"(reverse$1"
"(let-values(((lst_33) link-mod-uses_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_33)))"
"((letrec-values(((for-loop_184)"
"(lambda(fold-var_141 lst_107)"
"(begin"
" 'for-loop"
"(if(pair? lst_107)"
"(let-values(((mu_3)(unsafe-car lst_107))((rest_80)(unsafe-cdr lst_107)))"
"(let-values(((fold-var_142)"
"(let-values(((fold-var_143) fold-var_141))"
"(let-values(((fold-var_144)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_156)"
"(header-require-vars-in-order"
" header_5)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_156)))"
"((letrec-values(((for-loop_185)"
"(lambda(fold-var_145"
" lst_157)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_157)"
"(let-values(((vu_1)"
"(unsafe-car"
" lst_157))"
"((rest_81)"
"(unsafe-cdr"
" lst_157)))"
"(let-values(((fold-var_146)"
"(let-values(((fold-var_147)"
" fold-var_145))"
"(if(equal?"
" mu_3"
"(variable-use-module-use"
" vu_1))"
"(let-values(((fold-var_40)"
" fold-var_147))"
"(let-values(((fold-var_41)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_2)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_5)"
" vu_1)))"
"(let-values(((ex-sym_0)"
"(variable-use-sym"
" vu_1)))"
"(if(eq?"
" var-sym_2"
" ex-sym_0)"
" var-sym_2"
"(list"
" ex-sym_0"
" var-sym_2)))))"
" fold-var_40))))"
"(values"
" fold-var_41)))"
" fold-var_147))))"
"(if(not #f)"
"(for-loop_185"
" fold-var_146"
" rest_81)"
" fold-var_146)))"
" fold-var_145)))))"
" for-loop_185)"
" null"
" lst_156)))))"
" fold-var_143))))"
"(values fold-var_144)))))"
"(if(not #f)(for-loop_184 fold-var_142 rest_80) fold-var_142)))"
" fold-var_141)))))"
" for-loop_184)"
" null"
" lst_33))))"
"(reverse$1"
"(let-values(((lst_158) link-mod-uses_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_158)))"
"((letrec-values(((for-loop_186)"
"(lambda(fold-var_148 lst_159)"
"(begin"
" 'for-loop"
"(if(pair? lst_159)"
"(let-values(((mu_4)(unsafe-car lst_159))((rest_82)(unsafe-cdr lst_159)))"
"(let-values(((fold-var_149)"
"(let-values(((fold-var_150) fold-var_148))"
"(let-values(((fold-var_151)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_0)"
"(let-values(((lst_160)"
"(header-require-vars-in-order"
" header_5)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_160)))"
"((letrec-values(((for-loop_187)"
"(lambda(table_140"
" lst_112)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_112)"
"(let-values(((vu_2)"
"(unsafe-car"
" lst_112))"
"((rest_56)"
"(unsafe-cdr"
" lst_112)))"
"(let-values(((table_141)"
"(let-values(((table_142)"
" table_140))"
"(if(equal?"
" mu_4"
"(variable-use-module-use"
" vu_2))"
"(let-values(((var-sym_3)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_5)"
" vu_2)))"
"(begin"
" #t"
"((letrec-values(((for-loop_188)"
"(lambda(table_31)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_32)"
"(let-values(((extra-inspectors_1)"
"(hash-ref"
"(header-import-sym-to-extra-inspectors"
" header_5)"
" var-sym_3"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_189)"
"(lambda(table_143)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_33)"
"(let-values(((table_144)"
" table_143))"
"(if(let-values(((or-part_208)"
" extra-inspectors_1))"
"(if or-part_208"
" or-part_208"
" cross-linklet-inlining?_0))"
"(let-values(((table_145)"
" table_144))"
"(let-values(((table_146)"
"(let-values()"
"(let-values(((key_56"
" val_48)"
"(let-values()"
"(values"
" var-sym_3"
" extra-inspectors_1))))"
"(hash-set"
" table_145"
" key_56"
" val_48)))))"
"(values"
" table_146)))"
" table_144))))"
" table_33))))))"
" for-loop_189)"
" table_31)))))"
" table_32))))))"
" for-loop_188)"
" table_142)))"
" table_142))))"
"(if(not"
" #f)"
"(for-loop_187"
" table_141"
" rest_56)"
" table_141)))"
" table_140)))))"
" for-loop_187)"
" '#hash()"
" lst_160)))))"
"(if(hash-count extra-inspectorss_0)"
" extra-inspectorss_0"
" #f)))"
" fold-var_150))))"
"(values fold-var_151)))))"
"(if(not #f)(for-loop_186 fold-var_149 rest_82) fold-var_149)))"
" fold-var_148)))))"
" for-loop_186)"
" null"
" lst_158))))"
"(reverse$1"
"(let-values(((lst_161)(header-require-vars-in-order header_5)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_161)))"
"((letrec-values(((for-loop_190)"
"(lambda(fold-var_152 lst_162)"
"(begin"
" 'for-loop"
"(if(pair? lst_162)"
"(let-values(((vu_3)(unsafe-car lst_162))((rest_83)(unsafe-cdr lst_162)))"
"(let-values(((fold-var_153)"
"(let-values(((fold-var_154) fold-var_152))"
"(if(let-values(((mod_2)"
"(module-use-module"
"(variable-use-module-use vu_3))))"
"(let-values(((or-part_209)"
"(eq? mod_2(compile-context-self cctx_0))))"
"(if or-part_209"
" or-part_209"
"(top-level-module-path-index? mod_2))))"
"(let-values(((fold-var_155) fold-var_154))"
"(let-values(((fold-var_156)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((var-sym_4)"
"(hash-ref"
"(header-require-var-to-import-sym"
" header_5)"
" vu_3)))"
"(let-values(((ex-sym_1)"
"(variable-use-sym vu_3)))"
"(if(eq? var-sym_4 ex-sym_1)"
" var-sym_4"
"(list var-sym_4 ex-sym_1)))))"
" fold-var_155))))"
"(values fold-var_156)))"
" fold-var_154))))"
"(if(not #f)(for-loop_190 fold-var_153 rest_83) fold-var_153)))"
" fold-var_152)))))"
" for-loop_190)"
" null"
" lst_161)))))))))"
"(define-values"
"(instance-imports)"
"(list ns-id phase-shift-id self-id inspector-id bulk-binding-registry-id set-transformer!-id))"
"(define-values"
"(make-instance-instance13.1)"
"(lambda(bulk-binding-registry5_0 inspector4_0 namespace1_0 phase-shift2_0 self3_0 set-transformer!6_0)"
"(begin"
" 'make-instance-instance13"
"(let-values(((ns_55) namespace1_0))"
"(let-values(((phase-shift_14) phase-shift2_0))"
"(let-values(((self_15) self3_0))"
"(let-values(((inspector_11) inspector4_0))"
"(let-values(((bulk-binding-registry_11) bulk-binding-registry5_0))"
"(let-values(((set-transformer!_0) set-transformer!6_0))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" 'constant"
" ns-id"
" ns_55"
" phase-shift-id"
" phase-shift_14"
" self-id"
" self_15"
" inspector-id"
" inspector_11"
" bulk-binding-registry-id"
" bulk-binding-registry_11"
" set-transformer!-id"
" set-transformer!_0)))))))))))"
"(define-values"
"(make-module-body-instance-instance18.1)"
"(lambda(set-transformer!16_0)"
"(begin"
" 'make-module-body-instance-instance18"
"(let-values(((set-transformer!_1) set-transformer!16_0))"
"(let-values()(1/make-instance 'body-instance #f 'constant set-transformer!-id set-transformer!_1))))))"
"(define-values"
"(empty-syntax-literals-instance)"
"(1/make-instance 'empty-stx #f 'constant get-syntax-literal!-id(lambda(pos_90) #f) 'get-encoded-root-expand-ctx #f))"
"(define-values"
"(empty-module-body-instance)"
"(let-values(((temp21_0)(lambda(name_39 val_49)(void))))(make-module-body-instance-instance18.1 temp21_0)))"
"(define-values"
"(empty-top-syntax-literal-instance)"
"(1/make-instance 'top-syntax-literal #f 'constant mpi-vector-id #f syntax-literals-id #f))"
"(define-values"
"(empty-syntax-literals-data-instance)"
"(1/make-instance 'empty-stx-data #f 'constant deserialized-syntax-vector-id(vector) deserialize-syntax-id void))"
"(define-values"
"(empty-instance-instance)"
"(let-values(((temp22_2) #f)((temp23_2) #f)((temp24_2) #f)((temp25_2) #f)((temp26_1) #f)((temp27_3) #f))"
"(make-instance-instance13.1 temp26_1 temp25_2 temp22_2 temp23_2 temp24_2 temp27_3)))"
"(define-values"
"(eager-instance-imports)"
"(list* ns-id dest-phase-id self-id bulk-binding-registry-id inspector-id '(swap-top-level-scopes)))"
"(define-values"
"(make-eager-instance-instance11.1)"
"(lambda(bulk-binding-registry4_0 dest-phase2_0 inspector5_0 namespace1_1 self3_1)"
"(begin"
" 'make-eager-instance-instance11"
"(let-values(((ns_56) namespace1_1))"
"(let-values(((dest-phase_0) dest-phase2_0))"
"(let-values(((self_16) self3_1))"
"(let-values(((bulk-binding-registry_12) bulk-binding-registry4_0))"
"(let-values(((inspector_12) inspector5_0))"
"(let-values()"
"(1/make-instance"
" 'instance"
" #f"
" 'constant"
" ns-id"
" ns_56"
" dest-phase-id"
" dest-phase_0"
" self-id"
" self_16"
" bulk-binding-registry-id"
" bulk-binding-registry_12"
" inspector-id"
" inspector_12"
" 'swap-top-level-scopes"
" swap-top-level-scopes))))))))))"
"(define-values"
"(empty-eager-instance-instance)"
"(let-values(((temp14_3) #f)((temp15_3) #f)((temp16_3) #f)((temp17_2) #f)((temp18_4) #f))"
"(make-eager-instance-instance11.1 temp17_2 temp15_3 temp18_4 temp14_3 temp16_3)))"
"(define-values"
"(self-quoting-in-linklet?)"
"(lambda(datum_0)"
"(begin"
"(let-values(((or-part_0)(number? datum_0)))"
"(if or-part_0"
" or-part_0"
"(let-values(((or-part_1)(boolean? datum_0)))"
"(if or-part_1"
" or-part_1"
"(let-values(((or-part_11)(string? datum_0)))(if or-part_11 or-part_11(bytes? datum_0))))))))))"
"(define-values(datum->syntax$3) datum->syntax)"
"(define-values(syntax-property$2) syntax-property)"
"(define-values(syntax-e$2) syntax-e)"
"(define-values(1/syntax?) syntax?)"
"(define-values(correlated?)(lambda(e_25)(begin(1/syntax? e_25))))"
"(define-values"
"(datum->correlated)"
"(let-values(((datum->correlated3_0)"
"(lambda(d2_0 srcloc1_0)"
"(begin"
" 'datum->correlated3"
"(let-values(((d_26) d2_0))"
"(let-values(((srcloc_6) srcloc1_0))(let-values()(datum->syntax$3 #f d_26 srcloc_6))))))))"
"(case-lambda"
"((d_27)(begin(datum->correlated3_0 d_27 #f)))"
"((d_28 srcloc1_1)(datum->correlated3_0 d_28 srcloc1_1)))))"
"(define-values(correlated-e)(lambda(e_26)(begin(if(1/syntax? e_26)(syntax-e$2 e_26) e_26))))"
"(define-values(correlated-cadr)(lambda(e_27)(begin(car(correlated-e(cdr(correlated-e e_27)))))))"
"(define-values"
"(correlated-length)"
"(lambda(e_28)(begin(let-values(((l_54)(correlated-e e_28)))(if(list? l_54)(length l_54) #f)))))"
"(define-values"
"(correlated->list)"
"(lambda(e_29)"
"(begin"
"((letrec-values(((loop_91)"
"(lambda(e_30)"
"(begin"
" 'loop"
"(if(list? e_30)"
"(let-values() e_30)"
"(if(pair? e_30)"
"(let-values()(cons(car e_30)(loop_91(cdr e_30))))"
"(if(null? e_30)"
"(let-values() null)"
"(if(1/syntax? e_30)"
"(let-values()(loop_91(syntax-e$2 e_30)))"
"                                    (let-values () (error 'correlated->list \"not a list\"))))))))))"
" loop_91)"
" e_29))))"
"(define-values"
"(correlated-property)"
"(case-lambda"
"((e_31 k_31)(begin(syntax-property$2 e_31 k_31)))"
"((e_32 k_32 v_163)(syntax-property$2 e_32 k_32 v_163))))"
"(define-values"
"(to-syntax-list.1$1)"
"(lambda(s_109)"
"(begin"
" 'to-syntax-list"
"(if(list? s_109)"
"(let-values() s_109)"
"(if(pair? s_109)"
"(let-values()(let-values(((r_39)(to-syntax-list.1$1(cdr s_109))))(if r_39(cons(car s_109) r_39) #f)))"
"(if(1/syntax? s_109)(let-values()(to-syntax-list.1$1(syntax-e$2 s_109)))(let-values() #f)))))))"
"(define-values"
"(srcloc->vector)"
"(lambda(s_80)"
"(begin"
"(if s_80"
"(vector(srcloc-source s_80)(srcloc-line s_80)(srcloc-column s_80)(srcloc-position s_80)(srcloc-span s_80))"
" #f))))"
"(define-values"
"(correlate*)"
"(lambda(stx_15 s-exp_0)"
"(begin(if(syntax-srcloc stx_15)(datum->correlated s-exp_0(srcloc->vector(syntax-srcloc stx_15))) s-exp_0))))"
"(define-values(correlate~)(lambda(stx_16 s-exp_1)(begin s-exp_1)))"
"(define-values"
"(correlate/app)"
"(lambda(stx_17 s-exp_2)"
"(begin(if(eq?(system-type 'vm) 'chez-scheme)(correlate* stx_17 s-exp_2)(correlate~ stx_17 s-exp_2)))))"
"(define-values(->correlated)(lambda(s_2)(begin(datum->correlated s_2 #f))))"
"(define-values"
"(compile$2)"
"(let-values(((compile5_0)"
"(lambda(p3_0 cctx4_0 name1_0 result-used?2_0)"
"(begin"
" 'compile5"
"(let-values(((p_37) p3_0))"
"(let-values(((cctx_1) cctx4_0))"
"(let-values(((name_40) name1_0))"
"(let-values(((result-used?_0) result-used?2_0))"
"(let-values()"
"(let-values(((compile_0)"
"(lambda(p_38 name_4 result-used?_1)"
"(begin 'compile(compile$2 p_38 cctx_1 name_4 result-used?_1)))))"
"(let-values(((s_170)(parsed-s p_37)))"
"(if(parsed-id? p_37)"
"(let-values()"
"(let-values(((p25_0) p_37)((cctx26_0) cctx_1))"
"(compile-identifier22.1 #f #f p25_0 cctx26_0)))"
"(if(parsed-lambda? p_37)"
"(let-values()"
"(if result-used?_0"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_170"
"(list*"
" 'lambda"
"(compile-lambda"
"(parsed-lambda-keys p_37)"
"(parsed-lambda-body p_37)"
" cctx_1)))"
" name_40"
" s_170))"
"(let-values()(correlate~ s_170 ''unused-lambda))))"
"(if(parsed-case-lambda? p_37)"
"(let-values()"
"(if result-used?_0"
"(let-values()"
"(add-lambda-properties"
"(correlate*"
" s_170"
"(list*"
" 'case-lambda"
"(reverse$1"
"(let-values(((lst_86)(parsed-case-lambda-clauses p_37)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_86)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_69 lst_87)"
"(begin"
" 'for-loop"
"(if(pair? lst_87)"
"(let-values(((clause_0)"
"(unsafe-car lst_87))"
"((rest_41)"
"(unsafe-cdr lst_87)))"
"(let-values(((fold-var_70)"
"(let-values(((fold-var_27)"
" fold-var_69))"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(compile-lambda"
"(car"
" clause_0)"
"(cadr"
" clause_0)"
" cctx_1))"
" fold-var_27))))"
"(values"
" fold-var_28)))))"
"(if(not #f)"
"(for-loop_108 fold-var_70 rest_41)"
" fold-var_70)))"
" fold-var_69)))))"
" for-loop_108)"
" null"
" lst_86))))))"
" name_40"
" s_170))"
"(let-values()(correlate~ s_170 ''unused-case-lambda))))"
"(if(parsed-app? p_37)"
"(let-values()"
"(let-values(((rands_0)(parsed-app-rands p_37)))"
"(correlate/app"
" s_170"
"(cons"
"(compile_0(parsed-app-rator p_37) #f #t)"
"(reverse$1"
"(let-values(((lst_88) rands_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_88)))"
"((letrec-values(((for-loop_191)"
"(lambda(fold-var_157 lst_163)"
"(begin"
" 'for-loop"
"(if(pair? lst_163)"
"(let-values(((r_40)(unsafe-car lst_163))"
"((rest_84)"
"(unsafe-cdr lst_163)))"
"(let-values(((fold-var_33)"
"(let-values(((fold-var_34)"
" fold-var_157))"
"(let-values(((fold-var_158)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_0"
" r_40"
" #f"
" #t))"
" fold-var_34))))"
"(values"
" fold-var_158)))))"
"(if(not #f)"
"(for-loop_191 fold-var_33 rest_84)"
" fold-var_33)))"
" fold-var_157)))))"
" for-loop_191)"
" null"
" lst_88))))))))"
"(if(parsed-if? p_37)"
"(let-values()"
"(let-values(((tst-e_0)(compile_0(parsed-if-tst p_37) #f #f)))"
"(if(eq?(correlated-e tst-e_0) #t)"
"(let-values()"
"(compile_0(parsed-if-thn p_37) name_40 result-used?_0))"
"(if(eq?(correlated-e tst-e_0) #f)"
"(let-values()"
"(compile_0(parsed-if-els p_37) name_40 result-used?_0))"
"(let-values()"
"(correlate~"
" s_170"
"(list"
" 'if"
" tst-e_0"
"(compile_0(parsed-if-thn p_37) name_40 result-used?_0)"
"(compile_0(parsed-if-els p_37) name_40 result-used?_0))))))))"
"(if(parsed-with-continuation-mark? p_37)"
"(let-values()"
"(correlate~"
" s_170"
"(list"
" 'with-continuation-mark"
"(compile_0(parsed-with-continuation-mark-key p_37) #f #t)"
"(compile_0(parsed-with-continuation-mark-val p_37) #f #t)"
"(compile_0"
"(parsed-with-continuation-mark-body p_37)"
" name_40"
" result-used?_0))))"
"(if(parsed-begin0? p_37)"
"(let-values()"
"(correlate~"
" s_170"
"(list*"
" 'begin0"
"(compile_0(car(parsed-begin0-body p_37)) name_40 result-used?_0)"
"(reverse$1"
"(let-values(((lst_23)(cdr(parsed-begin0-body p_37))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_23)))"
"((letrec-values(((for-loop_192)"
"(lambda(fold-var_159 lst_79)"
"(begin"
" 'for-loop"
"(if(pair? lst_79)"
"(let-values(((e_33)"
"(unsafe-car lst_79))"
"((rest_85)"
"(unsafe-cdr lst_79)))"
"(let-values(((fold-var_160)"
"(let-values(((fold-var_94)"
" fold-var_159))"
"(let-values(((fold-var_95)"
"(let-values()"
"(cons"
"(let-values()"
"(compile_0"
" e_33"
" #f"
" #f))"
" fold-var_94))))"
"(values"
" fold-var_95)))))"
"(if(not #f)"
"(for-loop_192"
" fold-var_160"
" rest_85)"
" fold-var_160)))"
" fold-var_159)))))"
" for-loop_192)"
" null"
" lst_23)))))))"
"(if(parsed-begin? p_37)"
"(let-values()"
"(correlate~"
" s_170"
"(compile-begin"
"(parsed-begin-body p_37)"
" cctx_1"
" name_40"
" result-used?_0)))"
"(if(parsed-set!? p_37)"
"(let-values()"
"(correlate~"
" s_170"
"(let-values(((temp27_4)(parsed-set!-id p_37))"
"((cctx28_0) cctx_1)"
"((temp29_1) #t)"
"((temp30_1)"
"(compile_0"
"(parsed-set!-rhs p_37)"
"(parsed-s(parsed-set!-id p_37))"
" #t)))"
"(compile-identifier22.1 temp30_1 temp29_1 temp27_4 cctx28_0))))"
"(if(parsed-let-values? p_37)"
"(let-values()"
"(let-values(((p31_0) p_37)"
"((cctx32_0) cctx_1)"
"((name33_0) name_40)"
"((temp34_1) #f)"
"((result-used?35_0) result-used?_0))"
"(compile-let13.1"
" temp34_1"
" p31_0"
" cctx32_0"
" name33_0"
" result-used?35_0)))"
"(if(parsed-letrec-values? p_37)"
"(let-values()"
"(let-values(((p36_0) p_37)"
"((cctx37_0) cctx_1)"
"((name38_0) name_40)"
"((temp39_0) #t)"
"((result-used?40_0) result-used?_0))"
"(compile-let13.1"
" temp39_0"
" p36_0"
" cctx37_0"
" name38_0"
" result-used?40_0)))"
"(if(parsed-quote? p_37)"
"(let-values()"
"(let-values(((datum_1)(parsed-quote-datum p_37)))"
"(if(self-quoting-in-linklet? datum_1)"
"(let-values()(correlate~ s_170 datum_1))"
"(let-values()"
"(correlate~ s_170(list 'quote datum_1))))))"
"(if(parsed-quote-syntax? p_37)"
"(let-values()"
"(if result-used?_0"
"(compile-quote-syntax"
"(parsed-quote-syntax-datum p_37)"
" cctx_1)"
"(correlate~"
" s_170"
"(list 'quote(syntax->datum$1 s_170)))))"
"(if(parsed-#%variable-reference? p_37)"
"(let-values()"
"(let-values(((id_46)"
"(parsed-#%variable-reference-id p_37)))"
"(correlate~"
" s_170"
"(if id_46"
"(list"
" '#%variable-reference"
"(let-values(((id41_0) id_46)((cctx42_0) cctx_1))"
"(compile-identifier22.1 #f #f id41_0 cctx42_0)))"
" '(#%variable-reference)))))"
"(let-values()"
"(error"
"                                                                 \"unrecognized parsed form:\""
" p_37)))))))))))))))))))))))))))"
"(case-lambda"
"((p_39 cctx_2)(begin 'compile(compile5_0 p_39 cctx_2 #f #t)))"
"((p_40 cctx_3 name_41 result-used?2_1)(compile5_0 p_40 cctx_3 name_41 result-used?2_1))"
"((p_41 cctx_4 name1_1)(compile5_0 p_41 cctx_4 name1_1 #t)))))"
"(define-values"
"(compile-lambda)"
"(lambda(formals_0 bodys_0 cctx_5)(begin(list formals_0(compile-sequence bodys_0 cctx_5 #f #t)))))"
"(define-values"
"(compile-sequence)"
"(lambda(bodys_1 cctx_6 name_42 result-used?_2)"
"(begin"
"(if(null?(cdr bodys_1))"
"(compile$2(car bodys_1) cctx_6 name_42 result-used?_2)"
"(compile-begin bodys_1 cctx_6 name_42 result-used?_2)))))"
"(define-values"
"(compile-begin)"
"(lambda(es_0 cctx_7 name_43 result-used?_3)"
"(begin"
"(let-values(((used-pos_0)(sub1(length es_0))))"
"(list*"
" 'begin"
"(reverse$1"
"(let-values(((lst_164) es_0)((start_33) 0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_164)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_33)))"
"((letrec-values(((for-loop_193)"
"(lambda(fold-var_161 lst_165 pos_91)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_165) #t #f)"
"(let-values(((e_4)(unsafe-car lst_165))"
"((rest_86)(unsafe-cdr lst_165))"
"((i_135) pos_91))"
"(let-values(((fold-var_162)"
"(let-values(((fold-var_163) fold-var_161))"
"(let-values(((fold-var_164)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((used?_0)"
"(= i_135 used-pos_0)))"
"(compile$2"
" e_4"
" cctx_7"
"(if used?_0 name_43 #f)"
"(if used?_0 result-used?_3 #f))))"
" fold-var_163))))"
"(values fold-var_164)))))"
"(if(not #f)(for-loop_193 fold-var_162 rest_86(+ pos_91 1)) fold-var_162)))"
" fold-var_161)))))"
" for-loop_193)"
" null"
" lst_164"
" start_33)))))))))"
"(define-values"
"(add-lambda-properties)"
"(lambda(s_306 inferred-name_0 orig-s_21)"
"(begin"
"(letrec-values(((simplify-name_0)"
"(lambda(v_164)"
"(begin"
" 'simplify-name"
"(if(pair? v_164)"
"(let-values()"
"(let-values(((n1_0)(simplify-name_0(car v_164))))"
"(let-values(((n2_0)(simplify-name_0(cdr v_164))))(if(eq? n1_0 n2_0) n1_0 v_164))))"
"(let-values() v_164))))))"
"(let-values(((name_44)"
"(let-values(((or-part_210)"
"(let-values(((v_54)"
"(simplify-name_0(syntax-property$1 orig-s_21 'inferred-name))))"
"(if(let-values(((or-part_211)(symbol? v_54)))"
"(if or-part_211"
" or-part_211"
"(let-values(((or-part_212)(syntax?$1 v_54)))"
"(if or-part_212 or-part_212(void? v_54)))))"
" v_54"
" #f))))"
"(if or-part_210 or-part_210 inferred-name_0))))"
"(let-values(((named-s_0)"
"(if name_44"
"(correlated-property"
"(->correlated s_306)"
" 'inferred-name"
"(if(syntax?$1 name_44)(syntax-e$1 name_44) name_44))"
" s_306)))"
"(let-values(((as-method_0)(syntax-property$1 orig-s_21 'method-arity-error)))"
"(if as-method_0"
"(correlated-property(->correlated named-s_0) 'method-arity-error as-method_0)"
" named-s_0))))))))"
"(define-values"
"(compile-let13.1)"
"(lambda(rec?7_0 p9_0 cctx10_0 name11_0 result-used?12_0)"
"(begin"
" 'compile-let13"
"(let-values(((p_42) p9_0))"
"(let-values(((cctx_8) cctx10_0))"
"(let-values(((name_45) name11_0))"
"(let-values(((rec?_0) rec?7_0))"
"(let-values(((result-used?_4) result-used?12_0))"
"(let-values()"
"(let-values(((body_0)(parsed-let_-values-body p_42)))"
"(correlate~"
"(parsed-s p_42)"
"(list"
"(if rec?_0 'letrec-values 'let-values)"
"(reverse$1"
"(let-values(((lst_166)(parsed-let_-values-clauses p_42))"
"((lst_167)(parsed-let_-values-idss p_42)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_166)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_167)))"
"((letrec-values(((for-loop_194)"
"(lambda(fold-var_165 lst_168 lst_169)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_168)(pair? lst_169) #f)"
"(let-values(((clause_1)(unsafe-car lst_168))"
"((rest_87)(unsafe-cdr lst_168))"
"((ids_4)(unsafe-car lst_169))"
"((rest_88)(unsafe-cdr lst_169)))"
"(let-values(((fold-var_166)"
"(let-values(((fold-var_167) fold-var_165))"
"(let-values(((fold-var_168)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(if rec?_0"
"(reverse$1"
"(let-values(((lst_170)"
"(car"
" clause_1))"
"((lst_171)"
" ids_4))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_170)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_171)))"
"((letrec-values(((for-loop_195)"
"(lambda(fold-var_169"
" lst_172"
" lst_173)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_172)"
"(pair?"
" lst_173)"
" #f)"
"(let-values(((sym_56)"
"(unsafe-car"
" lst_172))"
"((rest_89)"
"(unsafe-cdr"
" lst_172))"
"((id_47)"
"(unsafe-car"
" lst_173))"
"((rest_90)"
"(unsafe-cdr"
" lst_173)))"
"(let-values(((fold-var_2)"
"(let-values(((fold-var_3)"
" fold-var_169))"
"(let-values(((fold-var_97)"
"(let-values()"
"(cons"
"(let-values()"
"(add-undefined-error-name-property"
" sym_56"
" id_47))"
" fold-var_3))))"
"(values"
" fold-var_97)))))"
"(if(not"
" #f)"
"(for-loop_195"
" fold-var_2"
" rest_89"
" rest_90)"
" fold-var_2)))"
" fold-var_169)))))"
" for-loop_195)"
" null"
" lst_170"
" lst_171))))"
"(car clause_1))"
"(compile$2"
"(cadr clause_1)"
" cctx_8"
"(if(= 1(length ids_4))"
"(car ids_4)"
" #f))))"
" fold-var_167))))"
"(values fold-var_168)))))"
"(if(not #f)"
"(for-loop_194 fold-var_166 rest_87 rest_88)"
" fold-var_166)))"
" fold-var_165)))))"
" for-loop_194)"
" null"
" lst_166"
" lst_167))))"
"(compile-sequence body_0 cctx_8 name_45 result-used?_4)))))))))))))"
"(define-values"
"(add-undefined-error-name-property)"
"(lambda(sym_54 orig-id_0)"
"(begin"
"(let-values(((id_48)(correlate~ orig-id_0 sym_54)))"
"(correlated-property"
"(->correlated id_48)"
" 'undefined-error-name"
"(let-values(((or-part_213)(syntax-property$1 orig-id_0 'undefined-error-name)))"
"(if or-part_213 or-part_213(syntax-e$1 orig-id_0))))))))"
"(define-values"
"(compile-identifier22.1)"
"(lambda(set-to17_0 set-to?16_0 p20_0 cctx21_0)"
"(begin"
" 'compile-identifier22"
"(let-values(((p_43) p20_0))"
"(let-values(((cctx_9) cctx21_0))"
"(let-values(((set-to?_0) set-to?16_0))"
"(let-values(((rhs_0) set-to17_0))"
"(let-values()"
"(let-values(((normal-b_0)(parsed-id-binding p_43)))"
"(let-values(((b_74)"
"(let-values(((or-part_214) normal-b_0))"
"(if or-part_214"
" or-part_214"
"(let-values(((temp43_0)(compile-context-self cctx_9))"
"((temp44_0)(compile-context-phase cctx_9))"
"((temp45_0)(syntax-e$1(parsed-s p_43))))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" temp43_0"
" temp44_0"
" temp45_0))))))"
"(let-values(((sym_57)"
"(if(local-binding? b_74)"
"(let-values()(local-binding-key b_74))"
"(if(module-binding? b_74)"
"(let-values()"
"(let-values(((mpi_40)"
"(if(parsed-top-id? p_43)"
"(compile-context-self cctx_9)"
"(module-binding-module b_74))))"
"(if(parsed-primitive-id? p_43)"
"(let-values()"
"(begin"
"(if(zero?(module-binding-phase b_74))"
"(void)"
"(let-values()"
"                                                    (error \"internal error: non-zero phase for a primitive\")))"
"(if set-to?_0"
"(let-values()"
"(error"
"                                                     \"internal error: cannot assign to a primitive:\""
"(module-binding-sym b_74)))"
"(void))"
"(module-binding-sym b_74)))"
"(if(eq? mpi_40(compile-context-module-self cctx_9))"
"(let-values()"
"(let-values(((header_6)(compile-context-header cctx_9)))"
"(hash-ref"
"(header-binding-sym-to-define-sym header_6)"
"(module-binding-sym b_74))))"
"(let-values()"
"(let-values(((temp46_0)(compile-context-header cctx_9))"
"((mpi47_0) mpi_40)"
"((temp48_0)(module-binding-phase b_74))"
"((temp49_0)(module-binding-sym b_74))"
"((temp50_0)"
"(let-values(((or-part_215)"
"(module-binding-extra-inspector b_74)))"
"(if or-part_215"
" or-part_215"
"(let-values(((or-part_216)"
"(parsed-id-inspector p_43)))"
"(if or-part_216"
" or-part_216"
"(if(parsed-s p_43)"
"(syntax-inspector(parsed-s p_43))"
" #f)))))))"
"(register-required-variable-use!19.1"
" #f"
" temp46_0"
" mpi47_0"
" temp48_0"
" temp49_0"
" temp50_0)))))))"
"(let-values()"
"(error"
"                                         \"not a reference to a module or local binding:\""
" b_74"
"(parsed-s p_43)))))))"
"(correlate~(parsed-s p_43)(if set-to?_0(list 'set! sym_57 rhs_0) sym_57)))))))))))))"
"(define-values"
"(compile-quote-syntax)"
"(lambda(q_1 cctx_10)"
"(begin"
"(let-values(((pos_92)(add-syntax-literal!(compile-context-header cctx_10) q_1)))"
"(if(compile-context-lazy-syntax-literals? cctx_10)"
"(let-values()(generate-lazy-syntax-literal-lookup pos_92))"
"(let-values()(generate-eager-syntax-literal-lookup pos_92)))))))"
"(define-values"
"(extra-inspectors-allow?)"
"(lambda(extra-inspectors_2 guard-insp_0)"
"(begin"
"(if(not extra-inspectors_2)"
"(let-values() #f)"
"(if(set? extra-inspectors_2)"
"(let-values()"
"(let-values(((ht_112) extra-inspectors_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_112)))"
"((letrec-values(((for-loop_97)"
"(lambda(result_77 i_136)"
"(begin"
" 'for-loop"
"(if i_136"
"(let-values(((extra-insp_0)(unsafe-immutable-hash-iterate-key ht_112 i_136)))"
"(let-values(((result_78)"
"(let-values()"
"(let-values(((result_79)"
"(let-values()"
"(let-values()"
"(inspector-superior?"
" extra-insp_0"
" guard-insp_0)))))"
"(values result_79)))))"
"(if(if(not((lambda x_56(not result_78)) extra-insp_0))(not #f) #f)"
"(for-loop_97 result_78(unsafe-immutable-hash-iterate-next ht_112 i_136))"
" result_78)))"
" result_77)))))"
" for-loop_97)"
" #t"
"(unsafe-immutable-hash-iterate-first ht_112)))))"
"(if(procedure? extra-inspectors_2)"
"(let-values()(extra-inspectors_2 guard-insp_0))"
"(let-values()"
"(error"
" 'extra-inspectors-allow?"
"               \"unknown representation of extra inspectors: ~e\""
" extra-inspectors_2))))))))"
"(define-values"
"(extra-inspectors-merge)"
"(lambda(extra-inspectors-1_0 extra-inspectors-2_0)"
"(begin"
"(if(let-values(((or-part_217)(not extra-inspectors-1_0)))"
"(if or-part_217 or-part_217(not extra-inspectors-2_0)))"
"(let-values() #f)"
"(if(if(set? extra-inspectors-1_0)(set? extra-inspectors-2_0) #f)"
"(let-values()(set-union extra-inspectors-1_0 extra-inspectors-2_0))"
"(let-values()"
"(lambda(guard-insp_1)"
"(if(extra-inspectors-allow? extra-inspectors-1_0 guard-insp_1)"
"(extra-inspectors-allow? extra-inspectors-2_0 guard-insp_1)"
" #f))))))))"
"(define-values"
"(struct:module-use*"
" module-use*1.1"
" module-use*?"
" module-use*-extra-inspectorss"
" module-use*-self-inspector"
" set-module-use*-extra-inspectorss!"
" set-module-use*-self-inspector!)"
"(let-values(((struct:_70 make-_70 ?_70 -ref_70 -set!_70)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-use*"
" struct:module-use"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'module-use*)))))"
"(values"
" struct:_70"
" make-_70"
" ?_70"
"(make-struct-field-accessor -ref_70 0 'extra-inspectorss)"
"(make-struct-field-accessor -ref_70 1 'self-inspector)"
"(make-struct-field-mutator -set!_70 0 'extra-inspectorss)"
"(make-struct-field-mutator -set!_70 1 'self-inspector))))"
"(define-values"
"(module-uses-add-extra-inspectorsss)"
"(lambda(mus_1 extra-inspectorsss_0)"
"(begin"
"(if extra-inspectorsss_0"
"(let-values()"
"(reverse$1"
"(let-values(((lst_104) mus_1)((lst_90) extra-inspectorsss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_104)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_90)))"
"((letrec-values(((for-loop_110)"
"(lambda(fold-var_11 lst_91 lst_174)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_91)(pair? lst_174) #f)"
"(let-values(((mu_5)(unsafe-car lst_91))"
"((rest_91)(unsafe-cdr lst_91))"
"((extra-inspectorss_1)(unsafe-car lst_174))"
"((rest_37)(unsafe-cdr lst_174)))"
"(let-values(((fold-var_170)"
"(let-values(((fold-var_171) fold-var_11))"
"(let-values(((fold-var_172)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use*1.1"
"(module-use-module mu_5)"
"(module-use-phase mu_5)"
" extra-inspectorss_1"
" #f))"
" fold-var_171))))"
"(values fold-var_172)))))"
"(if(not #f)(for-loop_110 fold-var_170 rest_91 rest_37) fold-var_170)))"
" fold-var_11)))))"
" for-loop_110)"
" null"
" lst_104"
" lst_90)))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_92) mus_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_92)))"
"((letrec-values(((for-loop_196)"
"(lambda(fold-var_173 lst_17)"
"(begin"
" 'for-loop"
"(if(pair? lst_17)"
"(let-values(((mu_6)(unsafe-car lst_17))((rest_92)(unsafe-cdr lst_17)))"
"(let-values(((fold-var_74)"
"(let-values(((fold-var_64) fold-var_173))"
"(let-values(((fold-var_174)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use*1.1"
"(module-use-module mu_6)"
"(module-use-phase mu_6)"
" #f"
" #f))"
" fold-var_64))))"
"(values fold-var_174)))))"
"(if(not #f)(for-loop_196 fold-var_74 rest_92) fold-var_74)))"
" fold-var_173)))))"
" for-loop_196)"
" null"
" lst_92)))))))))"
"(define-values"
"(module-uses-strip-extra-inspectorsss)"
"(lambda(mu*s_0)"
"(begin"
"(reverse$1"
"(let-values(((lst_175) mu*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_175)))"
"((letrec-values(((for-loop_197)"
"(lambda(fold-var_76 lst_176)"
"(begin"
" 'for-loop"
"(if(pair? lst_176)"
"(let-values(((mu*_0)(unsafe-car lst_176))((rest_93)(unsafe-cdr lst_176)))"
"(let-values(((fold-var_17)"
"(let-values(((fold-var_66) fold-var_76))"
"(let-values(((fold-var_67)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use1.1"
"(module-use-module mu*_0)"
"(module-use-phase mu*_0)))"
" fold-var_66))))"
"(values fold-var_67)))))"
"(if(not #f)(for-loop_197 fold-var_17 rest_93) fold-var_17)))"
" fold-var_76)))))"
" for-loop_197)"
" null"
" lst_175)))))))"
"(define-values"
"(module-uses-extract-extra-inspectorsss)"
"(lambda(mu*s_1 linklet_0 check-inlined-reference?_0 skip-n_0)"
"(begin"
"(if(not check-inlined-reference?_0)"
"(let-values()"
"(reverse$1"
"(let-values(((lst_177) mu*s_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_177)))"
"((letrec-values(((for-loop_198)"
"(lambda(fold-var_79 lst_96)"
"(begin"
" 'for-loop"
"(if(pair? lst_96)"
"(let-values(((mu*_1)(unsafe-car lst_96))((rest_94)(unsafe-cdr lst_96)))"
"(let-values(((fold-var_175)"
"(let-values(((fold-var_4) fold-var_79))"
"(let-values(((fold-var_68)"
"(let-values()"
"(cons"
"(let-values()"
"(module-use*-extra-inspectorss mu*_1))"
" fold-var_4))))"
"(values fold-var_68)))))"
"(if(not #f)(for-loop_198 fold-var_175 rest_94) fold-var_175)))"
" fold-var_79)))))"
" for-loop_198)"
" null"
" lst_177)))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_178) mu*s_1)((lst_179)(list-tail(1/linklet-import-variables linklet_0) skip-n_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_178)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_179)))"
"((letrec-values(((for-loop_28)"
"(lambda(fold-var_6 lst_180 lst_164)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_180)(pair? lst_164) #f)"
"(let-values(((mu*_2)(unsafe-car lst_180))"
"((rest_95)(unsafe-cdr lst_180))"
"((imports_0)(unsafe-car lst_164))"
"((rest_96)(unsafe-cdr lst_164)))"
"(let-values(((fold-var_176)"
"(let-values(((fold-var_177) fold-var_6))"
"(let-values(((fold-var_178)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((extra-inspectorss_2)"
"(module-use*-extra-inspectorss"
" mu*_2)))"
"(let-values(((lst_99) imports_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_99)))"
"((letrec-values(((for-loop_19)"
"(lambda(extra-inspectorss_3"
" lst_181)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_181)"
"(let-values(((import_0)"
"(unsafe-car"
" lst_181))"
"((rest_97)"
"(unsafe-cdr"
" lst_181)))"
"(let-values(((extra-inspectorss_4)"
"(let-values(((extra-inspectorss_5)"
" extra-inspectorss_3))"
"(let-values(((extra-inspectorss_6)"
"(let-values()"
"(if(eq?"
"(hash-ref"
" extra-inspectorss_5"
" import_0"
" '#:not-recorded)"
" '#:not-recorded)"
"(let-values()"
"(hash-set"
" extra-inspectorss_5"
" import_0"
"(set"
"(module-use*-self-inspector"
" mu*_2))))"
"(let-values()"
" extra-inspectorss_5)))))"
"(values"
" extra-inspectorss_6)))))"
"(if(not"
" #f)"
"(for-loop_19"
" extra-inspectorss_4"
" rest_97)"
" extra-inspectorss_4)))"
" extra-inspectorss_3)))))"
" for-loop_19)"
" extra-inspectorss_2"
" lst_99)))))"
" fold-var_177))))"
"(values fold-var_178)))))"
"(if(not #f)(for-loop_28 fold-var_176 rest_95 rest_96) fold-var_176)))"
" fold-var_6)))))"
" for-loop_28)"
" null"
" lst_178"
" lst_179)))))))))"
"(define-values"
"(module-use*-declaration-inspector!)"
"(lambda(mu*_3 insp_9)(begin(set-module-use*-self-inspector! mu*_3 insp_9))))"
"(define-values"
"(module-use+extra-inspectors)"
"(lambda(mpi_41 phase_72 imports_1 inspector_13 extra-inspector_5 extra-inspectorss_7)"
"(begin"
"(let-values(((now-inspector_0)(current-code-inspector)))"
"(let-values(((add-insp?_0)(if inspector_13(inspector-superior? inspector_13 now-inspector_0) #f)))"
"(let-values(((add-extra-insp?_0)"
"(if extra-inspector_5(inspector-superior? extra-inspector_5 now-inspector_0) #f)))"
"(let-values(((new-extra-inspectorss_0)"
"(if(let-values(((or-part_218) add-insp?_0))(if or-part_218 or-part_218 add-extra-insp?_0))"
"(let-values()"
"(let-values(((lst_182) imports_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_182)))"
"((letrec-values(((for-loop_199)"
"(lambda(table_147 lst_183)"
"(begin"
" 'for-loop"
"(if(pair? lst_183)"
"(let-values(((import_1)(unsafe-car lst_183))"
"((rest_98)(unsafe-cdr lst_183)))"
"(let-values(((table_148)"
"(let-values(((table_149) table_147))"
"(let-values(((table_150)"
"(let-values()"
"(let-values(((key_57"
" val_50)"
"(let-values()"
"(values"
" import_1"
"(let-values(((extra-inspectors_3)"
"(if extra-inspectorss_7"
"(hash-ref"
" extra-inspectorss_7"
" import_1"
" #f)"
" #f)))"
"(lambda(guard-insp_2)"
"(let-values(((or-part_219)"
"(if add-insp?_0"
"(inspector-superior?"
" inspector_13"
" guard-insp_2)"
" #f)))"
"(if or-part_219"
" or-part_219"
"(let-values(((or-part_100)"
"(if add-extra-insp?_0"
"(inspector-superior?"
" extra-inspector_5"
" guard-insp_2)"
" #f)))"
"(if or-part_100"
" or-part_100"
"(extra-inspectors-allow?"
" extra-inspectors_3"
" guard-insp_2)))))))))))"
"(hash-set"
" table_149"
" key_57"
" val_50)))))"
"(values table_150)))))"
"(if(not #f)(for-loop_199 table_148 rest_98) table_148)))"
" table_147)))))"
" for-loop_199)"
" '#hash()"
" lst_182))))"
"(let-values()"
"(let-values(((lst_184) imports_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_184)))"
"((letrec-values(((for-loop_200)"
"(lambda(extra-inspectorss_8 lst_167)"
"(begin"
" 'for-loop"
"(if(pair? lst_167)"
"(let-values(((import_2)(unsafe-car lst_167))"
"((rest_99)(unsafe-cdr lst_167)))"
"(let-values(((extra-inspectorss_9)"
"(let-values(((extra-inspectorss_10)"
" extra-inspectorss_8))"
"(let-values(((extra-inspectorss_11)"
"(let-values()"
"(if(hash-ref"
" extra-inspectorss_10"
" import_2"
" #f)"
" extra-inspectorss_10"
"(hash-set"
" extra-inspectorss_10"
" import_2"
" #f)))))"
"(values extra-inspectorss_11)))))"
"(if(not #f)"
"(for-loop_200 extra-inspectorss_9 rest_99)"
" extra-inspectorss_9)))"
" extra-inspectorss_8)))))"
" for-loop_200)"
"(let-values(((or-part_38) extra-inspectorss_7))(if or-part_38 or-part_38(seteq)))"
" lst_184)))))))"
"(module-use*1.1 mpi_41 phase_72 new-extra-inspectorss_0 #f))))))))"
"(define-values"
"(module-use-merge-extra-inspectorss!)"
"(lambda(existing-mu*_0 mu*_4)"
"(begin"
"(let-values(((extra-inspectorss_12)(module-use*-extra-inspectorss mu*_4)))"
"(let-values(((existing-extra-inspectorss_0)(module-use*-extra-inspectorss existing-mu*_0)))"
"(let-values(((new-extra-inspectorss_1)"
"(let-values(((ht_113) extra-inspectorss_12))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_113)))"
"((letrec-values(((for-loop_201)"
"(lambda(new-extra-inspectorss_2 i_137)"
"(begin"
" 'for-loop"
"(if i_137"
"(let-values(((sym_58 extra-inspectors_4)"
"(hash-iterate-key+value ht_113 i_137)))"
"(let-values(((new-extra-inspectorss_3)"
"(let-values(((new-extra-inspectorss_4)"
" new-extra-inspectorss_2))"
"(let-values(((new-extra-inspectorss_5)"
"(let-values()"
"(hash-set"
" new-extra-inspectorss_4"
" sym_58"
"(extra-inspectors-merge"
" extra-inspectors_4"
"(hash-ref"
" new-extra-inspectorss_4"
" sym_58"
"(seteq)))))))"
"(values new-extra-inspectorss_5)))))"
"(if(not #f)"
"(for-loop_201"
" new-extra-inspectorss_3"
"(hash-iterate-next ht_113 i_137))"
" new-extra-inspectorss_3)))"
" new-extra-inspectorss_2)))))"
" for-loop_201)"
" existing-extra-inspectorss_0"
"(hash-iterate-first ht_113))))))"
"(set-module-use*-extra-inspectorss! existing-mu*_0 new-extra-inspectorss_1)))))))"
"(define-values"
"(struct:link-info"
" link-info1.1"
" link-info?"
" link-info-link-module-uses"
" link-info-imports"
" link-info-extra-inspectorsss"
" link-info-def-decls)"
"(let-values(((struct:_36 make-_36 ?_36 -ref_36 -set!_36)"
"(let-values()"
"(let-values()"
"(make-struct-type 'link-info #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'link-info)))))"
"(values"
" struct:_36"
" make-_36"
" ?_36"
"(make-struct-field-accessor -ref_36 0 'link-module-uses)"
"(make-struct-field-accessor -ref_36 1 'imports)"
"(make-struct-field-accessor -ref_36 2 'extra-inspectorsss)"
"(make-struct-field-accessor -ref_36 3 'def-decls))))"
"(define-values"
"(compile-forms31.1)"
"(lambda(body-import-instances3_0"
" body-imports2_0"
" body-suffix-forms4_0"
" compiled-expression-callback8_0"
" cross-linklet-inlining?14_0"
" definition-callback9_0"
" encoded-root-expand-ctx-box6_0"
" force-phases5_0"
" get-module-linklet-info11_0"
" other-form-callback10_0"
" root-ctx-only-if-syntax?7_0"
" serializable?13_0"
" to-source?12_0"
" bodys28_0"
" cctx29_0"
" mpis30_0)"
"(begin"
" 'compile-forms31"
"(let-values(((bodys_2) bodys28_0))"
"(let-values(((cctx_11) cctx29_0))"
"(let-values(((mpis_15) mpis30_0))"
"(let-values(((body-imports_0) body-imports2_0))"
"(let-values(((body-import-instances_0) body-import-instances3_0))"
"(let-values(((body-suffix-forms_0) body-suffix-forms4_0))"
"(let-values(((force-phases_0) force-phases5_0))"
"(let-values(((encoded-root-expand-ctx-box_0) encoded-root-expand-ctx-box6_0))"
"(let-values(((root-ctx-only-if-syntax?_0) root-ctx-only-if-syntax?7_0))"
"(let-values(((compiled-expression-callback_0)"
"(if(eq? compiled-expression-callback8_0 unsafe-undefined)"
" void"
" compiled-expression-callback8_0)))"
"(let-values(((definition-callback_0)"
"(if(eq? definition-callback9_0 unsafe-undefined) void definition-callback9_0)))"
"(let-values(((other-form-callback_0)"
"(if(eq? other-form-callback10_0 unsafe-undefined)"
" void"
" other-form-callback10_0)))"
"(let-values(((get-module-linklet-info_0)"
"(if(eq? get-module-linklet-info11_0 unsafe-undefined)"
"(lambda(mod-name_14 p_44)(begin 'get-module-linklet-info #f))"
" get-module-linklet-info11_0)))"
"(let-values(((to-source?_0) to-source?12_0))"
"(let-values(((serializable?_0) serializable?13_0))"
"(let-values(((cross-linklet-inlining?_1) cross-linklet-inlining?14_0))"
"(let-values()"
"(let-values(((phase_73)(compile-context-phase cctx_11)))"
"(let-values(((self_17)(compile-context-self cctx_11)))"
"(let-values(((syntax-literals_1)(make-syntax-literals)))"
"(let-values(((phase-to-body_0)(make-hasheqv)))"
"(let-values(((add-body!_0)"
"(lambda(phase_74 body_1)"
"(begin"
" 'add-body!"
"(hash-update!"
" phase-to-body_0"
" phase_74"
"(lambda(l_21)(cons body_1 l_21))"
" null)))))"
"(let-values(((phase-to-header_0)(make-hasheqv)))"
"(let-values(((find-or-create-header!_0)"
"(lambda(phase_75)"
"(begin"
" 'find-or-create-header!"
"(let-values(((or-part_220)"
"(hash-ref"
" phase-to-header_0"
" phase_75"
" #f)))"
"(if or-part_220"
" or-part_220"
"(let-values(((header_7)"
"(make-header"
" mpis_15"
" syntax-literals_1)))"
"(begin"
"(hash-set!"
" phase-to-header_0"
" phase_75"
" header_7)"
" header_7))))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_100) force-phases_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_100)))"
"((letrec-values(((for-loop_115)"
"(lambda(lst_26)"
"(begin"
" 'for-loop"
"(if(pair? lst_26)"
"(let-values(((phase_76)"
"(unsafe-car"
" lst_26))"
"((rest_100)"
"(unsafe-cdr"
" lst_26)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(find-or-create-header!_0"
" phase_76)"
"(add-body!_0"
" phase_76"
" '(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_115"
" rest_100)"
"(values))))"
"(values))))))"
" for-loop_115)"
" lst_100)))"
"(values))))"
"(let-values()"
"(let-values(((saw-define-syntaxes?_0) #f))"
"(let-values((()"
"(begin"
"(if(compile-context-module-self cctx_11)"
"(let-values()"
"((letrec-values(((loop!_0)"
"(lambda(bodys_3"
" phase_7"
" header_8)"
"(begin"
" 'loop!"
"(begin"
"(let-values(((lst_185)"
" bodys_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_185)))"
"((letrec-values(((for-loop_202)"
"(lambda(lst_186)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_186)"
"(let-values(((body_2)"
"(unsafe-car"
" lst_186))"
"((rest_101)"
"(unsafe-cdr"
" lst_186)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_2)"
"(let-values()"
"(begin"
"(let-values(((lst_187)"
"(parsed-define-values-syms"
" body_2)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_187)))"
"((letrec-values(((for-loop_3)"
"(lambda(lst_188)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_188)"
"(let-values(((sym_59)"
"(unsafe-car"
" lst_188))"
"((rest_102)"
"(unsafe-cdr"
" lst_188)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((def-sym_1)"
"(select-fresh"
" sym_59"
" header_8)))"
"(begin"
"(hash-set!"
"(header-binding-sym-to-define-sym"
" header_8)"
" sym_59"
" def-sym_1)"
"(set-header-binding-syms-in-order!"
" header_8"
"(cons"
" sym_59"
"(header-binding-syms-in-order"
" header_8)))"
"(register-as-defined!"
" header_8"
" def-sym_1))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_3"
" rest_102)"
"(values))))"
"(values))))))"
" for-loop_3)"
" lst_187)))"
"(void)))"
"(if(parsed-begin-for-syntax?"
" body_2)"
"(let-values()"
"(loop!_0"
"(parsed-begin-for-syntax-body"
" body_2)"
"(add1"
" phase_7)"
"(find-or-create-header!_0"
"(add1"
" phase_7))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_202"
" rest_101)"
"(values))))"
"(values))))))"
" for-loop_202)"
" lst_185)))"
"(void))))))"
" loop!_0)"
" bodys_2"
" phase_73"
"(find-or-create-header!_0 phase_73)))"
"(void))"
"(values))))"
"(let-values(((as-required?_0)"
"(lambda(header_9)"
"(begin"
" 'as-required?"
"(lambda(sym_60)"
"(registered-as-required?"
" header_9"
" sym_60))))))"
"(let-values(((last-i_0)(sub1(length bodys_2))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop!_1)"
"(lambda(bodys_4"
" phase_77"
" header_10)"
"(begin"
" 'loop!"
"(begin"
"(let-values(((lst_189)"
" bodys_4)"
"((start_34)"
" 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_189)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-naturals"
" start_34)))"
"((letrec-values(((for-loop_203)"
"(lambda(lst_190"
" pos_93)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_190)"
" #t"
" #f)"
"(let-values(((body_0)"
"(unsafe-car"
" lst_190))"
"((rest_103)"
"(unsafe-cdr"
" lst_190))"
"((i_107)"
" pos_93))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(parsed-define-values?"
" body_0)"
"(let-values()"
"(let-values(((ids_5)"
"(parsed-define-values-ids"
" body_0)))"
"(let-values(((binding-syms_0)"
"(parsed-define-values-syms"
" body_0)))"
"(let-values(((def-syms_0)"
"(if(compile-context-module-self"
" cctx_11)"
"(let-values()"
"(reverse$1"
"(let-values(((lst_191)"
" binding-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_191)))"
"((letrec-values(((for-loop_123)"
"(lambda(fold-var_179"
" lst_192)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_192)"
"(let-values(((binding-sym_0)"
"(unsafe-car"
" lst_192))"
"((rest_104)"
"(unsafe-cdr"
" lst_192)))"
"(let-values(((fold-var_168)"
"(let-values(((fold-var_180)"
" fold-var_179))"
"(let-values(((fold-var_181)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
"(header-binding-sym-to-define-sym"
" header_10)"
" binding-sym_0))"
" fold-var_180))))"
"(values"
" fold-var_181)))))"
"(if(not"
" #f)"
"(for-loop_123"
" fold-var_168"
" rest_104)"
" fold-var_168)))"
" fold-var_179)))))"
" for-loop_123)"
" null"
" lst_191)))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_193)"
" binding-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_193)))"
"((letrec-values(((for-loop_204)"
"(lambda(fold-var_182"
" lst_173)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_173)"
"(let-values(((binding-sym_1)"
"(unsafe-car"
" lst_173))"
"((rest_89)"
"(unsafe-cdr"
" lst_173)))"
"(let-values(((fold-var_183)"
"(let-values(((fold-var_1)"
" fold-var_182))"
"(let-values(((fold-var_2)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((header35_0)"
" header_10)"
"((temp36_0)"
"(compile-context-self"
" cctx_11))"
"((phase37_0)"
" phase_77)"
"((binding-sym38_0)"
" binding-sym_1)"
"((temp39_1)"
" #f)"
"((temp40_0)"
" #t))"
"(register-required-variable-use!19.1"
" temp40_0"
" header35_0"
" temp36_0"
" phase37_0"
" binding-sym38_0"
" temp39_1)))"
" fold-var_1))))"
"(values"
" fold-var_2)))))"
"(if(not"
" #f)"
"(for-loop_204"
" fold-var_183"
" rest_89)"
" fold-var_183)))"
" fold-var_182)))))"
" for-loop_204)"
" null"
" lst_193))))))))"
"(let-values(((rhs_1)"
"(compile$2"
"(parsed-define-values-rhs"
" body_0)"
"(let-values(((the-struct_48)"
" cctx_11))"
"(if(compile-context?"
" the-struct_48)"
"(let-values(((phase41_0)"
" phase_77)"
"((header42_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_48)"
" phase41_0"
"(compile-context-self"
" the-struct_48)"
"(compile-context-module-self"
" the-struct_48)"
"(compile-context-full-module-name"
" the-struct_48)"
"(compile-context-lazy-syntax-literals?"
" the-struct_48)"
" header42_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"compile-context?\""
" the-struct_48)))"
"(if(="
"(length"
" ids_5)"
" 1)"
"(car"
" ids_5)"
" #f))))"
"(begin"
"(definition-callback_0)"
"(compiled-expression-callback_0"
" rhs_1"
"(length"
" def-syms_0)"
" phase_77"
"(as-required?_0"
" header_10))"
"(add-body!_0"
" phase_77"
"(propagate-inline-property"
"(correlate*"
"(parsed-s"
" body_0)"
"(list"
" 'define-values"
" def-syms_0"
" rhs_1))"
"(parsed-s"
" body_0)))"
"(if(let-values(((or-part_169)"
"(compile-context-module-self"
" cctx_11)))"
"(if or-part_169"
" or-part_169"
"(null?"
" ids_5)))"
"(void)"
"(let-values()"
"(begin"
"(add-body!_0"
" phase_77"
"(list*"
" 'if"
" #f"
"(list*"
" 'begin"
"(reverse$1"
"(let-values(((lst_194)"
" def-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_194)))"
"((letrec-values(((for-loop_205)"
"(lambda(fold-var_184"
" lst_13)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_13)"
"(let-values(((def-sym_2)"
"(unsafe-car"
" lst_13))"
"((rest_105)"
"(unsafe-cdr"
" lst_13)))"
"(let-values(((fold-var_185)"
"(let-values(((fold-var_186)"
" fold-var_184))"
"(let-values(((fold-var_187)"
"(let-values()"
"(cons"
"(let-values()"
"(list*"
" 'set!"
" def-sym_2"
" '(#f)))"
" fold-var_186))))"
"(values"
" fold-var_187)))))"
"(if(not"
" #f)"
"(for-loop_205"
" fold-var_185"
" rest_105)"
" fold-var_185)))"
" fold-var_184)))))"
" for-loop_205)"
" null"
" lst_194)))))"
" '((void))))"
"(add-body!_0"
" phase_77"
"(compile-top-level-bind"
" ids_5"
" binding-syms_0"
"(let-values(((the-struct_49)"
" cctx_11))"
"(if(compile-context?"
" the-struct_49)"
"(let-values(((phase43_0)"
" phase_77)"
"((header44_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_49)"
" phase43_0"
"(compile-context-self"
" the-struct_49)"
"(compile-context-module-self"
" the-struct_49)"
"(compile-context-full-module-name"
" the-struct_49)"
"(compile-context-lazy-syntax-literals?"
" the-struct_49)"
" header44_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                       \"compile-context?\""
" the-struct_49)))"
" #f)))))))))))"
"(if(parsed-define-syntaxes?"
" body_0)"
"(let-values()"
"(let-values(((ids_6)"
"(parsed-define-syntaxes-ids"
" body_0)))"
"(let-values(((binding-syms_1)"
"(parsed-define-syntaxes-syms"
" body_0)))"
"(let-values(((next-header_0)"
"(find-or-create-header!_0"
"(add1"
" phase_77))))"
"(let-values(((gen-syms_0)"
"(reverse$1"
"(let-values(((lst_195)"
" binding-syms_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_195)))"
"((letrec-values(((for-loop_206)"
"(lambda(fold-var_188"
" lst_196)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_196)"
"(let-values(((binding-sym_2)"
"(unsafe-car"
" lst_196))"
"((rest_106)"
"(unsafe-cdr"
" lst_196)))"
"(let-values(((fold-var_189)"
"(let-values(((fold-var_190)"
" fold-var_188))"
"(let-values(((fold-var_191)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((gen-sym_0)"
"(select-fresh"
" binding-sym_2"
" next-header_0)))"
"(begin"
"(register-as-defined!"
" next-header_0"
" gen-sym_0)"
" gen-sym_0)))"
" fold-var_190))))"
"(values"
" fold-var_191)))))"
"(if(not"
" #f)"
"(for-loop_206"
" fold-var_189"
" rest_106)"
" fold-var_189)))"
" fold-var_188)))))"
" for-loop_206)"
" null"
" lst_195))))))"
"(let-values(((rhs_2)"
"(compile$2"
"(parsed-define-syntaxes-rhs"
" body_0)"
"(let-values(((the-struct_50)"
" cctx_11))"
"(if(compile-context?"
" the-struct_50)"
"(let-values(((phase45_0)"
"(add1"
" phase_77))"
"((header46_0)"
" next-header_0))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_50)"
" phase45_0"
"(compile-context-self"
" the-struct_50)"
"(compile-context-module-self"
" the-struct_50)"
"(compile-context-full-module-name"
" the-struct_50)"
"(compile-context-lazy-syntax-literals?"
" the-struct_50)"
" header46_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                              \"compile-context?\""
" the-struct_50))))))"
"(let-values((()"
"(begin"
"(definition-callback_0)"
"(values))))"
"(let-values((()"
"(begin"
"(compiled-expression-callback_0"
" rhs_2"
"(length"
" gen-syms_0)"
"(add1"
" phase_77)"
"(as-required?_0"
" header_10))"
"(values))))"
"(let-values(((transformer-set!s_0)"
"(reverse$1"
"(let-values(((lst_197)"
" binding-syms_1)"
"((lst_198)"
" gen-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_197)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_198)))"
"((letrec-values(((for-loop_207)"
"(lambda(fold-var_192"
" lst_199"
" lst_200)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_199)"
"(pair?"
" lst_200)"
" #f)"
"(let-values(((binding-sym_3)"
"(unsafe-car"
" lst_199))"
"((rest_107)"
"(unsafe-cdr"
" lst_199))"
"((gen-sym_1)"
"(unsafe-car"
" lst_200))"
"((rest_108)"
"(unsafe-cdr"
" lst_200)))"
"(let-values(((fold-var_193)"
"(let-values(((fold-var_194)"
" fold-var_192))"
"(let-values(((fold-var_195)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
" set-transformer!-id"
"(list"
" 'quote"
" binding-sym_3)"
" gen-sym_1))"
" fold-var_194))))"
"(values"
" fold-var_195)))))"
"(if(not"
" #f)"
"(for-loop_207"
" fold-var_193"
" rest_107"
" rest_108)"
" fold-var_193)))"
" fold-var_192)))))"
" for-loop_207)"
" null"
" lst_197"
" lst_198))))))"
"(begin"
"(if(compile-context-module-self"
" cctx_11)"
"(let-values()"
"(add-body!_0"
"(add1"
" phase_77)"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_0"
" rhs_2))"
"(list*"
" 'begin"
"(qq-append"
" transformer-set!s_0"
" '((void)))))))"
"(let-values()"
"(add-body!_0"
"(add1"
" phase_77)"
"(generate-top-level-define-syntaxes"
" gen-syms_0"
" rhs_2"
" transformer-set!s_0"
"(compile-top-level-bind"
" ids_6"
" binding-syms_1"
"(let-values(((the-struct_51)"
" cctx_11))"
"(if(compile-context?"
" the-struct_51)"
"(let-values(((phase47_0)"
" phase_77)"
"((header48_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_51)"
" phase47_0"
"(compile-context-self"
" the-struct_51)"
"(compile-context-module-self"
" the-struct_51)"
"(compile-context-full-module-name"
" the-struct_51)"
"(compile-context-lazy-syntax-literals?"
" the-struct_51)"
" header48_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                \"compile-context?\""
" the-struct_51)))"
" gen-syms_0)))))"
"(set! saw-define-syntaxes?_0"
" #t)))))))))))"
"(if(parsed-begin-for-syntax?"
" body_0)"
"(let-values()"
"(loop!_1"
"(parsed-begin-for-syntax-body"
" body_0)"
"(add1"
" phase_77)"
"(find-or-create-header!_0"
"(add1"
" phase_77))))"
"(if(let-values(((or-part_221)"
"(parsed-#%declare?"
" body_0)))"
"(if or-part_221"
" or-part_221"
"(let-values(((or-part_87)"
"(parsed-module?"
" body_0)))"
"(if or-part_87"
" or-part_87"
"(parsed-require?"
" body_0)))))"
"(let-values()"
"(let-values(((e_34)"
"(other-form-callback_0"
" body_0"
"(let-values(((the-struct_52)"
" cctx_11))"
"(if(compile-context?"
" the-struct_52)"
"(let-values(((phase49_0)"
" phase_77)"
"((header50_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_52)"
" phase49_0"
"(compile-context-self"
" the-struct_52)"
"(compile-context-module-self"
" the-struct_52)"
"(compile-context-full-module-name"
" the-struct_52)"
"(compile-context-lazy-syntax-literals?"
" the-struct_52)"
" header50_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"compile-context?\""
" the-struct_52))))))"
"(if e_34"
"(let-values()"
"(begin"
"(compiled-expression-callback_0"
" e_34"
" #f"
" phase_77"
"(as-required?_0"
" header_10))"
"(add-body!_0"
" phase_77"
" e_34)))"
"(void))))"
"(let-values()"
"(let-values(((e_35)"
"(compile$2"
" body_0"
"(let-values(((the-struct_53)"
" cctx_11))"
"(if(compile-context?"
" the-struct_53)"
"(let-values(((phase51_0)"
" phase_77)"
"((header52_0)"
" header_10))"
"(compile-context1.1"
"(compile-context-namespace"
" the-struct_53)"
" phase51_0"
"(compile-context-self"
" the-struct_53)"
"(compile-context-module-self"
" the-struct_53)"
"(compile-context-full-module-name"
" the-struct_53)"
"(compile-context-lazy-syntax-literals?"
" the-struct_53)"
" header52_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"compile-context?\""
" the-struct_53)))"
" #f"
"(="
" i_107"
" last-i_0))))"
"(begin"
"(compiled-expression-callback_0"
" e_35"
" #f"
" phase_77"
"(as-required?_0"
" header_10))"
"(add-body!_0"
" phase_77"
" e_35)))))))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_203"
" rest_103"
"(+"
" pos_93"
" 1))"
"(values))))"
"(values))))))"
" for-loop_203)"
" lst_189"
" start_34)))"
"(void))))))"
" loop!_1)"
" bodys_2"
" phase_73"
"(find-or-create-header!_0 phase_73))"
"(values))))"
"(let-values(((encoded-root-expand-pos_0)"
"(if encoded-root-expand-ctx-box_0"
"(if(unbox"
" encoded-root-expand-ctx-box_0)"
"(if(not"
"(if root-ctx-only-if-syntax?_0"
"(if(not"
" saw-define-syntaxes?_0)"
"(syntax-literals-empty?"
" syntax-literals_1)"
" #f)"
" #f))"
"(add-syntax-literal!"
" syntax-literals_1"
"(unbox"
" encoded-root-expand-ctx-box_0))"
" #f)"
" #f)"
" #f)))"
"(let-values(((phases-in-order_2)"
"(let-values(((temp53_1)"
"(hash-keys"
" phase-to-body_0))"
"((<54_0) <))"
"(sort7.1 #f #f temp53_1 <54_0))))"
"(let-values(((min-phase_0)"
"(if(pair? phases-in-order_2)"
"(car phases-in-order_2)"
" phase_73)))"
"(let-values(((max-phase_0)"
"(if(pair? phases-in-order_2)"
"(car"
"(reverse$1"
" phases-in-order_2))"
" phase_73)))"
"(let-values(((phase-to-link-info_0)"
"(let-values(((lst_201)"
" phases-in-order_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_201)))"
"((letrec-values(((for-loop_208)"
"(lambda(table_151"
" lst_202)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_202)"
"(let-values(((phase_78)"
"(unsafe-car"
" lst_202))"
"((rest_109)"
"(unsafe-cdr"
" lst_202)))"
"(let-values(((table_152)"
"(let-values(((table_153)"
" table_151))"
"(let-values(((table_154)"
"(let-values()"
"(let-values(((key_58"
" val_51)"
"(let-values()"
"(let-values(((header_11)"
"(hash-ref"
" phase-to-header_0"
" phase_78"
" #f)))"
"(let-values(((link-module-uses_0"
" imports_2"
" extra-inspectorsss_1"
" def-decls_0)"
"(generate-links+imports"
" header_11"
" phase_78"
" cctx_11"
" cross-linklet-inlining?_1)))"
"(values"
" phase_78"
"(link-info1.1"
" link-module-uses_0"
" imports_2"
" extra-inspectorsss_1"
" def-decls_0)))))))"
"(hash-set"
" table_153"
" key_58"
" val_51)))))"
"(values"
" table_154)))))"
"(if(not"
" #f)"
"(for-loop_208"
" table_152"
" rest_109)"
" table_152)))"
" table_151)))))"
" for-loop_208)"
" '#hash()"
" lst_201)))))"
"(let-values(((body-linklets+module-use*s_0)"
"(let-values(((lst_108)"
" phases-in-order_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_108)))"
"((letrec-values(((for-loop_209)"
"(lambda(table_155"
" lst_109)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_109)"
"(let-values(((phase_79)"
"(unsafe-car"
" lst_109))"
"((rest_110)"
"(unsafe-cdr"
" lst_109)))"
"(let-values(((table_156)"
"(let-values(((table_157)"
" table_155))"
"(let-values(((table_158)"
"(let-values()"
"(let-values(((key_59"
" val_52)"
"(let-values()"
"(let-values(((bodys_5)"
"(hash-ref"
" phase-to-body_0"
" phase_79)))"
"(let-values(((li_0)"
"(hash-ref"
" phase-to-link-info_0"
" phase_79)))"
"(let-values(((binding-sym-to-define-sym_0)"
"(header-binding-sym-to-define-sym"
"(hash-ref"
" phase-to-header_0"
" phase_79))))"
"(let-values(((module-use*s_0)"
"(module-uses-add-extra-inspectorsss"
"(link-info-link-module-uses"
" li_0)"
"(link-info-extra-inspectorsss"
" li_0))))"
"(let-values(((linklet_1"
" new-module-use*s_0)"
"(let-values()"
"((if to-source?_0"
"(lambda(l_55"
" name_46"
" keys_0"
" getter_0)"
"(values"
" l_55"
" keys_0))"
"(lambda(l_56"
" name_47"
" keys_1"
" getter_1)"
"(1/compile-linklet"
" l_56"
" name_47"
" keys_1"
" getter_1"
"(if serializable?_0"
" '(serializable)"
" '()))))"
"(list*"
" 'linklet"
"(qq-append"
" body-imports_0"
"(link-info-imports"
" li_0))"
"(qq-append"
"(link-info-def-decls"
" li_0)"
"(reverse$1"
"(let-values(((lst_203)"
"(header-binding-syms-in-order"
"(hash-ref"
" phase-to-header_0"
" phase_79))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_203)))"
"((letrec-values(((for-loop_210)"
"(lambda(fold-var_196"
" lst_204)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_204)"
"(let-values(((binding-sym_4)"
"(unsafe-car"
" lst_204))"
"((rest_111)"
"(unsafe-cdr"
" lst_204)))"
"(let-values(((fold-var_197)"
"(let-values(((fold-var_198)"
" fold-var_196))"
"(let-values(((fold-var_199)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((def-sym_3)"
"(hash-ref"
" binding-sym-to-define-sym_0"
" binding-sym_4)))"
"(if(eq?"
" def-sym_3"
" binding-sym_4)"
" def-sym_3"
"(list"
" def-sym_3"
" binding-sym_4))))"
" fold-var_198))))"
"(values"
" fold-var_199)))))"
"(if(not"
" #f)"
"(for-loop_210"
" fold-var_197"
" rest_111)"
" fold-var_197)))"
" fold-var_196)))))"
" for-loop_210)"
" null"
" lst_203)))))"
"(qq-append"
"(reverse$1"
" bodys_5)"
" body-suffix-forms_0))"
" 'module"
"(list->vector"
"(append"
" body-import-instances_0"
" module-use*s_0))"
"(make-module-use-to-linklet"
" cross-linklet-inlining?_1"
"(compile-context-namespace"
" cctx_11)"
" get-module-linklet-info_0"
" module-use*s_0)))))"
"(values"
" phase_79"
"(cons"
" linklet_1"
"(list-tail"
"(vector->list"
" new-module-use*s_0)"
"(length"
" body-imports_0))))))))))))"
"(hash-set"
" table_157"
" key_59"
" val_52)))))"
"(values"
" table_158)))))"
"(if(not"
" #f)"
"(for-loop_209"
" table_156"
" rest_110)"
" table_156)))"
" table_155)))))"
" for-loop_209)"
" '#hasheq()"
" lst_108)))))"
"(let-values(((body-linklets_0)"
"(let-values(((ht_114)"
" body-linklets+module-use*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_114)))"
"((letrec-values(((for-loop_211)"
"(lambda(table_32"
" i_138)"
"(begin"
" 'for-loop"
"(if i_138"
"(let-values(((phase_80"
" l+mu*s_0)"
"(hash-iterate-key+value"
" ht_114"
" i_138)))"
"(let-values(((table_33)"
"(let-values(((table_144)"
" table_32))"
"(let-values(((table_159)"
"(let-values()"
"(let-values(((key_60"
" val_53)"
"(let-values()"
"(values"
" phase_80"
"(car"
" l+mu*s_0)))))"
"(hash-set"
" table_144"
" key_60"
" val_53)))))"
"(values"
" table_159)))))"
"(if(not"
" #f)"
"(for-loop_211"
" table_33"
"(hash-iterate-next"
" ht_114"
" i_138))"
" table_33)))"
" table_32)))))"
" for-loop_211)"
" '#hasheq()"
"(hash-iterate-first"
" ht_114))))))"
"(let-values(((phase-to-link-module-uses_1)"
"(let-values(((ht_115)"
" body-linklets+module-use*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_115)))"
"((letrec-values(((for-loop_212)"
"(lambda(table_160"
" i_139)"
"(begin"
" 'for-loop"
"(if i_139"
"(let-values(((phase_81"
" l+mu*s_1)"
"(hash-iterate-key+value"
" ht_115"
" i_139)))"
"(let-values(((table_125)"
"(let-values(((table_35)"
" table_160))"
"(let-values(((table_36)"
"(let-values()"
"(let-values(((key_47"
" val_40)"
"(let-values()"
"(values"
" phase_81"
"(module-uses-strip-extra-inspectorsss"
"(cdr"
" l+mu*s_1))))))"
"(hash-set"
" table_35"
" key_47"
" val_40)))))"
"(values"
" table_36)))))"
"(if(not"
" #f)"
"(for-loop_212"
" table_125"
"(hash-iterate-next"
" ht_115"
" i_139))"
" table_125)))"
" table_160)))))"
" for-loop_212)"
" '#hasheq()"
"(hash-iterate-first"
" ht_115))))))"
"(let-values(((phase-to-link-module-uses-expr_0)"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_1"
" mpis_15)))"
"(let-values(((phase-to-link-extra-inspectorsss_0)"
"(let-values(((ht_116)"
" body-linklets+module-use*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_116)))"
"((letrec-values(((for-loop_213)"
"(lambda(table_161"
" i_140)"
"(begin"
" 'for-loop"
"(if i_140"
"(let-values(((phase_82"
" l+mu*s_2)"
"(hash-iterate-key+value"
" ht_116"
" i_140)))"
"(let-values(((table_162)"
"(let-values(((extra-inspectorsss_2)"
"(module-uses-extract-extra-inspectorsss"
"(cdr"
" l+mu*s_2)"
"(car"
" l+mu*s_2)"
" cross-linklet-inlining?_1"
"(length"
" body-imports_0))))"
"(begin"
" #t"
"((letrec-values(((for-loop_214)"
"(lambda(table_163)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_164)"
"(let-values(((table_165)"
" table_163))"
"(if extra-inspectorsss_2"
"(let-values(((table_166)"
" table_165))"
"(let-values(((table_39)"
"(let-values()"
"(let-values(((key_61"
" val_54)"
"(let-values()"
"(values"
" phase_82"
" extra-inspectorsss_2))))"
"(hash-set"
" table_166"
" key_61"
" val_54)))))"
"(values"
" table_39)))"
" table_165))))"
" table_164))))))"
" for-loop_214)"
" table_161)))))"
"(if(not"
" #f)"
"(for-loop_213"
" table_162"
"(hash-iterate-next"
" ht_116"
" i_140))"
" table_162)))"
" table_161)))))"
" for-loop_213)"
" '#hash()"
"(hash-iterate-first"
" ht_116))))))"
"(values"
" body-linklets_0"
" min-phase_0"
" max-phase_0"
" phase-to-link-module-uses_1"
" phase-to-link-module-uses-expr_0"
" phase-to-link-extra-inspectorsss_0"
" syntax-literals_1"
" encoded-root-expand-pos_0)))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(compile-top-level-bind)"
"(lambda(ids_7 binding-syms_2 cctx_12 trans-exprs_0)"
"(begin"
"(let-values(((phase_83)(compile-context-phase cctx_12)))"
"(let-values(((self_18)(compile-context-self cctx_12)))"
"(let-values(((header_12)(compile-context-header cctx_12)))"
"(let-values(((mpis_16)(header-module-path-indexes header_12)))"
"(let-values(((top-level-bind-scope_2)"
"(root-expand-context-top-level-bind-scope"
"(namespace-get-root-expand-ctx(compile-context-namespace cctx_12)))))"
"(let-values(((self-expr_0)(add-module-path-index! mpis_16 self_18)))"
"(list*"
" 'begin"
"(reverse$1"
"(let-values(((lst_205) ids_7)"
"((lst_206) binding-syms_2)"
"((lst_47)"
"(let-values(((or-part_222) trans-exprs_0))"
"(if or-part_222"
" or-part_222"
"(reverse$1"
"(let-values(((lst_207) ids_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_207)))"
"((letrec-values(((for-loop_215)"
"(lambda(fold-var_200 lst_39)"
"(begin"
" 'for-loop"
"(if(pair? lst_39)"
"(let-values(((id_49)(unsafe-car lst_39))"
"((rest_16)(unsafe-cdr lst_39)))"
"(let-values(((fold-var_201)"
"(let-values(((fold-var_202)"
" fold-var_200))"
"(let-values(((fold-var_203)"
"(let-values()"
"(cons"
"(let-values()"
" ''#f)"
" fold-var_202))))"
"(values fold-var_203)))))"
"(if(not #f)"
"(for-loop_215 fold-var_201 rest_16)"
" fold-var_201)))"
" fold-var_200)))))"
" for-loop_215)"
" null"
" lst_207))))))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_205)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_206)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_47)))"
"((letrec-values(((for-loop_137)"
"(lambda(fold-var_204 lst_1 lst_208 lst_209)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_1)(if(pair? lst_208)(pair? lst_209) #f) #f)"
"(let-values(((id_50)(unsafe-car lst_1))"
"((rest_112)(unsafe-cdr lst_1))"
"((binding-sym_5)(unsafe-car lst_208))"
"((rest_113)(unsafe-cdr lst_208))"
"((trans-expr_0)(unsafe-car lst_209))"
"((rest_114)(unsafe-cdr lst_209)))"
"(let-values(((fold-var_205)"
"(let-values(((fold-var_206) fold-var_204))"
"(let-values(((fold-var_207)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id-stx_0)"
"(compile-quote-syntax"
"(remove-scope"
" id_50"
" top-level-bind-scope_2)"
" cctx_12)))"
"(list"
" top-level-bind!-id"
" id-stx_0"
" self-expr_0"
" phase_83"
" phase-shift-id"
" ns-id"
"(list 'quote binding-sym_5)"
"(if trans-exprs_0 #t #f)"
" trans-expr_0)))"
" fold-var_206))))"
"(values fold-var_207)))))"
"(if(not #f)"
"(for-loop_137 fold-var_205 rest_112 rest_113 rest_114)"
" fold-var_205)))"
" fold-var_204)))))"
" for-loop_137)"
" null"
" lst_205"
" lst_206"
" lst_47))))))))))))))"
"(define-values"
"(generate-top-level-define-syntaxes)"
"(lambda(gen-syms_1 rhs_3 transformer-set!s_1 finish_1)"
"(begin"
"(list"
" 'call-with-values"
"(list 'lambda '() rhs_3)"
"(list"
" 'case-lambda"
"(list gen-syms_1(list* 'begin(qq-append transformer-set!s_1(list* finish_1 '((void))))))"
"(list"
" '()"
"(list"
" 'let-values"
"(list"
"(list"
" gen-syms_1"
"(list*"
" 'values"
"(reverse$1"
"(let-values(((lst_210) gen-syms_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_210)))"
"((letrec-values(((for-loop_140)"
"(lambda(fold-var_208 lst_211)"
"(begin"
" 'for-loop"
"(if(pair? lst_211)"
"(let-values(((s_132)(unsafe-car lst_211))((rest_115)(unsafe-cdr lst_211)))"
"(let-values(((fold-var_209)"
"(let-values(((fold-var_210) fold-var_208))"
"(let-values(((fold-var_211)"
"(let-values()"
"(cons(let-values() ''#f) fold-var_210))))"
"(values fold-var_211)))))"
"(if(not #f)(for-loop_140 fold-var_209 rest_115) fold-var_209)))"
" fold-var_208)))))"
" for-loop_140)"
" null"
" lst_210)))))))"
"(list* 'begin finish_1 '((void)))))"
"(list 'args(list* 'let-values(list(list* gen-syms_1 '((apply values args)))) '((void)))))))))"
"(define-values"
"(propagate-inline-property)"
"(lambda(e_36 orig-s_22)"
"(begin"
"(let-values(((v_165)(syntax-property$1 orig-s_22 'compiler-hint:cross-module-inline)))"
"(if v_165(correlated-property e_36 'compiler-hint:cross-module-inline v_165) e_36)))))"
"(define-values"
"(make-module-use-to-linklet)"
"(lambda(cross-linklet-inlining?_2 ns_57 get-module-linklet-info_1 init-mu*s_0)"
"(begin"
"(let-values(((mu*-intern-table_0)(make-hash)))"
"(let-values(((intern-module-use*_0)"
"(lambda(mu*_5)"
"(begin"
" 'intern-module-use*"
"(let-values(((mod-name_15)(1/module-path-index-resolve(module-use-module mu*_5))))"
"(let-values(((existing-mu*_1)"
"(hash-ref mu*-intern-table_0(cons mod-name_15(module-use-phase mu*_5)) #f)))"
"(if existing-mu*_1"
"(let-values()"
"(begin(module-use-merge-extra-inspectorss! existing-mu*_1 mu*_5) existing-mu*_1))"
"(let-values()"
"(begin"
"(hash-set! mu*-intern-table_0(cons mod-name_15(module-use-phase mu*_5)) mu*_5)"
" mu*_5)))))))))"
"(begin"
"(let-values(((lst_212) init-mu*s_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_212)))"
"((letrec-values(((for-loop_216)"
"(lambda(lst_213)"
"(begin"
" 'for-loop"
"(if(pair? lst_213)"
"(let-values(((mu*_6)(unsafe-car lst_213))((rest_116)(unsafe-cdr lst_213)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()(intern-module-use*_0 mu*_6))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_216 rest_116)(values))))"
"(values))))))"
" for-loop_216)"
" lst_212)))"
"(void)"
"(lambda(mu*-or-instance_0)"
"(if(1/instance? mu*-or-instance_0)"
"(let-values()(values mu*-or-instance_0 #f))"
"(if(not cross-linklet-inlining?_2)"
"(let-values()(values #f #f))"
"(if mu*-or-instance_0"
"(let-values()"
"(let-values(((mu*_7) mu*-or-instance_0))"
"(let-values(((mod-name_16)(1/module-path-index-resolve(module-use-module mu*_7))))"
"(let-values(((mli_0)"
"(let-values(((or-part_223)"
"(get-module-linklet-info_1 mod-name_16(module-use-phase mu*_7))))"
"(if or-part_223"
" or-part_223"
"(namespace->module-linklet-info"
" ns_57"
" mod-name_16"
"(module-use-phase mu*_7))))))"
"(begin"
"(if mli_0"
"(let-values()"
"(module-use*-declaration-inspector! mu*_7(module-linklet-info-inspector mli_0)))"
"(void))"
"(if mli_0"
"(values"
"(module-linklet-info-linklet-or-instance mli_0)"
"(if(module-linklet-info-module-uses mli_0)"
"(list->vector"
"(append"
" '(#f #f)"
"(let-values(((mus_2)(module-linklet-info-module-uses mli_0))"
"((extra-inspectorsss_3)"
"(module-linklet-info-extra-inspectorsss mli_0)))"
"(reverse$1"
"(let-values(((lst_214) mus_2)"
"((lst_215)"
"(1/linklet-import-variables"
"(module-linklet-info-linklet-or-instance mli_0)))"
"((lst_216)"
"(let-values(((or-part_224) extra-inspectorsss_3))"
"(if or-part_224 or-part_224 mus_2))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_214)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_215)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_216)))"
"((letrec-values(((for-loop_217)"
"(lambda(fold-var_212 lst_217 lst_218 lst_219)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_217)"
"(if(pair? lst_218)(pair? lst_219) #f)"
" #f)"
"(let-values(((sub-mu_0)(unsafe-car lst_217))"
"((rest_117)(unsafe-cdr lst_217))"
"((imports_3)(unsafe-car lst_218))"
"((rest_118)(unsafe-cdr lst_218))"
"((extra-inspectorss_13)"
"(unsafe-car lst_219))"
"((rest_119)(unsafe-cdr lst_219)))"
"(let-values(((fold-var_213)"
"(let-values(((fold-var_214)"
" fold-var_212))"
"(let-values(((fold-var_215)"
"(let-values()"
"(cons"
"(let-values()"
"(intern-module-use*_0"
"(module-use+extra-inspectors"
"(module-path-index-shift"
"(module-use-module"
" sub-mu_0)"
"(module-linklet-info-self"
" mli_0)"
"(module-use-module"
" mu*_7))"
"(module-use-phase"
" sub-mu_0)"
" imports_3"
"(module-linklet-info-inspector"
" mli_0)"
"(module-linklet-info-extra-inspector"
" mli_0)"
"(if extra-inspectorsss_3"
" extra-inspectorss_13"
" #f))))"
" fold-var_214))))"
"(values fold-var_215)))))"
"(if(not #f)"
"(for-loop_217"
" fold-var_213"
" rest_117"
" rest_118"
" rest_119)"
" fold-var_213)))"
" fold-var_212)))))"
" for-loop_217)"
" null"
" lst_214"
" lst_215"
" lst_216)))))))"
" #f))"
"(values #f #f)))))))"
"(let-values()(values #f #f))))))))))))"
"(define-values"
"(build-shared-data-linklet)"
"(lambda(cims_0 ns_42)"
"(begin"
"(let-values(((mpis_17)(make-module-path-index-table)))"
"(let-values(((mpi-trees_0)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_1)"
"(let-values(((vec_58 i_141)"
"(let-values(((vec_59 len_28)"
"(let-values(((vec_60)(compiled-in-memory-mpis cim_1)))"
"(begin"
"(check-vector vec_60)"
"(values vec_60(unsafe-vector-length vec_60))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_98)"
"(lambda(vec_61 i_142 pos_94)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_94 len_28)"
"(let-values(((mpi_42)"
"(unsafe-vector-ref vec_59 pos_94)))"
"(let-values(((vec_62 i_143)"
"(let-values(((vec_63) vec_61)"
"((i_61) i_142))"
"(let-values(((vec_64 i_144)"
"(let-values()"
"(let-values(((new-vec_3)"
"(if(eq?"
" i_61"
"(unsafe-vector*-length"
" vec_63))"
"(grow-vector"
" vec_63)"
" vec_63)))"
"(begin"
"(unsafe-vector*-set!"
" new-vec_3"
" i_61"
"(let-values()"
"(add-module-path-index!/pos"
" mpis_17"
" mpi_42)))"
"(values"
" new-vec_3"
"(unsafe-fx+"
" i_61"
" 1)))))))"
"(values vec_64 i_144)))))"
"(if(not #f)"
"(for-loop_98"
" vec_62"
" i_143"
"(unsafe-fx+ 1 pos_94))"
"(values vec_62 i_143))))"
"(values vec_61 i_142))))))"
" for-loop_98)"
"(make-vector 16)"
" 0"
" 0)))))"
"(shrink-vector vec_58 i_141))))))"
"(let-values(((syntax-literals_2)(make-syntax-literals)))"
"(let-values(((syntax-literals-trees_0)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_2)"
"(add-syntax-literals! syntax-literals_2(compiled-in-memory-syntax-literals cim_2))))))"
"(let-values(((module-uses-tables_0) null))"
"(let-values(((module-uses-tables-count_0) 0))"
"(let-values(((phase-to-link-module-uses-trees_0)"
"(map-cim-tree"
" cims_0"
"(lambda(cim_3)"
"(let-values(((pos_95) module-uses-tables-count_0))"
"(begin"
"(set! module-uses-tables_0"
"(cons"
"(compiled-in-memory-phase-to-link-module-uses cim_3)"
" module-uses-tables_0))"
"(set! module-uses-tables-count_0(add1 pos_95))"
" pos_95))))))"
"(let-values(((syntax-literals-expr_0)"
"(generate-eager-syntax-literals! syntax-literals_2 mpis_17 0 #f ns_42)))"
"(let-values(((phase-to-link-module-uses-expr_1)"
"(list*"
" 'vector"
"(reverse$1"
"(let-values(((lst_220)(reverse$1 module-uses-tables_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_220)))"
"((letrec-values(((for-loop_109)"
"(lambda(fold-var_71 lst_89)"
"(begin"
" 'for-loop"
"(if(pair? lst_89)"
"(let-values(((phase-to-link-module-uses_2)"
"(unsafe-car lst_89))"
"((rest_120)(unsafe-cdr lst_89)))"
"(let-values(((fold-var_34)"
"(let-values(((fold-var_158)"
" fold-var_71))"
"(let-values(((fold-var_9)"
"(let-values()"
"(cons"
"(let-values()"
"(serialize-phase-to-link-module-uses"
" phase-to-link-module-uses_2"
" mpis_17))"
" fold-var_158))))"
"(values fold-var_9)))))"
"(if(not #f)"
"(for-loop_109 fold-var_34 rest_120)"
" fold-var_34)))"
" fold-var_71)))))"
" for-loop_109)"
" null"
" lst_220)))))))"
"(1/compile-linklet"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list*"
" mpi-vector-id"
" '(mpi-vector-trees"
" phase-to-link-modules-vector"
" phase-to-link-modules-trees"
" syntax-literals"
" syntax-literals-trees))"
"(list 'define-values(list mpi-vector-id)(generate-module-path-index-deserialize mpis_17))"
"(list 'define-values '(mpi-vector-trees)(list 'quote mpi-trees_0))"
"(list 'define-values '(phase-to-link-modules-vector) phase-to-link-module-uses-expr_1)"
"(list"
" 'define-values"
" '(phase-to-link-modules-trees)"
"(list 'quote phase-to-link-module-uses-trees_0))"
"(list 'define-values '(syntax-literals) syntax-literals-expr_0)"
"(list"
" 'define-values"
" '(syntax-literals-trees)"
"(list 'quote syntax-literals-trees_0))))))))))))))))"
"(define-values"
"(map-cim-tree)"
"(lambda(cims_1 proc_8)"
"(begin"
"((letrec-values(((loop_92)"
"(lambda(cims_2)"
"(begin"
" 'loop"
"(reverse$1"
"(let-values(((lst_80) cims_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_80)))"
"((letrec-values(((for-loop_99)"
"(lambda(fold-var_160 lst_81)"
"(begin"
" 'for-loop"
"(if(pair? lst_81)"
"(let-values(((cim_4)(unsafe-car lst_81))"
"((rest_121)(unsafe-cdr lst_81)))"
"(let-values(((fold-var_216)"
"(let-values(((fold-var_170) fold-var_160))"
"(let-values(((fold-var_171)"
"(let-values()"
"(cons"
"(let-values()"
"(vector"
"(proc_8 cim_4)"
"(loop_92"
"(compiled-in-memory-pre-compiled-in-memorys"
" cim_4))"
"(loop_92"
"(compiled-in-memory-post-compiled-in-memorys"
" cim_4))))"
" fold-var_170))))"
"(values fold-var_171)))))"
"(if(not #f)"
"(for-loop_99 fold-var_216 rest_121)"
" fold-var_216)))"
" fold-var_160)))))"
" for-loop_99)"
" null"
" lst_80))))))))"
" loop_92)"
" cims_1))))"
"(define-values"
"(compiled-tops->compiled-top8.1)"
"(lambda(merge-serialization?2_0 namespace3_0 to-source?1_0 all-cims7_0)"
"(begin"
" 'compiled-tops->compiled-top8"
"(let-values(((all-cims_0) all-cims7_0))"
"(let-values(((to-source?_1) to-source?1_0))"
"(let-values(((merge-serialization?_0) merge-serialization?2_0))"
"(let-values(((ns_58) namespace3_0))"
"(let-values()"
"(let-values(((cims_3)(remove-nontail-purely-functional all-cims_0)))"
"(if(= 1(length cims_3))"
"(let-values()(car cims_3))"
"(let-values()"
"(let-values(((sequence-ht_0)"
"(let-values(((lst_221) cims_3)((start_35) 0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_221)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_35)))"
"((letrec-values(((for-loop_218)"
"(lambda(table_167 lst_222 pos_96)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_222) #t #f)"
"(let-values(((cim_5)(unsafe-car lst_222))"
"((rest_49)(unsafe-cdr lst_222))"
"((i_142) pos_96))"
"(let-values(((table_168)"
"(let-values(((table_169) table_167))"
"(let-values(((table_170)"
"(let-values()"
"(let-values(((key_62"
" val_35)"
"(let-values()"
"(values"
"(string->symbol"
"(number->string"
" i_142))"
"((if to-source?_1"
" values"
" compiled-in-memory-linklet-directory)"
" cim_5)))))"
"(hash-set"
" table_169"
" key_62"
" val_35)))))"
"(values table_170)))))"
"(if(not #f)"
"(for-loop_218 table_168 rest_49(+ pos_96 1))"
" table_168)))"
" table_167)))))"
" for-loop_218)"
" '#hasheq()"
" lst_221"
" start_35)))))"
"(let-values(((ht_76)"
"(if merge-serialization?_0"
"(hash-set"
" sequence-ht_0"
" 'data"
"(1/hash->linklet-directory"
"(hasheq"
" #f"
"(1/hash->linklet-bundle"
"(hasheq 0(build-shared-data-linklet cims_3 ns_58))))))"
" sequence-ht_0)))"
"(if to-source?_1"
"(let-values() ht_76)"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory ht_76)"
" #f"
" #f"
" #f"
" '#hasheqv()"
" #f"
" '#hasheqv()"
" '#()"
" '#()"
" cims_3"
" null"
" #f"
" #f))))))))))))))))"
"(define-values"
"(compiled-top->compiled-tops)"
"(lambda(ld_0)"
"(begin"
"(let-values(((ht_117)(1/linklet-directory->hash ld_0)))"
"(reverse$1"
"(let-values(((start_36) 0)((end_25)(hash-count ht_117))((inc_19) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_36 end_25 inc_19)))"
"((letrec-values(((for-loop_196)"
"(lambda(fold-var_173 pos_97)"
"(begin"
" 'for-loop"
"(if(< pos_97 end_25)"
"(let-values(((i_42) pos_97))"
"(let-values(((fold-var_217)"
"(let-values(((top_0)"
"(hash-ref"
" ht_117"
"(string->symbol(number->string i_42))"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_219)"
"(lambda(fold-var_174)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_218)"
"(let-values(((fold-var_75)"
" fold-var_174))"
"(if top_0"
"(let-values(((fold-var_65)"
" fold-var_75))"
"(let-values(((fold-var_76)"
"(let-values()"
"(cons"
"(let-values()"
" top_0)"
" fold-var_65))))"
"(values"
" fold-var_76)))"
" fold-var_75))))"
" fold-var_218))))))"
" for-loop_219)"
" fold-var_173)))))"
"(if(not #f)(for-loop_196 fold-var_217(+ pos_97 inc_19)) fold-var_217)))"
" fold-var_173)))))"
" for-loop_196)"
" null"
" start_36))))))))"
"(define-values"
"(remove-nontail-purely-functional)"
"(lambda(cims_4)"
"(begin"
"((letrec-values(((loop_85)"
"(lambda(cims_5)"
"(begin"
" 'loop"
"(if(null? cims_5)"
"(let-values() null)"
"(if(null?(cdr cims_5))"
"(let-values() cims_5)"
"(if(if(compiled-in-memory?(car cims_5))"
"(compiled-in-memory-purely-functional?(car cims_5))"
" #f)"
"(let-values()(loop_85(cdr cims_5)))"
"(let-values()(cons(car cims_5)(cdr cims_5))))))))))"
" loop_85)"
" cims_4))))"
"(define-values"
"(struct:known-defined/delay known-defined/delay2.1 known-defined/delay? known-defined/delay-thunk)"
"(let-values(((struct:_70 make-_70 ?_70 -ref_70 -set!_70)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-defined/delay #f 1 0 #f null 'prefab #f '(0) #f 'known-defined/delay)))))"
"(values struct:_70 make-_70 ?_70(make-struct-field-accessor -ref_70 0 'thunk))))"
"(define-values"
"(struct:known-property known-property3.1 known-property?)"
"(let-values(((struct:_64 make-_64 ?_64 -ref_64 -set!_64)"
"(let-values()"
"(let-values()(make-struct-type 'known-property #f 0 0 #f null 'prefab #f '() #f 'known-property)))))"
"(values struct:_64 make-_64 ?_64)))"
"(define-values"
"(struct:known-function known-function4.1 known-function? known-function-arity known-function-pure?)"
"(let-values(((struct:_71 make-_71 ?_71 -ref_71 -set!_71)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-function #f 2 0 #f null 'prefab #f '(0 1) #f 'known-function)))))"
"(values"
" struct:_71"
" make-_71"
" ?_71"
"(make-struct-field-accessor -ref_71 0 'arity)"
"(make-struct-field-accessor -ref_71 1 'pure?))))"
"(define-values"
"(struct:known-function-of-satisfying"
" known-function-of-satisfying5.1"
" known-function-of-satisfying?"
" known-function-of-satisfying-arg-predicate-keys)"
"(let-values(((struct:_42 make-_42 ?_42 -ref_42 -set!_42)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'known-function-of-satisfying"
" #f"
" 1"
" 0"
" #f"
" null"
" 'prefab"
" #f"
" '(0)"
" #f"
" 'known-function-of-satisfying)))))"
"(values struct:_42 make-_42 ?_42(make-struct-field-accessor -ref_42 0 'arg-predicate-keys))))"
"(define-values"
"(struct:known-predicate known-predicate6.1 known-predicate? known-predicate-key)"
"(let-values(((struct:_11 make-_11 ?_11 -ref_11 -set!_11)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-predicate #f 1 0 #f null 'prefab #f '(0) #f 'known-predicate)))))"
"(values struct:_11 make-_11 ?_11(make-struct-field-accessor -ref_11 0 'key))))"
"(define-values"
"(struct:known-satisfies known-satisfies7.1 known-satisfies? known-satisfies-predicate-key)"
"(let-values(((struct:_72 make-_72 ?_72 -ref_72 -set!_72)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-satisfies #f 1 0 #f null 'prefab #f '(0) #f 'known-satisfies)))))"
"(values struct:_72 make-_72 ?_72(make-struct-field-accessor -ref_72 0 'predicate-key))))"
"(define-values"
"(struct:known-struct-op known-struct-op8.1 known-struct-op? known-struct-op-type known-struct-op-field-count)"
"(let-values(((struct:_39 make-_39 ?_39 -ref_39 -set!_39)"
"(let-values()"
"(let-values()"
"(make-struct-type 'known-struct-op #f 2 0 #f null 'prefab #f '(0 1) #f 'known-struct-op)))))"
"(values"
" struct:_39"
" make-_39"
" ?_39"
"(make-struct-field-accessor -ref_39 0 'type)"
"(make-struct-field-accessor -ref_39 1 'field-count))))"
"(define-values"
"(lookup-defn)"
"(lambda(defns_0 sym_61)"
"(begin"
"(let-values(((d_29)(hash-ref defns_0 sym_61 #f)))"
"(if(known-defined/delay? d_29)"
"(let-values()(begin((known-defined/delay-thunk d_29))(lookup-defn defns_0 sym_61)))"
"(let-values() d_29))))))"
"(define-values"
"(any-side-effects?9.1)"
"(lambda(known-defns2_0 known-locals1_0 ready-variable?3_0 e7_0 expected-results8_0)"
"(begin"
" 'any-side-effects?9"
"(let-values(((e_37) e7_0))"
"(let-values(((expected-results_0) expected-results8_0))"
"(let-values(((locals_0)(if(eq? known-locals1_0 unsafe-undefined) '#hasheq() known-locals1_0)))"
"(let-values(((defns_1)(if(eq? known-defns2_0 unsafe-undefined) '#hasheq() known-defns2_0)))"
"(let-values(((ready-variable?_0)"
"(if(eq? ready-variable?3_0 unsafe-undefined)"
"(lambda(id_51)(begin 'ready-variable? #f))"
" ready-variable?3_0)))"
"(let-values()"
"(let-values(((effects?_0)"
"(lambda(e_38 expected-results_1 locals_1)"
"(begin"
" 'effects?"
"(let-values(((e12_0) e_38)"
"((expected-results13_0) expected-results_1)"
"((locals14_0) locals_1)"
"((defns15_0) defns_1)"
"((ready-variable?16_0) ready-variable?_0))"
"(any-side-effects?9.1"
" defns15_0"
" locals14_0"
" ready-variable?16_0"
" e12_0"
" expected-results13_0))))))"
"(let-values(((actual-results_0)"
"((letrec-values(((loop_82)"
"(lambda(e_39 locals_2)"
"(begin"
" 'loop"
"(let-values(((tmp_26)"
"(if(pair?(correlated-e e_39))"
"(correlated-e(car(correlated-e e_39)))"
" #f)))"
"(let-values(((index_1)"
"(if(symbol? tmp_26)"
"(hash-ref"
" '#hasheq((#%variable-reference . 1)"
"(begin . 5)"
"(begin0 . 6)"
"(case-lambda . 1)"
"(gensym . 11)"
"(if . 12)"
"(lambda . 1)"
"(let-values . 2)"
"(letrec-values . 2)"
"(make-struct-field-accessor . 8)"
"(make-struct-field-mutator . 9)"
"(make-struct-type . 7)"
"(make-struct-type-property . 10)"
"(quote . 1)"
"(values . 3)"
"(void . 4))"
" tmp_26"
"(lambda() 0))"
" 0)))"
"(if(unsafe-fx< index_1 6)"
"(if(unsafe-fx< index_1 2)"
"(if(unsafe-fx< index_1 1)"
"(let-values()"
"(let-values(((v_32)(correlated-e e_39)))"
"(if(let-values(((or-part_73)(string? v_32)))"
"(if or-part_73"
" or-part_73"
"(let-values(((or-part_74)"
"(number? v_32)))"
"(if or-part_74"
" or-part_74"
"(let-values(((or-part_75)"
"(boolean? v_32)))"
"(if or-part_75"
" or-part_75"
"(char? v_32)))))))"
"(let-values() 1)"
"(let-values(((c1_26)"
"(if(pair? v_32)"
"(let-values(((rator_0)"
"(correlated-e"
"(car v_32))))"
"(let-values(((or-part_29)"
"(hash-ref"
" locals_2"
" rator_0"
" #f)))"
"(if or-part_29"
" or-part_29"
"(lookup-defn"
" defns_1"
" rator_0))))"
" #f)))"
"(if c1_26"
"((lambda(d_30)"
"(let-values(((ok?_17 _17_0 e18_0)"
"(let-values(((s_90) e_39))"
"(let-values(((orig-s_23)"
" s_90))"
"(let-values(((_17_1"
" e18_1)"
"(let-values(((s_307)"
"(if(1/syntax?"
" s_90)"
"(syntax-e$2"
" s_90)"
" s_90)))"
"(if(pair?"
" s_307)"
"(let-values(((_19_0)"
"(let-values(((s_91)"
"(car"
" s_307)))"
" s_91))"
"((e20_0)"
"(let-values(((s_168)"
"(cdr"
" s_307)))"
"(let-values(((s_308)"
"(if(1/syntax?"
" s_168)"
"(syntax-e$2"
" s_168)"
" s_168)))"
"(let-values(((flat-s_13)"
"(to-syntax-list.1$1"
" s_308)))"
"(if(not"
" flat-s_13)"
"(let-values()"
"((lambda(false_0"
" str_5"
" e_40)"
"(error"
" str_5))"
" #f"
"                                                                                                                                            \"bad syntax\""
" orig-s_23))"
"(let-values()"
" flat-s_13)))))))"
"(values"
" _19_0"
" e20_0))"
"((lambda(false_1"
" str_6"
" e_41)"
"(error"
" str_6))"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_23)))))"
"(values"
" #t"
" _17_1"
" e18_1))))))"
"(let-values(((n-args_0)"
"(length e18_0)))"
"(if(let-values(((or-part_225)"
"(if(let-values(((or-part_226)"
"(if(known-struct-op?"
" d_30)"
"(if(eq?"
" 'constructor"
"(known-struct-op-type"
" d_30))"
"(="
"(known-struct-op-field-count"
" d_30)"
" n-args_0)"
" #f)"
" #f)))"
"(if or-part_226"
" or-part_226"
"(if(known-function?"
" d_30)"
"(if(known-function-pure?"
" d_30)"
"(arity-includes?"
"(known-function-arity"
" d_30)"
" n-args_0)"
" #f)"
" #f)))"
"(let-values(((lst_223)"
" e18_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_223)))"
"((letrec-values(((for-loop_220)"
"(lambda(result_80"
" lst_224)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_224)"
"(let-values(((e_42)"
"(unsafe-car"
" lst_224))"
"((rest_122)"
"(unsafe-cdr"
" lst_224)))"
"(let-values(((result_81)"
"(let-values()"
"(let-values(((result_82)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_42"
" 1"
" locals_2))))))"
"(values"
" result_82)))))"
"(if(if(not"
"((lambda x_57"
"(not"
" result_81))"
" e_42))"
"(not"
" #f)"
" #f)"
"(for-loop_220"
" result_81"
" rest_122)"
" result_81)))"
" result_80)))))"
" for-loop_220)"
" #t"
" lst_223)))"
" #f)))"
"(if or-part_225"
" or-part_225"
"(if(known-function-of-satisfying?"
" d_30)"
"(if(="
" n-args_0"
"(length"
"(known-function-of-satisfying-arg-predicate-keys"
" d_30)))"
"(let-values(((lst_97)"
" e18_0)"
"((lst_225)"
"(known-function-of-satisfying-arg-predicate-keys"
" d_30)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_97)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_225)))"
"((letrec-values(((for-loop_101)"
"(lambda(result_83"
" lst_179"
" lst_10)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_179)"
"(pair?"
" lst_10)"
" #f)"
"(let-values(((e_3)"
"(unsafe-car"
" lst_179))"
"((rest_1)"
"(unsafe-cdr"
" lst_179))"
"((key_63)"
"(unsafe-car"
" lst_10))"
"((rest_123)"
"(unsafe-cdr"
" lst_10)))"
"(let-values(((result_84)"
"(let-values()"
"(let-values(((result_85)"
"(let-values()"
"(let-values()"
"(if(not"
"(effects?_0"
" e_3"
" 1"
" locals_2))"
"(satisfies?"
" e_3"
" key_63"
" defns_1"
" locals_2)"
" #f)))))"
"(values"
" result_85)))))"
"(if(if(not"
"((lambda x_58"
"(not"
" result_84))"
" e_3))"
"(if(not"
"((lambda x_9"
"(not"
" result_84))"
" key_63))"
"(not"
" #f)"
" #f)"
" #f)"
"(for-loop_101"
" result_84"
" rest_1"
" rest_123)"
" result_84)))"
" result_83)))))"
" for-loop_101)"
" #t"
" lst_97"
" lst_225)))"
" #f)"
" #f)))"
" 1"
" #f))))"
" c1_26)"
"(let-values()"
"(if(let-values(((or-part_167)"
"(self-quoting-in-linklet?"
" v_32)))"
"(if or-part_167"
" or-part_167"
"(if(symbol? v_32)"
"(let-values(((or-part_65)"
"(hash-ref"
" locals_2"
" v_32"
" #f)))"
"(if or-part_65"
" or-part_65"
"(let-values(((or-part_227)"
"(lookup-defn"
" defns_1"
" v_32)))"
"(if or-part_227"
" or-part_227"
"(let-values(((or-part_66)"
"(built-in-symbol?"
" v_32)))"
"(if or-part_66"
" or-part_66"
"(ready-variable?_0"
" v_32)))))))"
" #f)))"
" 1"
" #f)))))))"
"(let-values() 1))"
"(if(unsafe-fx< index_1 3)"
"(let-values()"
"(let-values(((ok?_18"
" _21_0"
" ids22_0"
" rhs23_0"
" body24_0)"
"(let-values(((s_46) e_39))"
"(let-values(((orig-s_24) s_46))"
"(let-values(((_21_1"
" ids22_1"
" rhs23_1"
" body24_1)"
"(let-values(((s_309)"
"(if(1/syntax?"
" s_46)"
"(syntax-e$2"
" s_46)"
" s_46)))"
"(if(pair? s_309)"
"(let-values(((_25_0)"
"(let-values(((s_28)"
"(car"
" s_309)))"
" s_28))"
"((ids26_0"
" rhs27_0"
" body28_0)"
"(let-values(((s_29)"
"(cdr"
" s_309)))"
"(let-values(((s_30)"
"(if(1/syntax?"
" s_29)"
"(syntax-e$2"
" s_29)"
" s_29)))"
"(if(pair?"
" s_30)"
"(let-values(((ids29_0"
" rhs30_0)"
"(let-values(((s_310)"
"(car"
" s_30)))"
"(let-values(((s_311)"
"(if(1/syntax?"
" s_310)"
"(syntax-e$2"
" s_310)"
" s_310)))"
"(let-values(((flat-s_14)"
"(to-syntax-list.1$1"
" s_311)))"
"(if(not"
" flat-s_14)"
"(let-values()"
"((lambda(false_2"
" str_7"
" e_43)"
"(error"
" str_7))"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_24))"
"(let-values()"
"(let-values(((ids_8"
" rhs_4)"
"(let-values(((lst_193)"
" flat-s_14))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_193)))"
"((letrec-values(((for-loop_204)"
"(lambda(ids_9"
" rhs_5"
" lst_226)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_226)"
"(let-values(((s_49)"
"(unsafe-car"
" lst_226))"
"((rest_124)"
"(unsafe-cdr"
" lst_226)))"
"(let-values(((ids_10"
" rhs_6)"
"(let-values(((ids_11)"
" ids_9)"
"((rhs_7)"
" rhs_5))"
"(let-values(((ids_12"
" rhs_8)"
"(let-values()"
"(let-values(((ids36_0"
" rhs37_0)"
"(let-values()"
"(let-values(((s_166)"
"(if(1/syntax?"
" s_49)"
"(syntax-e$2"
" s_49)"
" s_49)))"
"(if(pair?"
" s_166)"
"(let-values(((ids32_0)"
"(let-values(((s_54)"
"(car"
" s_166)))"
" s_54))"
"((rhs33_0)"
"(let-values(((s_312)"
"(cdr"
" s_166)))"
"(let-values(((s_93)"
"(if(1/syntax?"
" s_312)"
"(syntax-e$2"
" s_312)"
" s_312)))"
"(if(pair?"
" s_93)"
"(let-values(((rhs34_0)"
"(let-values(((s_94)"
"(car"
" s_93)))"
" s_94))"
"(()"
"(let-values(((s_313)"
"(cdr"
" s_93)))"
"(let-values(((s_314)"
"(if(1/syntax?"
" s_313)"
"(syntax-e$2"
" s_313)"
" s_313)))"
"(if(null?"
" s_314)"
"(values)"
"((lambda(false_3"
" str_8"
" e_44)"
"(error"
" str_8))"
" #f"
"                                                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_24))))))"
"(values"
" rhs34_0))"
"((lambda(false_4"
" str_9"
" e_45)"
"(error"
" str_9))"
" #f"
"                                                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_24))))))"
"(values"
" ids32_0"
" rhs33_0))"
"((lambda(false_5"
" str_10"
" e_46)"
"(error"
" str_10))"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_24))))))"
"(values"
"(cons"
" ids36_0"
" ids_11)"
"(cons"
" rhs37_0"
" rhs_7))))))"
"(values"
" ids_12"
" rhs_8)))))"
"(if(not"
" #f)"
"(for-loop_204"
" ids_10"
" rhs_6"
" rest_124)"
"(values"
" ids_10"
" rhs_6))))"
"(values"
" ids_9"
" rhs_5))))))"
" for-loop_204)"
" null"
" null"
" lst_193)))))"
"(values"
"(reverse$1"
" ids_8)"
"(reverse$1"
" rhs_4)))))))))"
"((body31_0)"
"(let-values(((s_96)"
"(cdr"
" s_30)))"
"(let-values(((s_57)"
"(if(1/syntax?"
" s_96)"
"(syntax-e$2"
" s_96)"
" s_96)))"
"(if(pair?"
" s_57)"
"(let-values(((body35_0)"
"(let-values(((s_305)"
"(car"
" s_57)))"
" s_305))"
"(()"
"(let-values(((s_315)"
"(cdr"
" s_57)))"
"(let-values(((s_316)"
"(if(1/syntax?"
" s_315)"
"(syntax-e$2"
" s_315)"
" s_315)))"
"(if(null?"
" s_316)"
"(values)"
"((lambda(false_6"
" str_11"
" e_47)"
"(error"
" str_11))"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_24))))))"
"(values"
" body35_0))"
"((lambda(false_7"
" str_12"
" e_48)"
"(error"
" str_12))"
" #f"
"                                                                                                                                                 \"bad syntax\""
" orig-s_24))))))"
"(values"
" ids29_0"
" rhs30_0"
" body31_0))"
"((lambda(false_8"
" str_13"
" e_49)"
"(error"
" str_13))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_24))))))"
"(values"
" _25_0"
" ids26_0"
" rhs27_0"
" body28_0))"
"((lambda(false_9"
" str_14"
" e_50)"
"(error"
" str_14))"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_24)))))"
"(values"
" #t"
" _21_1"
" ids22_1"
" rhs23_1"
" body24_1))))))"
"(if(not"
"(let-values(((lst_198) ids22_0)"
"((lst_227) rhs23_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_198)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_227)))"
"((letrec-values(((for-loop_221)"
"(lambda(result_13"
" lst_200"
" lst_228)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_200)"
"(pair?"
" lst_228)"
" #f)"
"(let-values(((ids_13)"
"(unsafe-car"
" lst_200))"
"((rest_125)"
"(unsafe-cdr"
" lst_200))"
"((rhs_9)"
"(unsafe-car"
" lst_228))"
"((rest_126)"
"(unsafe-cdr"
" lst_228)))"
"(let-values(((result_86)"
"(let-values()"
"(let-values(((result_87)"
"(let-values()"
"(let-values()"
"(effects?_0"
" rhs_9"
"(correlated-length"
" ids_13)"
" locals_2)))))"
"(values"
" result_87)))))"
"(if(if(not"
"((lambda x_59"
" result_86)"
" ids_13))"
"(if(not"
"((lambda x_60"
" result_86)"
" rhs_9))"
"(not"
" #f)"
" #f)"
" #f)"
"(for-loop_221"
" result_86"
" rest_125"
" rest_126)"
" result_86)))"
" result_13)))))"
" for-loop_221)"
" #f"
" lst_198"
" lst_227))))"
"(loop_82"
" body24_0"
"(add-binding-info locals_2 ids22_0 rhs23_0))"
" #f)))"
"(if(unsafe-fx< index_1 4)"
"(let-values()"
"(let-values(((ok?_19 _38_0 e39_0)"
"(let-values(((s_317) e_39))"
"(let-values(((orig-s_25) s_317))"
"(let-values(((_38_1 e39_1)"
"(let-values(((s_318)"
"(if(1/syntax?"
" s_317)"
"(syntax-e$2"
" s_317)"
" s_317)))"
"(if(pair?"
" s_318)"
"(let-values(((_40_0)"
"(let-values(((s_209)"
"(car"
" s_318)))"
" s_209))"
"((e41_0)"
"(let-values(((s_38)"
"(cdr"
" s_318)))"
"(let-values(((s_319)"
"(if(1/syntax?"
" s_38)"
"(syntax-e$2"
" s_38)"
" s_38)))"
"(let-values(((flat-s_15)"
"(to-syntax-list.1$1"
" s_319)))"
"(if(not"
" flat-s_15)"
"(let-values()"
"((lambda(false_10"
" str_15"
" e_51)"
"(error"
" str_15))"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_25))"
"(let-values()"
" flat-s_15)))))))"
"(values"
" _40_0"
" e41_0))"
"((lambda(false_11"
" str_16"
" e_52)"
"(error"
" str_16))"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_25)))))"
"(values #t _38_1 e39_1))))))"
"(if(let-values(((lst_229) e39_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_229)))"
"((letrec-values(((for-loop_222)"
"(lambda(result_88"
" lst_230)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_230)"
"(let-values(((e_53)"
"(unsafe-car"
" lst_230))"
"((rest_127)"
"(unsafe-cdr"
" lst_230)))"
"(let-values(((result_89)"
"(let-values()"
"(let-values(((result_90)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_53"
" 1"
" locals_2))))))"
"(values"
" result_90)))))"
"(if(if(not"
"((lambda x_61"
"(not"
" result_89))"
" e_53))"
"(not"
" #f)"
" #f)"
"(for-loop_222"
" result_89"
" rest_127)"
" result_89)))"
" result_88)))))"
" for-loop_222)"
" #t"
" lst_229)))"
"(length e39_0)"
" #f)))"
"(if(unsafe-fx< index_1 5)"
"(let-values()"
"(let-values(((ok?_20 _42_0 e43_0)"
"(let-values(((s_320) e_39))"
"(let-values(((orig-s_26)"
" s_320))"
"(let-values(((_42_1 e43_1)"
"(let-values(((s_321)"
"(if(1/syntax?"
" s_320)"
"(syntax-e$2"
" s_320)"
" s_320)))"
"(if(pair?"
" s_321)"
"(let-values(((_44_0)"
"(let-values(((s_322)"
"(car"
" s_321)))"
" s_322))"
"((e45_0)"
"(let-values(((s_323)"
"(cdr"
" s_321)))"
"(let-values(((s_71)"
"(if(1/syntax?"
" s_323)"
"(syntax-e$2"
" s_323)"
" s_323)))"
"(let-values(((flat-s_16)"
"(to-syntax-list.1$1"
" s_71)))"
"(if(not"
" flat-s_16)"
"(let-values()"
"((lambda(false_12"
" str_17"
" e_54)"
"(error"
" str_17))"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_26))"
"(let-values()"
" flat-s_16)))))))"
"(values"
" _44_0"
" e45_0))"
"((lambda(false_13"
" str_18"
" e_55)"
"(error"
" str_18))"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_26)))))"
"(values #t _42_1 e43_1))))))"
"(if(let-values(((lst_231) e43_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_231)))"
"((letrec-values(((for-loop_223)"
"(lambda(result_91"
" lst_232)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_232)"
"(let-values(((e_56)"
"(unsafe-car"
" lst_232))"
"((rest_128)"
"(unsafe-cdr"
" lst_232)))"
"(let-values(((result_29)"
"(let-values()"
"(let-values(((result_30)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_56"
" 1"
" locals_2))))))"
"(values"
" result_30)))))"
"(if(if(not"
"((lambda x_27"
"(not"
" result_29))"
" e_56))"
"(not"
" #f)"
" #f)"
"(for-loop_223"
" result_29"
" rest_128)"
" result_29)))"
" result_91)))))"
" for-loop_223)"
" #t"
" lst_231)))"
" 1"
" #f)))"
"(let-values()"
"(let-values(((ok?_21 _46_0 e47_0)"
"(let-values(((s_324) e_39))"
"(let-values(((orig-s_27)"
" s_324))"
"(let-values(((_46_1 e47_1)"
"(let-values(((s_325)"
"(if(1/syntax?"
" s_324)"
"(syntax-e$2"
" s_324)"
" s_324)))"
"(if(pair?"
" s_325)"
"(let-values(((_48_0)"
"(let-values(((s_221)"
"(car"
" s_325)))"
" s_221))"
"((e49_0)"
"(let-values(((s_326)"
"(cdr"
" s_325)))"
"(let-values(((s_327)"
"(if(1/syntax?"
" s_326)"
"(syntax-e$2"
" s_326)"
" s_326)))"
"(let-values(((flat-s_17)"
"(to-syntax-list.1$1"
" s_327)))"
"(if(not"
" flat-s_17)"
"(let-values()"
"((lambda(false_14"
" str_19"
" e_31)"
"(error"
" str_19))"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_27))"
"(let-values()"
" flat-s_17)))))))"
"(values"
" _48_0"
" e49_0))"
"((lambda(false_15"
" str_20"
" e_57)"
"(error"
" str_20))"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_27)))))"
"(values #t _46_1 e47_1))))))"
"((letrec-values(((bloop_0)"
"(lambda(es_1)"
"(begin"
" 'bloop"
"(if(null? es_1)"
"(let-values() #f)"
"(if(null?(cdr es_1))"
"(let-values()"
"(loop_82"
"(car es_1)"
" locals_2))"
"(let-values()"
"(if(not"
"(effects?_0"
"(car es_1)"
" #f"
" locals_2))"
"(bloop_0"
"(cdr es_1))"
" #f))))))))"
" bloop_0)"
" e47_0)))))))"
"(if(unsafe-fx< index_1 9)"
"(if(unsafe-fx< index_1 7)"
"(let-values()"
"(let-values(((ok?_22 _50_0 e051_0 e52_0)"
"(let-values(((s_116) e_39))"
"(let-values(((orig-s_0) s_116))"
"(let-values(((_50_1 e051_1 e52_1)"
"(let-values(((s_120)"
"(if(1/syntax?"
" s_116)"
"(syntax-e$2"
" s_116)"
" s_116)))"
"(if(pair? s_120)"
"(let-values(((_53_0)"
"(let-values(((s_227)"
"(car"
" s_120)))"
" s_227))"
"((e054_0"
" e55_0)"
"(let-values(((s_163)"
"(cdr"
" s_120)))"
"(let-values(((s_164)"
"(if(1/syntax?"
" s_163)"
"(syntax-e$2"
" s_163)"
" s_163)))"
"(if(pair?"
" s_164)"
"(let-values(((e056_0)"
"(let-values(((s_328)"
"(car"
" s_164)))"
" s_328))"
"((e57_0)"
"(let-values(((s_329)"
"(cdr"
" s_164)))"
"(let-values(((s_228)"
"(if(1/syntax?"
" s_329)"
"(syntax-e$2"
" s_329)"
" s_329)))"
"(let-values(((flat-s_18)"
"(to-syntax-list.1$1"
" s_228)))"
"(if(not"
" flat-s_18)"
"(let-values()"
"((lambda(false_16"
" str_21"
" e_58)"
"(error"
" str_21))"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_0))"
"(let-values()"
" flat-s_18)))))))"
"(values"
" e056_0"
" e57_0))"
"((lambda(false_17"
" str_22"
" e_59)"
"(error"
" str_22))"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_0))))))"
"(values"
" _53_0"
" e054_0"
" e55_0))"
"((lambda(false_18"
" str_23"
" e_60)"
"(error"
" str_23))"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_0)))))"
"(values"
" #t"
" _50_1"
" e051_1"
" e52_1))))))"
"(if(let-values(((lst_233) e52_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_233)))"
"((letrec-values(((for-loop_224)"
"(lambda(result_92"
" lst_119)"
"(begin"
" 'for-loop"
"(if(pair? lst_119)"
"(let-values(((e_61)"
"(unsafe-car"
" lst_119))"
"((rest_129)"
"(unsafe-cdr"
" lst_119)))"
"(let-values(((result_93)"
"(let-values()"
"(let-values(((result_94)"
"(let-values()"
"(let-values()"
"(not"
"(effects?_0"
" e_61"
" #f"
" locals_2))))))"
"(values"
" result_94)))))"
"(if(if(not"
"((lambda x_62"
"(not"
" result_93))"
" e_61))"
"(not #f)"
" #f)"
"(for-loop_224"
" result_93"
" rest_129)"
" result_93)))"
" result_92)))))"
" for-loop_224)"
" #t"
" lst_233)))"
"(loop_82 e051_0 locals_2)"
" #f)))"
"(if(unsafe-fx< index_1 8)"
"(let-values()"
"(if(ok-make-struct-type?"
" e_39"
" ready-variable?_0"
" defns_1)"
" 5"
" #f))"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_39"
" locals_2"
" 'general-accessor"
" defns_1)"
" 1"
" #f))))"
"(if(unsafe-fx< index_1 10)"
"(let-values()"
"(if(ok-make-struct-field-accessor/mutator?"
" e_39"
" locals_2"
" 'general-mutator"
" defns_1)"
" 1"
" #f))"
"(if(unsafe-fx< index_1 11)"
"(let-values()"
"(if(ok-make-struct-type-property? e_39 defns_1)"
" 3"
" #f))"
"(if(unsafe-fx< index_1 12)"
"(let-values()"
"(let-values(((ok?_23 gs58_0 quot59_0 datum60_0)"
"(let-values(((s_234) e_39))"
"(if(let-values(((s_235)"
"(if(1/syntax?"
" s_234)"
"(syntax-e$2"
" s_234)"
" s_234)))"
"(if(pair? s_235)"
"(if(let-values(((s_330)"
"(car"
" s_235)))"
" #t)"
"(let-values(((s_133)"
"(cdr"
" s_235)))"
"(let-values(((s_236)"
"(if(1/syntax?"
" s_133)"
"(syntax-e$2"
" s_133)"
" s_133)))"
"(if(pair? s_236)"
"(if(let-values(((s_237)"
"(car"
" s_236)))"
"(let-values(((s_331)"
"(if(1/syntax?"
" s_237)"
"(syntax-e$2"
" s_237)"
" s_237)))"
"(if(pair?"
" s_331)"
"(if(let-values(((s_332)"
"(car"
" s_331)))"
" #t)"
"(let-values(((s_134)"
"(cdr"
" s_331)))"
"(let-values(((s_333)"
"(if(1/syntax?"
" s_134)"
"(syntax-e$2"
" s_134)"
" s_134)))"
"(if(pair?"
" s_333)"
"(if(let-values(((s_334)"
"(car"
" s_333)))"
" #t)"
"(let-values(((s_335)"
"(cdr"
" s_333)))"
"(let-values(((s_336)"
"(if(1/syntax?"
" s_335)"
"(syntax-e$2"
" s_335)"
" s_335)))"
"(null?"
" s_336)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
"(let-values(((s_337)"
"(cdr"
" s_236)))"
"(let-values(((s_338)"
"(if(1/syntax?"
" s_337)"
"(syntax-e$2"
" s_337)"
" s_337)))"
"(null?"
" s_338)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((gs58_1"
" quot59_1"
" datum60_1)"
"(let-values(((s_339)"
"(if(1/syntax?"
" s_234)"
"(syntax-e$2"
" s_234)"
" s_234)))"
"(let-values(((gs61_0)"
"(let-values(((s_340)"
"(car"
" s_339)))"
" s_340))"
"((quot62_0"
" datum63_0)"
"(let-values(((s_341)"
"(cdr"
" s_339)))"
"(let-values(((s_342)"
"(if(1/syntax?"
" s_341)"
"(syntax-e$2"
" s_341)"
" s_341)))"
"(let-values(((quot64_0"
" datum65_0)"
"(let-values(((s_343)"
"(car"
" s_342)))"
"(let-values(((s_344)"
"(if(1/syntax?"
" s_343)"
"(syntax-e$2"
" s_343)"
" s_343)))"
"(let-values(((quot66_0)"
"(let-values(((s_239)"
"(car"
" s_344)))"
" s_239))"
"((datum67_0)"
"(let-values(((s_345)"
"(cdr"
" s_344)))"
"(let-values(((s_346)"
"(if(1/syntax?"
" s_345)"
"(syntax-e$2"
" s_345)"
" s_345)))"
"(let-values(((datum68_0)"
"(let-values(((s_240)"
"(car"
" s_346)))"
" s_240))"
"(()"
"(let-values(((s_241)"
"(cdr"
" s_346)))"
"(let-values(((s_242)"
"(if(1/syntax?"
" s_241)"
"(syntax-e$2"
" s_241)"
" s_241)))"
"(values)))))"
"(values"
" datum68_0))))))"
"(values"
" quot66_0"
" datum67_0)))))"
"(()"
"(let-values(((s_347)"
"(cdr"
" s_342)))"
"(let-values(((s_348)"
"(if(1/syntax?"
" s_347)"
"(syntax-e$2"
" s_347)"
" s_347)))"
"(values)))))"
"(values"
" quot64_0"
" datum65_0))))))"
"(values"
" gs61_0"
" quot62_0"
" datum63_0)))))"
"(values"
" #t"
" gs58_1"
" quot59_1"
" datum60_1)))"
"(values #f #f #f #f)))))"
"(if(let-values(((or-part_228)"
"(if ok?_23"
"(if(eq? 'quote quot59_0)"
"(let-values(((or-part_229)"
"(symbol?"
" datum60_0)))"
"(if or-part_229"
" or-part_229"
"(string?"
" datum60_0)))"
" #f)"
" #f)))"
"(if or-part_228"
" or-part_228"
"(null?(cdr(correlated-e e_39)))))"
" 1"
" #f)))"
"(let-values()"
"(let-values(((ok?_24"
" _69_0"
" id:rator70_0"
" id:arg71_0"
" thn72_0"
" els73_0)"
"(let-values(((s_349) e_39))"
"(if(let-values(((s_350)"
"(if(1/syntax?"
" s_349)"
"(syntax-e$2"
" s_349)"
" s_349)))"
"(if(pair? s_350)"
"(if(let-values(((s_351)"
"(car"
" s_350)))"
" #t)"
"(let-values(((s_352)"
"(cdr"
" s_350)))"
"(let-values(((s_353)"
"(if(1/syntax?"
" s_352)"
"(syntax-e$2"
" s_352)"
" s_352)))"
"(if(pair? s_353)"
"(if(let-values(((s_248)"
"(car"
" s_353)))"
"(let-values(((s_354)"
"(if(1/syntax?"
" s_248)"
"(syntax-e$2"
" s_248)"
" s_248)))"
"(if(pair?"
" s_354)"
"(if(let-values(((s_355)"
"(car"
" s_354)))"
"(let-values(((or-part_230)"
"(if(1/syntax?"
" s_355)"
"(symbol?"
"(syntax-e$2"
" s_355))"
" #f)))"
"(if or-part_230"
" or-part_230"
"(symbol?"
" s_355))))"
"(let-values(((s_356)"
"(cdr"
" s_354)))"
"(let-values(((s_249)"
"(if(1/syntax?"
" s_356)"
"(syntax-e$2"
" s_356)"
" s_356)))"
"(if(pair?"
" s_249)"
"(if(let-values(((s_250)"
"(car"
" s_249)))"
"(let-values(((or-part_231)"
"(if(1/syntax?"
" s_250)"
"(symbol?"
"(syntax-e$2"
" s_250))"
" #f)))"
"(if or-part_231"
" or-part_231"
"(symbol?"
" s_250))))"
"(let-values(((s_357)"
"(cdr"
" s_249)))"
"(let-values(((s_358)"
"(if(1/syntax?"
" s_357)"
"(syntax-e$2"
" s_357)"
" s_357)))"
"(null?"
" s_358)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
"(let-values(((s_359)"
"(cdr"
" s_353)))"
"(let-values(((s_252)"
"(if(1/syntax?"
" s_359)"
"(syntax-e$2"
" s_359)"
" s_359)))"
"(if(pair?"
" s_252)"
"(if(let-values(((s_360)"
"(car"
" s_252)))"
" #t)"
"(let-values(((s_253)"
"(cdr"
" s_252)))"
"(let-values(((s_254)"
"(if(1/syntax?"
" s_253)"
"(syntax-e$2"
" s_253)"
" s_253)))"
"(if(pair?"
" s_254)"
"(if(let-values(((s_361)"
"(car"
" s_254)))"
" #t)"
"(let-values(((s_362)"
"(cdr"
" s_254)))"
"(let-values(((s_255)"
"(if(1/syntax?"
" s_362)"
"(syntax-e$2"
" s_362)"
" s_362)))"
"(null?"
" s_255)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_69_1"
" id:rator70_1"
" id:arg71_1"
" thn72_1"
" els73_1)"
"(let-values(((s_363)"
"(if(1/syntax?"
" s_349)"
"(syntax-e$2"
" s_349)"
" s_349)))"
"(let-values(((_74_0)"
"(let-values(((s_364)"
"(car"
" s_363)))"
" s_364))"
"((id:rator75_0"
" id:arg76_0"
" thn77_0"
" els78_0)"
"(let-values(((s_365)"
"(cdr"
" s_363)))"
"(let-values(((s_366)"
"(if(1/syntax?"
" s_365)"
"(syntax-e$2"
" s_365)"
" s_365)))"
"(let-values(((id:rator79_0"
" id:arg80_0)"
"(let-values(((s_367)"
"(car"
" s_366)))"
"(let-values(((s_368)"
"(if(1/syntax?"
" s_367)"
"(syntax-e$2"
" s_367)"
" s_367)))"
"(let-values(((id:rator83_0)"
"(let-values(((s_369)"
"(car"
" s_368)))"
" s_369))"
"((id:arg84_0)"
"(let-values(((s_370)"
"(cdr"
" s_368)))"
"(let-values(((s_371)"
"(if(1/syntax?"
" s_370)"
"(syntax-e$2"
" s_370)"
" s_370)))"
"(let-values(((id:arg85_0)"
"(let-values(((s_372)"
"(car"
" s_371)))"
" s_372))"
"(()"
"(let-values(((s_373)"
"(cdr"
" s_371)))"
"(let-values(((s_374)"
"(if(1/syntax?"
" s_373)"
"(syntax-e$2"
" s_373)"
" s_373)))"
"(values)))))"
"(values"
" id:arg85_0))))))"
"(values"
" id:rator83_0"
" id:arg84_0)))))"
"((thn81_0"
" els82_0)"
"(let-values(((s_375)"
"(cdr"
" s_366)))"
"(let-values(((s_376)"
"(if(1/syntax?"
" s_375)"
"(syntax-e$2"
" s_375)"
" s_375)))"
"(let-values(((thn86_0)"
"(let-values(((s_259)"
"(car"
" s_376)))"
" s_259))"
"((els87_0)"
"(let-values(((s_377)"
"(cdr"
" s_376)))"
"(let-values(((s_378)"
"(if(1/syntax?"
" s_377)"
"(syntax-e$2"
" s_377)"
" s_377)))"
"(let-values(((els88_0)"
"(let-values(((s_379)"
"(car"
" s_378)))"
" s_379))"
"(()"
"(let-values(((s_380)"
"(cdr"
" s_378)))"
"(let-values(((s_260)"
"(if(1/syntax?"
" s_380)"
"(syntax-e$2"
" s_380)"
" s_380)))"
"(values)))))"
"(values"
" els88_0))))))"
"(values"
" thn86_0"
" els87_0))))))"
"(values"
" id:rator79_0"
" id:arg80_0"
" thn81_0"
" els82_0))))))"
"(values"
" _74_0"
" id:rator75_0"
" id:arg76_0"
" thn77_0"
" els78_0)))))"
"(values"
" #t"
" _69_1"
" id:rator70_1"
" id:arg71_1"
" thn72_1"
" els73_1)))"
"(values #f #f #f #f #f #f)))))"
"(if ok?_24"
"(let-values()"
"(let-values(((c2_2)"
"(let-values(((or-part_232)"
"(hash-ref"
" locals_2"
" id:rator70_0"
" #f)))"
"(if or-part_232"
" or-part_232"
"(lookup-defn"
" defns_1"
" id:rator70_0)))))"
"(if c2_2"
"((lambda(d_31)"
"(if(known-predicate? d_31)"
"(if(not"
"(effects?_0"
" thn72_0"
" expected-results_0"
"(hash-set"
" locals_2"
" id:arg71_0"
"(known-satisfies7.1"
"(known-predicate-key"
" d_31)))))"
"(loop_82 els73_0 locals_2)"
" #f)"
" #f))"
" c2_2)"
"(let-values() #f))))"
"(let-values()"
"(let-values(((ok?_25"
" _89_0"
" tst90_0"
" thn91_0"
" els92_0)"
"(let-values(((s_381) e_39))"
"(if(let-values(((s_382)"
"(if(1/syntax?"
" s_381)"
"(syntax-e$2"
" s_381)"
" s_381)))"
"(if(pair? s_382)"
"(if(let-values(((s_383)"
"(car"
" s_382)))"
" #t)"
"(let-values(((s_384)"
"(cdr"
" s_382)))"
"(let-values(((s_385)"
"(if(1/syntax?"
" s_384)"
"(syntax-e$2"
" s_384)"
" s_384)))"
"(if(pair?"
" s_385)"
"(if(let-values(((s_386)"
"(car"
" s_385)))"
" #t)"
"(let-values(((s_136)"
"(cdr"
" s_385)))"
"(let-values(((s_387)"
"(if(1/syntax?"
" s_136)"
"(syntax-e$2"
" s_136)"
" s_136)))"
"(if(pair?"
" s_387)"
"(if(let-values(((s_388)"
"(car"
" s_387)))"
" #t)"
"(let-values(((s_389)"
"(cdr"
" s_387)))"
"(let-values(((s_390)"
"(if(1/syntax?"
" s_389)"
"(syntax-e$2"
" s_389)"
" s_389)))"
"(if(pair?"
" s_390)"
"(if(let-values(((s_391)"
"(car"
" s_390)))"
" #t)"
"(let-values(((s_392)"
"(cdr"
" s_390)))"
"(let-values(((s_137)"
"(if(1/syntax?"
" s_392)"
"(syntax-e$2"
" s_392)"
" s_392)))"
"(null?"
" s_137)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_89_1"
" tst90_1"
" thn91_1"
" els92_1)"
"(let-values(((s_138)"
"(if(1/syntax?"
" s_381)"
"(syntax-e$2"
" s_381)"
" s_381)))"
"(let-values(((_93_0)"
"(let-values(((s_393)"
"(car"
" s_138)))"
" s_393))"
"((tst94_0"
" thn95_0"
" els96_0)"
"(let-values(((s_394)"
"(cdr"
" s_138)))"
"(let-values(((s_395)"
"(if(1/syntax?"
" s_394)"
"(syntax-e$2"
" s_394)"
" s_394)))"
"(let-values(((tst97_0)"
"(let-values(((s_396)"
"(car"
" s_395)))"
" s_396))"
"((thn98_0"
" els99_0)"
"(let-values(((s_397)"
"(cdr"
" s_395)))"
"(let-values(((s_141)"
"(if(1/syntax?"
" s_397)"
"(syntax-e$2"
" s_397)"
" s_397)))"
"(let-values(((thn100_0)"
"(let-values(((s_398)"
"(car"
" s_141)))"
" s_398))"
"((els101_0)"
"(let-values(((s_399)"
"(cdr"
" s_141)))"
"(let-values(((s_142)"
"(if(1/syntax?"
" s_399)"
"(syntax-e$2"
" s_399)"
" s_399)))"
"(let-values(((els102_0)"
"(let-values(((s_400)"
"(car"
" s_142)))"
" s_400))"
"(()"
"(let-values(((s_401)"
"(cdr"
" s_142)))"
"(let-values(((s_402)"
"(if(1/syntax?"
" s_401)"
"(syntax-e$2"
" s_401)"
" s_401)))"
"(values)))))"
"(values"
" els102_0))))))"
"(values"
" thn100_0"
" els101_0))))))"
"(values"
" tst97_0"
" thn98_0"
" els99_0))))))"
"(values"
" _93_0"
" tst94_0"
" thn95_0"
" els96_0)))))"
"(values"
" #t"
" _89_1"
" tst90_1"
" thn91_1"
" els92_1)))"
"(values"
" #f"
" #f"
" #f"
" #f"
" #f)))))"
"(if ok?_25"
"(if(not"
"(effects?_0 tst90_0 1 locals_2))"
"(if(not"
"(effects?_0"
" thn91_0"
" expected-results_0"
" locals_2))"
"(loop_82 els92_0 locals_2)"
" #f)"
" #f)"
" #f)))))))))))))))))"
" loop_82)"
" e_37"
" locals_0)))"
"(not"
"(if actual-results_0"
"(let-values(((or-part_233)(not expected-results_0)))"
"(if or-part_233 or-part_233(= actual-results_0 expected-results_0)))"
" #f)))))))))))))"
"(define-values"
"(satisfies?)"
"(lambda(e_62 key_50 defns_2 locals_3)"
"(begin"
"(let-values(((d_32)"
"(let-values(((or-part_234)(hash-ref locals_3 e_62 #f)))"
"(if or-part_234 or-part_234(lookup-defn defns_2 e_62)))))"
"(if d_32(if(known-satisfies? d_32)(eq? key_50(known-satisfies-predicate-key d_32)) #f) #f)))))"
"(define-values"
"(add-binding-info)"
"(lambda(locals_4 idss_0 rhss_0)"
"(begin"
"(let-values(((lst_234) idss_0)((lst_235) rhss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_234)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_235)))"
"((letrec-values(((for-loop_149)"
"(lambda(locals_5 lst_236 lst_237)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_236)(pair? lst_237) #f)"
"(let-values(((ids_14)(unsafe-car lst_236))"
"((rest_130)(unsafe-cdr lst_236))"
"((rhs_10)(unsafe-car lst_237))"
"((rest_131)(unsafe-cdr lst_237)))"
"(let-values(((locals_6)"
"(let-values(((locals_7) locals_5))"
"(let-values(((locals_8)"
"(let-values()"
"((letrec-values(((loop_93)"
"(lambda(rhs_11)"
"(begin"
" 'loop"
"(let-values(((tmp_27)"
"(if(pair?"
"(correlated-e"
" rhs_11))"
"(correlated-e"
"(car"
"(correlated-e"
" rhs_11)))"
" #f)))"
"(if(equal?"
" tmp_27"
" 'make-struct-type)"
"(let-values()"
"(let-values(((field-count_0)"
"(extract-struct-field-count-lower-bound"
" rhs_11)))"
"(let-values(((lst_238)"
"(correlated->list"
" ids_14))"
"((lst_239)"
" '(struct-type"
" constructor"
" predicate"
" general-accessor"
" general-mutator)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_238)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_239)))"
"((letrec-values(((for-loop_225)"
"(lambda(locals_9"
" lst_240"
" lst_241)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_240)"
"(pair?"
" lst_241)"
" #f)"
"(let-values(((id_52)"
"(unsafe-car"
" lst_240))"
"((rest_132)"
"(unsafe-cdr"
" lst_240))"
"((type_0)"
"(unsafe-car"
" lst_241))"
"((rest_133)"
"(unsafe-cdr"
" lst_241)))"
"(let-values(((locals_10)"
"(let-values(((locals_11)"
" locals_9))"
"(let-values(((locals_12)"
"(let-values()"
"(hash-set"
" locals_11"
"(correlated-e"
" id_52)"
"(known-struct-op8.1"
" type_0"
" field-count_0)))))"
"(values"
" locals_12)))))"
"(if(not"
" #f)"
"(for-loop_225"
" locals_10"
" rest_132"
" rest_133)"
" locals_10)))"
" locals_9)))))"
" for-loop_225)"
" locals_7"
" lst_238"
" lst_239)))))"
"(if(equal?"
" tmp_27"
" 'let-values)"
"(let-values()"
"(if(null?"
"(correlated-e"
"(correlated-cadr"
" rhs_11)))"
"(loop_93"
"(caddr"
"(correlated->list"
" rhs_11)))"
"(loop_93 #f)))"
"(let-values()"
"(let-values(((lst_242)"
"(correlated->list"
" ids_14)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_242)))"
"((letrec-values(((for-loop_226)"
"(lambda(locals_13"
" lst_243)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_243)"
"(let-values(((id_53)"
"(unsafe-car"
" lst_243))"
"((rest_134)"
"(unsafe-cdr"
" lst_243)))"
"(let-values(((locals_14)"
"(let-values(((locals_15)"
" locals_13))"
"(let-values(((locals_16)"
"(let-values()"
"(hash-set"
" locals_15"
"(correlated-e"
" id_53)"
" #t))))"
"(values"
" locals_16)))))"
"(if(not"
" #f)"
"(for-loop_226"
" locals_14"
" rest_134)"
" locals_14)))"
" locals_13)))))"
" for-loop_226)"
" locals_7"
" lst_242)))))))))))"
" loop_93)"
" rhs_10))))"
"(values locals_8)))))"
"(if(not #f)(for-loop_149 locals_6 rest_130 rest_131) locals_6)))"
" locals_5)))))"
" for-loop_149)"
" locals_4"
" lst_234"
" lst_235))))))"
"(define-values"
"(ok-make-struct-type-property?)"
"(lambda(e_63 defns_3)"
"(begin"
"(let-values(((l_57)(correlated->list e_63)))"
"(if(<= 2(length l_57) 5)"
"(let-values(((lst_244)(cdr l_57))"
"((lst_245)"
"(list"
"(lambda(v_166)(quoted? symbol? v_166))"
"(lambda(v_167)(is-lambda? v_167 2 defns_3))"
"(lambda(v_168)(ok-make-struct-type-property-super? v_168 defns_3))"
"(lambda(v_169)"
"(let-values(((v103_0) v_169)((temp104_1) 1)((defns105_0) defns_3))"
"(any-side-effects?9.1 defns105_0 unsafe-undefined unsafe-undefined v103_0 temp104_1))))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_244)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_245)))"
"((letrec-values(((for-loop_227)"
"(lambda(result_95 lst_246 lst_60)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_246)(pair? lst_60) #f)"
"(let-values(((arg_0)(unsafe-car lst_246))"
"((rest_27)(unsafe-cdr lst_246))"
"((pred_1)(unsafe-car lst_60))"
"((rest_135)(unsafe-cdr lst_60)))"
"(let-values(((result_96)"
"(let-values()"
"(let-values(((result_97)"
"(let-values()(let-values()(pred_1 arg_0)))))"
"(values result_97)))))"
"(if(if(not((lambda x_63(not result_96)) arg_0))"
"(if(not((lambda x_64(not result_96)) pred_1))(not #f) #f)"
" #f)"
"(for-loop_227 result_96 rest_27 rest_135)"
" result_96)))"
" result_95)))))"
" for-loop_227)"
" #t"
" lst_244"
" lst_245)))"
" #f)))))"
"(define-values"
"(ok-make-struct-type-property-super?)"
"(lambda(v_170 defns_4)"
"(begin"
"(let-values(((or-part_235)(quoted? null? v_170)))"
"(if or-part_235"
" or-part_235"
"(let-values(((or-part_236)(eq? 'null(correlated-e v_170))))"
"(if or-part_236"
" or-part_236"
"(if(pair?(correlated-e v_170))"
"(if(eq?(correlated-e(car(correlated-e v_170))) 'list)"
"(if(let-values(((lst_247)(cdr(correlated->list v_170))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_247)))"
"((letrec-values(((for-loop_228)"
"(lambda(result_98 lst_64)"
"(begin"
" 'for-loop"
"(if(pair? lst_64)"
"(let-values(((prop+val_0)(unsafe-car lst_64))"
"((rest_29)(unsafe-cdr lst_64)))"
"(let-values(((result_99)"
"(let-values()"
"(let-values(((result_100)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_0)"
" 3)"
"(let-values(((prop+val_1)"
"(correlated->list"
" prop+val_0)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_1)))"
"(if(let-values(((or-part_237)"
"(memq"
"(correlated-e"
"(list-ref"
" prop+val_1"
" 1))"
" '(prop:procedure"
" prop:equal+hash"
" prop:custom-write))))"
"(if or-part_237"
" or-part_237"
"(known-property?"
"(lookup-defn"
" defns_4"
"(correlated-e"
"(list-ref"
" prop+val_1"
" 1))))))"
"(not"
"(let-values(((temp106_1)"
"(list-ref"
" prop+val_1"
" 2))"
"((temp107_0)"
" 1)"
"((defns108_0)"
" defns_4))"
"(any-side-effects?9.1"
" defns108_0"
" unsafe-undefined"
" unsafe-undefined"
" temp106_1"
" temp107_0)))"
" #f)"
" #f))"
" #f)))))"
"(values result_100)))))"
"(if(if(not((lambda x_65(not result_99)) prop+val_0))"
"(not #f)"
" #f)"
"(for-loop_228 result_99 rest_29)"
" result_99)))"
" result_98)))))"
" for-loop_228)"
" #t"
" lst_247)))"
"(="
"(sub1(correlated-length v_170))"
"(set-count"
"(let-values(((lst_248)(cdr(correlated->list v_170))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_248)))"
"((letrec-values(((for-loop_229)"
"(lambda(table_171 lst_249)"
"(begin"
" 'for-loop"
"(if(pair? lst_249)"
"(let-values(((prop+val_2)(unsafe-car lst_249))"
"((rest_136)(unsafe-cdr lst_249)))"
"(let-values(((table_172)"
"(let-values(((table_173) table_171))"
"(let-values(((table_174)"
"(let-values()"
"(let-values(((key_64 val_55)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_2)"
" 1)))"
" #t))))"
"(hash-set"
" table_173"
" key_64"
" val_55)))))"
"(values table_174)))))"
"(if(not #f)(for-loop_229 table_172 rest_136) table_172)))"
" table_171)))))"
" for-loop_229)"
" '#hash()"
" lst_248)))))"
" #f)"
" #f)"
" #f))))))))"
"(define-values"
"(ok-make-struct-type?)"
"(lambda(e_64 ready-variable?_1 defns_5)"
"(begin"
"(let-values(((l_58)(correlated->list e_64)))"
"(let-values(((init-field-count-expr_0)(if(>(length l_58) 3)(list-ref l_58 3) #f)))"
"(let-values(((auto-field-count-expr_0)(if(>(length l_58) 4)(list-ref l_58 4) #f)))"
"(let-values(((num-fields_0)"
"(maybe+"
"(field-count-expr-to-field-count init-field-count-expr_0)"
"(field-count-expr-to-field-count auto-field-count-expr_0))))"
"(let-values(((immutables-expr_0)"
"(let-values(((or-part_238)(if(>(length l_58) 9)(list-ref l_58 9) #f)))"
"(if or-part_238 or-part_238 'null))))"
"(let-values(((super-expr_0)(if(>(length l_58) 2)(list-ref l_58 2) #f)))"
"(if(>=(length l_58) 5)"
"(if(<=(length l_58) 12)"
"(let-values(((lst_250)(cdr l_58))"
"((lst_251)"
"(list"
"(lambda(v_171)(quoted? symbol? v_171))"
"(lambda(v_172)(super-ok? v_172 defns_5))"
"(lambda(v_173)(field-count-expr-to-field-count v_173))"
"(lambda(v_174)(field-count-expr-to-field-count v_174))"
"(lambda(v_175)"
"(not"
"(let-values(((v109_0) v_175)"
"((temp110_0) 1)"
"((ready-variable?111_0) ready-variable?_1)"
"((defns112_0) defns_5))"
"(any-side-effects?9.1"
" defns112_0"
" unsafe-undefined"
" ready-variable?111_0"
" v109_0"
" temp110_0))))"
"(lambda(v_176)"
"(known-good-struct-properties? v_176 immutables-expr_0 super-expr_0 defns_5))"
"(lambda(v_177)(inspector-or-false? v_177))"
"(lambda(v_178)(procedure-spec? v_178 num-fields_0))"
"(lambda(v_179)(immutables-ok? v_179 init-field-count-expr_0)))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_250)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_251)))"
"((letrec-values(((for-loop_230)"
"(lambda(result_101 lst_252 lst_253)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_252)(pair? lst_253) #f)"
"(let-values(((arg_1)(unsafe-car lst_252))"
"((rest_137)(unsafe-cdr lst_252))"
"((pred_2)(unsafe-car lst_253))"
"((rest_138)(unsafe-cdr lst_253)))"
"(let-values(((result_102)"
"(let-values()"
"(let-values(((result_103)"
"(let-values()"
"(let-values()(pred_2 arg_1)))))"
"(values result_103)))))"
"(if(if(not((lambda x_66(not result_102)) arg_1))"
"(if(not((lambda x_67(not result_102)) pred_2))"
"(not #f)"
" #f)"
" #f)"
"(for-loop_230 result_102 rest_137 rest_138)"
" result_102)))"
" result_101)))))"
" for-loop_230)"
" #t"
" lst_250"
" lst_251)))"
" #f)"
" #f))))))))))"
"(define-values"
"(super-ok?)"
"(lambda(e_65 defns_6)"
"(begin"
"(let-values(((or-part_239)(quoted? false? e_65)))"
"(if or-part_239"
" or-part_239"
"(let-values(((o_0)(lookup-defn defns_6(correlated-e e_65))))"
"(if o_0(if(known-struct-op? o_0)(eq? 'struct-type(known-struct-op-type o_0)) #f) #f)))))))"
"(define-values"
"(extract-struct-field-count-lower-bound)"
"(lambda(e_66)"
"(begin"
"(let-values(((l_59)(correlated->list e_66)))"
"(+(field-count-expr-to-field-count(list-ref l_59 3))(field-count-expr-to-field-count(list-ref l_59 4)))))))"
"(define-values"
"(quoted?)"
"(lambda(val?_0 v_180)"
"(begin"
"(let-values(((or-part_240)"
"(if(pair?(correlated-e v_180))"
"(if(eq?(correlated-e(car(correlated-e v_180))) 'quote)"
"(val?_0(correlated-e(correlated-cadr v_180)))"
" #f)"
" #f)))"
"(if or-part_240 or-part_240(val?_0(correlated-e v_180)))))))"
"(define-values"
"(quoted-value)"
"(lambda(v_181)"
"(begin(if(pair?(correlated-e v_181))(correlated-e(correlated-cadr v_181))(correlated-e v_181)))))"
"(define-values(false?)(lambda(v_182)(begin(eq?(correlated-e v_182) #f))))"
"(define-values"
"(field-count-expr-to-field-count)"
"(lambda(v_183)(begin(if(quoted? exact-nonnegative-integer? v_183)(quoted-value v_183) #f))))"
"(define-values"
"(inspector-or-false?)"
"(lambda(v_184)"
"(begin"
"(let-values(((or-part_241)(quoted? false? v_184)))"
"(if or-part_241"
" or-part_241"
"(let-values(((or-part_242)(if(quoted? symbol? v_184)(eq? 'prefab(quoted-value v_184)) #f)))"
"(if or-part_242"
" or-part_242"
"(if(= 1(correlated-length v_184))"
"(eq? 'current-inspector(correlated-e(car(correlated-e v_184))))"
" #f))))))))"
"(define-values"
"(known-good-struct-properties?)"
"(lambda(v_185 immutables-expr_1 super-expr_1 defns_7)"
"(begin"
"(let-values(((or-part_243)(quoted? null? v_185)))"
"(if or-part_243"
" or-part_243"
"(let-values(((or-part_244)(eq? 'null(correlated-e v_185))))"
"(if or-part_244"
" or-part_244"
"(if(pair?(correlated-e v_185))"
"(if(eq?(correlated-e(car(correlated-e v_185))) 'list)"
"(if(let-values(((lst_254)(cdr(correlated->list v_185))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_254)))"
"((letrec-values(((for-loop_231)"
"(lambda(result_104 lst_255)"
"(begin"
" 'for-loop"
"(if(pair? lst_255)"
"(let-values(((prop+val_3)(unsafe-car lst_255))"
"((rest_139)(unsafe-cdr lst_255)))"
"(let-values(((result_105)"
"(let-values()"
"(let-values(((result_106)"
"(let-values()"
"(let-values()"
"(if(="
"(correlated-length"
" prop+val_3)"
" 3)"
"(let-values(((prop+val_4)"
"(correlated->list"
" prop+val_3)))"
"(if(eq?"
" 'cons"
"(correlated-e"
"(car prop+val_4)))"
"(known-good-struct-property+value?"
"(list-ref prop+val_4 1)"
"(list-ref prop+val_4 2)"
" immutables-expr_1"
" super-expr_1"
" defns_7)"
" #f))"
" #f)))))"
"(values result_106)))))"
"(if(if(not((lambda x_68(not result_105)) prop+val_3))"
"(not #f)"
" #f)"
"(for-loop_231 result_105 rest_139)"
" result_105)))"
" result_104)))))"
" for-loop_231)"
" #t"
" lst_254)))"
"(="
"(sub1(correlated-length v_185))"
"(set-count"
"(let-values(((lst_256)(cdr(correlated->list v_185))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_256)))"
"((letrec-values(((for-loop_232)"
"(lambda(table_175 lst_136)"
"(begin"
" 'for-loop"
"(if(pair? lst_136)"
"(let-values(((prop+val_5)(unsafe-car lst_136))"
"((rest_140)(unsafe-cdr lst_136)))"
"(let-values(((table_176)"
"(let-values(((table_177) table_175))"
"(let-values(((table_178)"
"(let-values()"
"(let-values(((key_65 val_56)"
"(let-values()"
"(values"
"(let-values()"
"(correlated-e"
"(list-ref"
"(correlated->list"
" prop+val_5)"
" 1)))"
" #t))))"
"(hash-set"
" table_177"
" key_65"
" val_56)))))"
"(values table_178)))))"
"(if(not #f)(for-loop_232 table_176 rest_140) table_176)))"
" table_175)))))"
" for-loop_232)"
" '#hash()"
" lst_256)))))"
" #f)"
" #f)"
" #f))))))))"
"(define-values"
"(known-good-struct-property+value?)"
"(lambda(prop-expr_0 val-expr_0 immutables-expr_2 super-expr_2 defns_8)"
"(begin"
"(let-values(((prop-name_0)(correlated-e prop-expr_0)))"
"(let-values(((tmp_28) prop-name_0))"
"(if(equal? tmp_28 'prop:evt)"
"(let-values()"
"(let-values(((or-part_245)(is-lambda? val-expr_0 1 defns_8)))"
"(if or-part_245 or-part_245(immutable-field? val-expr_0 immutables-expr_2))))"
"(if(equal? tmp_28 'prop:procedure)"
"(let-values()"
"(let-values(((or-part_246)(is-lambda? val-expr_0 1 defns_8)))"
"(if or-part_246 or-part_246(immutable-field? val-expr_0 immutables-expr_2))))"
"(if(equal? tmp_28 'prop:custom-write)"
"(let-values()(is-lambda? val-expr_0 3 defns_8))"
"(if(equal? tmp_28 'prop:equal+hash)"
"(let-values()"
"(let-values(((l_60)(correlated->list val-expr_0)))"
"(if(eq? 'list(car l_60))"
"(if(is-lambda?(list-ref l_60 1) 3 defns_8)"
"(if(is-lambda?(list-ref l_60 2) 2 defns_8)(is-lambda?(list-ref l_60 3) 2 defns_8) #f)"
" #f)"
" #f)))"
"(if(if(equal? tmp_28 'prop:method-arity-error) #t(equal? tmp_28 'prop:incomplete-arity))"
"(let-values()"
"(not"
"(let-values(((val-expr113_0) val-expr_0)((temp114_0) 1)((defns115_0) defns_8))"
"(any-side-effects?9.1 defns115_0 unsafe-undefined unsafe-undefined val-expr113_0 temp114_0))))"
"(if(equal? tmp_28 'prop:impersonator-of)"
"(let-values()(is-lambda? val-expr_0 1 defns_8))"
"(if(equal? tmp_28 'prop:arity-string)"
"(let-values()(is-lambda? val-expr_0 1 defns_8))"
"(if(equal? tmp_28 'prop:checked-procedure)"
"(let-values()(if(quoted? false? super-expr_2)(immutable-field? 1 immutables-expr_2) #f))"
"(let-values()"
"(let-values(((o_1)(lookup-defn defns_8 prop-name_0)))"
"(if o_1"
"(if(known-property? o_1)"
"(not"
"(let-values(((val-expr116_0) val-expr_0)((temp117_0) 1)((defns118_0) defns_8))"
"(any-side-effects?9.1"
" defns118_0"
" unsafe-undefined"
" unsafe-undefined"
" val-expr116_0"
" temp117_0)))"
" #f)"
" #f))))))))))))))))"
"(define-values"
"(is-lambda?)"
"(lambda(expr_9 arity_0 defns_9)"
"(begin"
"(let-values(((lookup_0)(lookup-defn defns_9 expr_9)))"
"(let-values(((or-part_247)"
"(if lookup_0"
"(if(known-function? lookup_0)"
"(let-values(((or-part_248)(not arity_0)))"
"(if or-part_248 or-part_248(arity-includes?(known-function-arity lookup_0) arity_0)))"
" #f)"
" #f)))"
"(if or-part_247"
" or-part_247"
"(let-values(((or-part_249)"
"(if(pair?(correlated-e expr_9))"
"(if(eq? 'case-lambda(car(correlated-e expr_9)))(not arity_0) #f)"
" #f)))"
"(if or-part_249"
" or-part_249"
"(if(pair?(correlated-e expr_9))"
"(if(eq? 'lambda(car(correlated-e expr_9)))"
"(let-values(((or-part_250)(not arity_0)))"
"(if or-part_250"
" or-part_250"
"((letrec-values(((loop_94)"
"(lambda(args_4 arity_1)"
"(begin"
" 'loop"
"(if(correlated? args_4)"
"(let-values()(loop_94(correlated-e args_4) arity_1))"
"(if(null? args_4)"
"(let-values()(zero? arity_1))"
"(if(pair? args_4)"
"(let-values()(loop_94(cdr args_4)(sub1 arity_1)))"
"(let-values()(not(negative? arity_1))))))))))"
" loop_94)"
"(cadr(correlated->list expr_9))"
" arity_0)))"
" #f)"
" #f)))))))))"
"(define-values"
"(arity-includes?)"
"(lambda(a_44 n_26)"
"(begin"
"(let-values(((or-part_251)(equal? a_44 n_26)))"
"(if or-part_251"
" or-part_251"
"(if(list? a_44)"
"(let-values(((lst_257) a_44))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_257)))"
"((letrec-values(((for-loop_233)"
"(lambda(result_107 lst_258)"
"(begin"
" 'for-loop"
"(if(pair? lst_258)"
"(let-values(((a_45)(unsafe-car lst_258))((rest_141)(unsafe-cdr lst_258)))"
"(let-values(((result_108)"
"(let-values()"
"(let-values(((result_109)"
"(let-values()"
"(let-values()(equal? a_45 n_26)))))"
"(values result_109)))))"
"(if(if(not((lambda x_69 result_108) a_45))(not #f) #f)"
"(for-loop_233 result_108 rest_141)"
" result_108)))"
" result_107)))))"
" for-loop_233)"
" #f"
" lst_257)))"
" #f))))))"
"(define-values"
"(immutable-field?)"
"(lambda(val-expr_1 immutables-expr_3)"
"(begin"
"(if(quoted? exact-nonnegative-integer? val-expr_1)"
"(memv(quoted-value val-expr_1)(immutables-expr-to-immutables immutables-expr_3 null))"
" #f))))"
"(define-values"
"(immutables-expr-to-immutables)"
"(lambda(e_67 fail-v_0)"
"(begin"
"(let-values(((tmp_29)(if(pair?(correlated-e e_67))(correlated-e(car(correlated-e e_67))) #f)))"
"(if(equal? tmp_29 'quote)"
"(let-values()"
"(let-values(((v_186)(correlated-cadr e_67)))"
"(let-values(((or-part_252)"
"(if(correlated-length v_186)"
"(let-values(((l_61)(map2 correlated-e(correlated->list v_186))))"
"(if(andmap2 exact-nonnegative-integer? l_61)"
"(if(=(length l_61)(set-count(list->set l_61))) l_61 #f)"
" #f))"
" #f)))"
"(if or-part_252 or-part_252 fail-v_0))))"
"(let-values() fail-v_0))))))"
"(define-values"
"(procedure-spec?)"
"(lambda(e_68 field-count_1)"
"(begin"
"(let-values(((or-part_253)(quoted? false? e_68)))"
"(if or-part_253"
" or-part_253"
"(let-values(((or-part_254)"
"(if(quoted? exact-nonnegative-integer? e_68)"
"(if field-count_1(<(quoted-value e_68) field-count_1) #f)"
" #f)))"
"(if or-part_254 or-part_254(is-lambda? e_68 #f '#hasheq()))))))))"
"(define-values"
"(immutables-ok?)"
"(lambda(e_69 init-field-count-expr_1)"
"(begin"
"(let-values(((l_62)(immutables-expr-to-immutables e_69 #f)))"
"(let-values(((c_24)(field-count-expr-to-field-count init-field-count-expr_1)))"
"(if l_62"
"(let-values(((lst_259) l_62))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_259)))"
"((letrec-values(((for-loop_95)"
"(lambda(result_110 lst_260)"
"(begin"
" 'for-loop"
"(if(pair? lst_260)"
"(let-values(((n_27)(unsafe-car lst_260))((rest_142)(unsafe-cdr lst_260)))"
"(let-values(((result_111)"
"(let-values()"
"(let-values(((result_112)"
"(let-values()(let-values()(< n_27 c_24)))))"
"(values result_112)))))"
"(if(if(not((lambda x_70(not result_111)) n_27))(not #f) #f)"
"(for-loop_95 result_111 rest_142)"
" result_111)))"
" result_110)))))"
" for-loop_95)"
" #t"
" lst_259)))"
" #f))))))"
"(define-values"
"(ok-make-struct-field-accessor/mutator?)"
"(lambda(e_70 locals_17 type_1 defns_10)"
"(begin"
"(let-values(((l_63)(correlated->list e_70)))"
"(let-values(((a_46)"
"(if(let-values(((or-part_255)(=(length l_63) 3)))"
"(if or-part_255 or-part_255(=(length l_63) 4)))"
"(let-values(((or-part_256)(hash-ref locals_17(correlated-e(list-ref l_63 1)) #f)))"
"(if or-part_256 or-part_256(lookup-defn defns_10(correlated-e(list-ref l_63 1)))))"
" #f)))"
"(if(known-struct-op? a_46)"
"(if(eq?(known-struct-op-type a_46) type_1)"
"(if(<(field-count-expr-to-field-count(list-ref l_63 2))(known-struct-op-field-count a_46))"
"(let-values(((or-part_257)(=(length l_63) 3)))"
"(if or-part_257 or-part_257(quoted? symbol?(list-ref l_63 3))))"
" #f)"
" #f)"
" #f))))))"
"(define-values(maybe+)(lambda(x_71 y_10)(begin(if x_71(if y_10(+ x_71 y_10) #f) #f))))"
"(define-values"
"(compile-single)"
"(lambda(p_45 cctx_13)"
"(begin"
"(let-values(((p12_0) p_45)((cctx13_0) cctx_13)((temp14_4) #f)((temp15_4) #t))"
"(compile-top9.1 temp14_4 temp15_4 #f p12_0 cctx13_0)))))"
"(define-values"
"(compile-top9.1)"
"(lambda(serializable?1_0 single-expression?2_0 to-source?3_0 p7_0 cctx8_0)"
"(begin"
" 'compile-top9"
"(let-values(((p_46) p7_0))"
"(let-values(((cctx_14) cctx8_0))"
"(let-values(((serializable?_1) serializable?1_0))"
"(let-values(((single-expression?_0) single-expression?2_0))"
"(let-values(((to-source?_2) to-source?3_0))"
"(let-values()"
"(let-values()"
"(let-values(((phase_84)(compile-context-phase cctx_14)))"
"(let-values(((mpis_18)(make-module-path-index-table)))"
"(let-values(((purely-functional?_0) #t))"
"(let-values(((body-linklets_1"
" min-phase_1"
" max-phase_1"
" phase-to-link-module-uses_3"
" phase-to-link-module-uses-expr_2"
" phase-to-link-extra-inspectorss_0"
" syntax-literals_3"
" no-root-context-pos_0)"
"(let-values(((temp16_4)(list p_46))"
"((cctx17_0) cctx_14)"
"((mpis18_0) mpis_18)"
"((temp19_1)"
"(if single-expression?_0"
"(list* '()(list syntax-literals-id) '(()))"
"(list"
"(list top-level-bind!-id top-level-require!-id)"
"(list mpi-vector-id syntax-literals-id)"
" instance-imports)))"
"((temp20_1)"
"(list"
" top-level-instance"
" empty-top-syntax-literal-instance"
" empty-instance-instance))"
"((to-source?21_0) to-source?_2)"
"((serializable?22_0) serializable?_1)"
"((temp23_3)(lambda()(set! purely-functional?_0 #f)))"
"((temp24_3)"
"(lambda(e_71 expected-results_2 phase_22 required-reference?_0)"
"(if(if purely-functional?_0"
"(let-values(((e27_0) e_71)"
"((expected-results28_0) expected-results_2)"
"((required-reference?29_0)"
" required-reference?_0))"
"(any-side-effects?9.1"
" unsafe-undefined"
" unsafe-undefined"
" required-reference?29_0"
" e27_0"
" expected-results28_0))"
" #f)"
"(let-values()(set! purely-functional?_0 #f))"
"(void))))"
"((temp25_3)"
"(lambda(s_43 cctx_15)"
"(begin"
"(set! purely-functional?_0 #f)"
"(compile-top-level-require s_43 cctx_15))))"
"((temp26_2)(not single-expression?_0)))"
"(compile-forms31.1"
" temp20_1"
" temp19_1"
" null"
" temp24_3"
" temp26_2"
" temp23_3"
" #f"
" null"
" unsafe-undefined"
" temp25_3"
" #f"
" serializable?22_0"
" to-source?21_0"
" temp16_4"
" cctx17_0"
" mpis18_0))))"
"(let-values(((add-metadata_0)"
"(lambda(ht_117)"
"(begin"
" 'add-metadata"
"(let-values(((ht_118)(hash-set ht_117 'original-phase phase_84)))"
"(let-values(((ht_119)(hash-set ht_118 'max-phase max-phase_1)))"
" ht_119))))))"
"(let-values(((bundle_0)"
"((if to-source?_2 values 1/hash->linklet-bundle)"
"(add-metadata_0"
"(if serializable?_1"
"(let-values()"
"(let-values(((syntax-literals-expr_1)"
"(let-values()"
"(generate-eager-syntax-literals!"
" syntax-literals_3"
" mpis_18"
" phase_84"
"(compile-context-self cctx_14)"
"(compile-context-namespace cctx_14)))))"
"(let-values(((link-linklet_0)"
"((if to-source?_2"
" values"
"(lambda(s_35)"
"(let-values()"
"(let-values(((linklet_2 new-keys_0)"
"(1/compile-linklet"
" s_35"
" #f"
"(vector"
" deserialize-instance"
" empty-eager-instance-instance)"
"(lambda(inst_0)"
"(values inst_0 #f)))))"
" linklet_2))))"
"(list"
" 'linklet"
"(list deserialize-imports eager-instance-imports)"
"(list"
" mpi-vector-id"
" deserialized-syntax-vector-id"
" 'phase-to-link-modules"
" syntax-literals-id)"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize mpis_18))"
"(list"
" 'define-values"
"(list deserialized-syntax-vector-id)"
"(list* 'make-vector(add1 phase_84) '(#f)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_2)"
"(list"
" 'define-values"
"(list syntax-literals-id)"
" syntax-literals-expr_1)))))"
"(hash-set body-linklets_1 'link link-linklet_0))))"
"(let-values() body-linklets_1))))))"
"(if to-source?_2"
"(let-values()(hasheq #f bundle_0))"
"(let-values()"
"(compiled-in-memory1.1"
"(1/hash->linklet-directory(hasheq #f bundle_0))"
" #f"
" #f"
" #f"
" phase-to-link-module-uses_3"
"(current-code-inspector)"
" phase-to-link-extra-inspectorss_0"
"(mpis-as-vector mpis_18)"
"(syntax-literals-as-vector syntax-literals_3)"
" null"
" null"
"(extract-namespace-scopes(compile-context-namespace cctx_14))"
" purely-functional?_0)))))))))))))))))))"
"(define-values"
"(compile-top-level-require)"
"(lambda(p_47 cctx_16)"
"(begin"
"(let-values(((phase_85)(compile-context-phase cctx_16)))"
"(if(parsed-require? p_47)"
"(let-values()"
"(let-values(((form-stx_0)(compile-quote-syntax(syntax-disarm$1(parsed-s p_47)) cctx_16)))"
"(list top-level-require!-id form-stx_0 ns-id)))"
"(let-values() #f))))))"
"(define-values"
"(select-defined-syms-and-bind!16.1)"
"(lambda(as-transformer?5_0"
" frame-id1_0"
" in4_0"
" requires+provides3_0"
" top-level-bind-scope2_0"
" ids11_0"
" defined-syms12_0"
" self13_0"
" phase14_0"
" all-scopes-stx15_0)"
"(begin"
" 'select-defined-syms-and-bind!16"
"(let-values(((ids_15) ids11_0))"
"(let-values(((defined-syms_8) defined-syms12_0))"
"(let-values(((self_19) self13_0))"
"(let-values(((phase_86) phase14_0))"
"(let-values(((all-scopes-stx_3) all-scopes-stx15_0))"
"(let-values(((frame-id_7) frame-id1_0))"
"(let-values(((top-level-bind-scope_3) top-level-bind-scope2_0))"
"(let-values(((requires+provides_4) requires+provides3_0))"
"(let-values(((orig-s_28) in4_0))"
"(let-values(((as-transformer?_5) as-transformer?5_0))"
"(let-values()"
"(let-values(((defined-syms-at-phase_0)"
"(let-values(((or-part_82)(hash-ref defined-syms_8 phase_86 #f)))"
"(if or-part_82"
" or-part_82"
"(let-values(((ht_120)(make-hasheq)))"
"(begin(hash-set! defined-syms_8 phase_86 ht_120) ht_120))))))"
"(reverse$1"
"(let-values(((lst_261) ids_15))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_261)))"
"((letrec-values(((for-loop_234)"
"(lambda(fold-var_73 lst_90)"
"(begin"
" 'for-loop"
"(if(pair? lst_90)"
"(let-values(((id_54)(unsafe-car lst_90))"
"((rest_143)(unsafe-cdr lst_90)))"
"(let-values(((fold-var_12)"
"(let-values(((fold-var_160) fold-var_73))"
"(let-values(((fold-var_94)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((sym_62)"
"(syntax-e$1"
" id_54)))"
"(let-values(((defined-sym_0)"
"(if(if(not"
"(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_0"
" sym_62"
" #f)"
" id_54"
" phase_86"
" top-level-bind-scope_3))"
"(if(no-extra-scopes?"
" id_54"
" all-scopes-stx_3"
" top-level-bind-scope_3"
" phase_86)"
"(symbol-interned?"
" sym_62)"
" #f)"
" #f)"
" sym_62"
"((letrec-values(((loop_83)"
"(lambda(pos_98)"
"(begin"
" 'loop"
"(let-values(((s_183)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                                                        \"~a.~a\""
" sym_62"
" pos_98))))"
"(if(defined-as-other?"
"(hash-ref"
" defined-syms-at-phase_0"
" s_183"
" #f)"
" id_54"
" phase_86"
" top-level-bind-scope_3)"
"(loop_83"
"(add1"
" pos_98))"
" s_183))))))"
" loop_83)"
" 1))))"
"(let-values((()"
"(begin"
"(hash-set!"
" defined-syms-at-phase_0"
" defined-sym_0"
" id_54)"
"(values))))"
"(let-values(((b_75)"
"(let-values(((self23_0)"
" self_19)"
"((phase24_0)"
" phase_86)"
"((defined-sym25_0)"
" defined-sym_0)"
"((frame-id26_0)"
" frame-id_7)"
"((sym27_1)"
" sym_62))"
"(make-module-binding22.1"
" #f"
" null"
" frame-id26_0"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" sym27_1"
" unsafe-undefined"
" self23_0"
" phase24_0"
" defined-sym25_0))))"
"(begin"
"(if requires+provides_4"
"(let-values()"
"(let-values(((requires+provides28_0)"
" requires+provides_4)"
"((id29_0)"
" id_54)"
"((phase30_0)"
" phase_86)"
"((b31_0)"
" b_75))"
"(remove-required-id!75.1"
" b31_0"
" requires+provides28_0"
" id29_0"
" phase30_0)))"
"(void))"
"(let-values(((id19_0)"
" id_54)"
"((b20_0)"
" b_75)"
"((phase21_1)"
" phase_86)"
"((orig-s22_0)"
" orig-s_28))"
"(add-binding!17.1"
" orig-s22_0"
" #f"
" id19_0"
" b20_0"
" phase21_1))"
"(if requires+provides_4"
"(let-values()"
"(let-values(((requires+provides32_0)"
" requires+provides_4)"
"((id33_0)"
" id_54)"
"((phase34_0)"
" phase_86)"
"((b35_0)"
" b_75)"
"((as-transformer?36_0)"
" as-transformer?_5))"
"(add-defined-or-required-id!19.1"
" as-transformer?36_0"
" #f"
" requires+provides32_0"
" id33_0"
" phase34_0"
" b35_0)))"
"(void))"
" defined-sym_0))))))"
" fold-var_160))))"
"(values fold-var_94)))))"
"(if(not #f)"
"(for-loop_234 fold-var_12 rest_143)"
" fold-var_12)))"
" fold-var_73)))))"
" for-loop_234)"
" null"
" lst_261)))))))))))))))))))"
"(define-values"
"(no-extra-scopes?)"
"(lambda(id_55 all-scopes-stx_4 top-level-bind-scope_4 phase_72)"
"(begin"
"(let-values(((m-id_0)(datum->syntax$1 all-scopes-stx_4(syntax-e$1 id_55))))"
"(let-values(((or-part_210)(bound-identifier=?$1 id_55 m-id_0 phase_72)))"
"(if or-part_210"
" or-part_210"
"(if top-level-bind-scope_4"
"(bound-identifier=?$1 id_55(add-scope m-id_0 top-level-bind-scope_4) phase_72)"
" #f)))))))"
"(define-values"
"(defined-as-other?)"
"(lambda(prev-id_0 id_56 phase_87 top-level-bind-scope_5)"
"(begin"
"(if prev-id_0"
"(if(not(bound-identifier=?$1 prev-id_0 id_56 phase_87))"
"(let-values(((or-part_258)(not top-level-bind-scope_5)))"
"(if or-part_258"
" or-part_258"
"(not"
"(bound-identifier=?$1"
"(remove-scope prev-id_0 top-level-bind-scope_5)"
"(remove-scope id_56 top-level-bind-scope_5)"
" phase_87))))"
" #f)"
" #f))))"
"(define-values"
"(select-defined-syms-and-bind!/ctx)"
"(lambda(tl-ids_0 ctx_10)"
"(begin"
"(let-values(((tl-ids37_0) tl-ids_0)"
"((temp38_1)(root-expand-context-defined-syms ctx_10))"
"((temp39_2)(root-expand-context-self-mpi ctx_10))"
"((temp40_1)(expand-context-phase ctx_10))"
"((temp41_0)(root-expand-context-all-scopes-stx ctx_10))"
"((temp42_1)(root-expand-context-frame-id ctx_10))"
"((temp43_1)(root-expand-context-top-level-bind-scope ctx_10)))"
"(select-defined-syms-and-bind!16.1"
" #f"
" temp42_1"
" #f"
" #f"
" temp43_1"
" tl-ids37_0"
" temp38_1"
" temp39_2"
" temp40_1"
" temp41_0)))))"
"(define-values"
"(add-defined-sym!)"
"(lambda(defined-syms_9 phase_77 sym_63 id_57)"
"(begin"
"(let-values(((defined-syms-at-phase_1)"
"(let-values(((or-part_219)(hash-ref defined-syms_9 phase_77 #f)))"
"(if or-part_219"
" or-part_219"
"(let-values(((ht_121)(make-hasheq)))"
"(begin(hash-set! defined-syms_9 phase_77 ht_121) ht_121))))))"
"(hash-set! defined-syms-at-phase_1 sym_63 id_57)))))"
"(define-values"
"(make-create-root-expand-context-from-module)"
"(lambda(requires_3 evaled-ld-h_0)"
"(begin"
"(lambda(ns_59 phase-shift_13 original-self_0 self_20)"
"(let-values(((root-ctx_4)"
"(let-values(((temp1_3)(namespace-mpi ns_59)))"
"(make-root-expand-context13.1 #f null unsafe-undefined unsafe-undefined temp1_3))))"
"(let-values(((s_3)(add-scopes empty-syntax(root-expand-context-module-scopes root-ctx_4))))"
"(let-values((()"
"(begin"
"(let-values(((lst_221) requires_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_221)))"
"((letrec-values(((for-loop_235)"
"(lambda(lst_16)"
"(begin"
" 'for-loop"
"(if(pair? lst_16)"
"(let-values(((phase+reqs_0)(unsafe-car lst_16))"
"((rest_4)(unsafe-cdr lst_16)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((phase_34)"
"(car"
" phase+reqs_0)))"
"(begin"
"(let-values(((lst_262)"
"(cdr"
" phase+reqs_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_262)))"
"((letrec-values(((for-loop_236)"
"(lambda(lst_78)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_78)"
"(let-values(((req_4)"
"(unsafe-car"
" lst_78))"
"((rest_36)"
"(unsafe-cdr"
" lst_78)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((mpi_43)"
"(module-path-index-shift"
" req_4"
" original-self_0"
" self_20)))"
"(let-values(((mpi2_1)"
" mpi_43)"
"((s3_0)"
" s_3)"
"((self4_3)"
" self_20)"
"((s5_1)"
" s_3)"
"((ns6_0)"
" ns_59)"
"((temp7_1)"
"(phase+"
" phase_34"
" phase-shift_13))"
"((phase-shift8_0)"
" phase-shift_13)"
"((temp9_2)"
" 'module))"
"(perform-require!78.1"
" #f"
" #t"
" #f"
" #f"
" #f"
" #f"
" 'all"
" temp7_1"
" #f"
" phase-shift8_0"
" #f"
" #f"
" #t"
" temp9_2"
" mpi2_1"
" s3_0"
" self4_3"
" s5_1"
" ns6_0))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_236"
" rest_36)"
"(values))))"
"(values))))))"
" for-loop_236)"
" lst_262)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_235 rest_4)(values))))"
"(values))))))"
" for-loop_235)"
" lst_221)))"
"(values))))"
"(let-values()"
"(let-values(((defined-syms_10)(root-expand-context-defined-syms root-ctx_4)))"
"(begin"
"(let-values(((ht_122) evaled-ld-h_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_122)))"
"((letrec-values(((for-loop_109)"
"(lambda(i_145)"
"(begin"
" 'for-loop"
"(if i_145"
"(let-values(((phase_88 linklet_3)"
"(hash-iterate-key+value ht_122 i_145)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_263)"
"(1/linklet-export-variables"
" linklet_3)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_263)))"
"((letrec-values(((for-loop_237)"
"(lambda(lst_264)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_264)"
"(let-values(((sym_64)"
"(unsafe-car"
" lst_264))"
"((rest_144)"
"(unsafe-cdr"
" lst_264)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_58)"
"(datum->syntax$1"
" s_3"
" sym_64)))"
"(begin"
"(let-values(((id10_0)"
" id_58)"
"((temp11_2)"
"(let-values(((self13_1)"
" self_20)"
"((phase14_1)"
" phase_88)"
"((sym15_0)"
" sym_64))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" self13_1"
" phase14_1"
" sym15_0)))"
"((phase12_0)"
" phase_88))"
"(add-binding!17.1"
" #f"
" #f"
" id10_0"
" temp11_2"
" phase12_0))"
"(add-defined-sym!"
" defined-syms_10"
" phase_88"
" sym_64"
" id_58))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_237"
" rest_144)"
"(values))))"
"(values))))))"
" for-loop_237)"
" lst_263)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_109(hash-iterate-next ht_122 i_145))"
"(values))))"
"(values))))))"
" for-loop_109)"
"(hash-iterate-first ht_122))))"
"(void)"
" root-ctx_4))))))))))"
"(define-values"
"(shift-to-inside-root-context)"
"(lambda(root-context_0)"
"(begin"
"(let-values(((outside-mpi_0)(root-expand-context-self-mpi root-context_0)))"
"(let-values(((inside-mpi_0)(make-self-module-path-index(module-path-index-resolved outside-mpi_0))))"
"(let-values(((v_187) root-context_0))"
"(let-values(((the-struct_54) v_187))"
"(if(root-expand-context/outer? the-struct_54)"
"(let-values(((inner16_0)"
"(let-values(((the-struct_55)(root-expand-context/outer-inner v_187)))"
"(if(root-expand-context/inner? the-struct_55)"
"(let-values(((self-mpi17_0) inside-mpi_0)"
"((all-scopes-stx18_0)"
"(let-values(((temp19_2)"
"(root-expand-context-all-scopes-stx root-context_0))"
"((outside-mpi20_0) outside-mpi_0)"
"((inside-mpi21_0) inside-mpi_0))"
"(syntax-module-path-index-shift13.1"
" #f"
" temp19_2"
" outside-mpi20_0"
" inside-mpi21_0"
" #f))))"
"(root-expand-context/inner2.1"
" self-mpi17_0"
"(root-expand-context/inner-module-scopes the-struct_55)"
"(root-expand-context/inner-top-level-bind-scope the-struct_55)"
" all-scopes-stx18_0"
"(root-expand-context/inner-defined-syms the-struct_55)"
"(root-expand-context/inner-counter the-struct_55)"
"(root-expand-context/inner-lift-key the-struct_55)))"
"                                  (raise-argument-error 'struct-copy \"root-expand-context/inner?\" the-struct_55)))))"
"(root-expand-context/outer1.1"
" inner16_0"
"(root-expand-context/outer-post-expansion the-struct_54)"
"(root-expand-context/outer-use-site-scopes the-struct_54)"
"(root-expand-context/outer-frame-id the-struct_54)))"
"                (raise-argument-error 'struct-copy \"root-expand-context/outer?\" the-struct_54)))))))))"
"(define-values"
"(check-require-access9.1)"
"(lambda(skip-imports1_0"
" linklet3_0"
" import-module-uses4_0"
" import-module-instances5_0"
" insp6_0"
" extra-inspector7_0"
" extra-inspectorsss8_0)"
"(begin"
" 'check-require-access9"
"(let-values(((linklet_4) linklet3_0))"
"(let-values(((skip-num-imports_0) skip-imports1_0))"
"(let-values(((import-module-uses_0) import-module-uses4_0))"
"(let-values(((import-module-instances_0) import-module-instances5_0))"
"(let-values(((insp_10) insp6_0))"
"(let-values(((extra-inspector_6) extra-inspector7_0))"
"(let-values(((extra-inspectorsss_4) extra-inspectorsss8_0))"
"(let-values()"
"(begin"
"(let-values(((lst_41)(list-tail(1/linklet-import-variables linklet_4) skip-num-imports_0))"
"((lst_163) import-module-uses_0)"
"((lst_89) import-module-instances_0)"
"((lst_265)"
"(let-values(((or-part_81) extra-inspectorsss_4))"
"(if or-part_81 or-part_81 import-module-uses_0))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_41)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_163)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_89)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_265)))"
"((letrec-values(((for-loop_237)"
"(lambda(lst_264 lst_261 lst_23 lst_104)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_264)"
"(if(pair? lst_261)(if(pair? lst_23)(pair? lst_104) #f) #f)"
" #f)"
"(let-values(((import-syms_0)(unsafe-car lst_264))"
"((rest_145)(unsafe-cdr lst_264))"
"((mu_7)(unsafe-car lst_261))"
"((rest_85)(unsafe-cdr lst_261))"
"((mi_16)(unsafe-car lst_23))"
"((rest_43)(unsafe-cdr lst_23))"
"((extra-inspectorss_14)(unsafe-car lst_104))"
"((rest_121)(unsafe-cdr lst_104)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_15)"
"(module-instance-module"
" mi_16)))"
"(if(module-no-protected?"
" m_15)"
"(void)"
"(let-values()"
"(let-values(((access_2)"
"(let-values(((or-part_8)"
"(module-access"
" m_15)))"
"(if or-part_8"
" or-part_8"
"(module-compute-access!"
" m_15)))))"
"(begin"
"(let-values(((lst_266)"
" import-syms_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_266)))"
"((letrec-values(((for-loop_238)"
"(lambda(lst_25)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_25)"
"(let-values(((import-sym_0)"
"(unsafe-car"
" lst_25))"
"((rest_9)"
"(unsafe-cdr"
" lst_25)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((a_47)"
"(hash-ref"
"(hash-ref"
" access_2"
"(module-use-phase"
" mu_7)"
" '#hasheq())"
" import-sym_0"
" 'unexported)))"
"(if(let-values(((or-part_21)"
"(eq?"
" a_47"
" 'unexported)))"
"(if or-part_21"
" or-part_21"
"(eq?"
" a_47"
" 'protected)))"
"(let-values()"
"(let-values(((guard-insp_3)"
"(namespace-inspector"
"(module-instance-namespace"
" mi_16))))"
"(if(let-values(((or-part_259)"
"(inspector-superior?"
" insp_10"
" guard-insp_3)))"
"(if or-part_259"
" or-part_259"
"(let-values(((or-part_260)"
"(if extra-inspector_6"
"(inspector-superior?"
" extra-inspector_6"
" guard-insp_3)"
" #f)))"
"(if or-part_260"
" or-part_260"
"(if extra-inspectorsss_4"
"(if extra-inspectorss_14"
"(extra-inspectors-allow?"
"(hash-ref"
" extra-inspectorss_14"
" import-sym_0"
" #f)"
" guard-insp_3)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(error"
" 'link"
"(string-append"
"                                                                                                                                                                                    \"access disallowed by code inspector to ~a variable\\n\""
"                                                                                                                                                                                    \"  variable: ~s\\n\""
"                                                                                                                                                                                    \"  from module: ~a\")"
" a_47"
" import-sym_0"
"(1/module-path-index-resolve"
"(namespace-mpi"
"(module-instance-namespace"
" mi_16))))))))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_238"
" rest_9)"
"(values))))"
"(values))))))"
" for-loop_238)"
" lst_266)))"
"(void)))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_237 rest_145 rest_85 rest_43 rest_121)"
"(values))))"
"(values))))))"
" for-loop_237)"
" lst_41"
" lst_163"
" lst_89"
" lst_265)))"
"(void)))))))))))))"
"(define-values"
"(check-single-require-access)"
"(lambda(mi_17 phase_89 sym_65 insp_11)"
"(begin"
"(let-values(((m_16)(module-instance-module mi_17)))"
"(if(module-no-protected? m_16)"
"(let-values() #t)"
"(let-values()"
"(let-values(((access_3)"
"(let-values(((or-part_261)(module-access m_16)))"
"(if or-part_261 or-part_261(module-compute-access! m_16)))))"
"(let-values(((a_48)(hash-ref(hash-ref access_3 phase_89 '#hasheq()) sym_65 'unexported)))"
"(if(let-values(((or-part_34)(eq? a_48 'unexported)))"
"(if or-part_34 or-part_34(eq? a_48 'protected)))"
"(let-values()"
"(let-values(((guard-insp_4)(namespace-inspector(module-instance-namespace mi_17))))"
"(let-values(((or-part_262)(if insp_11(inspector-superior? insp_11 guard-insp_4) #f)))"
"(if or-part_262 or-part_262(inspector-superior?(current-code-inspector) guard-insp_4)))))"
"(let-values() #t))))))))))"
"(define-values(module-cache)(make-weak-hasheq))"
"(define-values"
"(make-module-cache-key)"
"(lambda(hash-code_6)"
"    (begin (if hash-code_6 (string->symbol (format \"~s\" (list hash-code_6 (current-load-relative-directory)))) #f))))"
"(define-values"
"(module-cache-set!)"
"(lambda(key_10 proc_9)(begin(hash-set! module-cache key_10(make-ephemeron key_10 proc_9)))))"
"(define-values"
"(module-cache-ref)"
"(lambda(key_66)"
"(begin(let-values(((e_72)(hash-ref module-cache key_66 #f)))(if e_72(ephemeron-value e_72) #f)))))"
"(define-values(current-module-declare-as-predefined)(make-parameter #f))"
"(define-values"
"(eval-module8.1)"
"(lambda(namespace1_2 supermodule-name3_0 with-submodules?2_0 c7_0)"
"(begin"
" 'eval-module8"
"(let-values(((c_25) c7_0))"
"(let-values(((ns_60)(if(eq? namespace1_2 unsafe-undefined)(1/current-namespace) namespace1_2)))"
"(let-values(((with-submodules?_1) with-submodules?2_0))"
"(let-values(((supermodule-name_1) supermodule-name3_0))"
"(let-values()"
"(let-values()"
"(let-values(((dh_0 h_1 data-instance_0 declaration-instance_0)"
"(compiled-module->dh+h+data-instance+declaration-instance c_25)))"
"(let-values(((syntax-literals-data-instance_0)"
"(if(compiled-in-memory? c_25)"
"(make-syntax-literal-data-instance-from-compiled-in-memory c_25)"
"(let-values(((l_64)(hash-ref h_1 'stx-data #f)))"
"(if l_64"
"(let-values()"
"(1/instantiate-linklet"
"(1/eval-linklet l_64)"
"(list deserialize-instance data-instance_0)))"
"(if(eq?(hash-ref h_1 'module->namespace #f) 'empty)"
"(let-values() empty-syntax-literals-instance/empty-namespace)"
"(let-values() empty-syntax-literals-data-instance)))))))"
"(let-values(((decl_0)"
"(lambda(key_67)"
"(begin 'decl(1/instance-variable-value declaration-instance_0 key_67)))))"
"(let-values(((pre-submodule-names_0)(hash-ref h_1 'pre null)))"
"(let-values(((post-submodule-names_0)(hash-ref h_1 'post null)))"
"(let-values(((default-name_1)(hash-ref h_1 'name 'module)))"
"(let-values(((cache-key_0)"
"(make-module-cache-key"
"(if(null? pre-submodule-names_0)"
"(if(null? post-submodule-names_0)(hash-ref h_1 'hash-code #f) #f)"
" #f))))"
"(let-values(((cross-phase-persistent?_1)(hash-ref h_1 'cross-phase-persistent? #f)))"
"(let-values(((min-phase_2)(hash-ref h_1 'min-phase 0)))"
"(let-values(((max-phase_2)(hash-ref h_1 'max-phase 0)))"
"(let-values(((language-info_1)(hash-ref h_1 'language-info #f)))"
"(let-values(((phases-h_0)"
"(let-values(((start_37) min-phase_2)"
"((end_26)(add1 max-phase_2))"
"((inc_20) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_37 end_26 inc_20)))"
"((letrec-values(((for-loop_237)"
"(lambda(table_179 pos_99)"
"(begin"
" 'for-loop"
"(if(< pos_99 end_26)"
"(let-values(((phase-level_17)"
" pos_99))"
"(let-values(((table_180)"
"(let-values(((v_188)"
"(hash-ref"
" h_1"
" phase-level_17"
" #f)))"
"(begin"
" #t"
"((letrec-values(((for-loop_110)"
"(lambda(table_181)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_182)"
"(let-values(((table_111)"
" table_181))"
"(if v_188"
"(let-values(((table_183)"
" table_111))"
"(let-values(((table_184)"
"(let-values()"
"(let-values(((key_68"
" val_57)"
"(let-values()"
"(values"
" phase-level_17"
"(1/eval-linklet"
" v_188)))))"
"(hash-set"
" table_183"
" key_68"
" val_57)))))"
"(values"
" table_184)))"
" table_111))))"
" table_182))))))"
" for-loop_110)"
" table_179)))))"
"(if(not #f)"
"(for-loop_237"
" table_180"
"(+ pos_99 inc_20))"
" table_180)))"
" table_179)))))"
" for-loop_237)"
" '#hash()"
" start_37)))))"
"(let-values(((syntax-literals-linklet_0)"
"(let-values(((l_14)(hash-ref h_1 'stx #f)))"
"(if l_14(1/eval-linklet l_14) #f))))"
"(let-values(((extra-inspector_7)"
"(if(compiled-in-memory? c_25)"
"(compiled-in-memory-compile-time-inspector c_25)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_1)"
"(if(compiled-in-memory? c_25)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_25)"
" '#hasheqv())))"
"(let-values(((requires_4)(decl_0 'requires)))"
"(let-values(((provides_8)(decl_0 'provides)))"
"(let-values(((original-self_1)(decl_0 'self-mpi)))"
"(let-values(((phase-to-link-modules_0)"
"(decl_0 'phase-to-link-modules)))"
"(let-values(((create-root-expand-context-from-module_0)"
"(make-create-root-expand-context-from-module"
" requires_4"
" phases-h_0)))"
"(let-values(((declare-submodules_0)"
"(if dh_0"
"(lambda(ns_61 names_0 declare-name_0 pre?_0)"
"(begin"
" 'declare-submodules"
"(if(compiled-in-memory? c_25)"
"(begin"
"(let-values(((lst_19)"
"(if pre?_0"
"(compiled-in-memory-pre-compiled-in-memorys"
" c_25)"
"(compiled-in-memory-post-compiled-in-memorys"
" c_25))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_19)))"
"((letrec-values(((for-loop_15)"
"(lambda(lst_267)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_267)"
"(let-values(((c_26)"
"(unsafe-car"
" lst_267))"
"((rest_146)"
"(unsafe-cdr"
" lst_267)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((c12_0)"
" c_26)"
"((ns13_0)"
" ns_61)"
"((declare-name14_0)"
" declare-name_0))"
"(eval-module8.1"
" ns13_0"
" declare-name14_0"
" #t"
" c12_0)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_15"
" rest_146)"
"(values))))"
"(values))))))"
" for-loop_15)"
" lst_19)))"
"(void))"
"(begin"
"(let-values(((lst_268) names_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_268)))"
"((letrec-values(((for-loop_239)"
"(lambda(lst_176)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_176)"
"(let-values(((name_48)"
"(unsafe-car"
" lst_176))"
"((rest_93)"
"(unsafe-cdr"
" lst_176)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((sm-cd_0)"
"(hash-ref"
" dh_0"
" name_48"
" #f)))"
"(begin"
"(if sm-cd_0"
"(void)"
"(let-values()"
"(error"
"                                                                                                                                                             \"missing submodule declaration:\""
" name_48)))"
"(let-values(((sm-cd15_0)"
" sm-cd_0)"
"((ns16_0)"
" ns_61)"
"((declare-name17_0)"
" declare-name_0))"
"(eval-module8.1"
" ns16_0"
" declare-name17_0"
" #t"
" sm-cd15_0)))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_239"
" rest_93)"
"(values))))"
"(values))))))"
" for-loop_239)"
" lst_268)))"
"(void)))))"
" void)))"
"(let-values(((declare-this-module_0)"
"(lambda(ns_62)"
"(begin"
" 'declare-this-module"
"(let-values(((m_17)"
"(let-values(((temp22_3)"
"(1/current-module-declare-source))"
"((original-self23_0)"
" original-self_1)"
"((requires24_0)"
" requires_4)"
"((provides25_0)"
" provides_8)"
"((language-info26_0)"
" language-info_1)"
"((min-phase27_0)"
" min-phase_2)"
"((max-phase28_0)"
" max-phase_2)"
"((cross-phase-persistent?29_0)"
" cross-phase-persistent?_1)"
"((temp30_2)"
"(current-module-declare-as-predefined))"
"((temp31_1)"
"(append"
" pre-submodule-names_0"
" post-submodule-names_0))"
"((supermodule-name32_0)"
" supermodule-name_1)"
"((temp33_0)"
"(lambda()"
"(get-all-variables"
" phases-h_0)))"
"((temp34_2)"
"(lambda(phase-level_18"
" ns_63"
" insp_12)"
"(module-linklet-info2.1"
"(hash-ref"
" phases-h_0"
" phase-level_18"
" #f)"
"(hash-ref"
" phase-to-link-modules_0"
" phase-level_18"
" #f)"
" original-self_1"
" insp_12"
" extra-inspector_7"
"(hash-ref"
" phase-to-link-extra-inspectorsss_1"
" phase-level_18"
" #f))))"
"((temp35_0)"
"(lambda(bulk-binding-registry_13)"
"(force-syntax-deserialize"
" syntax-literals-data-instance_0"
" bulk-binding-registry_13)))"
"((temp36_1)"
"(lambda(data-box_2"
" ns_64"
" phase-shift_15"
" self_21"
" bulk-binding-registry_14"
" insp_13)"
"(if(unbox"
" data-box_2)"
"(void)"
"(let-values()"
"(init-instance-data!"
" data-box_2"
" cache-key_0"
" ns_64"
" syntax-literals-linklet_0"
" data-instance_0"
" syntax-literals-data-instance_0"
" phase-shift_15"
" original-self_1"
" self_21"
" bulk-binding-registry_14"
" insp_13"
" create-root-expand-context-from-module_0)))))"
"((temp37_0)"
"(lambda(data-box_3"
" ns_65"
" phase-shift_16"
" phase-level_19"
" self_22"
" bulk-binding-registry_15"
" insp_14)"
"(let-values()"
"(let-values(((syntax-literals-instance_0)"
"(instance-data-syntax-literals-instance"
"(unbox"
" data-box_3))))"
"(let-values(((phase-linklet_0)"
"(hash-ref"
" phases-h_0"
" phase-level_19"
" #f)))"
"(if phase-linklet_0"
"(let-values()"
"(let-values(((module-uses_0)"
"(hash-ref"
" phase-to-link-modules_0"
" phase-level_19)))"
"(let-values(((import-module-instances_1"
" import-instances_0)"
"(let-values(((mis_1"
" is_0)"
"(let-values(((lst_187)"
" module-uses_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_187)))"
"((letrec-values(((for-loop_3)"
"(lambda(mis_2"
" is_1"
" lst_183)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_183)"
"(let-values(((mu_8)"
"(unsafe-car"
" lst_183))"
"((rest_98)"
"(unsafe-cdr"
" lst_183)))"
"(let-values(((mis_3"
" is_2)"
"(let-values(((mis_4)"
" mis_2)"
"((is_3)"
" is_1))"
"(let-values(((mis_5"
" is_4)"
"(let-values()"
"(let-values(((mis45_0"
" is46_0)"
"(let-values()"
"(let-values(((ns47_1)"
" ns_65)"
"((mu48_0)"
" mu_8)"
"((original-self49_0)"
" original-self_1)"
"((self50_0)"
" self_22)"
"((temp51_0)"
"(phase+"
"(phase-"
" phase-level_19"
"(module-use-phase"
" mu_8))"
" phase-shift_16)))"
"(namespace-module-use->module+linklet-instances144.1"
" temp51_0"
" original-self49_0"
" self50_0"
" ns47_1"
" mu48_0)))))"
"(values"
"(cons"
" mis45_0"
" mis_4)"
"(cons"
" is46_0"
" is_3))))))"
"(values"
" mis_5"
" is_4)))))"
"(if(not"
" #f)"
"(for-loop_3"
" mis_3"
" is_2"
" rest_98)"
"(values"
" mis_3"
" is_2))))"
"(values"
" mis_2"
" is_1))))))"
" for-loop_3)"
" null"
" null"
" lst_187)))))"
"(values"
"(reverse$1"
" mis_1)"
"(reverse$1"
" is_0)))))"
"(let-values((()"
"(begin"
"(let-values(((phase-linklet38_0)"
" phase-linklet_0)"
"((temp39_3)"
" 2)"
"((module-uses40_0)"
" module-uses_0)"
"((import-module-instances41_0)"
" import-module-instances_1)"
"((insp42_0)"
" insp_14)"
"((extra-inspector43_0)"
" extra-inspector_7)"
"((temp44_1)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_1"
" phase-level_19"
" #f)))"
"(check-require-access9.1"
" temp39_3"
" phase-linklet38_0"
" module-uses40_0"
" import-module-instances41_0"
" insp42_0"
" extra-inspector43_0"
" temp44_1))"
"(values))))"
"(let-values(((module-body-instance-instance_0)"
"(let-values(((temp52_0)"
"(lambda(name_49"
" val_58)"
"(namespace-set-transformer!"
" ns_65"
"(sub1"
" phase-level_19)"
" name_49"
" val_58))))"
"(make-module-body-instance-instance18.1"
" temp52_0))))"
"(let-values(((instantiate-body_0)"
"(lambda()"
"(begin"
" 'instantiate-body"
"(1/instantiate-linklet"
" phase-linklet_0"
"(list*"
" syntax-literals-instance_0"
" module-body-instance-instance_0"
" import-instances_0)"
"(namespace->instance"
" ns_65"
" phase-level_19))))))"
"(if(zero-phase?"
" phase-level_19)"
"(let-values()"
"(if(zero-phase?"
" phase-shift_16)"
"(let-values()"
"(instantiate-body_0))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" ns_65)"
"(let-values()"
"(instantiate-body_0))))))"
"(let-values()"
"(let-values(((ns-1_0)"
"(namespace->namespace-at-phase"
" ns_65"
"(phase+"
" phase-shift_16"
"(sub1"
" phase-level_19)))))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(delay"
"(lambda()"
"(begin"
" '...nder/eval/module.rkt:214:76"
"(let-values(((ns-153_0)"
" ns-1_0))"
"(make-expand-context10.1"
" #f"
" #f"
" #f"
" ns-153_0)))))"
" 1/current-namespace"
" ns_65"
" current-module-code-inspector"
" insp_14)"
"(let-values()"
"(instantiate-body_0))))))))))))"
"(void))))))))"
"(make-module39.1"
" cross-phase-persistent?29_0"
" temp35_0"
" temp33_0"
" temp37_0"
" language-info26_0"
" max-phase28_0"
" min-phase27_0"
" #f"
" temp34_2"
" temp30_2"
" temp36_1"
" #f"
" provides25_0"
" requires24_0"
" original-self23_0"
" temp22_3"
" temp31_1"
" supermodule-name32_0))))"
"(let-values(((declare-name_1)"
"(substitute-module-declare-name"
" default-name_1)))"
"(begin"
"(if with-submodules?_1"
"(let-values()"
"(declare-submodules_0"
" ns_62"
" pre-submodule-names_0"
" declare-name_1"
" #t))"
"(void))"
"(let-values(((ns18_0) ns_62)"
"((m19_0) m_17)"
"((declare-name20_0)"
" declare-name_1)"
"((with-submodules?21_0)"
" with-submodules?_1))"
"(declare-module!58.1"
" with-submodules?21_0"
" ns18_0"
" m19_0"
" declare-name20_0))"
"(if with-submodules?_1"
"(let-values()"
"(declare-submodules_0"
" ns_62"
" post-submodule-names_0"
" declare-name_1"
" #f))"
"(void)))))))))"
"(begin"
"(if cache-key_0"
"(let-values()"
"(module-cache-set!"
" cache-key_0"
" declare-this-module_0))"
"(void))"
"(declare-this-module_0"
" ns_60)))))))))))))))))))))))))))))))))"
"(define-values"
"(struct:instance-data instance-data11.1 instance-data? instance-data-syntax-literals-instance instance-data-cache-key)"
"(let-values(((struct:_73 make-_73 ?_73 -ref_73 -set!_73)"
"(let-values()"
"(let-values()"
"(make-struct-type 'instance-data #f 2 0 #f null(current-inspector) #f '(0 1) #f 'instance-data)))))"
"(values"
" struct:_73"
" make-_73"
" ?_73"
"(make-struct-field-accessor -ref_73 0 'syntax-literals-instance)"
"(make-struct-field-accessor -ref_73 1 'cache-key))))"
"(define-values"
"(init-instance-data!)"
"(lambda(data-box_4"
" cache-key_1"
" ns_66"
" syntax-literals-linklet_1"
" data-instance_1"
" syntax-literals-data-instance_1"
" phase-shift_17"
" original-self_2"
" self_23"
" bulk-binding-registry_16"
" insp_15"
" create-root-expand-context-from-module_1)"
"(begin"
"(let-values((()"
"(begin"
"(if(not(load-on-demand-enabled))"
"(let-values()"
"(force-syntax-deserialize syntax-literals-data-instance_1 bulk-binding-registry_16))"
"(void))"
"(values))))"
"(let-values(((inst_1)"
"(let-values(((ns55_1) ns_66)"
"((phase-shift56_1) phase-shift_17)"
"((self57_0) self_23)"
"((insp58_0) insp_15)"
"((bulk-binding-registry59_0) bulk-binding-registry_16)"
"((temp60_0)"
"                                    (lambda (name_50 val_59) (error \"shouldn't get here for the root-ctx linklet\"))))"
"(make-instance-instance13.1"
" bulk-binding-registry59_0"
" insp58_0"
" ns55_1"
" phase-shift56_1"
" self57_0"
" temp60_0))))"
"(let-values(((syntax-literals-instance_1)"
"(if syntax-literals-linklet_1"
"(1/instantiate-linklet"
" syntax-literals-linklet_1"
"(list deserialize-instance data-instance_1 syntax-literals-data-instance_1 inst_1))"
" empty-syntax-literals-instance)))"
"(let-values((()"
"(begin"
"(set-box! data-box_4(instance-data11.1 syntax-literals-instance_1 cache-key_1))"
"(values))))"
"(let-values(((get-encoded-root-expand-ctx_0)"
"(1/instance-variable-value syntax-literals-instance_1 'get-encoded-root-expand-ctx)))"
"(if(eq? get-encoded-root-expand-ctx_0 'empty)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_66"
"(delay"
"(lambda()"
"(begin"
" '...nder/eval/module.rkt:279:39"
"(shift-to-inside-root-context"
"(let-values(((self61_0) self_23))"
"(make-root-expand-context13.1 #f null unsafe-undefined unsafe-undefined self61_0))))))))"
"(if(procedure? get-encoded-root-expand-ctx_0)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_66"
"(delay"
"(lambda()"
"(begin"
" '...nder/eval/module.rkt:283:39"
"(shift-to-inside-root-context"
"(root-expand-context-decode-for-module(get-encoded-root-expand-ctx_0) self_23)))))))"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" ns_66"
"(delay"
"(lambda()"
"(begin"
" '...nder/eval/module.rkt:290:39"
"(shift-to-inside-root-context"
"(create-root-expand-context-from-module_1"
" ns_66"
" phase-shift_17"
" original-self_2"
" self_23)))))))))))))))))"
"(define-values"
"(force-syntax-deserialize)"
"(lambda(syntax-literals-data-instance_2 bulk-binding-registry_17)"
"(begin"
"(if(let-values(((or-part_263)(eq? syntax-literals-data-instance_2 empty-syntax-literals-data-instance)))"
"(if or-part_263"
" or-part_263"
"(eq? syntax-literals-data-instance_2 empty-syntax-literals-instance/empty-namespace)))"
"(void)"
"(let-values()"
"(let-values(((deserialize-syntax_0)"
"(1/instance-variable-value syntax-literals-data-instance_2 deserialize-syntax-id)))"
"(if deserialize-syntax_0(let-values()(deserialize-syntax_0 bulk-binding-registry_17))(void))))))))"
"(define-values"
"(compiled-module->dh+h)"
"(lambda(c_27)"
"(begin"
"(let-values(((ld/h_0)(if(compiled-in-memory? c_27)(compiled-in-memory-linklet-directory c_27) c_27)))"
"(let-values(((dh_1)"
"(if(1/linklet-directory? ld/h_0)"
"(let-values()(1/linklet-directory->hash ld/h_0))"
"(let-values() #f))))"
"(let-values(((h_2)(1/linklet-bundle->hash(if dh_1(hash-ref dh_1 #f) ld/h_0))))(values dh_1 h_2)))))))"
"(define-values"
"(compiled-module->h)"
"(lambda(c_28)(begin(let-values(((dh_2 h_3)(compiled-module->dh+h c_28))) h_3))))"
"(define-values"
"(compiled-module->dh+h+data-instance+declaration-instance)"
"(lambda(c_29)"
"(begin"
"(let-values(((dh_3 h_4)(compiled-module->dh+h c_29)))"
"(let-values(((data-instance_2)"
"(if(compiled-in-memory? c_29)"
"(make-data-instance-from-compiled-in-memory c_29)"
"(1/instantiate-linklet(1/eval-linklet(hash-ref h_4 'data))(list deserialize-instance)))))"
"(let-values(((declaration-instance_1)"
"(if(if(compiled-in-memory? c_29)(compiled-in-memory-original-self c_29) #f)"
"(make-declaration-instance-from-compiled-in-memory c_29)"
"(1/instantiate-linklet"
"(1/eval-linklet(hash-ref h_4 'decl))"
"(list deserialize-instance data-instance_2)))))"
"(values dh_3 h_4 data-instance_2 declaration-instance_1)))))))"
"(define-values"
"(compiled-module->declaration-instance)"
"(lambda(c_30)"
"(begin"
"(let-values(((dh_4 h_5 data-instance_3 declaration-instance_2)"
"(compiled-module->dh+h+data-instance+declaration-instance c_30)))"
" declaration-instance_2))))"
"(define-values"
"(compiled-module->h+declaration-instance)"
"(lambda(c_31)"
"(begin"
"(let-values(((dh_5 h_6 data-instance_4 declaration-instance_3)"
"(compiled-module->dh+h+data-instance+declaration-instance c_31)))"
"(values h_6 declaration-instance_3)))))"
"(define-values"
"(make-data-instance-from-compiled-in-memory)"
"(lambda(cim_6)(begin(1/make-instance 'data #f 'constant mpi-vector-id(compiled-in-memory-mpis cim_6)))))"
"(define-values"
"(make-declaration-instance-from-compiled-in-memory)"
"(lambda(cim_7)"
"(begin"
"(1/make-instance"
" 'decl"
" #f"
" 'constant"
" 'self-mpi"
"(compiled-in-memory-original-self cim_7)"
" 'requires"
"(compiled-in-memory-requires cim_7)"
" 'provides"
"(compiled-in-memory-provides cim_7)"
" 'phase-to-link-modules"
"(compiled-in-memory-phase-to-link-module-uses cim_7)))))"
"(define-values"
"(make-syntax-literal-data-instance-from-compiled-in-memory)"
"(lambda(cim_8)"
"(begin"
"(1/make-instance"
" 'syntax-literal-data"
" #f"
" #f"
" deserialize-syntax-id"
" void"
" deserialized-syntax-vector-id"
"(compiled-in-memory-syntax-literals cim_8)))))"
"(define-values"
"(empty-syntax-literals-instance/empty-namespace)"
"(1/make-instance"
" 'empty-stx/empty-ns"
" #f"
" 'constant"
" get-syntax-literal!-id"
"(lambda(pos_100) #f)"
" 'get-encoded-root-expand-ctx"
" 'empty))"
"(define-values"
"(get-all-variables)"
"(lambda(phases-h_1)"
"(begin"
"(let-values(((ht_123) phases-h_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_123)))"
"((letrec-values(((for-loop_240)"
"(lambda(table_185 i_146)"
"(begin"
" 'for-loop"
"(if i_146"
"(let-values(((phase_90 linklet_5)(hash-iterate-key+value ht_123 i_146)))"
"(let-values(((table_186)"
"(let-values(((table_187) table_185))"
"(let-values(((table_140)"
"(let-values()"
"(let-values(((key_69 val_60)"
"(let-values()"
"(values"
" phase_90"
"(1/linklet-export-variables"
" linklet_5)))))"
"(hash-set table_187 key_69 val_60)))))"
"(values table_140)))))"
"(if(not #f)"
"(for-loop_240 table_186(hash-iterate-next ht_123 i_146))"
" table_186)))"
" table_185)))))"
" for-loop_240)"
" '#hash()"
"(hash-iterate-first ht_123)))))))"
"(define-values"
"(provides->api-provides)"
"(lambda(provides_9 self_24)"
"(begin"
"(let-values(((extract_0)"
"(lambda(ok?_26)"
"(begin"
" 'extract"
"(let-values(((result-l_0)"
"(reverse$1"
"(let-values(((ht_124) provides_9))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_124)))"
"((letrec-values(((for-loop_103)"
"(lambda(fold-var_59 i_147)"
"(begin"
" 'for-loop"
"(if i_147"
"(let-values(((phase_91 at-phase_11)"
"(hash-iterate-key+value ht_124 i_147)))"
"(let-values(((fold-var_60)"
"(let-values(((l_65)"
"(reverse$1"
"(let-values(((ht_125)"
" at-phase_11))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_125)))"
"((letrec-values(((for-loop_241)"
"(lambda(fold-var_219"
" i_148)"
"(begin"
" 'for-loop"
"(if i_148"
"(let-values(((sym_66"
" b/p_1)"
"(hash-iterate-key+value"
" ht_125"
" i_148)))"
"(let-values(((fold-var_220)"
"(let-values(((fold-var_221)"
" fold-var_219))"
"(if(ok?_26"
" b/p_1)"
"(let-values(((fold-var_222)"
" fold-var_221))"
"(let-values(((fold-var_223)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((b_64)"
"(provided-as-binding"
" b/p_1)))"
"(list"
" sym_66"
"(if(eq?"
" self_24"
"(module-binding-module"
" b_64))"
"(let-values()"
" null)"
"(let-values()"
"(reverse$1"
"(let-values(((lst_87)"
"(cons"
" b_64"
"(module-binding-extra-nominal-bindings"
" b_64))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_87)))"
"((letrec-values(((for-loop_242)"
"(lambda(fold-var_224"
" lst_269)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_269)"
"(let-values(((b_76)"
"(unsafe-car"
" lst_269))"
"((rest_147)"
"(unsafe-cdr"
" lst_269)))"
"(let-values(((fold-var_29)"
"(let-values(((fold-var_30)"
" fold-var_224))"
"(let-values(((fold-var_31)"
"(let-values()"
"(cons"
"(let-values()"
"(if(if(eqv?"
"(module-binding-nominal-phase"
" b_76)"
" phase_91)"
"(eq?"
"(module-binding-nominal-sym"
" b_76)"
" sym_66)"
" #f)"
"(let-values()"
"(module-binding-nominal-module"
" b_76))"
"(let-values()"
"(list"
"(module-binding-nominal-module"
" b_76)"
"(module-binding-phase"
" b_76)"
"(module-binding-nominal-sym"
" b_76)"
"(module-binding-nominal-phase"
" b_76)))))"
" fold-var_30))))"
"(values"
" fold-var_31)))))"
"(if(not"
" #f)"
"(for-loop_242"
" fold-var_29"
" rest_147)"
" fold-var_29)))"
" fold-var_224)))))"
" for-loop_242)"
" null"
" lst_87)))))))))"
" fold-var_222))))"
"(values"
" fold-var_223)))"
" fold-var_221))))"
"(if(not"
" #f)"
"(for-loop_241"
" fold-var_220"
"(hash-iterate-next"
" ht_125"
" i_148))"
" fold-var_220)))"
" fold-var_219)))))"
" for-loop_241)"
" null"
"(hash-iterate-first"
" ht_125)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_109)"
"(lambda(fold-var_71)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_225)"
"(let-values(((fold-var_32)"
" fold-var_71))"
"(if(null?"
" l_65)"
" fold-var_32"
"(let-values(((fold-var_33)"
" fold-var_32))"
"(let-values(((fold-var_34)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_91"
"(let-values(((l4_0)"
" l_65)"
"((symbol<?5_0)"
" symbol<?)"
"((car6_0)"
" car))"
"(sort7.1"
" #f"
" car6_0"
" l4_0"
" symbol<?5_0))))"
" fold-var_33))))"
"(values"
" fold-var_34)))))))"
" fold-var_225))))))"
" for-loop_109)"
" fold-var_59)))))"
"(if(not #f)"
"(for-loop_103"
" fold-var_60"
"(hash-iterate-next ht_124 i_147))"
" fold-var_60)))"
" fold-var_59)))))"
" for-loop_103)"
" null"
"(hash-iterate-first ht_124)))))))"
"(let-values(((result-l1_0) result-l_0)((phase<?2_0) phase<?)((car3_0) car))"
"(sort7.1 #f car3_0 result-l1_0 phase<?2_0)))))))"
"(values"
"(extract_0(lambda(b/p_2)(not(provided-as-transformer? b/p_2))))"
"(extract_0 provided-as-transformer?))))))"
"(define-values"
"(variables->api-nonprovides)"
"(lambda(provides_10 all-vars_0)"
"(begin"
"(let-values(((result-l_1)"
"(reverse$1"
"(let-values(((ht_85) all-vars_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_85)))"
"((letrec-values(((for-loop_119)"
"(lambda(fold-var_171 i_95)"
"(begin"
" 'for-loop"
"(if i_95"
"(let-values(((phase_92 vars_0)(hash-iterate-key+value ht_85 i_95)))"
"(let-values(((fold-var_173)"
"(let-values(((fold-var_226) fold-var_171))"
"(let-values(((l_66)"
"(let-values(((syms_19)"
"(hash-ref"
" provides_10"
" phase_92"
" '#hasheq())))"
"(reverse$1"
"(let-values(((lst_18) vars_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_18)))"
"((letrec-values(((for-loop_219)"
"(lambda(fold-var_174"
" lst_270)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_270)"
"(let-values(((var-sym_5)"
"(unsafe-car"
" lst_270))"
"((rest_148)"
"(unsafe-cdr"
" lst_270)))"
"(let-values(((fold-var_76)"
"(let-values(((fold-var_227)"
" fold-var_174))"
"(if(hash-ref"
" syms_19"
" var-sym_5"
" #f)"
" fold-var_227"
"(let-values(((fold-var_228)"
" fold-var_227))"
"(let-values(((fold-var_229)"
"(let-values()"
"(cons"
"(let-values()"
" var-sym_5)"
" fold-var_228))))"
"(values"
" fold-var_229)))))))"
"(if(not"
" #f)"
"(for-loop_219"
" fold-var_76"
" rest_148)"
" fold-var_76)))"
" fold-var_174)))))"
" for-loop_219)"
" null"
" lst_18)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_112)"
"(lambda(fold-var_66)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((fold-var_67)"
"(let-values(((fold-var_18)"
" fold-var_66))"
"(if(null?"
" l_66)"
" fold-var_18"
"(let-values(((fold-var_19)"
" fold-var_18))"
"(let-values(((fold-var_20)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_92"
"(let-values(((l10_0)"
" l_66)"
"((symbol<?11_0)"
" symbol<?))"
"(sort7.1"
" #f"
" #f"
" l10_0"
" symbol<?11_0))))"
" fold-var_19))))"
"(values"
" fold-var_20)))))))"
" fold-var_67))))))"
" for-loop_112)"
" fold-var_226))))))"
"(if(not #f)"
"(for-loop_119 fold-var_173(hash-iterate-next ht_85 i_95))"
" fold-var_173)))"
" fold-var_171)))))"
" for-loop_119)"
" null"
"(hash-iterate-first ht_85)))))))"
"(let-values(((result-l7_0) result-l_1)((phase<?8_0) phase<?)((car9_0) car))"
"(sort7.1 #f car9_0 result-l7_0 phase<?8_0))))))"
"(define-values"
"(compiled->linklet-directory-or-bundle)"
"(lambda(c_32)(begin(if(compiled-in-memory? c_32)(compiled-in-memory-linklet-directory c_32) c_32))))"
"(define-values"
"(module-compiled-current-name)"
"(lambda(c_33)"
"(begin"
"(let-values(((ld_1)(compiled->linklet-directory-or-bundle c_33)))"
"(let-values(((b_15)(if(1/linklet-bundle? ld_1) ld_1(hash-ref(1/linklet-directory->hash ld_1) #f))))"
"(hash-ref(1/linklet-bundle->hash b_15) 'name))))))"
"(define-values"
"(module-compiled-immediate-name)"
"(lambda(c_25)"
"(begin(let-values(((n_28)(module-compiled-current-name c_25)))(if(pair? n_28)(car(reverse$1 n_28)) n_28)))))"
"(define-values"
"(change-module-name)"
"(lambda(c_34 name_3 prefix_4)"
"(begin"
"(let-values(((full-name_0)(if(null? prefix_4) name_3(append prefix_4(list name_3)))))"
"(let-values(((next-prefix_0)(if(null? prefix_4)(list name_3) full-name_0)))"
"(let-values(((recur_0)"
"(lambda(sub-c_0 name_51)"
"(begin"
" 'recur"
"(if(equal?(module-compiled-current-name sub-c_0)(append next-prefix_0(list name_51)))"
" sub-c_0"
"(change-module-name sub-c_0 name_51 next-prefix_0))))))"
"(if(compiled-in-memory? c_34)"
"(let-values()"
"(let-values(((change-submodule-name_0)"
"(lambda(sub-c_1)"
"(begin"
" 'change-submodule-name"
"(recur_0 sub-c_1(module-compiled-immediate-name sub-c_1))))))"
"(let-values(((pre-compiled-in-memorys_0)"
"(map2 change-submodule-name_0(compiled-in-memory-pre-compiled-in-memorys c_34))))"
"(let-values(((post-compiled-in-memorys_0)"
"(map2 change-submodule-name_0(compiled-in-memory-post-compiled-in-memorys c_34))))"
"(let-values(((the-struct_6) c_34))"
"(if(compiled-in-memory? the-struct_6)"
"(let-values(((pre-compiled-in-memorys8_0) pre-compiled-in-memorys_0)"
"((post-compiled-in-memorys9_0) post-compiled-in-memorys_0)"
"((linklet-directory10_0)"
"(let-values(((temp11_3)"
"(update-one-name"
"(let-values(((ld_2)"
"(compiled->linklet-directory-or-bundle c_34)))"
"(if(1/linklet-bundle? ld_2)"
" ld_2"
"(hash-ref(1/linklet-directory->hash ld_2) #f)))"
" full-name_0))"
"((temp12_1)(symbol? full-name_0))"
"((temp13_1)"
"(append pre-compiled-in-memorys_0 post-compiled-in-memorys_0)))"
"(rebuild-linklet-directory5.1 temp12_1 temp11_3 temp13_1))))"
"(compiled-in-memory1.1"
" linklet-directory10_0"
"(compiled-in-memory-original-self the-struct_6)"
"(compiled-in-memory-requires the-struct_6)"
"(compiled-in-memory-provides the-struct_6)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_6)"
"(compiled-in-memory-compile-time-inspector the-struct_6)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_6)"
"(compiled-in-memory-mpis the-struct_6)"
"(compiled-in-memory-syntax-literals the-struct_6)"
" pre-compiled-in-memorys8_0"
" post-compiled-in-memorys9_0"
"(compiled-in-memory-namespace-scopes the-struct_6)"
"(compiled-in-memory-purely-functional? the-struct_6)))"
"                          (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_6)))))))"
"(if(1/linklet-directory? c_34)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_126)(1/linklet-directory->hash c_34)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_126)))"
"((letrec-values(((for-loop_243)"
"(lambda(table_188 i_92)"
"(begin"
" 'for-loop"
"(if i_92"
"(let-values(((key_70 val_61)(hash-iterate-key+value ht_126 i_92)))"
"(let-values(((table_189)"
"(let-values(((table_190) table_188))"
"(let-values(((table_191)"
"(let-values()"
"(let-values(((key_71 val_62)"
"(let-values()"
"(values"
" key_70"
"(if(not key_70)"
"(update-one-name"
" val_61"
" full-name_0)"
"(recur_0"
" val_61"
" key_70))))))"
"(hash-set"
" table_190"
" key_71"
" val_62)))))"
"(values table_191)))))"
"(if(not #f)"
"(for-loop_243 table_189(hash-iterate-next ht_126 i_92))"
" table_189)))"
" table_188)))))"
" for-loop_243)"
" '#hasheq()"
"(hash-iterate-first ht_126))))))"
"(let-values()(update-one-name c_34 full-name_0))))))))))"
"(define-values"
"(update-one-name)"
"(lambda(lb_0 name_52)(begin(1/hash->linklet-bundle(hash-set(1/linklet-bundle->hash lb_0) 'name name_52)))))"
"(define-values"
"(rebuild-linklet-directory5.1)"
"(lambda(bundle-ok?1_0 main3_0 submods4_0)"
"(begin"
" 'rebuild-linklet-directory5"
"(let-values(((main_0) main3_0))"
"(let-values(((submods_0) submods4_0))"
"(let-values(((bundle-ok?_0) bundle-ok?1_0))"
"(let-values()"
"(if(if(null? submods_0) bundle-ok?_0 #f)"
" main_0"
"(1/hash->linklet-directory"
"(hash-set"
"(let-values(((lst_91) submods_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_91)))"
"((letrec-values(((for-loop_49)"
"(lambda(ht_127 lst_82)"
"(begin"
" 'for-loop"
"(if(pair? lst_82)"
"(let-values(((submod_1)(unsafe-car lst_82))"
"((rest_37)(unsafe-cdr lst_82)))"
"(let-values(((ht_117)"
"(let-values(((ht_118) ht_127))"
"(let-values(((ht_119)"
"(let-values()"
"(let-values(((name_53)"
"(module-compiled-immediate-name"
" submod_1)))"
"(if(hash-ref ht_118 name_53 #f)"
"(let-values()"
"(raise-arguments-error"
" 'module-compiled-submodules"
"                                                                                       \"change would result in duplicate submodule name\""
"                                                                                       \"name\""
" name_53))"
"(let-values()"
"(hash-set"
" ht_118"
" name_53"
"(compiled->linklet-directory-or-bundle"
" submod_1))))))))"
"(values ht_119)))))"
"(if(not #f)(for-loop_49 ht_117 rest_37) ht_117)))"
" ht_127)))))"
" for-loop_49)"
" '#hasheq()"
" lst_91)))"
" #f"
" main_0))))))))))"
"(define-values"
"(1/compiled-expression?)"
"(lambda(c_32)"
"(begin"
" 'compiled-expression?"
"(let-values(((or-part_0)(compiled-in-memory? c_32)))"
"(if or-part_0"
" or-part_0"
"(let-values(((or-part_1)(1/linklet-directory? c_32)))"
"(if or-part_1 or-part_1(1/linklet-bundle? c_32))))))))"
"(define-values"
"(1/compiled-module-expression?)"
"(lambda(c_35)"
"(begin"
" 'compiled-module-expression?"
"(let-values(((ld_3)(compiled->linklet-directory-or-bundle c_35)))"
"(let-values(((or-part_26)"
"(if(1/linklet-directory? ld_3)"
"(if(let-values(((b_77)(hash-ref(1/linklet-directory->hash ld_3) #f #f)))"
"(if b_77(hash-ref(1/linklet-bundle->hash b_77) 'decl #f) #f))"
" #t"
" #f)"
" #f)))"
"(if or-part_26"
" or-part_26"
"(if(1/linklet-bundle? ld_3)(if(hash-ref(1/linklet-bundle->hash ld_3) 'decl #f) #t #f) #f)))))))"
"(define-values"
"(1/module-compiled-name)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((c_36)"
"(begin"
" 'module-compiled-name"
"(begin"
"(if(1/compiled-module-expression? c_36)"
"(void)"
"              (let-values () (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_36)))"
"(module-compiled-current-name c_36))))"
"((c_37 name_54)"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_37)"
"(void)"
"(let-values()"
"                            (raise-argument-error 'module-compiled-name \"compiled-module-expression?\" c_37)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_217)(symbol? name_54)))"
"(if or-part_217"
" or-part_217"
"(if(pair? name_54)(if(list? name_54)(andmap2 symbol? name_54) #f) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-name"
"                               \"(or/c symbol? (cons/c symbol? (non-empty-listof symbol?)))\""
" name_54)))"
"(values))))"
"(let-values(((i-name_0 prefix_5)"
"(if(symbol? name_54)"
"(values name_54 null)"
"(let-values(((r_41)(reverse$1 name_54)))(values(car r_41)(reverse$1(cdr r_41)))))))"
"(change-module-name c_37 i-name_0 prefix_5)))))))))"
"(define-values"
"(1/module-compiled-submodules)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((c_13 non-star?_0)"
"(begin"
" 'module-compiled-submodules"
"(begin"
"(if(1/compiled-module-expression? c_13)"
"(void)"
"              (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_13)))"
"(if(compiled-in-memory? c_13)"
"(let-values()"
"(if non-star?_0"
"(compiled-in-memory-pre-compiled-in-memorys c_13)"
"(compiled-in-memory-post-compiled-in-memorys c_13)))"
"(let-values()"
"(if(1/linklet-directory? c_13)"
"(let-values()"
"(let-values(((ht_69)(1/linklet-directory->hash c_13)))"
"(let-values(((bh_0)(1/linklet-bundle->hash(hash-ref ht_69 #f))))"
"(let-values(((names_1)(hash-ref bh_0(if non-star?_0 'pre 'post) null)))"
"(reverse$1"
"(let-values(((lst_86) names_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_86)))"
"((letrec-values(((for-loop_108)"
"(lambda(fold-var_69 lst_87)"
"(begin"
" 'for-loop"
"(if(pair? lst_87)"
"(let-values(((name_55)(unsafe-car lst_87))"
"((rest_41)(unsafe-cdr lst_87)))"
"(let-values(((fold-var_70)"
"(let-values(((fold-var_27) fold-var_69))"
"(let-values(((fold-var_28)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref ht_69 name_55))"
" fold-var_27))))"
"(values fold-var_28)))))"
"(if(not #f)"
"(for-loop_108 fold-var_70 rest_41)"
" fold-var_70)))"
" fold-var_69)))))"
" for-loop_108)"
" null"
" lst_86))))))))"
"(let-values() null)))))))"
"((c_38 non-star?_1 submods_1)"
"(begin"
"(if(1/compiled-module-expression? c_38)"
"(void)"
"            (let-values () (raise-argument-error 'module-compiled-submodules \"compiled-module-expression?\" c_38)))"
"(if(if(list? submods_1)(andmap2 1/compiled-module-expression? submods_1) #f)"
"(void)"
"(let-values()"
"              (raise-argument-error 'module-compiled-submodules \"(listof compiled-module-expression?)\" submods_1)))"
"(if(if(null? submods_1)"
"(let-values(((or-part_29)(1/linklet-bundle?(compiled->linklet-directory-or-bundle c_38))))"
"(if or-part_29"
" or-part_29"
"(if(compiled-in-memory? c_38)"
"(null?"
"(if non-star?_1"
"(compiled-in-memory-pre-compiled-in-memorys c_38)"
"(compiled-in-memory-post-compiled-in-memorys c_38)))"
" #f)))"
" #f)"
"(let-values() c_38)"
"(if(if(compiled-in-memory? c_38)(andmap2 compiled-in-memory? submods_1) #f)"
"(let-values()"
"(let-values(((pre-compiled-in-memorys_1)"
"(if non-star?_1 submods_1(compiled-in-memory-pre-compiled-in-memorys c_38))))"
"(let-values(((post-compiled-in-memorys_1)"
"(if non-star?_1(compiled-in-memory-post-compiled-in-memorys c_38) submods_1)))"
"(let-values(((n-c_0)(normalize-to-linklet-directory c_38)))"
"(fixup-submodule-names"
"(let-values(((the-struct_47) n-c_0))"
"(if(compiled-in-memory? the-struct_47)"
"(let-values(((pre-compiled-in-memorys3_0) pre-compiled-in-memorys_1)"
"((post-compiled-in-memorys4_0) post-compiled-in-memorys_1)"
"((linklet-directory5_0)"
"(let-values(((temp6_0)"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash"
"(compiled->linklet-directory-or-bundle n-c_0))"
" #f)"
" non-star?_1"
" submods_1))"
"((temp7_2)(symbol?(module-compiled-current-name c_38)))"
"((temp8_2)"
"(append pre-compiled-in-memorys_1 post-compiled-in-memorys_1)))"
"(rebuild-linklet-directory5.1 temp7_2 temp6_0 temp8_2))))"
"(compiled-in-memory1.1"
" linklet-directory5_0"
"(compiled-in-memory-original-self the-struct_47)"
"(compiled-in-memory-requires the-struct_47)"
"(compiled-in-memory-provides the-struct_47)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_47)"
"(compiled-in-memory-compile-time-inspector the-struct_47)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_47)"
"(compiled-in-memory-mpis the-struct_47)"
"(compiled-in-memory-syntax-literals the-struct_47)"
" pre-compiled-in-memorys3_0"
" post-compiled-in-memorys4_0"
"(compiled-in-memory-namespace-scopes the-struct_47)"
"(compiled-in-memory-purely-functional? the-struct_47)))"
"                           (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_47))))))))"
"(let-values()"
"(let-values(((n-c_1)(normalize-to-linklet-directory c_38)))"
"(fixup-submodule-names"
"(let-values(((temp9_3)"
"(reset-submodule-names"
"(hash-ref"
"(1/linklet-directory->hash(compiled->linklet-directory-or-bundle n-c_1))"
" #f)"
" non-star?_1"
" submods_1))"
"((temp10_3)"
"(map2"
" compiled->linklet-directory-or-bundle"
"(append"
"(if non-star?_1 submods_1(1/module-compiled-submodules c_38 #t))"
"(if non-star?_1(1/module-compiled-submodules c_38 #f) submods_1)))))"
"(rebuild-linklet-directory5.1 #f temp9_3 temp10_3)))))))))))))"
"(define-values"
"(1/module-compiled-language-info)"
"(lambda(c_39)"
"(begin"
" 'module-compiled-language-info"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_39)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-compiled-language-info \"compiled-module-expression?\" c_39)))"
"(values))))"
"(let-values(((h_7)(compiled-module->h c_39)))(hash-ref h_7 'language-info #f))))))))"
"(define-values"
"(1/module-compiled-imports)"
"(lambda(c_40)"
"(begin"
" 'module-compiled-imports"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_40)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-compiled-imports \"compiled-module-expression?\" c_40)))"
"(values))))"
"(let-values(((inst_2)(compiled-module->declaration-instance c_40)))"
"(1/instance-variable-value inst_2 'requires))))))))"
"(define-values"
"(1/module-compiled-exports)"
"(lambda(c_41)"
"(begin"
" 'module-compiled-exports"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_41)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'module-compiled-exports \"compiled-module-expression?\" c_41)))"
"(values))))"
"(let-values(((inst_3)(compiled-module->declaration-instance c_41)))"
"(provides->api-provides"
"(1/instance-variable-value inst_3 'provides)"
"(1/instance-variable-value inst_3 'self-mpi)))))))))"
"(define-values"
"(1/module-compiled-indirect-exports)"
"(lambda(c_15)"
"(begin"
" 'module-compiled-indirect-exports"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_15)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-indirect-exports"
"                               \"compiled-module-expression?\""
" c_15)))"
"(values))))"
"(let-values(((h_8 inst_0)(compiled-module->h+declaration-instance c_15)))"
"(let-values(((min-phase_3)(hash-ref h_8 'min-phase 0)))"
"(let-values(((max-phase_3)(hash-ref h_8 'max-phase 0)))"
"(variables->api-nonprovides"
"(1/instance-variable-value inst_0 'provides)"
"(let-values(((start_38) min-phase_3)((end_27)(add1 max-phase_3))((inc_21) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_38 end_27 inc_21)))"
"((letrec-values(((for-loop_197)"
"(lambda(table_64 pos_101)"
"(begin"
" 'for-loop"
"(if(< pos_101 end_27)"
"(let-values(((phase-level_20) pos_101))"
"(let-values(((table_67)"
"(let-values(((table_192) table_64))"
"(let-values(((table_193)"
"(let-values()"
"(let-values(((key_72 val_63)"
"(let-values()"
"(let-values(((linklet_0)"
"(hash-ref"
" h_8"
" phase-level_20"
" #f)))"
"(values"
" phase-level_20"
"(if linklet_0"
"(1/linklet-export-variables"
" linklet_0)"
" null))))))"
"(hash-set"
" table_192"
" key_72"
" val_63)))))"
"(values table_193)))))"
"(if(not #f)(for-loop_197 table_67(+ pos_101 inc_21)) table_67)))"
" table_64)))))"
" for-loop_197)"
" '#hash()"
" start_38)))))))))))))"
"(define-values"
"(1/module-compiled-cross-phase-persistent?)"
"(lambda(c_42)"
"(begin"
" 'module-compiled-cross-phase-persistent?"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/compiled-module-expression? c_42)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module-compiled-cross-phase-persistent?"
"                               \"compiled-module-expression?\""
" c_42)))"
"(values))))"
"(let-values(((h_9)(compiled-module->h c_42)))(hash-ref h_9 'cross-phase-persistent? #f))))))))"
"(define-values"
"(normalize-to-linklet-directory)"
"(lambda(c_43)"
"(begin"
"(if(1/linklet-directory?(compiled->linklet-directory-or-bundle c_43))"
"(let-values() c_43)"
"(if(1/linklet-bundle? c_43)"
"(let-values()(1/hash->linklet-directory(hasheq #f c_43)))"
"(let-values()"
"(let-values(((the-struct_8) c_43))"
"(if(compiled-in-memory? the-struct_8)"
"(let-values(((linklet-directory16_0)"
"(normalize-to-linklet-directory(compiled-in-memory-linklet-directory c_43))))"
"(compiled-in-memory1.1"
" linklet-directory16_0"
"(compiled-in-memory-original-self the-struct_8)"
"(compiled-in-memory-requires the-struct_8)"
"(compiled-in-memory-provides the-struct_8)"
"(compiled-in-memory-phase-to-link-module-uses the-struct_8)"
"(compiled-in-memory-compile-time-inspector the-struct_8)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss the-struct_8)"
"(compiled-in-memory-mpis the-struct_8)"
"(compiled-in-memory-syntax-literals the-struct_8)"
"(compiled-in-memory-pre-compiled-in-memorys the-struct_8)"
"(compiled-in-memory-post-compiled-in-memorys the-struct_8)"
"(compiled-in-memory-namespace-scopes the-struct_8)"
"(compiled-in-memory-purely-functional? the-struct_8)))"
"                (raise-argument-error 'struct-copy \"compiled-in-memory?\" the-struct_8)))))))))"
"(define-values"
"(fixup-submodule-names)"
"(lambda(c_44)(begin(1/module-compiled-name c_44(1/module-compiled-name c_44)))))"
"(define-values"
"(reset-submodule-names)"
"(lambda(b_78 pre?_1 submods_2)"
"(begin"
"(1/hash->linklet-bundle"
"(hash-set"
"(1/linklet-bundle->hash b_78)"
"(if pre?_1 'pre 'post)"
"(map2 module-compiled-immediate-name submods_2))))))"
"(define-values"
"(compile-module13.1)"
"(lambda(force-linklet-directory?1_0"
" modules-being-compiled4_0"
" need-compiled-submodule-rename?5_0"
" serializable?2_0"
" to-source?3_0"
" p11_0"
" cctx12_0)"
"(begin"
" 'compile-module13"
"(let-values(((p_46) p11_0))"
"(let-values(((cctx_14) cctx12_0))"
"(let-values(((force-linklet-directory?_0) force-linklet-directory?1_0))"
"(let-values(((serializable?_2) serializable?2_0))"
"(let-values(((to-source?_2) to-source?3_0))"
"(let-values(((modules-being-compiled_0)"
"(if(eq? modules-being-compiled4_0 unsafe-undefined)"
"(make-hasheq)"
" modules-being-compiled4_0)))"
"(let-values(((need-compiled-submodule-rename?_0) need-compiled-submodule-rename?5_0))"
"(let-values()"
"(let-values(((full-module-name_1)"
"(let-values(((parent-full-name_0)(compile-context-full-module-name cctx_14))"
"((name_55)(syntax-e$1(parsed-module-name-id p_46))))"
"(if parent-full-name_0"
"(append"
"(if(list? parent-full-name_0) parent-full-name_0(list parent-full-name_0))"
"(list name_55))"
" name_55))))"
"(let-values(((compiled-submodules_0)(parsed-module-compiled-submodules p_46)))"
"(let-values(((get-submodules_0)"
"(lambda(star?_0)"
"(begin"
" 'get-submodules"
"(reverse$1"
"(let-values(((ht_126) compiled-submodules_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_126)))"
"((letrec-values(((for-loop_243)"
"(lambda(fold-var_28 i_92)"
"(begin"
" 'for-loop"
"(if i_92"
"(let-values(((name_56 star?+compiled_0)"
"(hash-iterate-key+value"
" ht_126"
" i_92)))"
"(let-values(((fold-var_157)"
"(let-values(((fold-var_71)"
" fold-var_28))"
"(if(eq?"
" star?_0"
"(car star?+compiled_0))"
"(let-values(((fold-var_225)"
" fold-var_71))"
"(let-values(((fold-var_32)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" name_56"
"(if(if need-compiled-submodule-rename?_0"
"(not"
"(parsed-module-compiled-module"
" p_46))"
" #f)"
"(update-submodule-names"
"(cdr"
" star?+compiled_0)"
" name_56"
" full-module-name_1)"
"(cdr"
" star?+compiled_0))))"
" fold-var_225))))"
"(values fold-var_32)))"
" fold-var_71))))"
"(if(not #f)"
"(for-loop_243"
" fold-var_157"
"(hash-iterate-next ht_126 i_92))"
" fold-var_157)))"
" fold-var_28)))))"
" for-loop_243)"
" null"
"(hash-iterate-first ht_126)))))))))"
"(let-values(((pre-submodules_0)(get-submodules_0 #f)))"
"(let-values(((post-submodules_0)(get-submodules_0 #t)))"
"(let-values(((c1_27)(parsed-module-compiled-module p_46)))"
"(if c1_27"
"((lambda(c_45)"
"(let-values(((name_52 prefix_6)"
"(if(symbol? full-module-name_1)"
"(values full-module-name_1 null)"
"(let-values(((r_6)(reverse$1 full-module-name_1)))"
"(values(car r_6)(reverse$1(cdr r_6)))))))"
"(let-values(((m_18)(change-module-name c_45 name_52 prefix_6)))"
"(1/module-compiled-submodules"
"(1/module-compiled-submodules m_18 #t(map2 cdr pre-submodules_0))"
" #f"
"(map2 cdr post-submodules_0)))))"
" c1_27)"
"(let-values()"
"(let-values(((p37_0) p_46)"
"((cctx38_0) cctx_14)"
"((full-module-name39_0) full-module-name_1)"
"((force-linklet-directory?40_0) force-linklet-directory?_0)"
"((serializable?41_0) serializable?_2)"
"((to-source?42_0) to-source?_2)"
"((modules-being-compiled43_0) modules-being-compiled_0)"
"((pre-submodules44_0) pre-submodules_0)"
"((post-submodules45_0) post-submodules_0)"
"((need-compiled-submodule-rename?46_0)"
" need-compiled-submodule-rename?_0))"
"(compile-module-from-parsed34.1"
" force-linklet-directory?40_0"
" full-module-name39_0"
" modules-being-compiled43_0"
" need-compiled-submodule-rename?46_0"
" post-submodules45_0"
" pre-submodules44_0"
" serializable?41_0"
" to-source?42_0"
" p37_0"
" cctx38_0)))))))))))))))))))))"
"(define-values"
"(compile-module-from-parsed34.1)"
"(lambda(force-linklet-directory?17_0"
" full-module-name16_0"
" modules-being-compiled20_0"
" need-compiled-submodule-rename?23_0"
" post-submodules22_0"
" pre-submodules21_0"
" serializable?18_0"
" to-source?19_0"
" p32_1"
" cctx33_0)"
"(begin"
" 'compile-module-from-parsed34"
"(let-values(((p_19) p32_1))"
"(let-values(((cctx_17) cctx33_0))"
"(let-values(((full-module-name_2) full-module-name16_0))"
"(let-values(((force-linklet-directory?_1) force-linklet-directory?17_0))"
"(let-values(((serializable?_3) serializable?18_0))"
"(let-values(((to-source?_3) to-source?19_0))"
"(let-values(((modules-being-compiled_1) modules-being-compiled20_0))"
"(let-values(((pre-submodules_1) pre-submodules21_0))"
"(let-values(((post-submodules_1) post-submodules22_0))"
"(let-values(((need-compiled-submodule-rename?_1) need-compiled-submodule-rename?23_0))"
"(let-values()"
"(let-values()"
"(let-values(((enclosing-self_0)(compile-context-module-self cctx_17)))"
"(let-values(((self_25)(parsed-module-self p_19)))"
"(let-values(((requires_5)(parsed-module-requires p_19)))"
"(let-values(((provides_11)(parsed-module-provides p_19)))"
"(let-values(((encoded-root-expand-ctx-box_1)"
"(box(parsed-module-encoded-root-ctx p_19))))"
"(let-values(((body-context-simple?_0)(parsed-module-root-ctx-simple? p_19)))"
"(let-values(((language-info_2)"
"(filter-language-info"
"(syntax-property$1(parsed-s p_19) 'module-language))))"
"(let-values(((bodys_6)(parsed-module-body p_19)))"
"(let-values(((empty-result-for-module->namespace?_0) #f))"
"(let-values(((mpis_19)(make-module-path-index-table)))"
"(let-values(((body-cctx_0)"
"(let-values(((the-struct_56) cctx_17))"
"(if(compile-context? the-struct_56)"
"(let-values(((phase47_1) 0)"
"((self48_0) self_25)"
"((module-self49_0) self_25)"
"((full-module-name50_0)"
" full-module-name_2)"
"((lazy-syntax-literals?51_0) #t))"
"(compile-context1.1"
"(compile-context-namespace the-struct_56)"
" phase47_1"
" self48_0"
" module-self49_0"
" full-module-name50_0"
" lazy-syntax-literals?51_0"
"(compile-context-header the-struct_56)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"compile-context?\""
" the-struct_56)))))"
"(let-values(((cross-phase-persistent?_2) #f))"
"(let-values(((side-effects_0)(make-hasheqv)))"
"(let-values(((check-side-effects!_0)"
"(lambda(e_73"
" expected-results_3"
" phase_93"
" required-reference?_1)"
"(begin"
" 'check-side-effects!"
"(if(hash-ref side-effects_0 phase_93 #f)"
"(void)"
"(let-values()"
"(if(let-values(((e52_2) e_73)"
"((expected-results53_0)"
" expected-results_3)"
"((required-reference?54_0)"
" required-reference?_1))"
"(any-side-effects?9.1"
" unsafe-undefined"
" unsafe-undefined"
" required-reference?54_0"
" e52_2"
" expected-results53_0))"
"(let-values()"
"(hash-set!"
" side-effects_0"
" phase_93"
" #t))"
"(void))))))))"
"(let-values((()"
"(begin"
"(if(if need-compiled-submodule-rename?_1"
" modules-being-compiled_1"
" #f)"
"(let-values()"
"(begin"
"(if(null? post-submodules_1)"
"(void)"
"(let-values()"
"(error"
"                                                                                     \"internal error: have post submodules, but not already compiled\")))"
"(register-compiled-submodules"
" modules-being-compiled_1"
" pre-submodules_1"
" self_25)))"
"(void))"
"(values))))"
"(let-values(((body-linklets_2"
" min-phase_4"
" max-phase_4"
" phase-to-link-module-uses_4"
" phase-to-link-module-uses-expr_3"
" phase-to-link-extra-inspectorsss_2"
" syntax-literals_4"
" root-ctx-pos_0)"
"(let-values(((bodys55_0) bodys_6)"
"((body-cctx56_0) body-cctx_0)"
"((mpis57_0) mpis_19)"
"((temp58_0)"
"(list"
"(list get-syntax-literal!-id)"
"(list set-transformer!-id)))"
"((temp59_2)"
"(list"
" empty-syntax-literals-instance"
" empty-module-body-instance))"
"((temp60_1) '((void)))"
"((temp61_0) '(0))"
"((encoded-root-expand-ctx-box62_0)"
" encoded-root-expand-ctx-box_1)"
"((body-context-simple?63_0)"
" body-context-simple?_0)"
"((check-side-effects!64_0)"
" check-side-effects!_0)"
"((temp65_0)"
"(lambda(body_3 cctx_18)"
"(if(parsed-#%declare? body_3)"
"(let-values()"
"(let-values(((ok?_27"
" _69_2"
" kw70_0)"
"(let-values(((s_403)"
"(parsed-s"
" body_3)))"
"(let-values(((orig-s_29)"
" s_403))"
"(let-values(((_69_3"
" kw70_1)"
"(let-values(((s_34)"
"(if(syntax?$1"
" s_403)"
"(syntax-e$1"
" s_403)"
" s_403)))"
"(if(pair?"
" s_34)"
"(let-values(((_71_0)"
"(let-values(((s_59)"
"(car"
" s_34)))"
" s_59))"
"((kw72_0)"
"(let-values(((s_404)"
"(cdr"
" s_34)))"
"(let-values(((s_405)"
"(if(syntax?$1"
" s_404)"
"(syntax-e$1"
" s_404)"
" s_404)))"
"(let-values(((flat-s_19)"
"(to-syntax-list.1"
" s_405)))"
"(if(not"
" flat-s_19)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                           \"bad syntax\""
" orig-s_29))"
"(let-values()"
" flat-s_19)))))))"
"(values"
" _71_0"
" kw72_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                   \"bad syntax\""
" orig-s_29)))))"
"(values"
" #t"
" _69_3"
" kw70_1))))))"
"(begin"
"(let-values(((lst_198)"
" kw70_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_198)))"
"((letrec-values(((for-loop_207)"
"(lambda(lst_271)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_271)"
"(let-values(((kw_0)"
"(unsafe-car"
" lst_271))"
"((rest_149)"
"(unsafe-cdr"
" lst_271)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(eq?"
"(syntax-e$1"
" kw_0)"
" '#:cross-phase-persistent)"
"(let-values()"
"(set! cross-phase-persistent?_2"
" #t))"
"(void))"
"(if(eq?"
"(syntax-e$1"
" kw_0)"
" '#:empty-namespace)"
"(let-values()"
"(begin"
"(set! empty-result-for-module->namespace?_0"
" #t)"
"(set-box!"
" encoded-root-expand-ctx-box_1"
" #f)))"
"(void))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_207"
" rest_149)"
"(values))))"
"(values))))))"
" for-loop_207)"
" lst_198)))"
"(void)"
" #f)))"
"(let-values() #f))))"
"((temp66_1)"
"(lambda(mod-name_17 phase_94)"
"(let-values(((ht_128)"
"(if modules-being-compiled_1"
"(hash-ref"
" modules-being-compiled_1"
" mod-name_17"
" #f)"
" #f)))"
"(if ht_128"
"(hash-ref"
" ht_128"
" phase_94"
" #f)"
" #f))))"
"((to-source?67_0) to-source?_3)"
"((serializable?68_0)"
" serializable?_3))"
"(compile-forms31.1"
" temp59_2"
" temp58_0"
" temp60_1"
" check-side-effects!64_0"
" #t"
" unsafe-undefined"
" encoded-root-expand-ctx-box62_0"
" temp61_0"
" temp66_1"
" temp65_0"
" body-context-simple?63_0"
" serializable?68_0"
" to-source?67_0"
" bodys55_0"
" body-cctx56_0"
" mpis57_0))))"
"(let-values((()"
"(begin"
"(if modules-being-compiled_1"
"(let-values()"
"(hash-set!"
" modules-being-compiled_1"
"(1/module-path-index-resolve self_25)"
"(let-values(((ht_129)"
" body-linklets_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_129)))"
"((letrec-values(((for-loop_23)"
"(lambda(table_100"
" i_149)"
"(begin"
" 'for-loop"
"(if i_149"
"(let-values(((phase_95"
" linklet_6)"
"(hash-iterate-key+value"
" ht_129"
" i_149)))"
"(let-values(((table_194)"
"(let-values(((table_195)"
" table_100))"
"(let-values(((table_196)"
"(let-values()"
"(let-values(((key_73"
" val_64)"
"(let-values()"
"(values"
" phase_95"
"(module-linklet-info2.1"
" linklet_6"
"(hash-ref"
" phase-to-link-module-uses_4"
" phase_95"
" #f)"
" self_25"
" #f"
" #f"
"(if phase-to-link-extra-inspectorsss_2"
"(hash-ref"
" phase-to-link-extra-inspectorsss_2"
" phase_95"
" #f)"
" #f))))))"
"(hash-set"
" table_195"
" key_73"
" val_64)))))"
"(values"
" table_196)))))"
"(if(not"
" #f)"
"(for-loop_23"
" table_194"
"(hash-iterate-next"
" ht_129"
" i_149))"
" table_194)))"
" table_100)))))"
" for-loop_23)"
" '#hasheq()"
"(hash-iterate-first ht_129))))))"
"(void))"
"(values))))"
"(let-values(((declaration-linklet_0)"
"(if serializable?_3"
"((if to-source?_3"
" values"
"(lambda(s_406)"
"(let-values()"
"(1/compile-linklet"
" s_406"
" 'decl))))"
"(list"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
" '(self-mpi"
" requires"
" provides"
" phase-to-link-modules)"
"(list"
" 'define-values"
" '(self-mpi)"
"(add-module-path-index!"
" mpis_19"
" self_25))"
"(list"
" 'define-values"
" '(requires)"
"(let-values(((requires73_0)"
" requires_5)"
"((mpis74_0) mpis_19)"
"((temp75_0) #f))"
"(generate-deserialize6.1"
" temp75_0"
" requires73_0"
" mpis74_0)))"
"(list"
" 'define-values"
" '(provides)"
"(let-values(((provides76_0)"
" provides_11)"
"((mpis77_0) mpis_19)"
"((temp78_0) #f))"
"(generate-deserialize6.1"
" temp78_0"
" provides76_0"
" mpis77_0)))"
"(list"
" 'define-values"
" '(phase-to-link-modules)"
" phase-to-link-module-uses-expr_3)))"
" #f)))"
"(let-values(((syntax-literals-linklet_2)"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_4))"
"((if to-source?_3"
" values"
"(lambda(s_407)"
"(let-values()"
"(let-values(((linklet_7"
" new-keys_1)"
"(1/compile-linklet"
" s_407"
" 'syntax-literals"
"(vector"
" deserialize-instance"
" empty-top-syntax-literal-instance"
" empty-syntax-literals-data-instance"
" empty-instance-instance)"
"(lambda(inst_4)"
"(values"
" inst_4"
" #f))"
"(if serializable?_3"
" '(serializable)"
" '()))))"
" linklet_7))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id)"
"(list*"
" deserialized-syntax-vector-id"
"(if serializable?_3"
"(list deserialize-syntax-id)"
" '()))"
" instance-imports)"
"(list*"
" get-syntax-literal!-id"
" '(get-encoded-root-expand-ctx))"
"(qq-append"
"(let-values(((syntax-literals79_0)"
" syntax-literals_4)"
"((mpis80_0) mpis_19)"
"((self81_0) self_25)"
"((temp82_1)"
"(not"
" serializable?_3)))"
"(generate-lazy-syntax-literals!9.1"
" temp82_1"
" syntax-literals79_0"
" mpis80_0"
" self81_0))"
"(list"
"(list"
" 'define-values"
" '(get-encoded-root-expand-ctx)"
"(if root-ctx-pos_0"
"(let-values()"
"(list"
" 'lambda"
" '()"
"(generate-lazy-syntax-literal-lookup"
" root-ctx-pos_0)))"
"(if empty-result-for-module->namespace?_0"
"(let-values() ''empty)"
"(let-values() ''#f))))))))"
" #f)))"
"(let-values(((syntax-literals-data-linklet_0)"
"(if serializable?_3"
"(if(not"
"(syntax-literals-empty?"
" syntax-literals_4))"
"((if to-source?_3"
" values"
"(lambda(s_208)"
"(let-values()"
"(1/compile-linklet"
" s_208"
" 'syntax-literals-data))))"
"(list*"
" 'linklet"
"(list"
" deserialize-imports"
"(list mpi-vector-id))"
"(list"
" deserialized-syntax-vector-id"
" deserialize-syntax-id)"
"(list"
" 'define-values"
"(list"
" deserialized-syntax-vector-id)"
"(list*"
" 'make-vector"
"(syntax-literals-count"
" syntax-literals_4)"
" '(#f)))"
"(let-values()"
"(generate-lazy-syntax-literals-data!"
" syntax-literals_4"
" mpis_19))))"
" #f)"
" #f)))"
"(let-values(((data-linklet_0)"
"(if serializable?_3"
"((if to-source?_3"
" values"
"(lambda(s_209)"
"(let-values()"
"(1/compile-linklet"
" s_209"
" 'data))))"
"(list"
" 'linklet"
"(list deserialize-imports)"
"(list mpi-vector-id)"
"(list*"
" 'define-values"
"(list inspector-id)"
" '((current-code-inspector)))"
"(list"
" 'define-values"
"(list mpi-vector-id)"
"(generate-module-path-index-deserialize"
" mpis_19))))"
" #f)))"
"(let-values(((bundle_1)"
"(let-values(((bundle_2)"
"(hash-set"
" body-linklets_2"
" 'name"
" full-module-name_2)))"
"(let-values(((bundle_3)"
"(hash-set"
" bundle_2"
" 'decl"
"(let-values(((or-part_179)"
" declaration-linklet_0))"
"(if or-part_179"
" or-part_179"
" 'in-memory)))))"
"(let-values(((bundle_4)"
"(if data-linklet_0"
"(hash-set"
" bundle_3"
" 'data"
" data-linklet_0)"
" bundle_3)))"
"(let-values(((bundle_5)"
"(if syntax-literals-linklet_2"
"(hash-set"
" bundle_4"
" 'stx"
" syntax-literals-linklet_2)"
" bundle_4)))"
"(let-values(((bundle_6)"
"(if syntax-literals-data-linklet_0"
"(hash-set"
" bundle_5"
" 'stx-data"
" syntax-literals-data-linklet_0)"
" bundle_5)))"
"(let-values(((bundle_7)"
"(if(null?"
" pre-submodules_1)"
" bundle_6"
"(hash-set"
" bundle_6"
" 'pre"
"(map2"
" car"
" pre-submodules_1)))))"
"(let-values(((bundle_8)"
"(if(null?"
" post-submodules_1)"
" bundle_7"
"(hash-set"
" bundle_7"
" 'post"
"(map2"
" car"
" post-submodules_1)))))"
"(let-values(((bundle_9)"
"(if cross-phase-persistent?_2"
"(hash-set"
" bundle_8"
" 'cross-phase-persistent?"
" #t)"
" bundle_8)))"
"(let-values(((bundle_10)"
"(if language-info_2"
"(hash-set"
" bundle_9"
" 'language-info"
" language-info_2)"
" bundle_9)))"
"(let-values(((bundle_11)"
"(if(zero?"
" min-phase_4)"
" bundle_10"
"(hash-set"
" bundle_10"
" 'min-phase"
" min-phase_4))))"
"(let-values(((bundle_12)"
"(if(zero?"
" max-phase_4)"
" bundle_11"
"(hash-set"
" bundle_11"
" 'max-phase"
" max-phase_4))))"
"(let-values(((bundle_13)"
"(if(hash-count"
" side-effects_0)"
"(hash-set"
" bundle_12"
" 'side-effects"
"(let-values(((temp83_0)"
"(hash-keys"
" side-effects_0))"
"((<84_0)"
" <))"
"(sort7.1"
" #f"
" #f"
" temp83_0"
" <84_0)))"
" bundle_12)))"
"(let-values(((bundle_14)"
"(if empty-result-for-module->namespace?_0"
"(hash-set"
" bundle_13"
" 'module->namespace"
" 'empty)"
" bundle_13)))"
"(1/hash->linklet-bundle"
" bundle_14))))))))))))))))"
"(let-values(((ld_4)"
"(if(if(null? pre-submodules_1)"
"(if(null?"
" post-submodules_1)"
"(not"
" force-linklet-directory?_1)"
" #f)"
" #f)"
"(let-values() bundle_1)"
"(let-values()"
"((if to-source?_3"
" values"
" 1/hash->linklet-directory)"
"(let-values(((lst_272)"
"(append"
" pre-submodules_1"
" post-submodules_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_272)))"
"((letrec-values(((for-loop_244)"
"(lambda(ht_130"
" lst_273)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_273)"
"(let-values(((sm_0)"
"(unsafe-car"
" lst_273))"
"((rest_150)"
"(unsafe-cdr"
" lst_273)))"
"(let-values(((ht_131)"
"(let-values(((ht_132)"
" ht_130))"
"(let-values(((ht_123)"
"(let-values()"
"(hash-set"
" ht_132"
"(car"
" sm_0)"
"((if to-source?_3"
" values"
" compiled-in-memory-linklet-directory)"
"(cdr"
" sm_0))))))"
"(values"
" ht_123)))))"
"(if(not"
" #f)"
"(for-loop_244"
" ht_131"
" rest_150)"
" ht_131)))"
" ht_130)))))"
" for-loop_244)"
"(hasheq #f bundle_1)"
" lst_272))))))))"
"(if to-source?_3"
"(let-values() ld_4)"
"(let-values()"
"(compiled-in-memory1.1"
" ld_4"
" self_25"
" requires_5"
" provides_11"
" phase-to-link-module-uses_4"
"(current-code-inspector)"
" phase-to-link-extra-inspectorsss_2"
"(mpis-as-vector mpis_19)"
"(syntax-literals-as-vector"
" syntax-literals_4)"
"(map2 cdr pre-submodules_1)"
"(map2 cdr post-submodules_1)"
" #f"
" #f)))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(update-submodule-names)"
"(lambda(cim_9 name_57 full-module-name_3)"
"(begin"
"(change-module-name"
" cim_9"
" name_57"
"(if(symbol? full-module-name_3)(list full-module-name_3)(reverse$1(cdr(reverse$1 full-module-name_3))))))))"
"(define-values"
"(register-compiled-submodules)"
"(lambda(modules-being-compiled_2 pre-submodules_2 self_26)"
"(begin"
"(begin"
"(let-values(((lst_274) pre-submodules_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_274)))"
"((letrec-values(((for-loop_245)"
"(lambda(lst_275)"
"(begin"
" 'for-loop"
"(if(pair? lst_275)"
"(let-values(((s_408)(unsafe-car lst_275))((rest_151)(unsafe-cdr lst_275)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name_58)(car s_408)))"
"(let-values(((cim_10)(cdr s_408)))"
"(let-values(((phase-to-link-module-uses_5)"
"(compiled-in-memory-phase-to-link-module-uses"
" cim_10)))"
"(let-values(((ld_5)"
"(compiled-in-memory-linklet-directory"
" cim_10)))"
"(let-values(((sm-self_0)"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                  \".\""
" name_58)"
" self_26)))"
"(let-values(((phase-to-extra-inspectorsss_0)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss"
" cim_10)))"
"(hash-set!"
" modules-being-compiled_2"
"(1/module-path-index-resolve"
" sm-self_0)"
"(let-values(((ht_133)"
"(1/linklet-bundle->hash"
"(if(1/linklet-directory?"
" ld_5)"
"(hash-ref"
"(1/linklet-directory->hash"
" ld_5)"
" #f)"
" ld_5))))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash ht_133)))"
"((letrec-values(((for-loop_246)"
"(lambda(table_197"
" i_150)"
"(begin"
" 'for-loop"
"(if i_150"
"(let-values(((phase_96"
" linklet_8)"
"(hash-iterate-key+value"
" ht_133"
" i_150)))"
"(let-values(((table_198)"
"(let-values(((table_199)"
" table_197))"
"(if(number?"
" phase_96)"
"(let-values(((table_200)"
" table_199))"
"(let-values(((table_201)"
"(let-values()"
"(let-values(((key_74"
" val_65)"
"(let-values()"
"(values"
" phase_96"
"(module-linklet-info2.1"
" linklet_8"
"(hash-ref"
" phase-to-link-module-uses_5"
" phase_96"
" #f)"
"(compiled-in-memory-original-self"
" cim_10)"
" #f"
"(compiled-in-memory-compile-time-inspector"
" cim_10)"
"(if phase-to-extra-inspectorsss_0"
"(hash-ref"
" phase-to-extra-inspectorsss_0"
" phase_96"
" #f)"
" #f))))))"
"(hash-set"
" table_200"
" key_74"
" val_65)))))"
"(values"
" table_201)))"
" table_199))))"
"(if(not"
" #f)"
"(for-loop_246"
" table_198"
"(hash-iterate-next"
" ht_133"
" i_150))"
" table_198)))"
" table_197)))))"
" for-loop_246)"
" '#hasheq()"
"(hash-iterate-first"
" ht_133))))))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_245 rest_151)(values))))"
"(values))))))"
" for-loop_245)"
" lst_274)))"
"(void)))))"
"(define-values"
"(filter-language-info)"
"(lambda(li_1)"
"(begin"
"(if(vector? li_1)"
"(if(= 3(vector-length li_1))"
"(if(1/module-path?(vector-ref li_1 0))(if(symbol?(vector-ref li_1 1)) li_1 #f) #f)"
" #f)"
" #f))))"
"(define-values"
"(1/compiled-expression-recompile)"
"(lambda(c_32)"
"(begin"
" 'compiled-expression-recompile"
"(begin"
"(if(1/compiled-expression? c_32)"
"(void)"
"          (let-values () (raise-argument-error 'compiled-expression-recompile \"compiled-expression?\" c_32)))"
"(if(1/linklet-bundle? c_32)"
"(let-values()"
"(1/hash->linklet-bundle"
"(let-values(((ht_134)(1/linklet-bundle->hash c_32)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_134)))"
"((letrec-values(((for-loop_247)"
"(lambda(table_202 i_151)"
"(begin"
" 'for-loop"
"(if i_151"
"(let-values(((k_33 v_73)(hash-iterate-key+value ht_134 i_151)))"
"(let-values(((table_203)"
"(let-values(((table_204) table_202))"
"(let-values(((table_205)"
"(let-values()"
"(let-values(((key_75 val_66)"
"(let-values()"
"(if(1/linklet? v_73)"
"(let-values()"
"(values"
" k_33"
"(1/recompile-linklet"
" v_73)))"
"(let-values()"
"(values k_33 v_73))))))"
"(hash-set table_204 key_75 val_66)))))"
"(values table_205)))))"
"(if(not #f)"
"(for-loop_247 table_203(hash-iterate-next ht_134 i_151))"
" table_203)))"
" table_202)))))"
" for-loop_247)"
" '#hasheq()"
"(hash-iterate-first ht_134))))))"
"(if(1/linklet-directory? c_32)"
"(let-values()"
"(1/hash->linklet-directory"
"(let-values(((ht_84)(1/linklet-directory->hash c_32)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_84)))"
"((letrec-values(((for-loop_218)"
"(lambda(table_167 i_152)"
"(begin"
" 'for-loop"
"(if i_152"
"(let-values(((k_34 v_1)(hash-iterate-key+value ht_84 i_152)))"
"(let-values(((table_206)"
"(let-values(((table_207) table_167))"
"(let-values(((table_168)"
"(let-values()"
"(let-values(((key_76 val_67)"
"(let-values()"
"(if(1/compiled-expression?"
" v_1)"
"(let-values()"
"(values"
" k_34"
"(1/compiled-expression-recompile"
" v_1)))"
"(let-values()"
"(values k_34 v_1))))))"
"(hash-set table_207 key_76 val_67)))))"
"(values table_168)))))"
"(if(not #f)"
"(for-loop_218 table_206(hash-iterate-next ht_84 i_152))"
" table_206)))"
" table_167)))))"
" for-loop_218)"
" '#hasheq()"
"(hash-iterate-first ht_84))))))"
"(let-values() c_32)))))))"
"(define-values"
"(create-compiled-in-memorys-using-shared-data)"
"(lambda(tops_0 data-linklet_1 ns_59)"
"(begin"
"(let-values(((data-instance_5)"
"(1/instantiate-linklet"
" data-linklet_1"
"(list"
" deserialize-instance"
"(let-values(((ns1_1) ns_59)"
"((temp2_3)(namespace-phase ns_59))"
"((temp3_3)(namespace-mpi ns_59))"
"((temp4_1)(namespace-bulk-binding-registry ns_59))"
"((temp5_3)(current-code-inspector)))"
"(make-eager-instance-instance11.1 temp4_1 temp2_3 temp5_3 ns1_1 temp3_3))))))"
"(let-values(((data_0)(lambda(key_77)(begin 'data(1/instance-variable-value data-instance_5 key_77)))))"
"(let-values(((mpi-vector_0)(data_0 mpi-vector-id)))"
"(let-values(((mpi-vector-trees_0)(data_0 'mpi-vector-trees)))"
"(let-values(((phase-to-link-modules-vector_0)(data_0 'phase-to-link-modules-vector)))"
"(let-values(((phase-to-link-modules-trees_0)(data_0 'phase-to-link-modules-trees)))"
"(let-values(((syntax-literals_5)(data_0 'syntax-literals)))"
"(let-values(((syntax-literals-trees_1)(data_0 'syntax-literals-trees)))"
"(let-values(((namespace-scopes_0)(extract-namespace-scopes ns_59)))"
"(letrec-values(((construct-compiled-in-memory_0)"
"(lambda(ld_6"
" mpi-vector-tree_0"
" phase-to-link-modules-tree_0"
" syntax-literals-tree_0)"
"(begin"
" 'construct-compiled-in-memory"
"(let-values(((is-module?_0)"
"(let-values(((or-part_75)(1/linklet-bundle? ld_6)))"
"(if or-part_75"
" or-part_75"
"(let-values(((b_79)"
"(hash-ref"
"(1/linklet-directory->hash ld_6)"
" #f"
" #f)))"
"(if b_79"
"(hash-ref(1/linklet-bundle->hash b_79) 'decl #f)"
" #f))))))"
"(let-values(((mpi-pos-vec_0)(vector-ref mpi-vector-tree_0 0)))"
"(let-values(((syntax-literals-spec_0)"
"(vector-ref syntax-literals-tree_0 0)))"
"(let-values(((pres_0)"
"(if is-module?_0"
"(extract-submodules ld_6 'pre)"
"(compiled-top->compiled-tops ld_6))))"
"(let-values(((posts_0)"
"(if is-module?_0"
"(extract-submodules ld_6 'post)"
" null)))"
"(let-values(((map-construct-compiled-in-memory_0)"
"(lambda(l_67 vec-pos_0)"
"(begin"
" 'map-construct-compiled-in-memory"
"(reverse$1"
"(let-values(((lst_163) l_67)"
"((lst_89)"
"(vector-ref"
" mpi-vector-tree_0"
" vec-pos_0))"
"((lst_265)"
"(vector-ref"
" phase-to-link-modules-tree_0"
" vec-pos_0))"
"((lst_263)"
"(vector-ref"
" syntax-literals-tree_0"
" vec-pos_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_163)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_89)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_265)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_263)))"
"((letrec-values(((for-loop_237)"
"(lambda(fold-var_158"
" lst_261"
" lst_23"
" lst_104"
" lst_90)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_261)"
"(if(pair?"
" lst_23)"
"(if(pair?"
" lst_104)"
"(pair?"
" lst_90)"
" #f)"
" #f)"
" #f)"
"(let-values(((sub-ld_0)"
"(unsafe-car"
" lst_261))"
"((rest_143)"
"(unsafe-cdr"
" lst_261))"
"((mpi-vector-tree_1)"
"(unsafe-car"
" lst_23))"
"((rest_51)"
"(unsafe-cdr"
" lst_23))"
"((phase-to-link-modules-tree_1)"
"(unsafe-car"
" lst_104))"
"((rest_91)"
"(unsafe-cdr"
" lst_104))"
"((syntax-literals-tree_1)"
"(unsafe-car"
" lst_90))"
"((rest_37)"
"(unsafe-cdr"
" lst_90)))"
"(let-values(((fold-var_170)"
"(let-values(((fold-var_171)"
" fold-var_158))"
"(let-values(((fold-var_172)"
"(let-values()"
"(cons"
"(let-values()"
"(construct-compiled-in-memory_0"
" sub-ld_0"
" mpi-vector-tree_1"
" phase-to-link-modules-tree_1"
" syntax-literals-tree_1))"
" fold-var_171))))"
"(values"
" fold-var_172)))))"
"(if(not #f)"
"(for-loop_237"
" fold-var_170"
" rest_143"
" rest_51"
" rest_91"
" rest_37)"
" fold-var_170)))"
" fold-var_158)))))"
" for-loop_237)"
" null"
" lst_163"
" lst_89"
" lst_265"
" lst_263))))))))"
"(compiled-in-memory1.1"
" ld_6"
" #f"
" #f"
" #f"
"(vector-ref"
" phase-to-link-modules-vector_0"
"(vector-ref phase-to-link-modules-tree_0 0))"
" #f"
" '#hasheqv()"
"(let-values(((len_29)(vector-length mpi-pos-vec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_29)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                   \"exact-nonnegative-integer?\""
" len_29)))"
"(let-values(((v_69)(make-vector len_29 0)))"
"(begin"
"(if(zero? len_29)"
"(void)"
"(let-values()"
"(let-values(((vec_65 len_30)"
"(let-values(((vec_66)"
" mpi-pos-vec_0))"
"(begin"
"(check-vector vec_66)"
"(values"
" vec_66"
"(unsafe-vector-length"
" vec_66))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_111)"
"(lambda(i_153 pos_102)"
"(begin"
" 'for-loop"
"(if(unsafe-fx<"
" pos_102"
" len_30)"
"(let-values(((pos_103)"
"(unsafe-vector-ref"
" vec_65"
" pos_102)))"
"(let-values(((i_154)"
"(let-values(((i_63)"
" i_153))"
"(let-values(((i_155)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_69"
" i_63"
"(let-values()"
"(vector-ref"
" mpi-vector_0"
" pos_103)))"
"(unsafe-fx+"
" 1"
" i_63)))))"
"(values"
" i_155)))))"
"(if(if(not"
"((lambda x_19"
"(unsafe-fx="
" i_154"
" len_29))"
" pos_103))"
"(not #f)"
" #f)"
"(for-loop_111"
" i_154"
"(unsafe-fx+"
" 1"
" pos_102))"
" i_154)))"
" i_153)))))"
" for-loop_111)"
" 0"
" 0)))))"
" v_69))))"
"(let-values(((len_31)(cdr syntax-literals-spec_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_31)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/vector"
"                                                                   \"exact-nonnegative-integer?\""
" len_31)))"
"(let-values(((v_36)(make-vector len_31 0)))"
"(begin"
"(if(zero? len_31)"
"(void)"
"(let-values()"
"(let-values(((start_15) 0)"
"((end_28)"
"(cdr syntax-literals-spec_0))"
"((inc_22) 1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range start_15 end_28 inc_22)))"
"((letrec-values(((for-loop_248)"
"(lambda(i_156 pos_104)"
"(begin"
" 'for-loop"
"(if(< pos_104 end_28)"
"(let-values(((i_93)"
" pos_104))"
"(let-values(((i_157)"
"(let-values(((i_36)"
" i_156))"
"(let-values(((i_20)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_36"
" i_36"
"(let-values()"
"(if syntax-literals_5"
"(vector-ref"
" syntax-literals_5"
"(+"
"(car"
" syntax-literals-spec_0)"
" i_93))"
" #f)))"
"(unsafe-fx+"
" 1"
" i_36)))))"
"(values"
" i_20)))))"
"(if(if(not"
"((lambda x_72"
"(unsafe-fx="
" i_157"
" len_31))"
" i_93))"
"(not #f)"
" #f)"
"(for-loop_248"
" i_157"
"(+"
" pos_104"
" inc_22))"
" i_157)))"
" i_156)))))"
" for-loop_248)"
" 0"
" start_15)))))"
" v_36))))"
"(map-construct-compiled-in-memory_0 pres_0 1)"
"(map-construct-compiled-in-memory_0 posts_0 2)"
" namespace-scopes_0"
" #f)))))))))))"
"(map2"
" construct-compiled-in-memory_0"
" tops_0"
" mpi-vector-trees_0"
" phase-to-link-modules-trees_0"
" syntax-literals-trees_1))))))))))))))"
"(define-values"
"(extract-submodules)"
"(lambda(ld_7 names-key_0)"
"(begin"
"(if(1/linklet-bundle? ld_7)"
"(let-values() null)"
"(let-values()"
"(let-values(((h_10)(1/linklet-directory->hash ld_7)))"
"(let-values(((mod_3)(hash-ref h_10 #f #f)))"
"              (let-values ((() (begin (if mod_3 (void) (let-values () (error \"missing main module\"))) (values))))"
"(let-values(((mh_0)(1/linklet-bundle->hash mod_3)))"
"(let-values(((names_2)(hash-ref mh_0 names-key_0 null)))"
"(reverse$1"
"(let-values(((lst_178) names_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_178)))"
"((letrec-values(((for-loop_249)"
"(lambda(fold-var_5 lst_276)"
"(begin"
" 'for-loop"
"(if(pair? lst_276)"
"(let-values(((name_59)(unsafe-car lst_276))"
"((rest_152)(unsafe-cdr lst_276)))"
"(let-values(((fold-var_230)"
"(let-values(((fold-var_231) fold-var_5))"
"(let-values(((fold-var_161)"
"(let-values()"
"(cons"
"(let-values()"
"(hash-ref"
" h_10"
" name_59"
"(lambda()"
"(error"
"                                                                                          \"missing submodule declaration:\""
" name_59))))"
" fold-var_231))))"
"(values fold-var_161)))))"
"(if(not #f)(for-loop_249 fold-var_230 rest_152) fold-var_230)))"
" fold-var_5)))))"
" for-loop_249)"
" null"
" lst_178))))))))))))))"
"(define-values"
"(eval-single-top)"
"(lambda(c_32 ns_42)"
"(begin(let-values(((c15_0) c_32)((ns16_1) ns_42)((temp17_3) #t))(eval-one-top12.1 temp17_3 c15_0 ns16_1 #t)))))"
"(define-values"
"(compiled-multiple-top?)"
"(lambda(c_34)"
"(begin"
"(let-values(((ld_8)(if(compiled-in-memory? c_34)(compiled-in-memory-linklet-directory c_34) c_34)))"
"(if(1/linklet-directory? ld_8)(not(hash-ref(1/linklet-directory->hash ld_8) #f #f)) #f)))))"
"(define-values"
"(eval-top)"
"(let-values(((eval-top5_0)"
"(lambda(c3_1 ns4_0 eval-compiled1_0 as-tail?2_0)"
"(begin"
" 'eval-top5"
"(let-values(((c_46) c3_1))"
"(let-values(((ns_67) ns4_0))"
"(let-values(((eval-compiled_0)"
"(if(eq? eval-compiled1_0 unsafe-undefined) eval-top eval-compiled1_0)))"
"(let-values(((as-tail?_0) as-tail?2_0))"
"(let-values()"
"(if(compiled-multiple-top? c_46)"
"(eval-multiple-tops c_46 ns_67 eval-compiled_0 as-tail?_0)"
"(let-values(((c18_0) c_46)((ns19_0) ns_67)((as-tail?20_0) as-tail?_0))"
"(eval-one-top12.1 #f c18_0 ns19_0 as-tail?20_0))))))))))))"
"(case-lambda"
"((c_47 ns_68)(begin(eval-top5_0 c_47 ns_68 unsafe-undefined #t)))"
"((c_48 ns_69 eval-compiled_1 as-tail?2_1)(eval-top5_0 c_48 ns_69 eval-compiled_1 as-tail?2_1))"
"((c_49 ns_70 eval-compiled1_1)(eval-top5_0 c_49 ns_70 eval-compiled1_1 #t)))))"
"(define-values"
"(eval-multiple-tops)"
"(lambda(c_50 ns_71 eval-compiled_2 as-tail?_1)"
"(begin"
"(let-values(((eval-compiled-parts_0)"
"(lambda(l_68)"
"(begin"
" 'eval-compiled-parts"
"((letrec-values(((loop_5)"
"(lambda(l_69)"
"(begin"
" 'loop"
"(if(null? l_69)"
"(let-values() void)"
"(if(null?(cdr l_69))"
"(let-values()(eval-compiled_2(car l_69) ns_71 as-tail?_1))"
"(let-values()"
"(begin"
"(eval-compiled_2(car l_69) ns_71 #f)"
"(loop_5(cdr l_69))))))))))"
" loop_5)"
" l_68)))))"
"(if(compiled-in-memory? c_50)"
"(let-values()(eval-compiled-parts_0(compiled-in-memory-pre-compiled-in-memorys c_50)))"
"(let-values(((c1_27)(hash-ref(1/linklet-directory->hash c_50) 'data #f)))"
"(if c1_27"
"((lambda(data-ld_0)"
"(eval-compiled-parts_0"
"(create-compiled-in-memorys-using-shared-data"
"(compiled-top->compiled-tops c_50)"
"(hash-ref(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash data-ld_0) #f)) 0)"
" ns_71)))"
" c1_27)"
"(let-values()(eval-compiled-parts_0(compiled-top->compiled-tops c_50))))))))))"
"(define-values"
"(eval-one-top12.1)"
"(lambda(single-expression?7_0 c10_0 ns11_0 as-tail?9_0)"
"(begin"
" 'eval-one-top12"
"(let-values(((c_51) c10_0))"
"(let-values(((ns_72) ns11_0))"
"(let-values(((as-tail?_2) as-tail?9_0))"
"(let-values(((single-expression?_1) single-expression?7_0))"
"(let-values()"
"(let-values()"
"(let-values(((ld_9)"
"(if(compiled-in-memory? c_51)(compiled-in-memory-linklet-directory c_51) c_51)))"
"(let-values(((h_11)(1/linklet-bundle->hash(hash-ref(1/linklet-directory->hash ld_9) #f))))"
"(let-values(((link-instance_0)"
"(if(compiled-in-memory? c_51)"
"(link-instance-from-compiled-in-memory"
" c_51"
"(if(not single-expression?_1) ns_72 #f))"
"(1/instantiate-linklet"
"(hash-ref h_11 'link)"
"(list"
" deserialize-instance"
"(let-values(((ns21_0) ns_72)"
"((temp22_4)(namespace-phase ns_72))"
"((temp23_4)(namespace-mpi ns_72))"
"((temp24_4)(namespace-bulk-binding-registry ns_72))"
"((temp25_4)(current-code-inspector)))"
"(make-eager-instance-instance11.1"
" temp24_4"
" temp22_4"
" temp25_4"
" ns21_0"
" temp23_4)))))))"
"(let-values(((orig-phase_1)(hash-ref h_11 'original-phase)))"
"(let-values(((max-phase_5)(hash-ref h_11 'max-phase)))"
"(let-values(((phase-shift_18)(phase-(namespace-phase ns_72) orig-phase_1)))"
"(let-values(((extra-inspector_8)"
"(if(compiled-in-memory? c_51)"
"(compiled-in-memory-compile-time-inspector c_51)"
" #f)))"
"(let-values(((phase-to-link-extra-inspectorsss_3)"
"(if(compiled-in-memory? c_51)"
"(compiled-in-memory-phase-to-link-extra-inspectorsss c_51)"
" '#hasheqv())))"
"(let-values(((phase-to-link-modules_1)"
"(if(compiled-in-memory? c_51)"
"(compiled-in-memory-phase-to-link-module-uses c_51)"
"(1/instance-variable-value link-instance_0 'phase-to-link-modules))))"
"(let-values(((thunk_5)"
"(let-values(((start_38) max-phase_5)"
"((end_27)(sub1 orig-phase_1))"
"((inc_21) -1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_38 end_27 inc_21)))"
"((letrec-values(((for-loop_197)"
"(lambda(prev-thunk_0 pos_101)"
"(begin"
" 'for-loop"
"(if(> pos_101 end_27)"
"(let-values(((phase_97) pos_101))"
"(let-values(((prev-thunk_1)"
"(let-values(((prev-thunk_2)"
" prev-thunk_0))"
"(let-values(((prev-thunk_3)"
"(let-values()"
"(let-values((()"
"(begin"
"(prev-thunk_2"
" #f)"
"(values))))"
"(let-values(((module-uses_1)"
"(hash-ref"
" phase-to-link-modules_1"
" phase_97"
" null)))"
"(let-values(((import-module-instances_2"
" import-instances_1)"
"(let-values(((mis_6"
" is_5)"
"(let-values(((lst_96)"
" module-uses_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_96)))"
"((letrec-values(((for-loop_113)"
"(lambda(mis_7"
" is_6"
" lst_225)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_225)"
"(let-values(((mu_9)"
"(unsafe-car"
" lst_225))"
"((rest_153)"
"(unsafe-cdr"
" lst_225)))"
"(let-values(((mis_8"
" is_7)"
"(let-values(((mis_9)"
" mis_7)"
"((is_8)"
" is_6))"
"(let-values(((mis_10"
" is_9)"
"(let-values()"
"(let-values(((mis26_0"
" is27_0)"
"(let-values()"
"(let-values(((ns28_0)"
" ns_72)"
"((mu29_0)"
" mu_9)"
"((temp30_3)"
"(phase-"
"(phase+"
" phase_97"
" phase-shift_18)"
"(module-use-phase"
" mu_9))))"
"(namespace-module-use->module+linklet-instances144.1"
" temp30_3"
" #f"
" #f"
" ns28_0"
" mu29_0)))))"
"(values"
"(cons"
" mis26_0"
" mis_9)"
"(cons"
" is27_0"
" is_8))))))"
"(values"
" mis_10"
" is_9)))))"
"(if(not"
" #f)"
"(for-loop_113"
" mis_8"
" is_7"
" rest_153)"
"(values"
" mis_8"
" is_7))))"
"(values"
" mis_7"
" is_6))))))"
" for-loop_113)"
" null"
" null"
" lst_96)))))"
"(values"
"(reverse$1"
" mis_6)"
"(reverse$1"
" is_5)))))"
"(let-values(((phase-ns_0)"
"(namespace->namespace-at-phase"
" ns_72"
"(phase+"
" phase_97"
" phase-shift_18))))"
"(let-values(((inst_5)"
"(if single-expression?_1"
" link-instance_0"
"(let-values(((phase-ns31_0)"
" phase-ns_0)"
"((phase-shift32_0)"
" phase-shift_18)"
"((temp33_1)"
"(namespace-mpi"
" ns_72))"
"((temp34_3)"
"(namespace-inspector"
" ns_72))"
"((temp35_1)"
"(namespace-bulk-binding-registry"
" ns_72))"
"((temp36_2)"
"(lambda(name_60"
" val_68)"
"(namespace-set-transformer!"
" ns_72"
"(phase+"
"(sub1"
" phase_97)"
" phase-shift_18)"
" name_60"
" val_68))))"
"(make-instance-instance13.1"
" temp35_1"
" temp34_3"
" phase-ns31_0"
" phase-shift32_0"
" temp33_1"
" temp36_2)))))"
"(let-values(((linklet_9)"
"(hash-ref"
" h_11"
" phase_97"
" #f)))"
"(if linklet_9"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((linklet37_0)"
" linklet_9)"
"((temp38_2)"
" 3)"
"((module-uses39_0)"
" module-uses_1)"
"((import-module-instances40_0)"
" import-module-instances_2)"
"((temp41_1)"
"(current-code-inspector))"
"((extra-inspector42_0)"
" extra-inspector_8)"
"((temp43_2)"
"(hash-ref"
" phase-to-link-extra-inspectorsss_3"
" phase_97"
" #f)))"
"(check-require-access9.1"
" temp38_2"
" linklet37_0"
" module-uses39_0"
" import-module-instances40_0"
" temp41_1"
" extra-inspector42_0"
" temp43_2))"
"(values))))"
"(let-values(((instantiate_0)"
"(lambda(tail?_49)"
"(begin"
" 'instantiate"
"(1/instantiate-linklet"
" linklet_9"
"(list*"
" top-level-instance"
" link-instance_0"
" inst_5"
" import-instances_1)"
"(namespace->instance"
" ns_72"
"(phase-"
"(phase+"
" phase_97"
" phase-shift_18)"
"(namespace-0-phase"
" ns_72)))"
"(not"
" tail?_49))))))"
"(if(zero-phase?"
" phase_97)"
"(let-values()"
" instantiate_0)"
"(if single-expression?_1"
"(let-values()"
"(lambda(tail?_50)"
"(begin"
" 'prev-thunk"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" phase-ns_0)"
"(let-values()"
"(instantiate_0"
" tail?_50))))))"
"(let-values()"
"(let-values(((ns-1_1)"
"(namespace->namespace-at-phase"
" phase-ns_0"
"(sub1"
" phase_97))))"
"(lambda(tail?_51)"
"(begin"
" 'prev-thunk"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
"(let-values(((ns-144_0)"
" ns-1_1))"
"(make-expand-context10.1"
" #f"
" #f"
" #f"
" ns-144_0))"
" 1/current-namespace"
" phase-ns_0)"
"(let-values()"
"(instantiate_0"
" tail?_51))))))))))))"
"(let-values()"
" void)))))))))))"
"(values"
" prev-thunk_3)))))"
"(if(not #f)"
"(for-loop_197"
" prev-thunk_1"
"(+ pos_101 inc_21))"
" prev-thunk_1)))"
" prev-thunk_0)))))"
" for-loop_197)"
" void"
" start_38)))))"
"(thunk_5 as-tail?_2))))))))))))))))))))"
"(define-values"
"(link-instance-from-compiled-in-memory)"
"(lambda(cim_11 to-ns_0)"
"(begin"
"(let-values(((orig-syntax-literals_0)(compiled-in-memory-syntax-literals cim_11)))"
"(let-values(((syntax-literals_6)"
"(if(not to-ns_0)"
"(let-values() orig-syntax-literals_0)"
"(if(namespace-scopes=?"
"(compiled-in-memory-namespace-scopes cim_11)"
"(extract-namespace-scopes to-ns_0))"
"(let-values() orig-syntax-literals_0)"
"(let-values()"
"(let-values(((len_32)(vector-length orig-syntax-literals_0)))"
"(begin"
"(if(exact-nonnegative-integer? len_32)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'for/vector \"exact-nonnegative-integer?\" len_32)))"
"(let-values(((v_98)(make-vector len_32 0)))"
"(begin"
"(if(zero? len_32)"
"(void)"
"(let-values()"
"(let-values(((vec_67 len_33)"
"(let-values(((vec_68) orig-syntax-literals_0))"
"(begin"
"(check-vector vec_68)"
"(values vec_68(unsafe-vector-length vec_68))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_6)"
"(lambda(i_158 pos_105)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_105 len_33)"
"(let-values(((s_50)"
"(unsafe-vector-ref vec_67 pos_105)))"
"(let-values(((i_83)"
"(let-values(((i_159) i_158))"
"(let-values(((i_160)"
"(let-values()"
"(begin"
"(unsafe-vector*-set!"
" v_98"
" i_159"
"(let-values()"
"(swap-top-level-scopes"
" s_50"
"(compiled-in-memory-namespace-scopes"
" cim_11)"
" to-ns_0)))"
"(unsafe-fx+"
" 1"
" i_159)))))"
"(values i_160)))))"
"(if(if(not"
"((lambda x_73(unsafe-fx= i_83 len_32))"
" s_50))"
"(not #f)"
" #f)"
"(for-loop_6 i_83(unsafe-fx+ 1 pos_105))"
" i_83)))"
" i_158)))))"
" for-loop_6)"
" 0"
" 0)))))"
" v_98)))))))))"
"(1/make-instance"
" 'link"
" #f"
" 'constant"
" mpi-vector-id"
"(compiled-in-memory-mpis cim_11)"
" syntax-literals-id"
" syntax-literals_6))))))"
"(define-values(not-available)(gensym 'not-available))"
"(define-values(get-not-available)(lambda()(begin not-available)))"
"(define-values"
"(can-direct-eval?)"
"(lambda(p_45 ns_42 self-mpi_3)"
"(begin"
"(if(parsed-app? p_45)"
"(let-values()"
"(if(can-direct-eval?(parsed-app-rator p_45) ns_42 self-mpi_3)"
"(let-values(((lst_103)(parsed-app-rands p_45)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_103)))"
"((letrec-values(((for-loop_117)"
"(lambda(result_113 lst_84)"
"(begin"
" 'for-loop"
"(if(pair? lst_84)"
"(let-values(((r_42)(unsafe-car lst_84))((rest_50)(unsafe-cdr lst_84)))"
"(let-values(((result_79)"
"(let-values()"
"(let-values(((result_114)"
"(let-values()"
"(let-values()"
"(can-direct-eval? r_42 ns_42 self-mpi_3)))))"
"(values result_114)))))"
"(if(if(not((lambda x_74(not result_79)) r_42))(not #f) #f)"
"(for-loop_117 result_79 rest_50)"
" result_79)))"
" result_113)))))"
" for-loop_117)"
" #t"
" lst_103)))"
" #f))"
"(if(parsed-id? p_45)"
"(let-values()(not(eq?(get-id-value p_45 ns_42 self-mpi_3) not-available)))"
"(if(parsed-quote? p_45)"
"(let-values() #t)"
"(if(parsed-quote-syntax? p_45)(let-values() #t)(let-values() #f))))))))"
"(define-values"
"(direct-eval)"
"(lambda(p_48 ns_67 self-mpi_4)"
"(begin"
"(if(parsed-app? p_48)"
"(let-values()"
"(apply"
"(direct-eval(parsed-app-rator p_48) ns_67 self-mpi_4)"
"(reverse$1"
"(let-values(((lst_77)(parsed-app-rands p_48)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_77)))"
"((letrec-values(((for-loop_98)"
"(lambda(fold-var_232 lst_78)"
"(begin"
" 'for-loop"
"(if(pair? lst_78)"
"(let-values(((r_8)(unsafe-car lst_78))((rest_36)(unsafe-cdr lst_78)))"
"(let-values(((fold-var_223)"
"(let-values(((fold-var_69) fold-var_232))"
"(let-values(((fold-var_26)"
"(let-values()"
"(cons"
"(let-values()"
"(direct-eval r_8 ns_67 self-mpi_4))"
" fold-var_69))))"
"(values fold-var_26)))))"
"(if(not #f)(for-loop_98 fold-var_223 rest_36) fold-var_223)))"
" fold-var_232)))))"
" for-loop_98)"
" null"
" lst_77))))))"
"(if(parsed-id? p_48)"
"(let-values()(get-id-value p_48 ns_67 self-mpi_4))"
"(if(parsed-quote? p_48)"
"(let-values()(parsed-quote-datum p_48))"
"(if(parsed-quote-syntax? p_48)(let-values()(parsed-quote-syntax-datum p_48))(let-values() #f))))))))"
"(define-values"
"(get-id-value)"
"(lambda(p_1 ns_73 self-mpi_5)"
"(begin"
"(let-values(((b_76)(parsed-id-binding p_1)))"
"(if(parsed-primitive-id? p_1)"
"(let-values()(hash-ref(1/primitive-table '#%kernel)(module-binding-sym b_76) get-not-available))"
"(if(let-values(((or-part_74)(parsed-top-id? p_1)))"
"(if or-part_74"
" or-part_74"
"(let-values(((or-part_75)(not b_76)))"
"(if or-part_75 or-part_75(eq? self-mpi_5(module-binding-module b_76))))))"
"(let-values()"
"(namespace-get-variable"
" ns_73"
"(if b_76(module-binding-phase b_76)(namespace-phase ns_73))"
"(if b_76(module-binding-sym b_76)(syntax-e$1(parsed-s p_1)))"
" get-not-available))"
"(let-values()"
"(let-values(((mi_18)"
"(let-values(((ns1_2) ns_73)"
"((temp2_4)(1/module-path-index-resolve(module-binding-module b_76)))"
"((temp3_4)(phase-(namespace-phase ns_73)(module-binding-phase b_76))))"
"(namespace->module-instance70.1 #f #f unsafe-undefined ns1_2 temp2_4 temp3_4))))"
"(if(not mi_18)"
"(let-values() not-available)"
"(if(check-single-require-access"
" mi_18"
"(module-binding-phase b_76)"
"(module-binding-sym b_76)"
"(module-binding-extra-inspector b_76))"
"(let-values()"
"(namespace-get-variable"
"(module-instance-namespace mi_18)"
"(module-binding-phase b_76)"
"(module-binding-sym b_76)"
" get-not-available))"
"(let-values() not-available)))))))))))"
"(define-values(runtime-scope)(new-multi-scope))"
"(define-values(runtime-stx)(add-scope empty-syntax runtime-scope))"
"(define-values(runtime-module-name)(1/make-resolved-module-path '#%runtime))"
"(define-values(runtime-mpi)(1/module-path-index-join ''#%runtime #f))"
"(define-values"
"(add-runtime-primitive!)"
"(lambda(sym_67)"
"(begin"
"(let-values(((temp1_4)(syntax-scope-set runtime-stx 0))"
"((sym2_0) sym_67)"
"((temp3_5)"
"(let-values(((runtime-mpi4_0) runtime-mpi)((temp5_4) 0)((sym6_2) sym_67))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" runtime-mpi4_0"
" temp5_4"
" sym6_2))))"
"(add-binding-in-scopes!20.1 #f temp1_4 sym2_0 temp3_5)))))"
"(void"
"(begin"
"(add-runtime-primitive! 'values)"
"(add-runtime-primitive! 'cons)"
"(add-runtime-primitive! 'list)"
"(add-runtime-primitive! 'make-struct-type)"
"(add-runtime-primitive! 'make-struct-type-property)"
"(add-runtime-primitive! 'gensym)"
"(add-runtime-primitive! 'string->uninterned-symbol)))"
"(define-values"
"(runtime-instances)"
" '(#%kernel #%paramz #%foreign #%unsafe #%flfxnum #%extfl #%network #%place #%futures))"
"(define-values(box-cons!)(lambda(b_16 v_73)(begin(set-box! b_16(cons v_73(unbox b_16))))))"
"(define-values(box-clear!)(lambda(b_17)(begin(begin0(reverse$1(unbox b_17))(set-box! b_17 null)))))"
"(define-values"
"(struct:lift-context lift-context1.1 lift-context? lift-context-convert lift-context-lifts lift-context-module*-ok?)"
"(let-values(((struct:_74 make-_74 ?_74 -ref_74 -set!_74)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lift-context"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'lift-context)))))"
"(values"
" struct:_74"
" make-_74"
" ?_74"
"(make-struct-field-accessor -ref_74 0 'convert)"
"(make-struct-field-accessor -ref_74 1 'lifts)"
"(make-struct-field-accessor -ref_74 2 'module*-ok?))))"
"(define-values"
"(struct:lifted-bind lifted-bind2.1 lifted-bind? lifted-bind-ids lifted-bind-keys lifted-bind-rhs)"
"(let-values(((struct:_75 make-_75 ?_75 -ref_75 -set!_75)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lifted-bind"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'lifted-bind)))))"
"(values"
" struct:_75"
" make-_75"
" ?_75"
"(make-struct-field-accessor -ref_75 0 'ids)"
"(make-struct-field-accessor -ref_75 1 'keys)"
"(make-struct-field-accessor -ref_75 2 'rhs))))"
"(define-values"
"(make-lift-context6.1)"
"(lambda(module*-ok?3_0 convert5_0)"
"(begin"
" 'make-lift-context6"
"(let-values(((convert_0) convert5_0))"
"(let-values(((module*-ok?_0) module*-ok?3_0))"
"(let-values()(lift-context1.1 convert_0(box null) module*-ok?_0)))))))"
"(define-values"
"(add-lifted!)"
"(lambda(lifts_1 ids_16 rhs_12 phase_98)"
"(begin"
"(let-values(((lifted-ids_0 lifted_0)((lift-context-convert lifts_1) ids_16 rhs_12 phase_98)))"
"(begin(box-cons!(lift-context-lifts lifts_1) lifted_0) lifted-ids_0)))))"
"(define-values(get-and-clear-lifts!)(lambda(lifts_2)(begin(box-clear!(lift-context-lifts lifts_2)))))"
"(define-values"
"(make-local-lift)"
"(lambda(lift-env_1 counter_3)"
"(begin"
"(lambda(ids_17 rhs_13 phase_99)"
"(let-values(((keys_2)"
"(reverse$1"
"(let-values(((lst_277) ids_17))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_277)))"
"((letrec-values(((for-loop_29)"
"(lambda(fold-var_162 lst_278)"
"(begin"
" 'for-loop"
"(if(pair? lst_278)"
"(let-values(((id_59)(unsafe-car lst_278))"
"((rest_154)(unsafe-cdr lst_278)))"
"(let-values(((fold-var_85)"
"(let-values(((fold-var_86) fold-var_162))"
"(let-values(((fold-var_87)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((key_15)"
"(let-values(((id32_0)"
" id_59)"
"((phase33_0)"
" phase_99)"
"((counter34_0)"
" counter_3))"
"(add-local-binding!37.1"
" #f"
" #f"
" id32_0"
" phase33_0"
" counter34_0))))"
"(begin"
"(set-box!"
" lift-env_1"
"(hash-set"
"(unbox lift-env_1)"
" key_15"
" variable))"
" key_15)))"
" fold-var_86))))"
"(values fold-var_87)))))"
"(if(not #f)(for-loop_29 fold-var_85 rest_154) fold-var_85)))"
" fold-var_162)))))"
" for-loop_29)"
" null"
" lst_277))))))"
"(values ids_17(lifted-bind2.1 ids_17 keys_2 rhs_13)))))))"
"(define-values"
"(make-top-level-lift)"
"(lambda(ctx_11)"
"(begin"
"(lambda(ids_18 rhs_14 phase_7)"
"(let-values(((post-scope_0)"
"(post-expansion-scope"
"(root-expand-context-post-expansion"
"(namespace-get-root-expand-ctx(expand-context-namespace ctx_11))))))"
"(let-values(((tl-ids_1)"
"(reverse$1"
"(let-values(((lst_186) ids_18))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_186)))"
"((letrec-values(((for-loop_250)"
"(lambda(fold-var_233 lst_187)"
"(begin"
" 'for-loop"
"(if(pair? lst_187)"
"(let-values(((id_60)(unsafe-car lst_187))"
"((rest_155)(unsafe-cdr lst_187)))"
"(let-values(((fold-var_234)"
"(let-values(((fold-var_235) fold-var_233))"
"(let-values(((fold-var_236)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_60"
" post-scope_0))"
" fold-var_235))))"
"(values fold-var_236)))))"
"(if(not #f)"
"(for-loop_250 fold-var_234 rest_155)"
" fold-var_234)))"
" fold-var_233)))))"
" for-loop_250)"
" null"
" lst_186))))))"
"(let-values(((syms_20)(select-defined-syms-and-bind!/ctx tl-ids_1 ctx_11)))"
"(values tl-ids_1(lifted-bind2.1 tl-ids_1 syms_20 rhs_14)))))))))"
"(define-values"
"(wrap-lifts-as-let)"
"(lambda(lifts_3 body_4 phase_100)"
"(begin"
"(datum->syntax$1"
" #f"
"(let-values(((lst_279)(reverse$1 lifts_3)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_279)))"
"((letrec-values(((for-loop_56)"
"(lambda(body_5 lst_189)"
"(begin"
" 'for-loop"
"(if(pair? lst_189)"
"(let-values(((lift_0)(unsafe-car lst_189))((rest_156)(unsafe-cdr lst_189)))"
"(let-values(((body_6)"
"(let-values(((body_7) body_5))"
"(let-values(((body_0)"
"(let-values()"
"(begin"
"(if(lifted-bind? lift_0)"
"(void)"
"(let-values()"
"                                                                           (error \"non-bindings in `lift-context`\")))"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1 core-stx phase_100)"
" 'let-values)"
"(list"
"(list"
"(lifted-bind-ids lift_0)"
"(lifted-bind-rhs lift_0)))"
" body_7)))))"
"(values body_0)))))"
"(if(not #f)(for-loop_56 body_6 rest_156) body_6)))"
" body_5)))))"
" for-loop_56)"
" body_4"
" lst_279)))))))"
"(define-values"
"(wrap-lifts-as-begin16.1)"
"(lambda(adjust-body10_0 adjust-form9_0 lifts13_0 body14_0 phase15_0)"
"(begin"
" 'wrap-lifts-as-begin16"
"(let-values(((lifts_4) lifts13_0))"
"(let-values(((body_8) body14_0))"
"(let-values(((phase_101) phase15_0))"
"(let-values(((adjust-form_0)(if(eq? adjust-form9_0 unsafe-undefined) values adjust-form9_0)))"
"(let-values(((adjust-body_0)(if(eq? adjust-body10_0 unsafe-undefined) values adjust-body10_0)))"
"(let-values()"
"(datum->syntax$1"
" #f"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_101) 'begin)"
"(append"
"(reverse$1"
"(let-values(((lst_280) lifts_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_280)))"
"((letrec-values(((for-loop_251)"
"(lambda(fold-var_168 lst_170)"
"(begin"
" 'for-loop"
"(if(pair? lst_170)"
"(let-values(((lift_1)(unsafe-car lst_170))"
"((rest_157)(unsafe-cdr lst_170)))"
"(let-values(((fold-var_169)"
"(let-values(((fold-var_182) fold-var_168))"
"(let-values(((fold-var_237)"
"(let-values()"
"(cons"
"(let-values()"
"(adjust-form_0"
"(if(lifted-bind? lift_1)"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1"
"(syntax-shift-phase-level$1"
" core-stx"
" phase_101)"
" 'define-values)"
"(lifted-bind-ids lift_1)"
"(lifted-bind-rhs"
" lift_1))))"
"(let-values() lift_1))))"
" fold-var_182))))"
"(values fold-var_237)))))"
"(if(not #f)(for-loop_251 fold-var_169 rest_157) fold-var_169)))"
" fold-var_168)))))"
" for-loop_251)"
" null"
" lst_280))))"
"(list(adjust-body_0 body_8))))))))))))))"
"(define-values"
"(get-lifts-as-lists)"
"(lambda(lifts_5)"
"(begin"
"(reverse$1"
"(let-values(((lst_50) lifts_5))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_50)))"
"((letrec-values(((for-loop_73)"
"(lambda(fold-var_35 lst_51)"
"(begin"
" 'for-loop"
"(if(pair? lst_51)"
"(let-values(((lift_2)(unsafe-car lst_51))((rest_22)(unsafe-cdr lst_51)))"
"(let-values(((fold-var_36)"
"(let-values(((fold-var_37) fold-var_35))"
"(let-values(((fold-var_38)"
"(let-values()"
"(cons"
"(let-values()"
"(list"
"(lifted-bind-ids lift_2)"
"(lifted-bind-keys lift_2)"
"(lifted-bind-rhs lift_2)))"
" fold-var_37))))"
"(values fold-var_38)))))"
"(if(not #f)(for-loop_73 fold-var_36 rest_22) fold-var_36)))"
" fold-var_35)))))"
" for-loop_73)"
" null"
" lst_50)))))))"
"(define-values"
"(struct:module-lift-context"
" module-lift-context19.1"
" module-lift-context?"
" module-lift-context-wrt-phase"
" module-lift-context-lifts"
" module-lift-context-module*-ok?)"
"(let-values(((struct:_76 make-_76 ?_76 -ref_76 -set!_76)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'module-lift-context"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'module-lift-context)))))"
"(values"
" struct:_76"
" make-_76"
" ?_76"
"(make-struct-field-accessor -ref_76 0 'wrt-phase)"
"(make-struct-field-accessor -ref_76 1 'lifts)"
"(make-struct-field-accessor -ref_76 2 'module*-ok?))))"
"(define-values"
"(make-module-lift-context)"
"(lambda(phase_10 module*-ok?_1)(begin(module-lift-context19.1 phase_10(box null) module*-ok?_1))))"
"(define-values"
"(get-and-clear-module-lifts!)"
"(lambda(module-lifts_1)(begin(box-clear!(module-lift-context-lifts module-lifts_1)))))"
"(define-values"
"(add-lifted-module!)"
"(lambda(module-lifts_2 s_409 phase_102)"
"(begin"
"(begin"
"(if(let-values(((or-part_171)"
"(if(module-lift-context? module-lifts_2)"
"(module-lift-context-module*-ok? module-lifts_2)"
" #f)))"
"(if or-part_171"
" or-part_171"
"(if(lift-context? module-lifts_2)(lift-context-module*-ok? module-lifts_2) #f)))"
"(void)"
"(let-values()"
"(let-values(((tmp_30)(core-form-sym s_409 phase_102)))"
"(if(equal? tmp_30 'module)"
"(let-values()(void))"
"(if(equal? tmp_30 'module*)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                     \"cannot lift `module*' to a top-level context\""
"                     \"syntax\""
" s_409))"
"(let-values()"
"                    (raise-arguments-error 'syntax-local-lift-module \"not a `module' declaration\" \"syntax\" s_409)))))))"
"(if(module-lift-context? module-lifts_2)"
"(let-values()(box-cons!(module-lift-context-lifts module-lifts_2) s_409))"
"(if(lift-context? module-lifts_2)"
"(let-values()(box-cons!(lift-context-lifts module-lifts_2) s_409))"
"            (let-values () (error \"internal error: unrecognized lift-context type for module lift\"))))))))"
"(define-values"
"(struct:require-lift-context"
" require-lift-context20.1"
" require-lift-context?"
" require-lift-context-do-require"
" require-lift-context-wrt-phase"
" require-lift-context-requires)"
"(let-values(((struct:_77 make-_77 ?_77 -ref_77 -set!_77)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'require-lift-context"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2)"
" #f"
" 'require-lift-context)))))"
"(values"
" struct:_77"
" make-_77"
" ?_77"
"(make-struct-field-accessor -ref_77 0 'do-require)"
"(make-struct-field-accessor -ref_77 1 'wrt-phase)"
"(make-struct-field-accessor -ref_77 2 'requires))))"
"(define-values"
"(make-require-lift-context)"
"(lambda(wrt-phase_0 do-require_0)(begin(require-lift-context20.1 do-require_0 wrt-phase_0(box null)))))"
"(define-values"
"(get-and-clear-require-lifts!)"
"(lambda(require-lifts_1)(begin(box-clear!(require-lift-context-requires require-lifts_1)))))"
"(define-values"
"(add-lifted-require!)"
"(lambda(require-lifts_2 s_410 phase_103)"
"(begin"
"(begin"
"((require-lift-context-do-require require-lifts_2) s_410 phase_103)"
"(box-cons!(require-lift-context-requires require-lifts_2) s_410)))))"
"(define-values"
"(struct:to-module-lift-context"
" to-module-lift-context21.1"
" to-module-lift-context?"
" to-module-lift-context-wrt-phase"
" to-module-lift-context-provides"
" to-module-lift-context-end-as-expressions?"
" to-module-lift-context-ends)"
"(let-values(((struct:_78 make-_78 ?_78 -ref_78 -set!_78)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'to-module-lift-context"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'to-module-lift-context)))))"
"(values"
" struct:_78"
" make-_78"
" ?_78"
"(make-struct-field-accessor -ref_78 0 'wrt-phase)"
"(make-struct-field-accessor -ref_78 1 'provides)"
"(make-struct-field-accessor -ref_78 2 'end-as-expressions?)"
"(make-struct-field-accessor -ref_78 3 'ends))))"
"(define-values"
"(make-to-module-lift-context27.1)"
"(lambda(end-as-expressions?23_0 shared-module-ends22_0 phase26_2)"
"(begin"
" 'make-to-module-lift-context27"
"(let-values(((phase_82) phase26_2))"
"(let-values(((ends_0) shared-module-ends22_0))"
"(let-values(((end-as-expressions?_0) end-as-expressions?23_0))"
"(let-values()(to-module-lift-context21.1 phase_82(box null) end-as-expressions?_0 ends_0))))))))"
"(define-values(make-shared-module-ends)(lambda()(begin(box null))))"
"(define-values"
"(get-and-clear-end-lifts!)"
"(lambda(to-module-lifts_1)(begin(box-clear!(to-module-lift-context-ends to-module-lifts_1)))))"
"(define-values"
"(get-and-clear-provide-lifts!)"
"(lambda(to-module-lifts_2)(begin(box-clear!(to-module-lift-context-provides to-module-lifts_2)))))"
"(define-values"
"(add-lifted-to-module-provide!)"
"(lambda(to-module-lifts_3 s_218 phase_96)"
"(begin(box-cons!(to-module-lift-context-provides to-module-lifts_3) s_218))))"
"(define-values"
"(add-lifted-to-module-end!)"
"(lambda(to-module-lifts_4 s_325 phase_3)(begin(box-cons!(to-module-lift-context-ends to-module-lifts_4) s_325))))"
"(define-values"
"(struct:already-expanded already-expanded1.1 already-expanded? already-expanded-s already-expanded-binding-layer)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded-syntax"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'already-expanded)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 's)"
"(make-struct-field-accessor -ref_0 1 'binding-layer))))"
"(define-values"
"(1/prop:liberal-define-context has-liberal-define-context-property? liberal-define-context-value)"
"(make-struct-type-property 'liberal-define-context))"
"(define-values"
"(struct:liberal-define-context make-liberal-define-context 1/liberal-define-context?)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'liberal-define-context"
" #f"
" 0"
" 0"
" #f"
"(list(cons 1/prop:liberal-define-context #t))"
" #f"
" #f"
" '()"
" #f"
" 'make-liberal-define-context)))))"
"(values struct:_0 make-_0 ?_0)))"
"(define-values"
"(1/prop:expansion-contexts expansion-contexts? expansion-contexts-ref)"
"(make-struct-type-property"
" 'expansion-contexts"
"(lambda(v_28 info_1)"
"(begin"
"(if(if(list? v_28)"
"(let-values(((lst_75) v_28))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_75)))"
"((letrec-values(((for-loop_97)"
"(lambda(result_77 lst_76)"
"(begin"
" 'for-loop"
"(if(pair? lst_76)"
"(let-values(((s_2)(unsafe-car lst_76))((rest_35)(unsafe-cdr lst_76)))"
"(let-values(((result_64)"
"(let-values()"
"(let-values(((result_115)"
"(let-values()"
"(let-values()"
"(memq"
" s_2"
" '(expression"
" top-level"
" module"
" module-begin"
" definition-context))))))"
"(values result_115)))))"
"(if(if(not((lambda x_75(not result_64)) s_2))(not #f) #f)"
"(for-loop_97 result_64 rest_35)"
" result_64)))"
" result_77)))))"
" for-loop_97)"
" #t"
" lst_75)))"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'guard-for-prop:expansion-contexts"
"            \"(listof (or/c 'expression 'top-level 'module 'module-begin 'definition-context))\""
" v_28)))"
" v_28))))"
"(define-values"
"(not-in-this-expand-context?)"
"(lambda(t_46 ctx_12)"
"(begin"
"(if(expansion-contexts? t_46)"
"(not(memq(context->symbol(expand-context-context ctx_12))(expansion-contexts-ref t_46)))"
" #f))))"
"(define-values(context->symbol)(lambda(context_5)(begin(if(symbol? context_5) context_5 'definition-context))))"
"(define-values"
"(avoid-current-expand-context)"
"(lambda(s_178 t_47 ctx_13)"
"(begin"
"(let-values(((wrap_1)"
"(lambda(sym_68)"
"(begin"
" 'wrap"
"(datum->syntax$1"
" #f"
"(list"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx sym_68)(expand-context-phase ctx_13))"
" s_178))))))"
"(let-values(((fail_0)"
"(lambda()"
"(begin"
" 'fail"
"(raise-syntax-error$1"
" #f"
"(format"
"                            \"not allowed in context\\n  expansion context: ~a\""
"(context->symbol(expand-context-context ctx_13)))"
" s_178)))))"
"(let-values(((tmp_31)(context->symbol(expand-context-context ctx_13))))"
"(if(equal? tmp_31 'module-begin)"
"(let-values()(wrap_1 'begin))"
"(if(if(equal? tmp_31 'module) #t(if(equal? tmp_31 'top-level) #t(equal? tmp_31 'definition-context)))"
"(let-values()(if(memq 'expression(expansion-contexts-ref t_47))(wrap_1 '#%expression)(fail_0)))"
"(let-values()(fail_0))))))))))"
"(define-values"
"(struct:reference-record"
" reference-record1.1"
" reference-record?"
" reference-record-already-bound"
" reference-record-reference-before-bound"
" reference-record-all-referenced?"
" set-reference-record-already-bound!"
" set-reference-record-reference-before-bound!"
" set-reference-record-all-referenced?!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'reference-record"
" #f"
" 3"
" 0"
" #f"
"(list(cons prop:authentic #t))"
" #f"
" #f"
" '()"
" #f"
" 'reference-record)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'already-bound)"
"(make-struct-field-accessor -ref_0 1 'reference-before-bound)"
"(make-struct-field-accessor -ref_0 2 'all-referenced?)"
"(make-struct-field-mutator -set!_0 0 'already-bound)"
"(make-struct-field-mutator -set!_0 1 'reference-before-bound)"
"(make-struct-field-mutator -set!_0 2 'all-referenced?))))"
"(define-values(make-reference-record)(lambda()(begin(reference-record1.1(seteq)(seteq) #f))))"
"(define-values"
"(reference-record-used!)"
"(lambda(rr_0 key_70)"
"(begin"
"(if(set-member?(reference-record-already-bound rr_0) key_70)"
"(void)"
"(let-values()"
"(set-reference-record-reference-before-bound!"
" rr_0"
"(set-add(reference-record-reference-before-bound rr_0) key_70)))))))"
"(define-values"
"(reference-records-all-used!)"
"(lambda(rrs_0)"
"(begin"
"(begin"
"(let-values(((lst_41) rrs_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_41)))"
"((letrec-values(((for-loop_252)"
"(lambda(lst_89)"
"(begin"
" 'for-loop"
"(if(pair? lst_89)"
"(let-values(((rr_1)(unsafe-car lst_89))((rest_120)(unsafe-cdr lst_89)))"
"(let-values(((post-guard-var_0)(lambda()(begin 'post-guard-var #t))))"
"(let-values()"
"(if(reference-record-all-referenced? rr_1)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(set-reference-record-all-referenced?! rr_1 #t))"
"(values)))))"
"(if(post-guard-var_0)(for-loop_252 rest_120)(values))))))))"
"(values))))))"
" for-loop_252)"
" lst_41)))"
"(void)))))"
"(define-values"
"(reference-record-bound!)"
"(lambda(rr_2 keys_3)"
"(begin"
"(begin"
"(set-reference-record-already-bound!"
" rr_2"
"(let-values(((lst_23) keys_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_23)))"
"((letrec-values(((for-loop_192)"
"(lambda(ab_3 lst_79)"
"(begin"
" 'for-loop"
"(if(pair? lst_79)"
"(let-values(((key_78)(unsafe-car lst_79))((rest_85)(unsafe-cdr lst_79)))"
"(let-values(((ab_4)"
"(let-values(((ab_5) ab_3))"
"(let-values(((ab_6)(let-values()(set-add ab_5 key_78))))"
"(values ab_6)))))"
"(if(not #f)(for-loop_192 ab_4 rest_85) ab_4)))"
" ab_3)))))"
" for-loop_192)"
"(reference-record-already-bound rr_2)"
" lst_23))))"
"(set-reference-record-reference-before-bound!"
" rr_2"
"(let-values(((lst_58) keys_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_58)))"
"((letrec-values(((for-loop_85)"
"(lambda(rbb_0 lst_24)"
"(begin"
" 'for-loop"
"(if(pair? lst_24)"
"(let-values(((key_79)(unsafe-car lst_24))((rest_26)(unsafe-cdr lst_24)))"
"(let-values(((rbb_1)"
"(let-values(((rbb_2) rbb_0))"
"(let-values(((rbb_3)(let-values()(set-remove rbb_2 key_79))))"
"(values rbb_3)))))"
"(if(not #f)(for-loop_85 rbb_1 rest_26) rbb_1)))"
" rbb_0)))))"
" for-loop_85)"
"(reference-record-reference-before-bound rr_2)"
" lst_58))))))))"
"(define-values"
"(reference-record-forward-references?)"
"(lambda(rr_3)"
"(begin"
"(let-values(((or-part_21)(reference-record-all-referenced? rr_3)))"
"(if or-part_21 or-part_21(positive?(set-count(reference-record-reference-before-bound rr_3))))))))"
"(define-values"
"(reference-record-clear!)"
"(lambda(rr_4)"
"(begin"
"(begin(set-reference-record-already-bound! rr_4 #f)(set-reference-record-reference-before-bound! rr_4 #f)))))"
"(define-values"
"(call-expand-observe)"
"(lambda(obs_0 key_80 . args_5)"
"(begin"
"(begin"
"(let-values(((c1_28)(hash-ref key->arity key_80 #f)))"
"(if c1_28"
"((lambda(arity_2)"
"(if(let-values(((or-part_130)(eq? arity_2 'any)))"
"(if or-part_130 or-part_130(eqv?(length args_5) arity_2)))"
"(void)"
"                 (let-values () (error 'call-expand-observe \"wrong arity for ~s: ~e\" key_80 args_5))))"
" c1_28)"
"            (let-values () (error 'call-expand-observe \"bad key: ~s\" key_80))))"
"(obs_0 key_80(if(null? args_5)(let-values() #f)(let-values()(apply list* args_5))))))))"
"(define-values"
"(key->arity)"
" '#hash((block->letrec . 1)"
"(block->list . 1)"
"(block-renames . 2)"
"(enter-bind . 0)"
"(enter-block . 1)"
"(enter-check . 1)"
"(enter-list . 1)"
"(enter-local . 1)"
"(enter-macro . 1)"
"(enter-prim . 1)"
"(exit-bind . 0)"
"(exit-check . 1)"
"(exit-list . 1)"
"(exit-local . 1)"
"(exit-local-bind . 0)"
"(exit-macro . 1)"
"(exit-prim . 1)"
"(lambda-renames . 2)"
"(let-renames . any)"
"(letlift-loop . 1)"
"(letrec-syntaxes-renames . any)"
"(lift-expr . 2)"
"(lift-loop . 1)"
"(lift-provide . 1)"
"(lift-require . 3)"
"(lift-statement . 1)"
"(local-bind . 1)"
"(local-post . 1)"
"(local-pre . 1)"
"(local-value . 1)"
"(local-value-result . 1)"
"(macro-post-x . 2)"
"(macro-pre-x . 1)"
"(module-body . 1)"
"(module-lift-end-loop . 1)"
"(module-lift-loop . 1)"
"(next . 0)"
"(next-group . 0)"
"(opaque-expr . 1)"
"(phase-up . 0)"
"(prepare-env . 0)"
"(prim-#%app . 0)"
"(prim-#%datum . 0)"
"(prim-#%expression . 0)"
"(prim-#%stratified . 0)"
"(prim-#%top . 0)"
"(prim-#%variable-reference . 0)"
"(prim-begin . 0)"
"(prim-begin-for-syntax . 0)"
"(prim-begin0 . 0)"
"(prim-case-lambda . 0)"
"(prim-define-syntaxes . 0)"
"(prim-define-values . 0)"
"(prim-if . 0)"
"(prim-lambda . 0)"
"(prim-let-values . 0)"
"(prim-letrec-syntaxes+values . 0)"
"(prim-letrec-values . 0)"
"(prim-module . 0)"
"(prim-module-begin . 0)"
"(prim-provide . 0)"
"(prim-quote . 0)"
"(prim-quote-syntax . 0)"
"(prim-require . 0)"
"(prim-set! . 0)"
"(prim-stop . 0)"
"(prim-submodule . 0)"
"(prim-submodule* . 0)"
"(prim-with-continuation-mark . 0)"
"(rename-list . 1)"
"(rename-one . 1)"
"(resolve . 1)"
"(return . 1)"
"(splice . 1)"
"(start . 0)"
"(start-top . 0)"
"(tag . 1)"
"(track-origin . 2)"
"(variable . 2)"
"(visit . 1)))"
"(define-values"
"(rebuild5.1)"
"(lambda(track?1_0 orig-s3_0 new4_0)"
"(begin"
" 'rebuild5"
"(let-values(((orig-s_30) orig-s3_0))"
"(let-values(((new_2) new4_0))"
"(let-values(((track?_0) track?1_0))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 orig-s_30) new_2 orig-s_30(if track?_0 orig-s_30 #f))"
" orig-s_30))))))))"
"(define-values"
"(struct:expanded+parsed expanded+parsed1.1 expanded+parsed? expanded+parsed-s expanded+parsed-parsed)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'expanded+parsed"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'expanded+parsed)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 's)"
"(make-struct-field-accessor -ref_0 1 'parsed))))"
"(define-values"
"(struct:semi-parsed-define-values"
" semi-parsed-define-values2.1"
" semi-parsed-define-values?"
" semi-parsed-define-values-s"
" semi-parsed-define-values-syms"
" semi-parsed-define-values-ids"
" semi-parsed-define-values-rhs)"
"(let-values(((struct:_68 make-_68 ?_68 -ref_68 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-define-values"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'semi-parsed-define-values)))))"
"(values"
" struct:_68"
" make-_68"
" ?_68"
"(make-struct-field-accessor -ref_68 0 's)"
"(make-struct-field-accessor -ref_68 1 'syms)"
"(make-struct-field-accessor -ref_68 2 'ids)"
"(make-struct-field-accessor -ref_68 3 'rhs))))"
"(define-values"
"(struct:semi-parsed-begin-for-syntax"
" semi-parsed-begin-for-syntax3.1"
" semi-parsed-begin-for-syntax?"
" semi-parsed-begin-for-syntax-s"
" semi-parsed-begin-for-syntax-body)"
"(let-values(((struct:_10 make-_10 ?_10 -ref_10 -set!_10)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'semi-parsed-begin-for-syntax"
" #f"
" 2"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'semi-parsed-begin-for-syntax)))))"
"(values"
" struct:_10"
" make-_10"
" ?_10"
"(make-struct-field-accessor -ref_10 0 's)"
"(make-struct-field-accessor -ref_10 1 'body))))"
"(define-values(extract-syntax)(lambda(s_191)(begin(if(expanded+parsed? s_191)(expanded+parsed-s s_191) s_191))))"
"(define-values"
"(parsed-only)"
"(lambda(l_70)"
"(begin"
"(reverse$1"
"(let-values(((lst_178) l_70))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_178)))"
"((letrec-values(((for-loop_249)"
"(lambda(fold-var_5 lst_276)"
"(begin"
" 'for-loop"
"(if(pair? lst_276)"
"(let-values(((i_45)(unsafe-car lst_276))((rest_152)(unsafe-cdr lst_276)))"
"(let-values(((fold-var_230)"
"(let-values(((fold-var_231) fold-var_5))"
"(if(let-values(((or-part_264)(parsed? i_45)))"
"(if or-part_264"
" or-part_264"
"(let-values(((or-part_36)(expanded+parsed? i_45)))"
"(if or-part_36"
" or-part_36"
"(semi-parsed-begin-for-syntax? i_45)))))"
"(let-values(((fold-var_176) fold-var_231))"
"(let-values(((fold-var_177)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_45)"
"(let-values()"
"(expanded+parsed-parsed i_45))"
"(if(semi-parsed-begin-for-syntax? i_45)"
"(let-values()"
"(parsed-begin-for-syntax21.1"
"(semi-parsed-begin-for-syntax-s i_45)"
"(parsed-only"
"(semi-parsed-begin-for-syntax-body"
" i_45))))"
"(let-values() i_45))))"
" fold-var_176))))"
"(values fold-var_177)))"
" fold-var_231))))"
"(if(not #f)(for-loop_249 fold-var_230 rest_152) fold-var_230)))"
" fold-var_5)))))"
" for-loop_249)"
" null"
" lst_178)))))))"
"(define-values"
"(syntax-only)"
"(lambda(l_19)"
"(begin"
"(reverse$1"
"(let-values(((lst_281) l_19))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_281)))"
"((letrec-values(((for-loop_253)"
"(lambda(fold-var_163 lst_282)"
"(begin"
" 'for-loop"
"(if(pair? lst_282)"
"(let-values(((i_37)(unsafe-car lst_282))((rest_158)(unsafe-cdr lst_282)))"
"(let-values(((fold-var_86)"
"(let-values(((fold-var_87) fold-var_163))"
"(if(let-values(((or-part_265)(syntax?$1 i_37)))"
"(if or-part_265"
" or-part_265"
"(let-values(((or-part_25)(expanded+parsed? i_37)))"
"(if or-part_25"
" or-part_25"
"(semi-parsed-begin-for-syntax? i_37)))))"
"(let-values(((fold-var_88) fold-var_87))"
"(let-values(((fold-var_238)"
"(let-values()"
"(cons"
"(let-values()"
"(if(expanded+parsed? i_37)"
"(let-values()(expanded+parsed-s i_37))"
"(if(semi-parsed-begin-for-syntax? i_37)"
"(let-values()"
"(let-values(((s_411)"
"(semi-parsed-begin-for-syntax-s"
" i_37)))"
"(let-values(((nested-bodys_0)"
"(semi-parsed-begin-for-syntax-body"
" i_37)))"
"(let-values(((disarmed-s_0)"
"(syntax-disarm$1"
" s_411)))"
"(let-values(((ok?_28"
" begin-for-syntax7_0"
" _8_0)"
"(let-values(((s_412)"
" disarmed-s_0))"
"(let-values(((orig-s_31)"
" s_412))"
"(let-values(((begin-for-syntax7_1"
" _8_1)"
"(let-values(((s_86)"
"(if(syntax?$1"
" s_412)"
"(syntax-e$1"
" s_412)"
" s_412)))"
"(if(pair?"
" s_86)"
"(let-values(((begin-for-syntax9_0)"
"(let-values(((s_28)"
"(car"
" s_86)))"
" s_28))"
"((_10_0)"
"(let-values(((s_29)"
"(cdr"
" s_86)))"
"(let-values(((s_30)"
"(if(syntax?$1"
" s_29)"
"(syntax-e$1"
" s_29)"
" s_29)))"
"(let-values(((flat-s_20)"
"(to-syntax-list.1"
" s_30)))"
"(if(not"
" flat-s_20)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_31))"
"(let-values()"
" flat-s_20)))))))"
"(values"
" begin-for-syntax9_0"
" _10_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_31)))))"
"(values"
" #t"
" begin-for-syntax7_1"
" _8_1))))))"
"(let-values(((s11_0) s_411)"
"((temp12_2)"
"(list*"
" begin-for-syntax7_0"
"(syntax-only"
" nested-bodys_0))))"
"(rebuild5.1"
" #t"
" s11_0"
" temp12_2)))))))"
"(let-values() i_37))))"
" fold-var_88))))"
"(values fold-var_238)))"
" fold-var_87))))"
"(if(not #f)(for-loop_253 fold-var_86 rest_158) fold-var_86)))"
" fold-var_163)))))"
" for-loop_253)"
" null"
" lst_281)))))))"
"(define-values"
"(expand9.1)"
"(lambda(alternate-id1_0 fail-non-transformer3_0 skip-log?2_0 s7_0 ctx8_0)"
"(begin"
" 'expand9"
"(let-values(((s_188) s7_0))"
"(let-values(((ctx_14) ctx8_0))"
"(let-values(((alternate-id_0) alternate-id1_0))"
"(let-values(((skip-log?_0) skip-log?2_0))"
"(let-values(((fail-non-transformer_0) fail-non-transformer3_0))"
"(let-values()"
"(begin"
"(let-values(((obs_1)(expand-context-observer ctx_14)))"
"(if obs_1"
"(let-values()"
"(if(not skip-log?_0)"
"(let-values()"
"(call-expand-observe"
" obs_1"
"(if(expand-context-only-immediate? ctx_14) 'enter-check 'visit)"
" s_188))"
"(void)))"
"(void)))"
"(if(syntax-identifier? s_188)"
"(let-values()(expand-identifier s_188 ctx_14 alternate-id_0))"
"(if(if(pair?(syntax-content s_188))(syntax-identifier?(car(syntax-content s_188))) #f)"
"(let-values()"
"(let-values(((s122_0) s_188)"
"((ctx123_0) ctx_14)"
"((alternate-id124_0) alternate-id_0)"
"((fail-non-transformer125_0) fail-non-transformer_0))"
"(expand-id-application-form17.1"
" fail-non-transformer125_0"
" s122_0"
" ctx123_0"
" alternate-id124_0)))"
"(if(let-values(((or-part_67)(pair?(syntax-content s_188))))"
"(if or-part_67 or-part_67(null?(syntax-content s_188))))"
"(let-values()(expand-implicit '#%app s_188 ctx_14 #f))"
"(if(already-expanded?(syntax-content s_188))"
"(let-values()(expand-already-expanded s_188 ctx_14))"
"(let-values()(expand-implicit '#%datum s_188 ctx_14 #f))))))))))))))))"
"(define-values"
"(expand-identifier)"
"(lambda(s_413 ctx_15 alternate-id_1)"
"(begin"
"(let-values(((id_61)(let-values(((or-part_266) alternate-id_1))(if or-part_266 or-part_266 s_413))))"
"(if(if(not(free-id-set-empty?(expand-context-stops ctx_15)))"
"(free-id-set-member?(expand-context-stops ctx_15)(expand-context-phase ctx_15) id_61)"
" #f)"
"(let-values()"
"(begin"
"(let-values(((obs_2)(expand-context-observer ctx_15)))"
"(if obs_2"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_15))"
"(let-values()"
"(begin"
"(call-expand-observe obs_2 'resolve id_61)"
"(call-expand-observe obs_2 'enter-prim s_413)"
"(call-expand-observe obs_2 'prim-stop)"
"(call-expand-observe obs_2 'exit-prim s_413)"
"(call-expand-observe obs_2 'return s_413)))"
"(void)))"
"(void)))"
" s_413))"
"(let-values()"
"(let-values(((binding_18)"
"(let-values(((id126_0) id_61)"
"((temp127_1)(expand-context-phase ctx_15))"
"((temp128_1) 'ambiguous)"
"((temp129_0) #t))"
"(resolve+shift28.1 temp128_1 #f null temp129_0 #f id126_0 temp127_1))))"
"(begin"
"(let-values(((obs_3)(expand-context-observer ctx_15)))"
"(if obs_3"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_15))"
"(let-values()(call-expand-observe obs_3 'resolve id_61))"
"(void)))"
"(void)))"
"(if(eq? binding_18 'ambiguous)"
"(let-values()(raise-ambiguous-error id_61 ctx_15))"
"(if(not binding_18)"
"(let-values()(expand-implicit '#%top(substitute-alternate-id s_413 alternate-id_1) ctx_15 s_413))"
"(let-values()"
"(let-values(((t_48 primitive?_2 insp-of-t_0 protected?_3)"
"(let-values(((binding138_0) binding_18)"
"((ctx139_0) ctx_15)"
"((id140_0) id_61)"
"((temp141_0)(if alternate-id_1 s_413 #f))"
"((temp142_0)(expand-context-in-local-expand? ctx_15)))"
"(lookup62.1 temp141_0 temp142_0 binding138_0 ctx139_0 id140_0))))"
"(let-values(((t130_0) t_48)"
"((insp-of-t131_0) insp-of-t_0)"
"((s132_0) s_413)"
"((id133_0) id_61)"
"((ctx134_0) ctx_15)"
"((binding135_0) binding_18)"
"((primitive?136_0) primitive?_2)"
"((protected?137_0) protected?_3))"
"(dispatch30.1"
" #f"
" t130_0"
" insp-of-t131_0"
" s132_0"
" id133_0"
" ctx134_0"
" binding135_0"
" primitive?136_0"
" protected?137_0))))))))))))))"
"(define-values"
"(expand-id-application-form17.1)"
"(lambda(fail-non-transformer12_0 s14_0 ctx15_0 alternate-id16_0)"
"(begin"
" 'expand-id-application-form17"
"(let-values(((s_84) s14_0))"
"(let-values(((ctx_16) ctx15_0))"
"(let-values(((alternate-id_2) alternate-id16_0))"
"(let-values(((fail-non-transformer_1) fail-non-transformer12_0))"
"(let-values()"
"(let-values(((id_62)"
"(let-values(((or-part_141) alternate-id_2))"
"(if or-part_141 or-part_141(car(syntax-e/no-taint s_84))))))"
"(if(if(not(free-id-set-empty?(expand-context-stops ctx_16)))"
"(free-id-set-member?(expand-context-stops ctx_16)(expand-context-phase ctx_16) id_62)"
" #f)"
"(let-values()"
"(begin"
"(let-values(((obs_4)(expand-context-observer ctx_16)))"
"(if obs_4"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_16))"
"(let-values()"
"(begin"
"(call-expand-observe obs_4 'resolve id_62)"
"(call-expand-observe obs_4 'enter-prim s_84)"
"(call-expand-observe obs_4 'prim-stop)"
"(call-expand-observe obs_4 'exit-prim s_84)"
"(call-expand-observe obs_4 'return s_84)))"
"(void)))"
"(void)))"
" s_84))"
"(let-values()"
"(let-values(((binding_19)"
"(let-values(((id143_0) id_62)"
"((temp144_0)(expand-context-phase ctx_16))"
"((temp145_0) 'ambiguous)"
"((temp146_0) #t))"
"(resolve+shift28.1 temp145_0 #f null temp146_0 #f id143_0 temp144_0))))"
"(begin"
"(let-values(((obs_5)(expand-context-observer ctx_16)))"
"(if obs_5"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_16))"
"(let-values()(call-expand-observe obs_5 'resolve id_62))"
"(void)))"
"(void)))"
"(if(eq? binding_19 'ambiguous)"
"(let-values()"
"(begin"
"(if fail-non-transformer_1(let-values()(fail-non-transformer_1))(void))"
"(raise-ambiguous-error id_62 ctx_16)))"
"(if(not binding_19)"
"(let-values()"
"(begin"
"(if fail-non-transformer_1(let-values()(fail-non-transformer_1))(void))"
"(expand-implicit '#%app(substitute-alternate-id s_84 alternate-id_2) ctx_16 id_62)))"
"(let-values()"
"(let-values(((t_49 primitive?_3 insp-of-t_1 protected?_4)"
"(let-values(((binding147_0) binding_19)"
"((ctx148_0) ctx_16)"
"((id149_0) id_62)"
"((temp150_0)"
"(if alternate-id_2(car(syntax-e/no-taint s_84)) #f))"
"((temp151_0)(expand-context-in-local-expand? ctx_16)))"
"(lookup62.1 temp150_0 temp151_0 binding147_0 ctx148_0 id149_0))))"
"(if(variable? t_49)"
"(let-values()"
"(begin"
"(if fail-non-transformer_1(let-values()(fail-non-transformer_1))(void))"
"(expand-implicit"
" '#%app"
"(substitute-alternate-id s_84 alternate-id_2)"
" ctx_16"
" id_62)))"
"(let-values()"
"(let-values(((t152_0) t_49)"
"((insp-of-t153_0) insp-of-t_1)"
"((s154_0) s_84)"
"((id155_0) id_62)"
"((ctx156_0) ctx_16)"
"((binding157_0) binding_19)"
"((primitive?158_0) primitive?_3)"
"((protected?159_0) protected?_4)"
"((fail-non-transformer160_0) fail-non-transformer_1))"
"(dispatch30.1"
" fail-non-transformer160_0"
" t152_0"
" insp-of-t153_0"
" s154_0"
" id155_0"
" ctx156_0"
" binding157_0"
" primitive?158_0"
" protected?159_0)))))))))))))))))))))"
"(define-values"
"(expand-implicit)"
"(lambda(sym_69 s_52 ctx_17 trigger-id_1)"
"(begin"
"(if(expand-context-only-immediate? ctx_17)"
"(let-values()"
"(begin"
"(let-values(((obs_6)(expand-context-observer ctx_17)))"
"(if obs_6(let-values()(let-values()(call-expand-observe obs_6 'exit-check s_52)))(void)))"
" s_52))"
"(let-values()"
"(let-values(((disarmed-s_1)(syntax-disarm$1 s_52)))"
"(let-values(((id_63)(datum->syntax$1 disarmed-s_1 sym_69)))"
"(if(if(not(free-id-set-empty?(expand-context-stops ctx_17)))"
"(free-id-set-member?(expand-context-stops ctx_17)(expand-context-phase ctx_17) id_63)"
" #f)"
"(let-values()"
"(begin"
"(let-values(((obs_7)(expand-context-observer ctx_17)))"
"(if obs_7"
"(let-values()"
"(if(not(expand-context-only-immediate? ctx_17))"
"(let-values()"
"(begin"
"(call-expand-observe obs_7 'resolve id_63)"
"(call-expand-observe obs_7 'enter-prim s_52)"
"(call-expand-observe obs_7 'prim-stop)"
"(call-expand-observe obs_7 'exit-prim s_52)"
"(call-expand-observe obs_7 'return s_52)))"
"(void)))"
"(void)))"
" s_52))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_8)(expand-context-observer ctx_17)))"
"(if obs_8"
"(let-values()(let-values()(call-expand-observe obs_8 'resolve id_63)))"
"(void)))"
"(values))))"
"(let-values(((b_80)"
"(let-values(((id161_0) id_63)"
"((temp162_1)(expand-context-phase ctx_17))"
"((temp163_2) 'ambiguous)"
"((temp164_0) #t))"
"(resolve+shift28.1 temp163_2 #f null temp164_0 #f id161_0 temp162_1))))"
"(if(eq? b_80 'ambiguous)"
"(let-values()(raise-ambiguous-error id_63 ctx_17))"
"(let-values()"
"(let-values(((t_50 primitive?_4 insp-of-t_2 protected?_5)"
"(if b_80"
"(let-values(((b165_0) b_80)((ctx166_0) ctx_17)((id167_0) id_63))"
"(lookup62.1 #f #f b165_0 ctx166_0 id167_0))"
"(values #f #f #f #f))))"
"(if(transformer? t_50)"
"(let-values()"
"(let-values(((fail-non-transformer_2)"
"(if(1/rename-transformer? t_50)"
"(lambda()"
"(begin"
" 'fail-non-transformer"
"(raise-syntax-implicit-error s_52 sym_69 trigger-id_1 ctx_17)))"
" #f)))"
"(let-values(((t168_0) t_50)"
"((insp-of-t169_0) insp-of-t_2)"
"((temp170_1)(make-explicit ctx_17 sym_69 s_52 disarmed-s_1))"
"((id171_1) id_63)"
"((ctx172_0) ctx_17)"
"((b173_0) b_80)"
"((fail-non-transformer174_0) fail-non-transformer_2))"
"(dispatch-transformer41.1"
" fail-non-transformer174_0"
" t168_0"
" insp-of-t169_0"
" temp170_1"
" id171_1"
" ctx172_0"
" b173_0))))"
"(if(core-form? t_50)"
"(let-values()"
"(if(if(eq? sym_69 '#%top)"
"(if(eq?(core-form-name t_50) '#%top)"
"(expand-context-in-local-expand? ctx_17)"
" #f)"
" #f)"
"(let-values()(dispatch-implicit-#%top-core-form t_50 s_52 ctx_17))"
"(let-values()"
"(dispatch-core-form"
" t_50"
"(make-explicit ctx_17 sym_69 s_52 disarmed-s_1)"
" ctx_17))))"
"(let-values()"
"(let-values(((tl-id_0)"
"(if(eq? sym_69 '#%top)"
"(if(root-expand-context-top-level-bind-scope ctx_17)"
"(add-scope s_52(root-expand-context-top-level-bind-scope ctx_17))"
" #f)"
" #f)))"
"(let-values(((tl-b_0)"
"(if tl-id_0"
"(let-values(((tl-id175_0) tl-id_0)"
"((temp176_0)(expand-context-phase ctx_17)))"
"(resolve40.1 #f #f null #f tl-id175_0 temp176_0))"
" #f)))"
"(if tl-b_0"
"(let-values()"
"(if(if(expand-context-to-parsed? ctx_17)"
"(free-id-set-empty?(expand-context-stops ctx_17))"
" #f)"
"(parsed-id2.1 tl-id_0 tl-b_0 #f)"
" tl-id_0))"
"(let-values()"
"(raise-syntax-implicit-error"
" s_52"
" sym_69"
" trigger-id_1"
" ctx_17))))))))))))))))))))))"
"(define-values"
"(expand-already-expanded)"
"(lambda(s_59 ctx_18)"
"(begin"
"(let-values(((ae_0)(syntax-e$1 s_59)))"
"(let-values(((exp-s_0)(already-expanded-s ae_0)))"
"(begin"
"(if(let-values(((or-part_267)(syntax-any-macro-scopes? s_59)))"
"(if or-part_267"
" or-part_267"
"(let-values(((or-part_215)"
"(not"
"(eq?(expand-context-binding-layer ctx_18)(already-expanded-binding-layer ae_0)))))"
"(if or-part_215"
" or-part_215"
"(if(parsed? exp-s_0)"
"(not"
"(if(expand-context-to-parsed? ctx_18)"
"(free-id-set-empty?(expand-context-stops ctx_18))"
" #f))"
" #f)))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"                  \"expanded syntax not in its original lexical context;\\n\""
"                  \" extra bindings or scopes in the current context\")"
"(if(not(parsed? exp-s_0)) exp-s_0 #f)))"
"(void))"
"(if(expand-context-only-immediate? ctx_18)"
"(let-values() s_59)"
"(if(parsed? exp-s_0)"
"(let-values() exp-s_0)"
"(let-values()"
"(let-values(((result-s_1)(syntax-track-origin$1 exp-s_0 s_59)))"
"(begin"
"(let-values(((obs_9)(expand-context-observer ctx_18)))"
"(if obs_9"
"(let-values()(let-values()(call-expand-observe obs_9 'opaque-expr result-s_1)))"
"(void)))"
"(if(if(expand-context-to-parsed? ctx_18)(free-id-set-empty?(expand-context-stops ctx_18)) #f)"
"(let-values(((result-s177_0) result-s_1)((ctx178_0) ctx_18))"
"(expand9.1 #f #f #f result-s177_0 ctx178_0))"
" result-s_1))))))))))))"
"(define-values"
"(make-explicit)"
"(lambda(ctx_19 sym_70 s_414 disarmed-s_2)"
"(begin"
"(let-values(((new-s_0)"
"(syntax-rearm$1(datum->syntax$1 disarmed-s_2(cons sym_70 disarmed-s_2) s_414 s_414) s_414)))"
"(begin"
"(let-values(((obs_10)(expand-context-observer ctx_19)))"
"(if obs_10(let-values()(let-values()(call-expand-observe obs_10 'tag new-s_0)))(void)))"
" new-s_0)))))"
"(define-values"
"(dispatch30.1)"
"(lambda(fail-non-transformer20_0 t22_0 insp-of-t23_0 s24_1 id25_1 ctx26_0 binding27_1 primitive?28_0 protected?29_0)"
"(begin"
" 'dispatch30"
"(let-values(((t_51) t22_0))"
"(let-values(((insp-of-t_3) insp-of-t23_0))"
"(let-values(((s_415) s24_1))"
"(let-values(((id_64) id25_1))"
"(let-values(((ctx_20) ctx26_0))"
"(let-values(((binding_20) binding27_1))"
"(let-values(((primitive?_5) primitive?28_0))"
"(let-values(((protected?_6) protected?29_0))"
"(let-values(((fail-non-transformer_3) fail-non-transformer20_0))"
"(let-values()"
"(if(core-form? t_51)"
"(let-values()(dispatch-core-form t_51 s_415 ctx_20))"
"(if(transformer? t_51)"
"(let-values()"
"(let-values(((t179_0) t_51)"
"((insp-of-t180_0) insp-of-t_3)"
"((s181_0) s_415)"
"((id182_0) id_64)"
"((ctx183_0) ctx_20)"
"((binding184_0) binding_20)"
"((fail-non-transformer185_0) fail-non-transformer_3))"
"(dispatch-transformer41.1"
" fail-non-transformer185_0"
" t179_0"
" insp-of-t180_0"
" s181_0"
" id182_0"
" ctx183_0"
" binding184_0)))"
"(if(variable? t_51)"
"(let-values()"
"(dispatch-variable t_51 s_415 id_64 ctx_20 binding_20 primitive?_5 protected?_6))"
"                                (let-values () (raise-syntax-error$1 #f \"illegal use of syntax\" s_415))))))))))))))))))"
"(define-values"
"(dispatch-core-form)"
"(lambda(t_52 s_416 ctx_21)"
"(begin"
"(if(expand-context-only-immediate? ctx_21)"
"(let-values()"
"(begin"
"(let-values(((obs_11)(expand-context-observer ctx_21)))"
"(if obs_11(let-values()(let-values()(call-expand-observe obs_11 'exit-check s_416)))(void)))"
" s_416))"
"(if(expand-context-observer ctx_21)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_12)(expand-context-observer ctx_21)))"
"(if obs_12"
"(let-values()(let-values()(call-expand-observe obs_12 'enter-prim s_416)))"
"(void)))"
"(values))))"
"(let-values(((result-s_2)((core-form-expander t_52) s_416 ctx_21)))"
"(begin"
"(let-values(((obs_13)(expand-context-observer ctx_21)))"
"(if obs_13"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_13 'exit-prim(extract-syntax result-s_2))"
"(call-expand-observe obs_13 'return(extract-syntax result-s_2)))))"
"(void)))"
" result-s_2))))"
"(let-values()((core-form-expander t_52) s_416 ctx_21)))))))"
"(define-values"
"(dispatch-implicit-#%top-core-form)"
"(lambda(t_53 s_321 ctx_22)"
"(begin"
"(let-values((()"
"(begin"
"(let-values(((obs_14)(expand-context-observer ctx_22)))"
"(if obs_14"
"(let-values()(let-values()(call-expand-observe obs_14 'enter-prim s_321)))"
"(void)))"
"(values))))"
"(let-values(((result-s_3)((core-form-expander t_53) s_321 ctx_22 #t)))"
"(begin"
"(let-values(((obs_15)(expand-context-observer ctx_22)))"
"(if obs_15"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_15 'exit-prim result-s_3)"
"(call-expand-observe obs_15 'return result-s_3))))"
"(void)))"
" result-s_3))))))"
"(define-values"
"(dispatch-transformer41.1)"
"(lambda(fail-non-transformer33_0 t35_0 insp-of-t36_0 s37_0 id38_0 ctx39_0 binding40_0)"
"(begin"
" 'dispatch-transformer41"
"(let-values(((t_54) t35_0))"
"(let-values(((insp-of-t_4) insp-of-t36_0))"
"(let-values(((s_417) s37_0))"
"(let-values(((id_65) id38_0))"
"(let-values(((ctx_23) ctx39_0))"
"(let-values(((binding_21) binding40_0))"
"(let-values(((fail-non-transformer_4) fail-non-transformer33_0))"
"(let-values()"
"(if(not-in-this-expand-context? t_54 ctx_23)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_16)(expand-context-observer ctx_23)))"
"(if obs_16"
"(let-values()"
"(let-values()(call-expand-observe obs_16 'enter-macro s_417)))"
"(void)))"
"(values))))"
"(let-values(((adj-s_0)"
"(avoid-current-expand-context"
"(substitute-alternate-id s_417 id_65)"
" t_54"
" ctx_23)))"
"(begin"
"(let-values(((obs_17)(expand-context-observer ctx_23)))"
"(if obs_17"
"(let-values()(let-values()(call-expand-observe obs_17 'exit-macro s_417)))"
"(void)))"
"(let-values(((adj-s186_0) adj-s_0)((ctx187_0) ctx_23))"
"(expand9.1 #f #f #f adj-s186_0 ctx187_0))))))"
"(if(if(expand-context-should-not-encounter-macros? ctx_23)"
"(not(1/rename-transformer? t_54))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                             \"encountered a macro binding in form that should be fully expanded\""
" s_417))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_18)(expand-context-observer ctx_23)))"
"(if obs_18"
"(let-values()"
"(if(if(expand-context-only-immediate? ctx_23)"
"(not(1/rename-transformer? t_54))"
" #f)"
"(let-values()"
"(begin"
"(call-expand-observe obs_18 'visit s_417)"
"(call-expand-observe obs_18 'resolve id_65)))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((exp-s_1 re-ctx_0)"
"(if(1/rename-transformer? t_54)"
"(values s_417 ctx_23)"
"(let-values(((t188_0) t_54)"
"((insp-of-t189_0) insp-of-t_4)"
"((s190_0) s_417)"
"((id191_0) id_65)"
"((ctx192_0) ctx_23)"
"((binding193_0) binding_21))"
"(apply-transformer52.1"
" #f"
" t188_0"
" insp-of-t189_0"
" s190_0"
" id191_0"
" ctx192_0"
" binding193_0)))))"
"(begin"
"(let-values(((obs_19)(expand-context-observer ctx_23)))"
"(if obs_19"
"(let-values()"
"(if(if(expand-context-only-immediate? ctx_23)"
"(not(1/rename-transformer? t_54))"
" #f)"
"(let-values()(call-expand-observe obs_19 'return exp-s_1))"
"(void)))"
"(void)))"
"(if(expand-context-just-once? ctx_23)"
"(let-values() exp-s_1)"
"(let-values()"
"(let-values(((exp-s194_0) exp-s_1)"
"((re-ctx195_0) re-ctx_0)"
"((temp196_0)"
"(if(1/rename-transformer? t_54)"
"(syntax-track-origin$1"
"(transfer-srcloc"
"(rename-transformer-target-in-context t_54 ctx_23)"
" id_65)"
" id_65"
" id_65)"
" #f))"
"((temp197_0)"
"(let-values(((or-part_268)"
"(expand-context-only-immediate? ctx_23)))"
"(if or-part_268 or-part_268(1/rename-transformer? t_54))))"
"((temp198_0)"
"(if(1/rename-transformer? t_54) fail-non-transformer_4 #f)))"
"(expand9.1"
" temp196_0"
" temp198_0"
" temp197_0"
" exp-s194_0"
" re-ctx195_0)))))))))))))))))))))"
"(define-values"
"(dispatch-variable)"
"(lambda(t_55 s_114 id_66 ctx_24 binding_22 primitive?_6 protected?_7)"
"(begin"
"(if(expand-context-only-immediate? ctx_24)"
"(let-values()"
"(begin"
"(let-values(((obs_20)(expand-context-observer ctx_24)))"
"(if obs_20(let-values()(let-values()(call-expand-observe obs_20 'exit-check s_114)))(void)))"
" id_66))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_21)(expand-context-observer ctx_24)))"
"(if obs_21"
"(let-values()(let-values()(call-expand-observe obs_21 'variable s_114 id_66)))"
"(void)))"
"(values))))"
"(let-values((()(begin(register-variable-referenced-if-local! binding_22)(values))))"
"(let-values(((result-s_4)"
"(let-values(((id199_0) id_66)"
"((t200_0) t_55)"
"((temp201_0)"
"(free-id-set-empty-or-just-module*?(expand-context-stops ctx_24))))"
"(substitute-variable6.1 temp201_0 id199_0 t200_0))))"
"(if(if(expand-context-to-parsed? ctx_24)(free-id-set-empty?(expand-context-stops ctx_24)) #f)"
"(let-values()"
"(let-values(((prop-s_0)(keep-properties-only~ result-s_4)))"
"(let-values(((insp_16)(syntax-inspector result-s_4)))"
"(if primitive?_6"
"(parsed-primitive-id3.1 prop-s_0 binding_22 insp_16)"
"(parsed-id2.1 prop-s_0 binding_22 insp_16)))))"
"(let-values()"
"(let-values(((protected-result-s_0)"
"(if protected?_7(syntax-property$1 result-s_4 'protected #t) result-s_4)))"
"(begin"
"(let-values(((obs_22)(expand-context-observer ctx_24)))"
"(if obs_22"
"(let-values()(let-values()(call-expand-observe obs_22 'return protected-result-s_0)))"
"(void)))"
" protected-result-s_0))))))))))))"
"(define-values"
"(apply-transformer52.1)"
"(lambda(origin-id44_0 t46_0 insp-of-t47_0 s48_1 id49_1 ctx50_0 binding51_0)"
"(begin"
" 'apply-transformer52"
"(let-values(((t_56) t46_0))"
"(let-values(((insp-of-t_5) insp-of-t47_0))"
"(let-values(((s_122) s48_1))"
"(let-values(((id_33) id49_1))"
"(let-values(((ctx_25) ctx50_0))"
"(let-values(((binding_23) binding51_0))"
"(let-values(((origin-id_0) origin-id44_0))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_23)(expand-context-observer ctx_25)))"
"(if obs_23"
"(let-values()"
"(let-values()(call-expand-observe obs_23 'enter-macro s_122)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_3)(syntax-disarm$1 s_122)))"
"(let-values(((intro-scope_0)(new-scope 'macro)))"
"(let-values(((intro-s_0)(flip-scope disarmed-s_3 intro-scope_0)))"
"(let-values(((use-s_0 use-scopes_0)"
"(maybe-add-use-site-scope intro-s_0 ctx_25 binding_23)))"
"(let-values(((cleaned-s_0)(syntax-remove-taint-dispatch-properties use-s_0)))"
"(let-values(((def-ctx-scopes_1)(box null)))"
"(let-values(((transformed-s_0)"
"(apply-transformer-in-context"
" t_56"
" cleaned-s_0"
" ctx_25"
" insp-of-t_5"
" intro-scope_0"
" use-scopes_0"
" def-ctx-scopes_1"
" id_33)))"
"(let-values(((result-s_5)(flip-scope transformed-s_0 intro-scope_0)))"
"(let-values(((post-s_0)(maybe-add-post-expansion result-s_5 ctx_25)))"
"(let-values(((tracked-s_0)"
"(syntax-track-origin$1"
" post-s_0"
" cleaned-s_0"
"(let-values(((or-part_269) origin-id_0))"
"(if or-part_269"
" or-part_269"
"(if(syntax-identifier? s_122)"
" s_122"
"(car(syntax-e$1 s_122))))))))"
"(let-values(((rearmed-s_0)"
"(taint-dispatch"
" tracked-s_0"
"(lambda(t-s_0)(syntax-rearm$1 t-s_0 s_122))"
"(expand-context-phase ctx_25))))"
"(begin"
"(let-values(((obs_24)(expand-context-observer ctx_25)))"
"(if obs_24"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_24 'exit-macro rearmed-s_0)))"
"(void)))"
"(values"
" rearmed-s_0"
"(accumulate-def-ctx-scopes"
" ctx_25"
" def-ctx-scopes_1)))))))))))))))))))))))))))"
"(define-values"
"(apply-transformer-in-context)"
"(lambda(t_57 cleaned-s_1 ctx_26 insp-of-t_6 intro-scope_1 use-scopes_1 def-ctx-scopes_2 id_67)"
"(begin"
"(let-values((()"
"(begin"
"(let-values(((obs_25)(expand-context-observer ctx_26)))"
"(if obs_25"
"(let-values()(let-values()(call-expand-observe obs_25 'macro-pre-x cleaned-s_1)))"
"(void)))"
"(values))))"
"(let-values(((confine-def-ctx-scopes?_0)"
"(not"
"(let-values(((or-part_270)(expand-context-only-immediate? ctx_26)))"
"(if or-part_270"
" or-part_270"
"(not(free-id-set-empty-or-just-module*?(expand-context-stops ctx_26))))))))"
"(let-values(((accum-ctx_0)"
"(if(if confine-def-ctx-scopes?_0"
"(if(expand-context-def-ctx-scopes ctx_26)"
"(not(null?(unbox(expand-context-def-ctx-scopes ctx_26))))"
" #f)"
" #f)"
"(accumulate-def-ctx-scopes ctx_26(expand-context-def-ctx-scopes ctx_26))"
" ctx_26)))"
"(let-values(((m-ctx_0)"
"(let-values(((v_189) accum-ctx_0))"
"(let-values(((the-struct_57) v_189))"
"(if(expand-context/outer? the-struct_57)"
"(let-values(((current-introduction-scopes202_0)(list intro-scope_1))"
"((current-use-scopes203_0) use-scopes_1)"
"((def-ctx-scopes204_0)"
"(if confine-def-ctx-scopes?_0"
" def-ctx-scopes_2"
"(expand-context-def-ctx-scopes ctx_26)))"
"((inner205_0)(root-expand-context/outer-inner v_189)))"
"(expand-context/outer1.1"
" inner205_0"
"(root-expand-context/outer-post-expansion the-struct_57)"
"(root-expand-context/outer-use-site-scopes the-struct_57)"
"(root-expand-context/outer-frame-id the-struct_57)"
"(expand-context/outer-context the-struct_57)"
"(expand-context/outer-env the-struct_57)"
"(expand-context/outer-scopes the-struct_57)"
" def-ctx-scopes204_0"
"(expand-context/outer-binding-layer the-struct_57)"
"(expand-context/outer-reference-records the-struct_57)"
"(expand-context/outer-only-immediate? the-struct_57)"
"(expand-context/outer-need-eventually-defined the-struct_57)"
" current-introduction-scopes202_0"
" current-use-scopes203_0"
"(expand-context/outer-name the-struct_57)))"
"                                (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_57))))))"
"(let-values(((transformed-s_1)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" m-ctx_0"
" 1/current-namespace"
"(namespace->namespace-at-phase"
"(expand-context-namespace ctx_26)"
"(add1(expand-context-phase ctx_26)))"
" current-module-code-inspector"
" insp-of-t_6)"
"(let-values()"
"(call-with-continuation-barrier"
"(lambda()((transformer->procedure t_57) cleaned-s_1)))))))"
"(begin"
"(let-values(((obs_26)(expand-context-observer ctx_26)))"
"(if obs_26"
"(let-values()"
"(let-values()(call-expand-observe obs_26 'macro-post-x transformed-s_1 cleaned-s_1)))"
"(void)))"
"(if(syntax?$1 transformed-s_1)"
"(void)"
"(let-values()"
"(raise-arguments-error"
"(syntax-e$1 id_67)"
"                       \"received value from syntax expander was not syntax\""
"                       \"received\""
" transformed-s_1)))"
" transformed-s_1)))))))))"
"(define-values"
"(maybe-add-use-site-scope)"
"(lambda(s_344 ctx_27 binding_24)"
"(begin"
"(if(if(root-expand-context-use-site-scopes ctx_27)"
"(matching-frame?(root-expand-context-frame-id ctx_27)(binding-frame-id binding_24))"
" #f)"
"(let-values()"
"(let-values(((sc_32)(new-scope 'use-site)))"
"(let-values(((b_81)(root-expand-context-use-site-scopes ctx_27)))"
"(begin(set-box! b_81(cons sc_32(unbox b_81)))(values(add-scope s_344 sc_32)(list sc_32))))))"
"(let-values()(values s_344 null))))))"
"(define-values"
"(matching-frame?)"
"(lambda(current-frame-id_0 bind-frame-id_0)"
"(begin"
"(if current-frame-id_0"
"(let-values(((or-part_271)(eq? current-frame-id_0 bind-frame-id_0)))"
"(if or-part_271 or-part_271(eq? current-frame-id_0 'all)))"
" #f))))"
"(define-values"
"(maybe-add-post-expansion)"
"(lambda(s_241 ctx_28)(begin(apply-post-expansion(root-expand-context-post-expansion ctx_28) s_241))))"
"(define-values"
"(accumulate-def-ctx-scopes)"
"(lambda(ctx_29 def-ctx-scopes_3)"
"(begin"
"(if(null?(unbox def-ctx-scopes_3))"
" ctx_29"
"(let-values(((v_190) ctx_29))"
"(let-values(((the-struct_58) v_190))"
"(if(expand-context/outer? the-struct_58)"
"(let-values(((scopes206_0)(append(unbox def-ctx-scopes_3)(expand-context-scopes ctx_29)))"
"((inner207_0)(root-expand-context/outer-inner v_190)))"
"(expand-context/outer1.1"
" inner207_0"
"(root-expand-context/outer-post-expansion the-struct_58)"
"(root-expand-context/outer-use-site-scopes the-struct_58)"
"(root-expand-context/outer-frame-id the-struct_58)"
"(expand-context/outer-context the-struct_58)"
"(expand-context/outer-env the-struct_58)"
" scopes206_0"
"(expand-context/outer-def-ctx-scopes the-struct_58)"
"(expand-context/outer-binding-layer the-struct_58)"
"(expand-context/outer-reference-records the-struct_58)"
"(expand-context/outer-only-immediate? the-struct_58)"
"(expand-context/outer-need-eventually-defined the-struct_58)"
"(expand-context/outer-current-introduction-scopes the-struct_58)"
"(expand-context/outer-current-use-scopes the-struct_58)"
"(expand-context/outer-name the-struct_58)))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_58))))))))"
"(define-values"
"(lookup62.1)"
"(lambda(in55_0 out-of-context-as-variable?56_0 b59_0 ctx60_0 id61_0)"
"(begin"
" 'lookup62"
"(let-values(((b_82) b59_0))"
"(let-values(((ctx_30) ctx60_0))"
"(let-values(((id_37) id61_0))"
"(let-values(((in-s_7) in55_0))"
"(let-values(((out-of-context-as-variable?_1) out-of-context-as-variable?56_0))"
"(let-values()"
"(let-values(((b208_0) b_82)"
"((temp209_1)(expand-context-env ctx_30))"
"((temp210_0)(expand-context-lift-envs ctx_30))"
"((temp211_0)(expand-context-namespace ctx_30))"
"((temp212_0)(expand-context-phase ctx_30))"
"((id213_0) id_37)"
"((in-s214_0) in-s_7)"
"((out-of-context-as-variable?215_0) out-of-context-as-variable?_1))"
"(binding-lookup50.1"
" in-s214_0"
" out-of-context-as-variable?215_0"
" b208_0"
" temp209_1"
" temp210_0"
" temp211_0"
" temp212_0"
" id213_0)))))))))))"
"(define-values"
"(substitute-alternate-id)"
"(lambda(s_355 alternate-id_3)"
"(begin"
"(if(not alternate-id_3)"
"(let-values() s_355)"
"(if(syntax-identifier? s_355)"
"(let-values()(syntax-rearm$1(syntax-track-origin$1 alternate-id_3 s_355) s_355))"
"(let-values()"
"(let-values(((disarmed-s_4)(syntax-disarm$1 s_355)))"
"(syntax-rearm$1"
"(syntax-track-origin$1"
"(datum->syntax$1 disarmed-s_4(cons alternate-id_3(cdr(syntax-e$1 disarmed-s_4))) s_355)"
" s_355)"
" s_355))))))))"
"(define-values"
"(register-variable-referenced-if-local!)"
"(lambda(binding_25)"
"(begin"
"(if(if(local-binding? binding_25)(reference-record?(binding-frame-id binding_25)) #f)"
"(let-values()(reference-record-used!(binding-frame-id binding_25)(local-binding-key binding_25)))"
"(void)))))"
"(define-values"
"(expand/capture-lifts75.1)"
"(lambda(always-wrap?68_0 begin-form?66_0 expand-lifts?65_0 lift-key67_0 s73_0 ctx74_0)"
"(begin"
" 'expand/capture-lifts75"
"(let-values(((s_360) s73_0))"
"(let-values(((ctx_31) ctx74_0))"
"(let-values(((expand-lifts?_0) expand-lifts?65_0))"
"(let-values(((begin-form?_0) begin-form?66_0))"
"(let-values(((lift-key_2)(if(eq? lift-key67_0 unsafe-undefined)(generate-lift-key) lift-key67_0)))"
"(let-values(((always-wrap?_0) always-wrap?68_0))"
"(let-values()"
"(let-values(((context_6)(expand-context-context ctx_31)))"
"(let-values(((phase_104)(expand-context-phase ctx_31)))"
"(let-values(((local?_0)(not begin-form?_0)))"
"((letrec-values(((loop_95)"
"(lambda(s_418 always-wrap?_1 ctx_32)"
"(begin"
" 'loop"
"(let-values(((lift-env_2)(if local?_0(box empty-env) #f)))"
"(let-values(((lift-ctx_0)"
"(let-values(((temp216_0)"
"(if local?_0"
"(make-local-lift"
" lift-env_2"
"(root-expand-context-counter ctx_32))"
"(make-top-level-lift ctx_32)))"
"((temp217_1)"
"(if(not local?_0)"
"(eq? context_6 'module)"
" #f)))"
"(make-lift-context6.1 temp217_1 temp216_0))))"
"(let-values(((capture-ctx_0)"
"(let-values(((v_191) ctx_32))"
"(let-values(((the-struct_59) v_191))"
"(if(expand-context/outer? the-struct_59)"
"(let-values(((inner218_0)"
"(let-values(((the-struct_60)"
"(root-expand-context/outer-inner"
" v_191)))"
"(if(expand-context/inner?"
" the-struct_60)"
"(let-values(((lift-key219_0)"
" lift-key_2)"
"((lifts220_0)"
" lift-ctx_0)"
"((lift-envs221_0)"
"(if local?_0"
"(cons"
" lift-env_2"
"(expand-context-lift-envs"
" ctx_32))"
"(expand-context-lift-envs"
" ctx_32)))"
"((module-lifts222_0)"
"(if(let-values(((or-part_272)"
" local?_0))"
"(if or-part_272"
" or-part_272"
"(not"
"(memq"
" context_6"
" '(top-level"
" module)))))"
"(expand-context-module-lifts"
" ctx_32)"
" lift-ctx_0)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_60)"
"(root-expand-context/inner-module-scopes"
" the-struct_60)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_60)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_60)"
"(root-expand-context/inner-defined-syms"
" the-struct_60)"
"(root-expand-context/inner-counter"
" the-struct_60)"
" lift-key219_0"
"(expand-context/inner-to-parsed?"
" the-struct_60)"
"(expand-context/inner-phase"
" the-struct_60)"
"(expand-context/inner-namespace"
" the-struct_60)"
"(expand-context/inner-just-once?"
" the-struct_60)"
"(expand-context/inner-module-begin-k"
" the-struct_60)"
"(expand-context/inner-allow-unbound?"
" the-struct_60)"
"(expand-context/inner-in-local-expand?"
" the-struct_60)"
"(expand-context/inner-keep-#%expression?"
" the-struct_60)"
"(expand-context/inner-stops"
" the-struct_60)"
"(expand-context/inner-declared-submodule-names"
" the-struct_60)"
" lifts220_0"
" lift-envs221_0"
" module-lifts222_0"
"(expand-context/inner-require-lifts"
" the-struct_60)"
"(expand-context/inner-to-module-lifts"
" the-struct_60)"
"(expand-context/inner-requires+provides"
" the-struct_60)"
"(expand-context/inner-observer"
" the-struct_60)"
"(expand-context/inner-for-serializable?"
" the-struct_60)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_60)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                           \"expand-context/inner?\""
" the-struct_60)))))"
"(expand-context/outer1.1"
" inner218_0"
"(root-expand-context/outer-post-expansion"
" the-struct_59)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_59)"
"(root-expand-context/outer-frame-id"
" the-struct_59)"
"(expand-context/outer-context the-struct_59)"
"(expand-context/outer-env the-struct_59)"
"(expand-context/outer-scopes the-struct_59)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_59)"
"(expand-context/outer-binding-layer"
" the-struct_59)"
"(expand-context/outer-reference-records"
" the-struct_59)"
"(expand-context/outer-only-immediate?"
" the-struct_59)"
"(expand-context/outer-need-eventually-defined"
" the-struct_59)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_59)"
"(expand-context/outer-current-use-scopes"
" the-struct_59)"
"(expand-context/outer-name the-struct_59)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                         \"expand-context/outer?\""
" the-struct_59))))))"
"(let-values(((rebuild-s_0)(keep-properties-only s_418)))"
"(let-values(((exp-s_2)"
"(let-values(((s223_0) s_418)"
"((capture-ctx224_0) capture-ctx_0))"
"(expand9.1 #f #f #f s223_0 capture-ctx224_0))))"
"(let-values(((lifts_6)"
"(get-and-clear-lifts!"
"(expand-context-lifts capture-ctx_0))))"
"(let-values(((with-lifts-s_0)"
"(if(let-values(((or-part_273)"
"(pair? lifts_6)))"
"(if or-part_273"
" or-part_273"
" always-wrap?_1))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_32)"
"(let-values()"
"(begin"
"(if expand-lifts?_0"
"(void)"
"(let-values()"
"(error"
"                                                                                         \"internal error: to-parsed mode without expanding lifts\")))"
"(wrap-lifts-as-parsed-let"
" lifts_6"
" exp-s_2"
" rebuild-s_0"
" ctx_32"
"(lambda(rhs_15 rhs-ctx_0)"
"(loop_95 rhs_15 #f rhs-ctx_0)))))"
"(let-values()"
"(if begin-form?_0"
"(let-values(((lifts225_0) lifts_6)"
"((exp-s226_0) exp-s_2)"
"((phase227_0)"
" phase_104))"
"(wrap-lifts-as-begin16.1"
" unsafe-undefined"
" unsafe-undefined"
" lifts225_0"
" exp-s226_0"
" phase227_0))"
"(wrap-lifts-as-let"
" lifts_6"
" exp-s_2"
" phase_104)))))"
"(let-values() exp-s_2))))"
"(if(let-values(((or-part_274)(not expand-lifts?_0)))"
"(if or-part_274"
" or-part_274"
"(let-values(((or-part_275)(null? lifts_6)))"
"(if or-part_275"
" or-part_275"
"(expand-context-to-parsed? ctx_32)))))"
"(let-values() with-lifts-s_0)"
"(let-values()"
"(begin"
"(let-values(((obs_27)"
"(expand-context-observer ctx_32)))"
"(if obs_27"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_27"
" 'letlift-loop"
" with-lifts-s_0)))"
"(void)))"
"(loop_95 with-lifts-s_0 #f ctx_32)))))))))))))))"
" loop_95)"
" s_360"
" always-wrap?_0"
" ctx_31))))))))))))))"
"(define-values"
"(expand-transformer92.1)"
"(lambda(always-wrap?82_0 begin-form?79_0 context78_0 expand-lifts?80_0 keep-stops?83_0 lift-key81_0 s90_0 ctx91_0)"
"(begin"
" 'expand-transformer92"
"(let-values(((s_419) s90_0))"
"(let-values(((ctx_33) ctx91_0))"
"(let-values(((context_7) context78_0))"
"(let-values(((begin-form?_1) begin-form?79_0))"
"(let-values(((expand-lifts?_1) expand-lifts?80_0))"
"(let-values(((lift-key_3)(if(eq? lift-key81_0 unsafe-undefined)(generate-lift-key) lift-key81_0)))"
"(let-values(((always-wrap?_2) always-wrap?82_0))"
"(let-values(((keep-stops?_0) keep-stops?83_0))"
"(let-values()"
"(let-values()"
"(let-values(((trans-ctx_0)"
"(let-values(((ctx234_0) ctx_33)"
"((context235_0) context_7)"
"((keep-stops?236_0) keep-stops?_0))"
"(context->transformer-context99.1 keep-stops?236_0 ctx234_0 context235_0))))"
"(let-values(((s228_0) s_419)"
"((trans-ctx229_0) trans-ctx_0)"
"((expand-lifts?230_0) expand-lifts?_1)"
"((begin-form?231_0) begin-form?_1)"
"((lift-key232_0) lift-key_3)"
"((always-wrap?233_0) always-wrap?_2))"
"(expand/capture-lifts75.1"
" always-wrap?233_0"
" begin-form?231_0"
" expand-lifts?230_0"
" lift-key232_0"
" s228_0"
" trans-ctx229_0))))))))))))))))"
"(define-values"
"(context->transformer-context99.1)"
"(lambda(keep-stops?95_0 ctx98_0 context97_0)"
"(begin"
" 'context->transformer-context99"
"(let-values(((ctx_34) ctx98_0))"
"(let-values(((context_8) context97_0))"
"(let-values(((keep-stops?_1) keep-stops?95_0))"
"(let-values()"
"(let-values(((phase_105)(add1(expand-context-phase ctx_34))))"
"(let-values(((ns_74)(namespace->namespace-at-phase(expand-context-namespace ctx_34) phase_105)))"
"(begin"
"(namespace-visit-available-modules! ns_74 phase_105)"
"(let-values(((v_192) ctx_34))"
"(let-values(((the-struct_61) v_192))"
"(if(expand-context/outer? the-struct_61)"
"(let-values(((context237_0) context_8)"
"((scopes238_0) null)"
"((env239_0) empty-env)"
"((only-immediate?240_0)"
"(if keep-stops?_1(expand-context-only-immediate? ctx_34) #f))"
"((def-ctx-scopes241_0) #f)"
"((post-expansion242_0) #f)"
"((inner243_0)"
"(let-values(((the-struct_62)(root-expand-context/outer-inner v_192)))"
"(if(expand-context/inner? the-struct_62)"
"(let-values(((phase244_0) phase_105)"
"((namespace245_0) ns_74)"
"((stops246_0)"
"(if keep-stops?_1"
"(expand-context-stops ctx_34)"
" empty-free-id-set)))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_62)"
"(root-expand-context/inner-module-scopes the-struct_62)"
"(root-expand-context/inner-top-level-bind-scope the-struct_62)"
"(root-expand-context/inner-all-scopes-stx the-struct_62)"
"(root-expand-context/inner-defined-syms the-struct_62)"
"(root-expand-context/inner-counter the-struct_62)"
"(root-expand-context/inner-lift-key the-struct_62)"
"(expand-context/inner-to-parsed? the-struct_62)"
" phase244_0"
" namespace245_0"
"(expand-context/inner-just-once? the-struct_62)"
"(expand-context/inner-module-begin-k the-struct_62)"
"(expand-context/inner-allow-unbound? the-struct_62)"
"(expand-context/inner-in-local-expand? the-struct_62)"
"(expand-context/inner-keep-#%expression? the-struct_62)"
" stops246_0"
"(expand-context/inner-declared-submodule-names the-struct_62)"
"(expand-context/inner-lifts the-struct_62)"
"(expand-context/inner-lift-envs the-struct_62)"
"(expand-context/inner-module-lifts the-struct_62)"
"(expand-context/inner-require-lifts the-struct_62)"
"(expand-context/inner-to-module-lifts the-struct_62)"
"(expand-context/inner-requires+provides the-struct_62)"
"(expand-context/inner-observer the-struct_62)"
"(expand-context/inner-for-serializable? the-struct_62)"
"(expand-context/inner-should-not-encounter-macros? the-struct_62)))"
"(raise-argument-error"
" 'struct-copy"
"                                             \"expand-context/inner?\""
" the-struct_62)))))"
"(expand-context/outer1.1"
" inner243_0"
" post-expansion242_0"
"(root-expand-context/outer-use-site-scopes the-struct_61)"
"(root-expand-context/outer-frame-id the-struct_61)"
" context237_0"
" env239_0"
" scopes238_0"
" def-ctx-scopes241_0"
"(expand-context/outer-binding-layer the-struct_61)"
"(expand-context/outer-reference-records the-struct_61)"
" only-immediate?240_0"
"(expand-context/outer-need-eventually-defined the-struct_61)"
"(expand-context/outer-current-introduction-scopes the-struct_61)"
"(expand-context/outer-current-use-scopes the-struct_61)"
"(expand-context/outer-name the-struct_61)))"
"                          (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_61))))))))))))))"
"(define-values"
"(expand+eval-for-syntaxes-binding108.1)"
"(lambda(log-next?102_0 who104_0 rhs105_0 ids106_0 ctx107_0)"
"(begin"
" 'expand+eval-for-syntaxes-binding108"
"(let-values(((who_16) who104_0))"
"(let-values(((rhs_16) rhs105_0))"
"(let-values(((ids_19) ids106_0))"
"(let-values(((ctx_35) ctx107_0))"
"(let-values(((log-next?_0) log-next?102_0))"
"(let-values()"
"(let-values(((exp-rhs_0)"
"(let-values(((rhs247_0) rhs_16)((temp248_0)(as-named-context ctx_35 ids_19)))"
"(expand-transformer92.1"
" #f"
" #f"
" 'expression"
" #t"
" #f"
" unsafe-undefined"
" rhs247_0"
" temp248_0))))"
"(let-values(((phase_106)(add1(expand-context-phase ctx_35))))"
"(let-values(((parsed-rhs_0)"
"(if(expand-context-to-parsed? ctx_35)"
" exp-rhs_0"
"(let-values(((exp-rhs249_0) exp-rhs_0)"
"((temp250_1)"
"(let-values(((temp251_0)(as-to-parsed-context ctx_35)))"
"(context->transformer-context99.1 #f temp251_0 'expression))))"
"(expand9.1 #f #f #f exp-rhs249_0 temp250_1)))))"
"(begin"
"(if log-next?_0"
"(let-values()"
"(let-values(((obs_28)(expand-context-observer ctx_35)))"
"(if obs_28(let-values()(let-values()(call-expand-observe obs_28 'next)))(void))))"
"(void))"
"(values"
" exp-rhs_0"
" parsed-rhs_0"
"(eval-for-bindings"
" who_16"
" ids_19"
" parsed-rhs_0"
" phase_106"
"(namespace->namespace-at-phase(expand-context-namespace ctx_35) phase_106)"
" ctx_35)))))))))))))))"
"(define-values"
"(eval-for-syntaxes-binding)"
"(lambda(who_17 rhs_17 ids_20 ctx_36)"
"(begin"
"(let-values(((exp-rhs_1 parsed-rhs_1 vals_3)"
"(let-values(((who252_0) who_17)((rhs253_0) rhs_17)((ids254_0) ids_20)((ctx255_0) ctx_36))"
"(expand+eval-for-syntaxes-binding108.1 #t who252_0 rhs253_0 ids254_0 ctx255_0))))"
" vals_3))))"
"(define-values"
"(eval-for-bindings)"
"(lambda(who_18 ids_21 p_49 phase_107 ns_75 ctx_37)"
"(begin"
"(let-values(((compiled_0)"
"(if(can-direct-eval? p_49 ns_75(root-expand-context-self-mpi ctx_37))"
" #f"
"(compile-single"
" p_49"
"(let-values(((ns256_0) ns_75)((phase257_0) phase_107))"
"(make-compile-context14.1 #f unsafe-undefined #f ns256_0 phase257_0 unsafe-undefined))))))"
"(let-values(((vals_4)"
"(call-with-values"
"(lambda()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-context"
" ctx_37"
" 1/current-namespace"
" ns_75"
" eval-jit-enabled"
" #f)"
"(let-values()"
"(if compiled_0"
"(eval-single-top compiled_0 ns_75)"
"(direct-eval p_49 ns_75(root-expand-context-self-mpi ctx_37))))))"
" list)))"
"(begin"
"(if(=(length vals_4)(length ids_21))"
"(void)"
"(let-values()"
"(apply"
" raise-result-arity-error"
" who_18"
"(length ids_21)"
"(if(null? ids_21)"
"                   (let-values () \"\")"
"(let-values()"
"(format"
"                      \"\\n  in: definition of ~a~a\""
"(syntax-e$1(car ids_21))"
"                      (if (pair? (cdr ids_21)) \" ...\" \"\"))))"
" vals_4)))"
" vals_4))))))"
"(define-values(keep-properties-only)(lambda(s_420)(begin(datum->syntax$1 #f 'props s_420 s_420))))"
"(define-values(keep-properties-only~)(lambda(s_421)(begin #f)))"
"(define-values"
"(keep-as-needed119.1)"
"(lambda(for-track?111_0 keep-for-error?113_0 keep-for-parsed?112_0 ctx117_0 s118_0)"
"(begin"
" 'keep-as-needed119"
"(let-values(((ctx_38) ctx117_0))"
"(let-values(((s_422) s118_0))"
"(let-values()"
"(let-values(((keep-for-parsed?_0) keep-for-parsed?112_0))"
"(let-values(((keep-for-error?_0) keep-for-error?113_0))"
"(let-values()"
"(let-values(((d_33)(syntax-e$1 s_422)))"
"(let-values(((keep-e_0)"
"(if(symbol? d_33)"
"(let-values() d_33)"
"(if(if(pair? d_33)(syntax-identifier?(car d_33)) #f)"
"(let-values()(syntax-e$1(car d_33)))"
"(let-values() #f)))))"
"(if(expand-context-to-parsed? ctx_38)"
"(let-values()"
"(if(let-values(((or-part_276) keep-for-parsed?_0))"
"(if or-part_276 or-part_276 keep-for-error?_0))"
"(datum->syntax$1 #f keep-e_0 s_422 s_422)"
" #f))"
"(let-values()"
"(syntax-rearm$1"
"(datum->syntax$1(syntax-disarm$1 s_422) keep-e_0 s_422 s_422)"
" s_422))))))))))))))"
"(define-values"
"(attach-disappeared-transformer-bindings)"
"(lambda(s_154 trans-idss_0)"
"(begin"
"(if(null? trans-idss_0)"
"(let-values() s_154)"
"(let-values()"
"(syntax-property$1"
" s_154"
" 'disappeared-binding"
"(append"
"(apply append trans-idss_0)"
"(let-values(((or-part_197)(syntax-property$1 s_154 'disappeared-binding)))"
"(if or-part_197 or-part_197 null)))))))))"
"(define-values"
"(increment-binding-layer)"
"(lambda(ids_22 ctx_39 layer-val_0)"
"(begin"
"(if((letrec-values(((loop_96)"
"(lambda(ids_23)"
"(begin"
" 'loop"
"(let-values(((or-part_198)(identifier? ids_23)))"
"(if or-part_198"
" or-part_198"
"(if(pair? ids_23)"
"(let-values(((or-part_199)(loop_96(car ids_23))))"
"(if or-part_199 or-part_199(loop_96(cdr ids_23))))"
" #f)))))))"
" loop_96)"
" ids_22)"
" layer-val_0"
"(expand-context-binding-layer ctx_39)))))"
"(define-values"
"(wrap-lifts-as-parsed-let)"
"(lambda(lifts_7 exp-s_3 rebuild-s_1 ctx_40 parse-rhs_0)"
"(begin"
"(let-values(((idss+keyss+rhss_0)(get-lifts-as-lists lifts_7)))"
"((letrec-values(((lets-loop_0)"
"(lambda(idss+keyss+rhss_1 rhs-ctx_1)"
"(begin"
" 'lets-loop"
"(if(null? idss+keyss+rhss_1)"
"(let-values() exp-s_3)"
"(let-values()"
"(let-values(((ids_24)(caar idss+keyss+rhss_1)))"
"(let-values(((keys_4)(cadar idss+keyss+rhss_1)))"
"(let-values(((rhs_18)(caddar idss+keyss+rhss_1)))"
"(let-values(((exp-rhs_2)(parse-rhs_0 rhs_18 rhs-ctx_1)))"
"(parsed-let-values17.1"
" rebuild-s_1"
"(list ids_24)"
"(list(list keys_4 exp-rhs_2))"
"(list"
"(lets-loop_0"
"(cdr idss+keyss+rhss_1)"
"(let-values(((v_193) rhs-ctx_1))"
"(let-values(((the-struct_63) v_193))"
"(if(expand-context/outer? the-struct_63)"
"(let-values(((env258_0)"
"(let-values(((lst_283) ids_24)((lst_284) keys_4))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_283)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_284)))"
"((letrec-values(((for-loop_254)"
"(lambda(env_3 lst_285 lst_286)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_285)"
"(pair? lst_286)"
" #f)"
"(let-values(((id_68)"
"(unsafe-car"
" lst_285))"
"((rest_159)"
"(unsafe-cdr"
" lst_285))"
"((key_81)"
"(unsafe-car"
" lst_286))"
"((rest_160)"
"(unsafe-cdr"
" lst_286)))"
"(let-values(((env_4)"
"(let-values(((env_5)"
" env_3))"
"(let-values(((env_6)"
"(let-values()"
"(env-extend"
" env_5"
" key_81"
"(local-variable1.1"
" id_68)))))"
"(values"
" env_6)))))"
"(if(not #f)"
"(for-loop_254"
" env_4"
" rest_159"
" rest_160)"
" env_4)))"
" env_3)))))"
" for-loop_254)"
"(expand-context-env rhs-ctx_1)"
" lst_283"
" lst_284))))"
"((inner259_0)(root-expand-context/outer-inner v_193)))"
"(expand-context/outer1.1"
" inner259_0"
"(root-expand-context/outer-post-expansion the-struct_63)"
"(root-expand-context/outer-use-site-scopes the-struct_63)"
"(root-expand-context/outer-frame-id the-struct_63)"
"(expand-context/outer-context the-struct_63)"
" env258_0"
"(expand-context/outer-scopes the-struct_63)"
"(expand-context/outer-def-ctx-scopes the-struct_63)"
"(expand-context/outer-binding-layer the-struct_63)"
"(expand-context/outer-reference-records the-struct_63)"
"(expand-context/outer-only-immediate? the-struct_63)"
"(expand-context/outer-need-eventually-defined the-struct_63)"
"(expand-context/outer-current-introduction-scopes the-struct_63)"
"(expand-context/outer-current-use-scopes the-struct_63)"
"(expand-context/outer-name the-struct_63)))"
"(raise-argument-error"
" 'struct-copy"
"                                                    \"expand-context/outer?\""
" the-struct_63)))))))))))))))))"
" lets-loop_0)"
" idss+keyss+rhss_0"
" ctx_40)))))"
"(define-values"
"(rename-transformer-target-in-context)"
"(lambda(t_58 ctx_41)"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_41)"
"(let-values()(1/rename-transformer-target t_58))))))"
"(define-values"
"(maybe-install-free=id-in-context!)"
"(lambda(val_69 id_69 phase_108 ctx_42)"
"(begin"
"(if(1/rename-transformer? val_69)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) current-expand-context ctx_42)"
"(let-values()(maybe-install-free=id! val_69 id_69 phase_108))))"
"(void)))))"
"(define-values"
"(transfer-srcloc)"
"(lambda(new-s_1 old-s_0)"
"(begin"
"(let-values(((srcloc_7)(syntax-srcloc old-s_0)))"
"(if srcloc_7"
"(let-values(((the-struct_64) new-s_1))"
"(if(syntax?$1 the-struct_64)"
"(let-values(((srcloc260_0) srcloc_7))"
"(syntax1.1"
"(syntax-content the-struct_64)"
"(syntax-scopes the-struct_64)"
"(syntax-shifted-multi-scopes the-struct_64)"
"(syntax-scope-propagations+tamper the-struct_64)"
"(syntax-mpi-shifts the-struct_64)"
" srcloc260_0"
"(syntax-props the-struct_64)"
"(syntax-inspector the-struct_64)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_64)))"
" new-s_1)))))"
"(define-values"
"(stop-ids->all-stop-ids)"
"(lambda(stop-ids_0 phase_44)"
"(begin"
"(if(null? stop-ids_0)"
"(let-values() stop-ids_0)"
"(let-values()"
"(let-values(((p-core-stx_0)(syntax-shift-phase-level$1 core-stx phase_44)))"
"(if(if(= 1(length stop-ids_0))"
"(free-identifier=?$1(car stop-ids_0)(datum->syntax$1 p-core-stx_0 'module*) phase_44 phase_44)"
" #f)"
"(let-values() stop-ids_0)"
"(let-values()"
"(append"
" stop-ids_0"
"(reverse$1"
"(let-values(((lst_103) auto-stop-syms))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_103)))"
"((letrec-values(((for-loop_117)"
"(lambda(fold-var_91 lst_84)"
"(begin"
" 'for-loop"
"(if(pair? lst_84)"
"(let-values(((sym_71)(unsafe-car lst_84))"
"((rest_50)(unsafe-cdr lst_84)))"
"(let-values(((fold-var_92)"
"(let-values(((fold-var_93) fold-var_91))"
"(let-values(((fold-var_60)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" p-core-stx_0"
" sym_71))"
" fold-var_93))))"
"(values fold-var_60)))))"
"(if(not #f)(for-loop_117 fold-var_92 rest_50) fold-var_92)))"
" fold-var_91)))))"
" for-loop_117)"
" null"
" lst_103)))))))))))))"
"(define-values"
"(auto-stop-syms)"
" '(begin"
" quote"
" set!"
" lambda"
" case-lambda"
" let-values"
" letrec-values"
" if"
" begin0"
" with-continuation-mark"
" letrec-syntaxes+values"
" #%app"
" #%expression"
" #%top"
" #%variable-reference))"
"(define-values"
"(module-expand-stop-ids)"
"(lambda(phase_109)"
"(begin"
"(let-values(((p-core-stx_1)(syntax-shift-phase-level$1 core-stx phase_109)))"
"(reverse$1"
"(let-values(((lst_102) module-stop-syms))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_102)))"
"((letrec-values(((for-loop_116)"
"(lambda(fold-var_239 lst_262)"
"(begin"
" 'for-loop"
"(if(pair? lst_262)"
"(let-values(((sym_18)(unsafe-car lst_262))((rest_161)(unsafe-cdr lst_262)))"
"(let-values(((fold-var_221)"
"(let-values(((fold-var_222) fold-var_239))"
"(let-values(((fold-var_223)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1 p-core-stx_1 sym_18))"
" fold-var_222))))"
"(values fold-var_223)))))"
"(if(not #f)(for-loop_116 fold-var_221 rest_161) fold-var_221)))"
" fold-var_239)))))"
" for-loop_116)"
" null"
" lst_102))))))))"
"(define-values"
"(module-stop-syms)"
"(append"
" auto-stop-syms"
" '(define-values define-syntaxes begin-for-syntax #%require #%provide module module* #%declare #%stratified-body)))"
"(define-values"
"(struct:internal-definition-context"
" internal-definition-context1.1"
" 1/internal-definition-context?"
" internal-definition-context-frame-id"
" internal-definition-context-scope"
" internal-definition-context-add-scope?"
" internal-definition-context-env-mixins"
" internal-definition-context-parent-ctx)"
"(let-values(((struct:_41 make-_41 ?_41 -ref_41 -set!_41)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'internal-definition-context"
" #f"
" 5"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1 2 3 4)"
" #f"
" 'internal-definition-context)))))"
"(values"
" struct:_41"
" make-_41"
" ?_41"
"(make-struct-field-accessor -ref_41 0 'frame-id)"
"(make-struct-field-accessor -ref_41 1 'scope)"
"(make-struct-field-accessor -ref_41 2 'add-scope?)"
"(make-struct-field-accessor -ref_41 3 'env-mixins)"
"(make-struct-field-accessor -ref_41 4 'parent-ctx))))"
"(define-values"
"(struct:env-mixin env-mixin2.1 env-mixin? env-mixin-id env-mixin-sym env-mixin-value env-mixin-cache)"
"(let-values(((struct:_79 make-_79 ?_79 -ref_79 -set!_79)"
"(let-values()"
"(let-values()"
"(make-struct-type 'env-mixin #f 4 0 #f null(current-inspector) #f '(0 1 2 3) #f 'env-mixin)))))"
"(values"
" struct:_79"
" make-_79"
" ?_79"
"(make-struct-field-accessor -ref_79 0 'id)"
"(make-struct-field-accessor -ref_79 1 'sym)"
"(make-struct-field-accessor -ref_79 2 'value)"
"(make-struct-field-accessor -ref_79 3 'cache))))"
"(define-values"
"(1/syntax-local-make-definition-context)"
"(let-values(((syntax-local-make-definition-context5_0)"
"(lambda(parent-ctx3_0 add-scope?4_0)"
"(begin"
" 'syntax-local-make-definition-context5"
"(let-values(((parent-ctx_0) parent-ctx3_0))"
"(let-values(((add-scope?_0) add-scope?4_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_64)(not parent-ctx_0)))"
"(if or-part_64"
" or-part_64"
"(1/internal-definition-context? parent-ctx_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-make-definition-context"
"                                               \"(or/c #f internal-definition-context?)\""
" parent-ctx_0)))"
"(values))))"
"(let-values(((ctx_43)"
"(let-values(((temp47_0) 'syntax-local-make-definition-context))"
"(get-current-expand-context16.1 #f temp47_0))))"
"(let-values(((frame-id_8)"
"(let-values(((or-part_65)(root-expand-context-frame-id ctx_43)))"
"(if or-part_65"
" or-part_65"
"(let-values(((or-part_227)"
"(if parent-ctx_0"
"(internal-definition-context-frame-id parent-ctx_0)"
" #f)))"
"(if or-part_227 or-part_227(gensym)))))))"
"(let-values(((sc_33)(new-scope 'intdef)))"
"(let-values(((def-ctx-scopes_4)(expand-context-def-ctx-scopes ctx_43)))"
"(begin"
"(if def-ctx-scopes_4"
"(let-values()"
"(set-box! def-ctx-scopes_4(cons sc_33(unbox def-ctx-scopes_4))))"
"(void))"
"(internal-definition-context1.1"
" frame-id_8"
" sc_33"
" add-scope?_0"
"(box null)"
" parent-ctx_0))))))))))))))"
"(case-lambda"
"(()(begin 'syntax-local-make-definition-context(syntax-local-make-definition-context5_0 #f #t)))"
"((parent-ctx_1 add-scope?4_1)(syntax-local-make-definition-context5_0 parent-ctx_1 add-scope?4_1))"
"((parent-ctx3_1)(syntax-local-make-definition-context5_0 parent-ctx3_1 #t)))))"
"(define-values"
"(1/syntax-local-bind-syntaxes)"
"(let-values(((syntax-local-bind-syntaxes11_0)"
"(lambda(ids8_0 s9_0 intdef10_0 extra-intdefs7_0)"
"(begin"
" 'syntax-local-bind-syntaxes11"
"(let-values(((ids_25) ids8_0))"
"(let-values(((s_423) s9_0))"
"(let-values(((intdef_0) intdef10_0))"
"(let-values(((extra-intdefs_0) extra-intdefs7_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(list? ids_25)(andmap2 identifier? ids_25) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                                                   \"(listof identifier?)\""
" ids_25)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_98)(not s_423)))"
"(if or-part_98 or-part_98(syntax?$1 s_423)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                                                     \"(or/c syntax? #f)\""
" s_423)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/internal-definition-context? intdef_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
"                                                       \"internal-definition-context?\""
" intdef_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(intdefs? extra-intdefs_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-bind-syntaxes"
" intdefs?-string"
" extra-intdefs_0)))"
"(values))))"
"(let-values(((ctx_44)"
"(let-values(((temp48_1) 'local-expand))"
"(get-current-expand-context16.1 #f temp48_1))))"
"(let-values((()"
"(begin"
"(let-values(((obs_29)(expand-context-observer ctx_44)))"
"(if obs_29"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_29 'local-bind ids_25)))"
"(void)))"
"(values))))"
"(let-values(((phase_7)(expand-context-phase ctx_44)))"
"(let-values(((all-intdefs_0)"
"(if(list? extra-intdefs_0)"
"(cons intdef_0 extra-intdefs_0)"
"(list intdef_0 extra-intdefs_0))))"
"(let-values(((intdef-ids_0)"
"(reverse$1"
"(let-values(((lst_188) ids_25))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_188)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_235 lst_287)"
"(begin"
" 'for-loop"
"(if(pair? lst_287)"
"(let-values(((id_70)"
"(unsafe-car"
" lst_287))"
"((rest_162)"
"(unsafe-cdr"
" lst_287)))"
"(let-values(((fold-var_240)"
"(let-values(((fold-var_241)"
" fold-var_235))"
"(let-values(((fold-var_242)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((pre-id_0)"
"(remove-use-site-scopes"
"(flip-introduction-scopes"
" id_70"
" ctx_44)"
" ctx_44)))"
"(let-values(((temp49_1)"
"(let-values(((pre-id51_0)"
" pre-id_0)"
"((intdef52_0)"
" intdef_0)"
"((temp53_2)"
" #t))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" temp53_2"
" pre-id51_0"
" intdef52_0)))"
"((extra-intdefs50_0)"
" extra-intdefs_0))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" #f"
" temp49_1"
" extra-intdefs50_0))))"
" fold-var_241))))"
"(values"
" fold-var_242)))))"
"(if(not #f)"
"(for-loop_121"
" fold-var_240"
" rest_162)"
" fold-var_240)))"
" fold-var_235)))))"
" for-loop_121)"
" null"
" lst_188))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_30)"
"(expand-context-observer ctx_44)))"
"(if obs_30"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_30"
" 'rename-list"
" intdef-ids_0)))"
"(void)))"
"(values))))"
"(let-values(((syms_20)"
"(reverse$1"
"(let-values(((lst_167) intdef-ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_167)))"
"((letrec-values(((for-loop_194)"
"(lambda(fold-var_165 lst_168)"
"(begin"
" 'for-loop"
"(if(pair? lst_168)"
"(let-values(((intdef-id_0)"
"(unsafe-car"
" lst_168))"
"((rest_163)"
"(unsafe-cdr"
" lst_168)))"
"(let-values(((fold-var_243)"
"(let-values(((fold-var_179)"
" fold-var_165))"
"(let-values(((fold-var_244)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((intdef-id54_0)"
" intdef-id_0)"
"((phase55_0)"
" phase_7)"
"((temp56_2)"
"(root-expand-context-counter"
" ctx_44))"
"((temp57_0)"
"(internal-definition-context-frame-id"
" intdef_0)))"
"(add-local-binding!37.1"
" temp57_0"
" #f"
" intdef-id54_0"
" phase55_0"
" temp56_2)))"
" fold-var_179))))"
"(values"
" fold-var_244)))))"
"(if(not #f)"
"(for-loop_194"
" fold-var_243"
" rest_163)"
" fold-var_243)))"
" fold-var_165)))))"
" for-loop_194)"
" null"
" lst_167))))))"
"(let-values(((vals_5)"
"(if s_423"
"(let-values()"
"(let-values(((input-s_0)"
"(flip-introduction-scopes"
"(let-values(((s58_0) s_423)"
"((all-intdefs59_0)"
" all-intdefs_0))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" #f"
" s58_0"
" all-intdefs59_0))"
" ctx_44)))"
"(let-values(((tmp-env_0)"
"(let-values(((lst_288) syms_20)"
"((lst_140)"
" intdef-ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_288)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_140)))"
"((letrec-values(((for-loop_173)"
"(lambda(env_7"
" lst_141"
" lst_289)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_141)"
"(pair?"
" lst_289)"
" #f)"
"(let-values(((sym_72)"
"(unsafe-car"
" lst_141))"
"((rest_164)"
"(unsafe-cdr"
" lst_141))"
"((intdef-id_1)"
"(unsafe-car"
" lst_289))"
"((rest_165)"
"(unsafe-cdr"
" lst_289)))"
"(let-values(((env_8)"
"(let-values(((env_9)"
" env_7))"
"(let-values(((env_10)"
"(let-values()"
"(hash-set"
" env_9"
" sym_72"
"(local-variable1.1"
" intdef-id_1)))))"
"(values"
" env_10)))))"
"(if(not"
" #f)"
"(for-loop_173"
" env_8"
" rest_164"
" rest_165)"
" env_8)))"
" env_7)))))"
" for-loop_173)"
"(expand-context-env ctx_44)"
" lst_288"
" lst_140)))))"
"(let-values((()"
"(begin"
"(let-values(((obs_31)"
"(expand-context-observer"
" ctx_44)))"
"(if obs_31"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_31"
" 'enter-bind)))"
"(void)))"
"(values))))"
"(let-values(((vals_6)"
"(eval-for-syntaxes-binding"
" 'syntax-local-bind-syntaxes"
" input-s_0"
" ids_25"
"(let-values(((temp60_2)"
"(let-values(((v_77)"
" ctx_44))"
"(let-values(((the-struct_65)"
" v_77))"
"(if(expand-context/outer?"
" the-struct_65)"
"(let-values(((env63_0)"
" tmp-env_0)"
"((inner64_0)"
"(root-expand-context/outer-inner"
" v_77)))"
"(expand-context/outer1.1"
" inner64_0"
"(root-expand-context/outer-post-expansion"
" the-struct_65)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_65)"
"(root-expand-context/outer-frame-id"
" the-struct_65)"
"(expand-context/outer-context"
" the-struct_65)"
" env63_0"
"(expand-context/outer-scopes"
" the-struct_65)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_65)"
"(expand-context/outer-binding-layer"
" the-struct_65)"
"(expand-context/outer-reference-records"
" the-struct_65)"
"(expand-context/outer-only-immediate?"
" the-struct_65)"
"(expand-context/outer-need-eventually-defined"
" the-struct_65)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_65)"
"(expand-context/outer-current-use-scopes"
" the-struct_65)"
"(expand-context/outer-name"
" the-struct_65)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                \"expand-context/outer?\""
" the-struct_65)))))"
"((temp61_1)"
" 'expression)"
"((all-intdefs62_0)"
" all-intdefs_0))"
"(make-local-expand-context42.1"
" temp61_1"
" all-intdefs62_0"
" #t"
" unsafe-undefined"
" #f"
" #f"
" #f"
" temp60_2)))))"
"(begin"
"(let-values(((obs_32)"
"(expand-context-observer"
" ctx_44)))"
"(if obs_32"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_32"
" 'exit-bind)))"
"(void)))"
" vals_6))))))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_106) intdef-ids_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_106)))"
"((letrec-values(((for-loop_80)"
"(lambda(fold-var_101"
" lst_50)"
"(begin"
" 'for-loop"
"(if(pair? lst_50)"
"(let-values(((intdef-id_2)"
"(unsafe-car"
" lst_50))"
"((rest_53)"
"(unsafe-cdr"
" lst_50)))"
"(let-values(((fold-var_102)"
"(let-values(((fold-var_103)"
" fold-var_101))"
"(let-values(((fold-var_104)"
"(let-values()"
"(cons"
"(let-values()"
"(local-variable1.1"
" intdef-id_2))"
" fold-var_103))))"
"(values"
" fold-var_104)))))"
"(if(not #f)"
"(for-loop_80"
" fold-var_102"
" rest_53)"
" fold-var_102)))"
" fold-var_101)))))"
" for-loop_80)"
" null"
" lst_106))))))))"
"(let-values(((env-mixins_0)"
"(internal-definition-context-env-mixins intdef_0)))"
"(begin"
"(set-box!"
" env-mixins_0"
"(append"
"(reverse$1"
"(let-values(((lst_290) intdef-ids_0)"
"((lst_195) syms_20)"
"((lst_291) vals_5))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_290)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_195)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_291)))"
"((letrec-values(((for-loop_255)"
"(lambda(fold-var_245"
" lst_292"
" lst_293"
" lst_294)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_292)"
"(if(pair? lst_293)"
"(pair? lst_294)"
" #f)"
" #f)"
"(let-values(((intdef-id_3)"
"(unsafe-car"
" lst_292))"
"((rest_166)"
"(unsafe-cdr"
" lst_292))"
"((sym_73)"
"(unsafe-car"
" lst_293))"
"((rest_167)"
"(unsafe-cdr"
" lst_293))"
"((val_70)"
"(unsafe-car"
" lst_294))"
"((rest_168)"
"(unsafe-cdr"
" lst_294)))"
"(let-values(((fold-var_246)"
"(let-values(((fold-var_247)"
" fold-var_245))"
"(let-values(((fold-var_248)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_70"
" intdef-id_3"
" phase_7"
" ctx_44)"
"(env-mixin2.1"
" intdef-id_3"
" sym_73"
" val_70"
"(make-weak-hasheq))))"
" fold-var_247))))"
"(values"
" fold-var_248)))))"
"(if(not #f)"
"(for-loop_255"
" fold-var_246"
" rest_166"
" rest_167"
" rest_168)"
" fold-var_246)))"
" fold-var_245)))))"
" for-loop_255)"
" null"
" lst_290"
" lst_195"
" lst_291))))"
"(unbox env-mixins_0)))"
"(let-values(((obs_33)(expand-context-observer ctx_44)))"
"(if obs_33"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_33 'exit-local-bind)))"
"(void))))))))))))))))))))))))))"
"(case-lambda"
"((ids_26 s_202 intdef_1)"
"(begin 'syntax-local-bind-syntaxes(syntax-local-bind-syntaxes11_0 ids_26 s_202 intdef_1 '())))"
"((ids_13 s_424 intdef_2 extra-intdefs7_1)"
"(syntax-local-bind-syntaxes11_0 ids_13 s_424 intdef_2 extra-intdefs7_1)))))"
"(define-values"
"(1/internal-definition-context-binding-identifiers)"
"(lambda(intdef_3)"
"(begin"
" 'internal-definition-context-binding-identifiers"
"(begin"
"(if(1/internal-definition-context? intdef_3)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-binding-identifiers"
"             \"internal-definition-context?\""
" intdef_3)))"
"(reverse$1"
"(let-values(((lst_29)(unbox(internal-definition-context-env-mixins intdef_3))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_29)))"
"((letrec-values(((for-loop_14)"
"(lambda(fold-var_249 lst_295)"
"(begin"
" 'for-loop"
"(if(pair? lst_295)"
"(let-values(((env-mixin_0)(unsafe-car lst_295))"
"((rest_169)(unsafe-cdr lst_295)))"
"(let-values(((fold-var_250)"
"(let-values(((fold-var_251) fold-var_249))"
"(let-values(((fold-var_252)"
"(let-values()"
"(cons"
"(let-values()(env-mixin-id env-mixin_0))"
" fold-var_251))))"
"(values fold-var_252)))))"
"(if(not #f)(for-loop_14 fold-var_250 rest_169) fold-var_250)))"
" fold-var_249)))))"
" for-loop_14)"
" null"
" lst_29))))))))"
"(define-values"
"(1/internal-definition-context-introduce)"
"(let-values(((internal-definition-context-introduce16_0)"
"(lambda(intdef14_0 s15_0 mode13_0)"
"(begin"
" 'internal-definition-context-introduce16"
"(let-values(((intdef_4) intdef14_0))"
"(let-values(((s_37) s15_0))"
"(let-values(((mode_13) mode13_0))"
"(let-values()"
"(begin"
"(if(1/internal-definition-context? intdef_4)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                   \"internal-definition-context?\""
" intdef_4)))"
"(if(syntax?$1 s_37)"
"(void)"
"(let-values()"
"                                  (raise-argument-error 'internal-definition-context-introduce \"syntax?\" s_37)))"
"(let-values(((s65_0) s_37)"
"((intdef66_0) intdef_4)"
"((temp67_1) #t)"
"((temp68_1)"
"(let-values(((tmp_32) mode_13))"
"(if(equal? tmp_32 'add)"
"(let-values() add-scope)"
"(if(equal? tmp_32 'remove)"
"(let-values() remove-scope)"
"(if(equal? tmp_32 'flip)"
"(let-values() flip-scope)"
"(let-values()"
"(raise-argument-error"
" 'internal-definition-context-introduce"
"                                                       \"(or/c 'add 'remove 'flip)\""
" mode_13))))))))"
"(add-intdef-scopes24.1 temp68_1 temp67_1 s65_0 intdef66_0)))))))))))"
"(case-lambda"
"((intdef_5 s_207)"
"(begin 'internal-definition-context-introduce(internal-definition-context-introduce16_0 intdef_5 s_207 'flip)))"
"((intdef_6 s_425 mode13_1)(internal-definition-context-introduce16_0 intdef_6 s_425 mode13_1)))))"
"(define-values"
"(1/internal-definition-context-seal)"
"(lambda(intdef_7)"
"(begin"
" 'internal-definition-context-seal"
"(begin"
"(if(1/internal-definition-context? intdef_7)"
"(void)"
"(let-values()"
"            (raise-argument-error 'internal-definition-context-seal \"internal-definition-context?\" intdef_7)))"
"(void)))))"
"(define-values"
"(1/identifier-remove-from-definition-context)"
"(lambda(id_71 intdef_8)"
"(begin"
" 'identifier-remove-from-definition-context"
"(begin"
"(if(identifier? id_71)"
"(void)"
"          (let-values () (raise-argument-error 'identifier-remove-from-definition-context \"identifier?\" id_71)))"
"(if(let-values(((or-part_179)(1/internal-definition-context? intdef_8)))"
"(if or-part_179 or-part_179(if(list? intdef_8)(andmap2 1/internal-definition-context? intdef_8) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-remove-from-definition-context"
"             \"(or/c internal-definition-context? (listof internal-definition-context?))\""
" intdef_8)))"
"(let-values(((x_76)"
"(let-values(((a_49) intdef_8))"
"(if(list? a_49)"
"(let-values()(reverse$1 a_49))"
"(if(not a_49)(let-values() null)(let-values()(list a_49)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_209)"
"(lambda(id_72 a_50)"
"(begin"
" 'for-loop"
"(if(pair? a_50)"
"(let-values(((intdef_9)(car a_50)))"
"(let-values(((id_73)"
"(let-values(((id_74) id_72))"
"(let-values(((id_75)"
"(let-values()"
"(1/internal-definition-context-introduce"
" intdef_9"
" id_74"
" 'remove))))"
"(values id_75)))))"
"(if(not #f)(for-loop_209 id_73(cdr a_50)) id_73)))"
" id_72)))))"
" for-loop_209)"
" id_71"
" x_76)))))))"
"(define-values"
"(intdefs?)"
"(lambda(x_77)"
"(begin"
"(let-values(((or-part_277)(1/internal-definition-context? x_77)))"
"(if or-part_277 or-part_277(if(list? x_77)(andmap2 1/internal-definition-context? x_77) #f))))))"
" (define-values (intdefs?-string) \"(or/c internal-definition-context? (listof internal-definition-context?))\")"
"(define-values"
"(intdefs-or-false?)"
"(lambda(x_78)(begin(let-values(((or-part_278)(not x_78)))(if or-part_278 or-part_278(intdefs? x_78))))))"
"(define-values"
"(intdefs-or-false?-string)"
"  \"(or/c internal-definition-context? (listof internal-definition-context?) #f)\")"
"(define-values"
"(add-intdef-bindings)"
"(lambda(env_11 intdefs_0)"
"(begin"
"(let-values(((x_79)"
"(let-values(((a_51) intdefs_0))"
"(if(list? a_51)"
"(let-values()(reverse$1 a_51))"
"(if(not a_51)(let-values() null)(let-values()(list a_51)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_256)"
"(lambda(env_12 a_52)"
"(begin"
" 'for-loop"
"(if(pair? a_52)"
"(let-values(((intdef_10)(car a_52)))"
"(let-values(((env_13)"
"(let-values(((env_14) env_12))"
"(let-values(((env_15)"
"(let-values()"
"(let-values(((parent-ctx_2)"
"(internal-definition-context-parent-ctx"
" intdef_10)))"
"(let-values(((parent-env_0)"
"(if parent-ctx_2"
"(add-intdef-bindings"
" env_14"
" parent-ctx_2)"
" env_14)))"
"(let-values(((env-mixins_1)"
"(unbox"
"(internal-definition-context-env-mixins"
" intdef_10))))"
"((letrec-values(((loop_97)"
"(lambda(env_16"
" env-mixins_2)"
"(begin"
" 'loop"
"(if(null? env-mixins_2)"
"(let-values() env_16)"
"(let-values()"
"(let-values(((env-mixin_1)"
"(car"
" env-mixins_2)))"
"(let-values(((or-part_279)"
"(hash-ref"
"(env-mixin-cache"
" env-mixin_1)"
" env_16"
" #f)))"
"(if or-part_279"
" or-part_279"
"(let-values(((new-env_0)"
"(env-extend"
"(loop_97"
" env_16"
"(cdr"
" env-mixins_2))"
"(env-mixin-sym"
" env-mixin_1)"
"(env-mixin-value"
" env-mixin_1))))"
"(begin"
"(hash-set!"
"(env-mixin-cache"
" env-mixin_1)"
" env_16"
" new-env_0)"
" new-env_0)))))))))))"
" loop_97)"
" parent-env_0"
" env-mixins_1)))))))"
"(values env_15)))))"
"(if(not #f)(for-loop_256 env_13(cdr a_52)) env_13)))"
" env_12)))))"
" for-loop_256)"
" env_11"
" x_79))))))"
"(define-values"
"(add-intdef-scopes24.1)"
"(lambda(action19_0 always?18_0 s22_0 intdefs23_0)"
"(begin"
" 'add-intdef-scopes24"
"(let-values(((s_426) s22_0))"
"(let-values(((intdefs_1) intdefs23_0))"
"(let-values(((always?_0) always?18_0))"
"(let-values(((action_0)(if(eq? action19_0 unsafe-undefined) add-scope action19_0)))"
"(let-values()"
"(let-values(((x_80)"
"(let-values(((a_53) intdefs_1))"
"(if(list? a_53)"
"(let-values()(reverse$1 a_53))"
"(if(not a_53)(let-values() null)(let-values()(list a_53)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_257)"
"(lambda(s_71 a_54)"
"(begin"
" 'for-loop"
"(if(pair? a_54)"
"(let-values(((intdef_11)(car a_54)))"
"(let-values(((s_427)"
"(let-values(((s_214) s_71))"
"(if(let-values(((or-part_280) always?_0))"
"(if or-part_280"
" or-part_280"
"(internal-definition-context-add-scope?"
" intdef_11)))"
"(let-values(((s_428) s_214))"
"(let-values(((s_215)"
"(let-values()"
"(action_0"
" s_428"
"(internal-definition-context-scope"
" intdef_11)))))"
"(values s_215)))"
" s_214))))"
"(if(not #f)(for-loop_257 s_427(cdr a_54)) s_427)))"
" s_71)))))"
" for-loop_257)"
" s_426"
" x_80)))))))))))"
"(define-values"
"(make-local-expand-context42.1)"
"(lambda(context27_0"
" intdefs29_0"
" keep-#%expression?33_0"
" phase28_1"
" stop-ids30_0"
" to-parsed-ok?31_0"
" track-to-be-defined?32_0"
" ctx41_0)"
"(begin"
" 'make-local-expand-context42"
"(let-values(((ctx_45) ctx41_0))"
"(let-values(((context_9) context27_0))"
"(let-values(((phase_110)(if(eq? phase28_1 unsafe-undefined)(expand-context-phase ctx_45) phase28_1)))"
"(let-values(((intdefs_2) intdefs29_0))"
"(let-values(((stop-ids_1) stop-ids30_0))"
"(let-values(((to-parsed-ok?_0) to-parsed-ok?31_0))"
"(let-values(((track-to-be-defined?_0) track-to-be-defined?32_0))"
"(let-values(((keep-#%expression?_1) keep-#%expression?33_0))"
"(let-values()"
"(let-values(((same-kind?_0)"
"(let-values(((or-part_281)(eq? context_9(expand-context-context ctx_45))))"
"(if or-part_281"
" or-part_281"
"(if(list? context_9)(list?(expand-context-context ctx_45)) #f)))))"
"(let-values(((all-stop-ids_0)"
"(if stop-ids_1(stop-ids->all-stop-ids stop-ids_1 phase_110) #f)))"
"(let-values(((def-ctx-scopes_5)"
"(if(expand-context-def-ctx-scopes ctx_45)"
"(unbox(expand-context-def-ctx-scopes ctx_45))"
" null)))"
"(let-values(((v_194) ctx_45))"
"(let-values(((the-struct_66) v_194))"
"(if(expand-context/outer? the-struct_66)"
"(let-values(((context69_0) context_9)"
"((env70_0)(add-intdef-bindings(expand-context-env ctx_45) intdefs_2))"
"((use-site-scopes71_0)"
"(if(let-values(((or-part_282)(eq? context_9 'module)))"
"(if or-part_282"
" or-part_282"
"(let-values(((or-part_133)(eq? context_9 'module-begin)))"
"(if or-part_133 or-part_133(list? context_9)))))"
"(let-values(((or-part_283)"
"(root-expand-context-use-site-scopes ctx_45)))"
"(if or-part_283 or-part_283(box null)))"
" #f))"
"((frame-id72_0)"
"(let-values(((x_5)"
"(let-values(((a_55) intdefs_2))"
"(if(list? a_55)"
"(let-values()(reverse$1 a_55))"
"(if(not a_55)"
"(let-values() null)"
"(let-values()(list a_55)))))))"
"(begin"
" #t"
"((letrec-values(((for-loop_258)"
"(lambda(frame-id_9 a_56)"
"(begin"
" 'for-loop"
"(if(pair? a_56)"
"(let-values(((intdef_12)(car a_56)))"
"(let-values(((frame-id_10)"
"(let-values(((frame-id_11)"
" frame-id_9))"
"(let-values(((frame-id_12)"
"(let-values()"
"(let-values(((i-frame-id_0)"
"(internal-definition-context-frame-id"
" intdef_12)))"
"(if(if frame-id_11"
"(if i-frame-id_0"
"(not"
"(eq?"
" frame-id_11"
" i-frame-id_0))"
" #f)"
" #f)"
"(let-values()"
" 'all)"
"(let-values()"
"(let-values(((or-part_284)"
" frame-id_11))"
"(if or-part_284"
" or-part_284"
" i-frame-id_0))))))))"
"(values"
" frame-id_12)))))"
"(if(not #f)"
"(for-loop_258"
" frame-id_10"
"(cdr a_56))"
" frame-id_10)))"
" frame-id_9)))))"
" for-loop_258)"
"(root-expand-context-frame-id ctx_45)"
" x_5))))"
"((post-expansion73_0)"
"(let-values(((pe_2)"
"(if same-kind?_0"
"(if(let-values(((or-part_285)(pair? context_9)))"
"(if or-part_285"
" or-part_285"
"(memq"
" context_9"
" '(module module-begin top-level))))"
"(root-expand-context-post-expansion ctx_45)"
" #f)"
" #f)))"
"(if(if intdefs_2(not(null? intdefs_2)) #f)"
"(let-values()"
"(lambda(s_225)"
"(begin"
" 'post-expansion73"
"(let-values(((temp79_0)(apply-post-expansion pe_2 s_225))"
"((intdefs80_0) intdefs_2))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" #f"
" temp79_0"
" intdefs80_0)))))"
"(let-values() pe_2))))"
"((scopes74_0)(append def-ctx-scopes_5(expand-context-scopes ctx_45)))"
"((only-immediate?75_0)(not stop-ids_1))"
"((current-introduction-scopes76_0) null)"
"((need-eventually-defined77_0)"
"(let-values(((ht_135)"
"(expand-context-need-eventually-defined ctx_45)))"
"(if track-to-be-defined?_0"
"(let-values() ht_135)"
"(if ht_135(let-values()(make-hasheqv))(let-values() #f)))))"
"((inner78_0)"
"(let-values(((the-struct_67)"
"(root-expand-context/outer-inner v_194)))"
"(if(expand-context/inner? the-struct_67)"
"(let-values(((to-parsed?81_0)"
"(if to-parsed-ok?_0"
"(expand-context-to-parsed? ctx_45)"
" #f))"
"((just-once?82_0) #f)"
"((in-local-expand?83_0) #t)"
"((keep-#%expression?84_0) keep-#%expression?_1)"
"((stops85_0)"
"(free-id-set"
" phase_110"
"(let-values(((or-part_286) all-stop-ids_0))"
"(if or-part_286 or-part_286 null)))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_67)"
"(root-expand-context/inner-module-scopes the-struct_67)"
"(root-expand-context/inner-top-level-bind-scope the-struct_67)"
"(root-expand-context/inner-all-scopes-stx the-struct_67)"
"(root-expand-context/inner-defined-syms the-struct_67)"
"(root-expand-context/inner-counter the-struct_67)"
"(root-expand-context/inner-lift-key the-struct_67)"
" to-parsed?81_0"
"(expand-context/inner-phase the-struct_67)"
"(expand-context/inner-namespace the-struct_67)"
" just-once?82_0"
"(expand-context/inner-module-begin-k the-struct_67)"
"(expand-context/inner-allow-unbound? the-struct_67)"
" in-local-expand?83_0"
" keep-#%expression?84_0"
" stops85_0"
"(expand-context/inner-declared-submodule-names the-struct_67)"
"(expand-context/inner-lifts the-struct_67)"
"(expand-context/inner-lift-envs the-struct_67)"
"(expand-context/inner-module-lifts the-struct_67)"
"(expand-context/inner-require-lifts the-struct_67)"
"(expand-context/inner-to-module-lifts the-struct_67)"
"(expand-context/inner-requires+provides the-struct_67)"
"(expand-context/inner-observer the-struct_67)"
"(expand-context/inner-for-serializable? the-struct_67)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_67)))"
"(raise-argument-error"
" 'struct-copy"
"                                                       \"expand-context/inner?\""
" the-struct_67)))))"
"(expand-context/outer1.1"
" inner78_0"
" post-expansion73_0"
" use-site-scopes71_0"
" frame-id72_0"
" context69_0"
" env70_0"
" scopes74_0"
"(expand-context/outer-def-ctx-scopes the-struct_66)"
"(expand-context/outer-binding-layer the-struct_66)"
"(expand-context/outer-reference-records the-struct_66)"
" only-immediate?75_0"
" need-eventually-defined77_0"
" current-introduction-scopes76_0"
"(expand-context/outer-current-use-scopes the-struct_66)"
"(expand-context/outer-name the-struct_66)))"
"(raise-argument-error"
" 'struct-copy"
"                                     \"expand-context/outer?\""
" the-struct_66)))))))))))))))))))"
"(define-values"
"(flip-introduction-scopes)"
"(lambda(s_429 ctx_46)(begin(flip-scopes s_429(expand-context-current-introduction-scopes ctx_46)))))"
"(define-values"
"(flip-introduction-and-use-scopes)"
"(lambda(s_229 ctx_47)"
"(begin(flip-scopes(flip-introduction-scopes s_229 ctx_47)(expand-context-current-use-scopes ctx_47)))))"
"(define-values"
"(1/syntax-transforming?)"
"(lambda()"
"(begin"
" 'syntax-transforming?"
"(if(let-values(((temp55_1) #t))(get-current-expand-context16.1 temp55_1 'unexpected)) #t #f))))"
"(define-values"
"(1/syntax-transforming-with-lifts?)"
"(lambda()"
"(begin"
" 'syntax-transforming-with-lifts?"
"(let-values(((ctx_48)(let-values(((temp56_3) #t))(get-current-expand-context16.1 temp56_3 'unexpected))))"
"(if ctx_48(if(expand-context-lifts ctx_48) #t #f) #f)))))"
"(define-values"
"(1/syntax-transforming-module-expression?)"
"(lambda()"
"(begin"
" 'syntax-transforming-module-expression?"
"(let-values(((ctx_49)(let-values(((temp57_1) #t))(get-current-expand-context16.1 temp57_1 'unexpected))))"
"(if ctx_49(if(expand-context-to-module-lifts ctx_49) #t #f) #f)))))"
"(define-values"
"(1/syntax-local-transforming-module-provides?)"
"(lambda()"
"(begin"
" 'syntax-local-transforming-module-provides?"
"(let-values(((ctx_50)(let-values(((temp58_1) #t))(get-current-expand-context16.1 temp58_1 'unexpected))))"
"(if ctx_50(if(expand-context-requires+provides ctx_50) #t #f) #f)))))"
"(define-values"
"(1/syntax-local-context)"
"(lambda()"
"(begin"
" 'syntax-local-context"
"(let-values(((ctx_51)"
"(let-values(((temp59_3) 'syntax-local-context))(get-current-expand-context16.1 #f temp59_3))))"
"(expand-context-context ctx_51)))))"
"(define-values"
"(1/syntax-local-introduce)"
"(lambda(s_430)"
"(begin"
" 'syntax-local-introduce"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_430)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-local-introduce \"syntax?\" s_430)))"
"(values))))"
"(let-values(((ctx_9)"
"(let-values(((temp61_2) 'syntax-local-introduce))"
"(get-current-expand-context16.1 #f temp61_2))))"
"(flip-introduction-and-use-scopes s_430 ctx_9))))))))"
"(define-values"
"(1/syntax-local-identifier-as-binding)"
"(lambda(id_76)"
"(begin"
" 'syntax-local-identifier-as-binding"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_76)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'syntax-local-identifier-as-binding \"identifier?\" id_76)))"
"(values))))"
"(let-values(((ctx_52)"
"(let-values(((temp63_2) 'syntax-local-identifier-as-binding))"
"(get-current-expand-context16.1 #f temp63_2))))"
"(remove-use-site-scopes id_76 ctx_52))))))))"
"(define-values"
"(1/syntax-local-phase-level)"
"(lambda()"
"(begin"
" 'syntax-local-phase-level"
"(let-values(((ctx_53)(let-values(((temp64_2) #t))(get-current-expand-context16.1 temp64_2 'unexpected))))"
"(if ctx_53(expand-context-phase ctx_53) 0)))))"
"(define-values"
"(1/syntax-local-name)"
"(lambda()"
"(begin"
" 'syntax-local-name"
"(let-values()"
"(let-values()"
"(let-values(((ctx_54)"
"(let-values(((who66_0) 'syntax-local-name))(get-current-expand-context16.1 #f who66_0))))"
"(let-values(((id_77)(expand-context-name ctx_54)))"
"(if id_77(datum->syntax$1 #f(syntax-e$1 id_77) id_77) #f))))))))"
"(define-values"
"(1/make-syntax-introducer)"
"(let-values(((make-syntax-introducer2_0)"
"(lambda(as-use-site?1_0)"
"(begin"
" 'make-syntax-introducer2"
"(let-values(((as-use-site?_0) as-use-site?1_0))"
"(let-values()(do-make-syntax-introducer(new-scope(if as-use-site?_0 'use-site 'macro)))))))))"
"(case-lambda"
"(()(begin 'make-syntax-introducer(make-syntax-introducer2_0 #f)))"
"((as-use-site?1_1)(make-syntax-introducer2_0 as-use-site?1_1)))))"
"(define-values"
"(1/make-interned-syntax-introducer)"
"(lambda(sym-key_0)"
"(begin"
" 'make-interned-syntax-introducer"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym-key_0)"
"(void)"
"              (let-values () (raise-argument-error 'make-interned-syntax-introducer \"symbol?\" sym-key_0)))"
"(do-make-syntax-introducer(make-interned-scope sym-key_0))))))))"
"(define-values"
"(do-make-syntax-introducer)"
"(lambda(sc_34)"
"(begin"
"(let-values(((core70_0)"
"(lambda(s69_0 mode68_0)"
"(begin"
" 'core70"
"(let-values(((s_431) s69_0))"
"(let-values(((mode_14) mode68_0))"
"(let-values()"
"(begin"
"(if(syntax?$1 s_431)"
"(void)"
"                                  (let-values () (raise-argument-error 'syntax-introducer \"syntax?\" s_431)))"
"(let-values(((tmp_33) mode_14))"
"(if(equal? tmp_33 'add)"
"(let-values()(add-scope s_431 sc_34))"
"(if(equal? tmp_33 'remove)"
"(let-values()(remove-scope s_431 sc_34))"
"(if(equal? tmp_33 'flip)"
"(let-values()(flip-scope s_431 sc_34))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                           \"(or/c 'add 'remove 'flip)\""
" mode_14))))))))))))))"
"(case-lambda((s_190)(core70_0 s_190 'flip))((s_90 mode68_1)(core70_0 s_90 mode68_1)))))))"
"(define-values"
"(1/make-syntax-delta-introducer)"
"(let-values(((make-syntax-delta-introducer7_0)"
"(lambda(ext-s5_0 base-s6_0 phase4_0)"
"(begin"
" 'make-syntax-delta-introducer7"
"(let-values(((ext-s_0) ext-s5_0))"
"(let-values(((base-s_0) base-s6_0))"
"(let-values(((phase_5)"
"(if(eq? phase4_0 unsafe-undefined)(1/syntax-local-phase-level) phase4_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 ext-s_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                     \"syntax?\""
" ext-s_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if((lambda(x_19)"
"(let-values(((or-part_287)(not x_19)))"
"(if or-part_287 or-part_287(syntax?$1 x_19))))"
" base-s_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
"                                                       \"(or/c syntax? #f)\""
" base-s_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(phase? phase_5)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-syntax-delta-introducer"
" phase?-string"
" phase_5)))"
"(values))))"
"(let-values(((ext-scs_0)(syntax-scope-set ext-s_0 phase_5)))"
"(let-values(((base-scs_0)"
"(syntax-scope-set"
"(let-values(((or-part_22) base-s_0))"
"(if or-part_22 or-part_22 empty-syntax))"
" phase_5)))"
"(let-values(((use-base-scs_0)"
"(if(subset? base-scs_0 ext-scs_0)"
" base-scs_0"
"(let-values(((or-part_288)"
"(if(identifier? base-s_0)"
"(let-values(((base-s73_0) base-s_0)"
"((phase74_1) phase_5)"
"((temp75_1) #t))"
"(resolve40.1"
" #f"
" #f"
" null"
" temp75_1"
" base-s73_0"
" phase74_1))"
" #f)))"
"(if or-part_288 or-part_288(seteq))))))"
"(let-values(((delta-scs_0)"
"(set->list(set-subtract ext-scs_0 use-base-scs_0))))"
"(let-values(((maybe-taint_0)"
"(if(syntax-clean? ext-s_0) values syntax-taint$1)))"
"(let-values(((core78_0)"
"(lambda(s77_1 mode76_0)"
"(begin"
" 'core78"
"(let-values(((s_11) s77_1))"
"(let-values(((mode_15) mode76_0))"
"(let-values()"
"(maybe-taint_0"
"(let-values(((tmp_34) mode_15))"
"(if(equal? tmp_34 'add)"
"(let-values()"
"(add-scopes s_11 delta-scs_0))"
"(if(equal? tmp_34 'remove)"
"(let-values()"
"(remove-scopes s_11 delta-scs_0))"
"(if(equal? tmp_34 'flip)"
"(let-values()"
"(flip-scopes s_11 delta-scs_0))"
"(let-values()"
"(raise-argument-error"
" 'syntax-introducer"
"                                                                                    \"(or/c 'add 'remove 'flip)\""
" mode_15))))))))))))))"
"(case-lambda"
"((s_92)(core78_0 s_92 'add))"
"((s_12 mode76_1)(core78_0 s_12 mode76_1))))))))))))))))))))))"
"(case-lambda"
"((ext-s_1 base-s_1)"
"(begin 'make-syntax-delta-introducer(make-syntax-delta-introducer7_0 ext-s_1 base-s_1 unsafe-undefined)))"
"((ext-s_2 base-s_2 phase4_1)(make-syntax-delta-introducer7_0 ext-s_2 base-s_2 phase4_1)))))"
"(define-values"
"(1/syntax-local-make-delta-introducer)"
"(lambda(id-stx_1)"
"(begin"
" 'syntax-local-make-delta-introducer"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id-stx_1)"
"(void)"
"              (let-values () (raise-argument-error 'syntax-local-make-delta-introducer \"identifier?\" id-stx_1)))"
"(raise"
"(exn:fail:unsupported"
"              \"syntax-local-make-delta-introducer: not supported anymore\""
"(current-continuation-marks)))))))))"
"(define-values"
"(do-syntax-local-value15.1)"
"(lambda(immediate?9_0 who11_0 id12_0 intdefs13_0 failure-thunk14_0)"
"(begin"
" 'do-syntax-local-value15"
"(let-values(((who_19) who11_0))"
"(let-values(((id_78) id12_0))"
"(let-values(((intdefs_3) intdefs13_0))"
"(let-values(((failure-thunk_0) failure-thunk14_0))"
"(let-values(((immediate?_1) immediate?9_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_78)"
"(void)"
"                                    (let-values () (raise-argument-error who_19 \"identifier?\" id_78)))"
"(values))))"
"(let-values((()"
"(begin"
"(if((lambda(x_81)"
"(let-values(((or-part_210)(not x_81)))"
"(if or-part_210"
" or-part_210"
"((lambda(p_50)"
"(if(procedure? p_50)(procedure-arity-includes? p_50 0) #f))"
" x_81))))"
" failure-thunk_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_19"
"                                         \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_0)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(intdefs-or-false? intdefs_3)"
"(void)"
"(let-values()"
"(raise-argument-error who_19 intdefs-or-false?-string intdefs_3)))"
"(values))))"
"(let-values(((current-ctx_0)"
"(let-values(((who81_0) who_19))(get-current-expand-context16.1 #f who81_0))))"
"(let-values(((ctx_11)"
"(if intdefs_3"
"(let-values(((v_195) current-ctx_0))"
"(let-values(((the-struct_68) v_195))"
"(if(expand-context/outer? the-struct_68)"
"(let-values(((env82_0)"
"(add-intdef-bindings"
"(expand-context-env current-ctx_0)"
" intdefs_3))"
"((inner83_0)(root-expand-context/outer-inner v_195)))"
"(expand-context/outer1.1"
" inner83_0"
"(root-expand-context/outer-post-expansion the-struct_68)"
"(root-expand-context/outer-use-site-scopes the-struct_68)"
"(root-expand-context/outer-frame-id the-struct_68)"
"(expand-context/outer-context the-struct_68)"
" env82_0"
"(expand-context/outer-scopes the-struct_68)"
"(expand-context/outer-def-ctx-scopes the-struct_68)"
"(expand-context/outer-binding-layer the-struct_68)"
"(expand-context/outer-reference-records the-struct_68)"
"(expand-context/outer-only-immediate? the-struct_68)"
"(expand-context/outer-need-eventually-defined the-struct_68)"
"(expand-context/outer-current-introduction-scopes the-struct_68)"
"(expand-context/outer-current-use-scopes the-struct_68)"
"(expand-context/outer-name the-struct_68)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_68))))"
" current-ctx_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_34)(expand-context-observer ctx_11)))"
"(if obs_34"
"(let-values()"
"(let-values()(call-expand-observe obs_34 'local-value id_78)))"
"(void)))"
"(values))))"
"(let-values(((phase_72)(expand-context-phase ctx_11)))"
"((letrec-values(((loop_98)"
"(lambda(id_62)"
"(begin"
" 'loop"
"(let-values(((b_83)"
"(if immediate?_1"
"(let-values(((id84_0) id_62)"
"((phase85_0) phase_72)"
"((temp86_0) #t))"
"(resolve+shift28.1"
" #f"
" #f"
" null"
" temp86_0"
" #f"
" id84_0"
" phase85_0))"
"(resolve+shift/extra-inspector"
" id_62"
" phase_72"
"(expand-context-namespace ctx_11)))))"
"(begin"
"(let-values(((obs_35)(expand-context-observer ctx_11)))"
"(if obs_35"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_35 'resolve id_62)))"
"(void)))"
"(if(not b_83)"
"(let-values()"
"(begin"
"(let-values(((obs_36)"
"(expand-context-observer ctx_11)))"
"(if obs_36"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_36"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_0"
"(failure-thunk_0)"
"                                                                  (error who_19 \"unbound identifier: ~v\" id_62))))"
"(let-values()"
"(let-values(((v_39 primitive?_7 insp_17 protected?_8)"
"(let-values(((b87_0) b_83)"
"((ctx88_0) ctx_11)"
"((id89_0) id_62)"
"((temp90_0) #t))"
"(lookup62.1"
" #f"
" temp90_0"
" b87_0"
" ctx88_0"
" id89_0))))"
"(if(let-values(((or-part_101)(variable? v_39)))"
"(if or-part_101 or-part_101(core-form? v_39)))"
"(let-values()"
"(begin"
"(let-values(((obs_37)"
"(expand-context-observer ctx_11)))"
"(if obs_37"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_37"
" 'local-value-result"
" #f)))"
"(void)))"
"(if failure-thunk_0"
"(failure-thunk_0)"
"(error"
" who_19"
"                                                                         \"identifier is not bound to syntax: ~v\""
" id_62))))"
"(let-values()"
"(begin"
"(let-values(((obs_38)"
"(expand-context-observer ctx_11)))"
"(if obs_38"
"(let-values()"
"(if(not"
"(if(1/rename-transformer? v_39)"
"(not immediate?_1)"
" #f))"
"(let-values()"
"(call-expand-observe"
" obs_38"
" 'local-value-result"
" #t))"
"(void)))"
"(void)))"
"(if(1/rename-transformer? v_39)"
"(let-values()"
"(if immediate?_1"
"(values"
" v_39"
"(1/rename-transformer-target v_39))"
"(loop_98"
"(1/rename-transformer-target v_39))))"
"(if immediate?_1"
"(let-values()(values v_39 #f))"
"(let-values() v_39)))))))))))))))"
" loop_98)"
"(flip-introduction-scopes id_78 ctx_11))))))))))))))))))"
"(define-values"
"(1/syntax-local-value)"
"(let-values(((syntax-local-value21_0)"
"(lambda(id20_0 failure-thunk18_0 intdef19_0)"
"(begin"
" 'syntax-local-value21"
"(let-values(((id_79) id20_0))"
"(let-values(((failure-thunk_1) failure-thunk18_0))"
"(let-values(((intdef_13) intdef19_0))"
"(let-values()"
"(let-values(((temp91_1) 'syntax-local-value)"
"((temp92_1) #f)"
"((id93_1) id_79)"
"((intdef94_0) intdef_13)"
"((failure-thunk95_0) failure-thunk_1))"
"(do-syntax-local-value15.1 temp92_1 temp91_1 id93_1 intdef94_0 failure-thunk95_0))))))))))"
"(case-lambda"
"((id_80)(begin 'syntax-local-value(syntax-local-value21_0 id_80 #f #f)))"
"((id_63 failure-thunk_2 intdef19_1)(syntax-local-value21_0 id_63 failure-thunk_2 intdef19_1))"
"((id_81 failure-thunk18_1)(syntax-local-value21_0 id_81 failure-thunk18_1 #f)))))"
"(define-values"
"(1/syntax-local-value/immediate)"
"(let-values(((syntax-local-value/immediate26_0)"
"(lambda(id25_2 failure-thunk23_0 intdef24_0)"
"(begin"
" 'syntax-local-value/immediate26"
"(let-values(((id_82) id25_2))"
"(let-values(((failure-thunk_3) failure-thunk23_0))"
"(let-values(((intdef_14) intdef24_0))"
"(let-values()"
"(let-values(((temp96_1) 'syntax-local-value/immediate)"
"((temp97_1) #t)"
"((id98_0) id_82)"
"((intdef99_0) intdef_14)"
"((failure-thunk100_0) failure-thunk_3))"
"(do-syntax-local-value15.1"
" temp97_1"
" temp96_1"
" id98_0"
" intdef99_0"
" failure-thunk100_0))))))))))"
"(case-lambda"
"((id_83)(begin 'syntax-local-value/immediate(syntax-local-value/immediate26_0 id_83 #f #f)))"
"((id_84 failure-thunk_4 intdef24_1)(syntax-local-value/immediate26_0 id_84 failure-thunk_4 intdef24_1))"
"((id_85 failure-thunk23_1)(syntax-local-value/immediate26_0 id_85 failure-thunk23_1 #f)))))"
"(define-values"
"(do-lift-values-expression)"
"(lambda(who_20 n_29 s_34)"
"(begin"
"(let-values((()"
"(begin"
"                      (if (syntax?$1 s_34) (void) (let-values () (raise-argument-error who_20 \"syntax?\" s_34)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(exact-nonnegative-integer? n_29)"
"(void)"
"                          (let-values () (raise-argument-error who_20 \"exact-nonnegative-integer?\" n_29)))"
"(values))))"
"(let-values(((ctx_55)(let-values(((who101_0) who_20))(get-current-expand-context16.1 #f who101_0))))"
"(let-values(((lifts_8)(expand-context-lifts ctx_55)))"
"(let-values((()"
"(begin"
"                              (if lifts_8 (void) (let-values () (raise-arguments-error who_20 \"no lift target\")))"
"(values))))"
"(let-values(((counter_4)(root-expand-context-counter ctx_55)))"
"(let-values(((ids_27)"
"(reverse$1"
"(let-values(((start_39) 0)((end_29) n_29)((inc_23) 1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-range start_39 end_29 inc_23)))"
"((letrec-values(((for-loop_221)"
"(lambda(fold-var_253 pos_106)"
"(begin"
" 'for-loop"
"(if(< pos_106 end_29)"
"(let-values()"
"(let-values(((fold-var_254)"
"(let-values(((fold-var_255) fold-var_253))"
"(let-values(((fold-var_256)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(set-box!"
" counter_4"
"(add1"
"(unbox"
" counter_4)))"
"(values))))"
"(let-values(((name_61)"
"(string->unreadable-symbol"
"(format"
"                                                                                                                    \"lifted/~a\""
"(unbox"
" counter_4)))))"
"(add-scope"
"(datum->syntax$1"
" #f"
" name_61)"
"(new-scope"
" 'macro)))))"
" fold-var_255))))"
"(values fold-var_256)))))"
"(if(not #f)"
"(for-loop_221 fold-var_254(+ pos_106 inc_23))"
" fold-var_254)))"
" fold-var_253)))))"
" for-loop_221)"
" null"
" start_39))))))"
"(begin"
"(let-values(((obs_39)(expand-context-observer ctx_55)))"
"(if obs_39"
"(let-values()(let-values()(call-expand-observe obs_39 'lift-expr ids_27 s_34)))"
"(void)))"
"(map2"
"(lambda(id_86)(flip-introduction-scopes id_86 ctx_55))"
"(add-lifted!"
" lifts_8"
" ids_27"
"(flip-introduction-scopes s_34 ctx_55)"
"(expand-context-phase ctx_55))))))))))))))"
"(define-values"
"(1/syntax-local-lift-expression)"
"(lambda(s_36)"
"(begin"
" 'syntax-local-lift-expression"
"(let-values()(let-values()(car(do-lift-values-expression 'syntax-local-lift-expression 1 s_36)))))))"
"(define-values"
"(1/syntax-local-lift-values-expression)"
"(lambda(n_30 s_63)"
"(begin"
" 'syntax-local-lift-values-expression"
"(let-values()(let-values()(do-lift-values-expression 'syntax-local-lift-values-expression n_30 s_63))))))"
"(define-values"
"(1/syntax-local-lift-context)"
"(lambda()"
"(begin"
" 'syntax-local-lift-context"
"(let-values()"
"(let-values()"
"(let-values(((ctx_56)"
"(let-values(((who105_0) 'syntax-local-lift-context))"
"(get-current-expand-context16.1 #f who105_0))))"
"(root-expand-context-lift-key ctx_56)))))))"
"(define-values"
"(1/syntax-local-lift-module)"
"(lambda(s_64)"
"(begin"
" 'syntax-local-lift-module"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_64)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-local-lift-module \"syntax?\" s_64)))"
"(values))))"
"(let-values(((ctx_57)"
"(let-values(((who107_0) 'syntax-local-lift-module))"
"(get-current-expand-context16.1 #f who107_0))))"
"(let-values(((phase_102)(expand-context-phase ctx_57)))"
"(begin"
"(let-values(((tmp_30)(core-form-sym s_64 phase_102)))"
"(if(if(equal? tmp_30 'module) #t(equal? tmp_30 'module*))"
"(let-values()"
"(let-values(((lifts_9)(expand-context-module-lifts ctx_57)))"
"(begin"
"(if lifts_9"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-lift-module"
"                                 \"not currently transforming within a module declaration or top level\""
"                                 \"form to lift\""
" s_64)))"
"(add-lifted-module! lifts_9(flip-introduction-scopes s_64 ctx_57) phase_102))))"
"(let-values()"
"                        (raise-arguments-error 'syntax-local-lift-module \"not a module form\" \"given form\" s_64))))"
"(let-values(((obs_40)(expand-context-observer ctx_57)))"
"(if obs_40"
"(let-values()(let-values()(call-expand-observe obs_40 'lift-statement s_64)))"
"(void))))))))))))"
"(define-values"
"(do-local-lift-to-module48.1)"
"(lambda(add-lifted!32_0"
" get-lift-ctx31_0"
" get-wrt-phase33_0"
" intro?29_0"
" more-checks30_0"
" no-target-msg28_0"
" post-wrap36_0"
" pre-wrap34_0"
" shift-wrap35_0"
" who46_0"
" s47_0)"
"(begin"
" 'do-local-lift-to-module48"
"(let-values(((who_21) who46_0))"
"(let-values(((s_432) s47_0))"
"(let-values(((no-target-msg_0) no-target-msg28_0))"
"(let-values(((intro?_0) intro?29_0))"
"(let-values(((more-checks_0)(if(eq? more-checks30_0 unsafe-undefined) void more-checks30_0)))"
"(let-values(((get-lift-ctx_0) get-lift-ctx31_0))"
"(let-values(((add-lifted!_0) add-lifted!32_0))"
"(let-values(((get-wrt-phase_0) get-wrt-phase33_0))"
"(let-values(((pre-wrap_0)"
"(if(eq? pre-wrap34_0 unsafe-undefined)"
"(lambda(s_433 phase_111 lift-ctx_1)(begin 'pre-wrap s_433))"
" pre-wrap34_0)))"
"(let-values(((shift-wrap_0)"
"(if(eq? shift-wrap35_0 unsafe-undefined)"
"(lambda(s_210 phase_112 lift-ctx_2)(begin 'shift-wrap s_210))"
" shift-wrap35_0)))"
"(let-values(((post-wrap_0)"
"(if(eq? post-wrap36_0 unsafe-undefined)"
"(lambda(s_211 phase_12 lift-ctx_3)(begin 'post-wrap s_211))"
" post-wrap36_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_432)"
"(void)"
"                                                (let-values () (raise-argument-error who_21 \"syntax?\" s_432)))"
"(values))))"
"(let-values((()(begin(more-checks_0)(values))))"
"(let-values(((ctx_58)"
"(let-values(((who108_0) who_21))"
"(get-current-expand-context16.1 #f who108_0))))"
"(let-values(((lift-ctx_4)(get-lift-ctx_0 ctx_58)))"
"(let-values((()"
"(begin"
"(if lift-ctx_4"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_21"
" no-target-msg_0"
"                                                           \"form to lift\""
" s_432)))"
"(values))))"
"(let-values(((phase_90)(expand-context-phase ctx_58)))"
"(let-values(((wrt-phase_1)(get-wrt-phase_0 lift-ctx_4)))"
"(let-values(((added-s_0)"
"(if intro?_0(flip-introduction-scopes s_432 ctx_58) s_432)))"
"(let-values(((pre-s_0)(pre-wrap_0 added-s_0 phase_90 lift-ctx_4)))"
"(let-values(((shift-s_0)"
"(let-values(((start_40) phase_90)"
"((end_30) wrt-phase_1)"
"((inc_24) -1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-range start_40 end_30 inc_24)))"
"((letrec-values(((for-loop_131)"
"(lambda(s_434 pos_107)"
"(begin"
" 'for-loop"
"(if(> pos_107 end_30)"
"(let-values(((phase_113)"
" pos_107))"
"(let-values(((s_321)"
"(let-values(((s_435)"
" s_434))"
"(let-values(((s_436)"
"(let-values()"
"(shift-wrap_0"
" s_435"
"(sub1"
" phase_113)"
" lift-ctx_4))))"
"(values"
" s_436)))))"
"(if(not #f)"
"(for-loop_131"
" s_321"
"(+ pos_107 inc_24))"
" s_321)))"
" s_434)))))"
" for-loop_131)"
" pre-s_0"
" start_40)))))"
"(let-values(((post-s_1)"
"(post-wrap_0 shift-s_0 wrt-phase_1 lift-ctx_4)))"
"(begin"
"(add-lifted!_0 lift-ctx_4 post-s_1 wrt-phase_1)"
"(values ctx_58 post-s_1))))))))))))))))))))))))))))"
"(define-values"
"(1/syntax-local-lift-require)"
"(lambda(s_218 use-s_1)"
"(begin"
" 'syntax-local-lift-require"
"(let-values()"
"(let-values()"
"(let-values(((sc_35)(new-scope 'lifted-require)))"
"(let-values(((ctx_59 added-s_1)"
"(let-values(((who110_0) 'syntax-local-lift-require)"
"((temp111_0)(datum->syntax$1 #f s_218))"
"                                       ((temp112_0) \"could not find target context\")"
"((temp113_0) #f)"
"((temp114_1)"
"(lambda()"
"(if(syntax?$1 use-s_1)"
"(void)"
"(let-values()"
"                                              (raise-argument-error 'syntax-local-lift-require \"syntax?\" use-s_1)))))"
"((expand-context-require-lifts115_0) expand-context-require-lifts)"
"((require-lift-context-wrt-phase116_0) require-lift-context-wrt-phase)"
"((add-lifted-require!117_0) add-lifted-require!)"
"((temp118_0)"
"(lambda(s_110 phase_114 require-lift-ctx_0)"
"(require-spec-shift-for-syntax s_110)))"
"((temp119_0)"
"(lambda(s_437 phase_115 require-lift-ctx_1)"
"(wrap-form '#%require(add-scope s_437 sc_35) phase_115))))"
"(do-local-lift-to-module48.1"
" add-lifted-require!117_0"
" expand-context-require-lifts115_0"
" require-lift-context-wrt-phase116_0"
" temp113_0"
" temp114_1"
" temp112_0"
" temp119_0"
" unsafe-undefined"
" temp118_0"
" who110_0"
" temp111_0))))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
"(expand-context-namespace ctx_59)"
"(expand-context-phase ctx_59))"
"(values))))"
"(let-values(((result-s_6)(add-scope use-s_1 sc_35)))"
"(begin"
"(let-values(((obs_41)(expand-context-observer ctx_59)))"
"(if obs_41"
"(let-values()"
"(let-values()(call-expand-observe obs_41 'lift-require added-s_1 use-s_1 result-s_6)))"
"(void)))"
" result-s_6))))))))))"
"(define-values"
"(1/syntax-local-lift-provide)"
"(lambda(s_161)"
"(begin"
" 'syntax-local-lift-provide"
"(let-values()"
"(let-values()"
"(let-values(((ctx_60 result-s_7)"
"(let-values(((who121_0) 'syntax-local-lift-provide)"
"((s122_1) s_161)"
"                                     ((temp123_0) \"not expanding in a module run-time body\")"
"((expand-context-to-module-lifts124_0) expand-context-to-module-lifts)"
"((to-module-lift-context-wrt-phase125_0) to-module-lift-context-wrt-phase)"
"((add-lifted-to-module-provide!126_0) add-lifted-to-module-provide!)"
"((temp127_2)"
"(lambda(s_438 phase_116 to-module-lift-ctx_0)(wrap-form 'for-syntax s_438 #f)))"
"((temp128_2)"
"(lambda(s_116 phase_117 to-module-lift-ctx_1)"
"(wrap-form '#%provide s_116 phase_117))))"
"(do-local-lift-to-module48.1"
" add-lifted-to-module-provide!126_0"
" expand-context-to-module-lifts124_0"
" to-module-lift-context-wrt-phase125_0"
" #t"
" unsafe-undefined"
" temp123_0"
" temp128_2"
" unsafe-undefined"
" temp127_2"
" who121_0"
" s122_1))))"
"(let-values(((obs_42)(expand-context-observer ctx_60)))"
"(if obs_42"
"(let-values()(let-values()(call-expand-observe obs_42 'lift-provide result-s_7)))"
"(void)))))))))"
"(define-values"
"(1/syntax-local-lift-module-end-declaration)"
"(lambda(s_225)"
"(begin"
" 'syntax-local-lift-module-end-declaration"
"(let-values()"
"(let-values()"
"(let-values(((ctx_61 also-s_0)"
"(let-values(((who130_0) 'syntax-local-lift-module-end-declaration)"
"((s131_0) s_225)"
"((temp132_1)"
"                                      \"not currently transforming an expression within a module declaration\")"
"((expand-context-to-module-lifts133_0) expand-context-to-module-lifts)"
"((temp134_1)(lambda(lift-ctx_5) 0))"
"((add-lifted-to-module-end!135_0) add-lifted-to-module-end!)"
"((temp136_0)"
"(lambda(orig-s_32 phase_118 to-module-lift-ctx_2)"
"(if(to-module-lift-context-end-as-expressions? to-module-lift-ctx_2)"
"(wrap-form '#%expression orig-s_32 phase_118)"
" orig-s_32)))"
"((temp137_1)"
"(lambda(s_439 phase_119 to-module-lift-ctx_3)"
"(wrap-form 'begin-for-syntax s_439 phase_119))))"
"(do-local-lift-to-module48.1"
" add-lifted-to-module-end!135_0"
" expand-context-to-module-lifts133_0"
" temp134_1"
" #t"
" unsafe-undefined"
" temp132_1"
" unsafe-undefined"
" temp136_0"
" temp137_1"
" who130_0"
" s131_0))))"
"(let-values(((obs_43)(expand-context-observer ctx_61)))"
"(if obs_43"
"(let-values()(let-values()(call-expand-observe obs_43 'lift-statement s_225)))"
"(void)))))))))"
"(define-values"
"(wrap-form)"
"(lambda(sym_74 s_124 phase_120)"
"(begin"
"(datum->syntax$1"
" #f"
"(list(datum->syntax$1(if phase_120(syntax-shift-phase-level$1 core-stx phase_120) #f) sym_74) s_124)))))"
"(define-values"
"(1/syntax-local-module-defined-identifiers)"
"(lambda()"
"(begin"
" 'syntax-local-module-defined-identifiers"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-defined-identifiers"
"                               \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_62)"
"(let-values(((temp139_0) 'syntax-local-module-defined-identifiers))"
"(get-current-expand-context16.1 #f temp139_0))))"
"(requireds->phase-ht(extract-module-definitions(expand-context-requires+provides ctx_62))))))))))"
"(define-values"
"(1/syntax-local-module-required-identifiers)"
"(lambda(mod-path_8 phase-level_21)"
"(begin"
" 'syntax-local-module-required-identifiers"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_289)(not mod-path_8)))"
"(if or-part_289 or-part_289(1/module-path? mod-path_8)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                               \"(or/c module-path? #f)\""
" mod-path_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_290)(eq? phase-level_21 #t)))"
"(if or-part_290 or-part_290(phase? phase-level_21)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-required-identifiers"
"                                 (format \"(or/c ~a #t)\" phase?-string)"
" phase-level_21)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/syntax-local-transforming-module-provides?)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'syntax-local-module-required-identifiers"
"                                   \"not currently transforming module provides\")))"
"(values))))"
"(let-values(((ctx_63)"
"(let-values(((temp141_1) 'syntax-local-module-required-identifiers))"
"(get-current-expand-context16.1 #f temp141_1))))"
"(let-values(((requires+provides_5)(expand-context-requires+provides ctx_63)))"
"(let-values(((mpi_44)(if mod-path_8(module-path->mpi/context mod-path_8 ctx_63) #f)))"
"(let-values(((requireds_0)"
"(extract-all-module-requires"
" requires+provides_5"
" mpi_44"
"(if(eq? phase-level_21 #t) 'all phase-level_21))))"
"(if requireds_0"
"(reverse$1"
"(let-values(((ht_136)(requireds->phase-ht requireds_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_136)))"
"((letrec-values(((for-loop_259)"
"(lambda(fold-var_257 i_161)"
"(begin"
" 'for-loop"
"(if i_161"
"(let-values(((phase_121 ids_28)"
"(hash-iterate-key+value ht_136 i_161)))"
"(let-values(((fold-var_207)"
"(let-values(((fold-var_258) fold-var_257))"
"(let-values(((fold-var_259)"
"(let-values()"
"(cons"
"(let-values()"
"(cons phase_121 ids_28))"
" fold-var_258))))"
"(values fold-var_259)))))"
"(if(not #f)"
"(for-loop_259"
" fold-var_207"
"(hash-iterate-next ht_136 i_161))"
" fold-var_207)))"
" fold-var_257)))))"
" for-loop_259)"
" null"
"(hash-iterate-first ht_136)))))"
" #f)))))))))))))"
"(define-values"
"(requireds->phase-ht)"
"(lambda(requireds_1)"
"(begin"
"(let-values(((lst_296) requireds_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_296)))"
"((letrec-values(((for-loop_139)"
"(lambda(ht_137 lst_297)"
"(begin"
" 'for-loop"
"(if(pair? lst_297)"
"(let-values(((r_43)(unsafe-car lst_297))((rest_170)(unsafe-cdr lst_297)))"
"(let-values(((ht_138)"
"(let-values(((ht_139) ht_137))"
"(let-values(((ht_140)"
"(let-values()"
"(hash-update"
" ht_139"
"(required-phase r_43)"
"(lambda(l_71)(cons(required-id r_43) l_71))"
" null))))"
"(values ht_140)))))"
"(if(not #f)(for-loop_139 ht_138 rest_170) ht_138)))"
" ht_137)))))"
" for-loop_139)"
"(hasheqv)"
" lst_296))))))"
"(define-values"
"(1/syntax-local-module-exports)"
"(lambda(mod-path_9)"
"(begin"
" 'syntax-local-module-exports"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_291)(1/module-path? mod-path_9)))"
"(if or-part_291"
" or-part_291"
"(if(syntax?$1 mod-path_9)(1/module-path?(syntax->datum$1 mod-path_9)) #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-module-exports"
"(string-append"
"                                \"(or/c module-path?\\n\""
"                                \"      (and/c syntax?\\n\""
"                                \"             (lambda (stx)\\n\""
"                                \"               (module-path? (syntax->datum stx)))))\")"
" mod-path_9)))"
"(values))))"
"(let-values(((ctx_64)"
"(let-values(((temp143_0) 'syntax-local-module-exports))"
"(get-current-expand-context16.1 #f temp143_0))))"
"(let-values(((ns_76)(expand-context-namespace ctx_64)))"
"(let-values(((mod-name_18)"
"(1/module-path-index-resolve"
"(module-path->mpi/context"
"(if(syntax?$1 mod-path_9)(syntax->datum$1 mod-path_9) mod-path_9)"
" ctx_64)"
" #t)))"
"(let-values(((m_19)(namespace->module ns_76 mod-name_18)))"
"(begin"
"(if m_19"
"(void)"
"(let-values()(raise-unknown-module-error 'syntax-local-module-exports mod-name_18)))"
"(reverse$1"
"(let-values(((ht_141)(module-provides m_19)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_141)))"
"((letrec-values(((for-loop_260)"
"(lambda(fold-var_260 i_162)"
"(begin"
" 'for-loop"
"(if i_162"
"(let-values(((phase_122 syms_21)"
"(hash-iterate-key+value ht_141 i_162)))"
"(let-values(((fold-var_261)"
"(let-values(((fold-var_262) fold-var_260))"
"(let-values(((fold-var_263)"
"(let-values()"
"(cons"
"(let-values()"
"(cons"
" phase_122"
"(reverse$1"
"(let-values(((ht_142)"
" syms_21))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash-keys"
" ht_142)))"
"((letrec-values(((for-loop_261)"
"(lambda(fold-var_264"
" i_12)"
"(begin"
" 'for-loop"
"(if i_12"
"(let-values(((sym_75)"
"(hash-iterate-key"
" ht_142"
" i_12)))"
"(let-values(((fold-var_265)"
"(let-values(((fold-var_266)"
" fold-var_264))"
"(let-values(((fold-var_267)"
"(let-values()"
"(cons"
"(let-values()"
" sym_75)"
" fold-var_266))))"
"(values"
" fold-var_267)))))"
"(if(not"
" #f)"
"(for-loop_261"
" fold-var_265"
"(hash-iterate-next"
" ht_142"
" i_12))"
" fold-var_265)))"
" fold-var_264)))))"
" for-loop_261)"
" null"
"(hash-iterate-first"
" ht_142)))))))"
" fold-var_262))))"
"(values fold-var_263)))))"
"(if(not #f)"
"(for-loop_260 fold-var_261(hash-iterate-next ht_141 i_162))"
" fold-var_261)))"
" fold-var_260)))))"
" for-loop_260)"
" null"
"(hash-iterate-first ht_141))))))))))))))))"
"(define-values"
"(1/syntax-local-submodules)"
"(lambda()"
"(begin"
" 'syntax-local-submodules"
"(let-values()"
"(let-values()"
"(let-values(((ctx_65)"
"(let-values(((who145_0) 'syntax-local-submodules))"
"(get-current-expand-context16.1 #f who145_0))))"
"(let-values(((submods_3)(expand-context-declared-submodule-names ctx_65)))"
"(reverse$1"
"(let-values(((ht_143) submods_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_143)))"
"((letrec-values(((for-loop_262)"
"(lambda(fold-var_268 i_163)"
"(begin"
" 'for-loop"
"(if i_163"
"(let-values(((name_62 kind_8)(hash-iterate-key+value ht_143 i_163)))"
"(let-values(((fold-var_269)"
"(let-values(((fold-var_270) fold-var_268))"
"(if(eq? kind_8 'module)"
"(let-values(((fold-var_271) fold-var_270))"
"(let-values(((fold-var_272)"
"(let-values()"
"(cons"
"(let-values() name_62)"
" fold-var_271))))"
"(values fold-var_272)))"
" fold-var_270))))"
"(if(not #f)"
"(for-loop_262 fold-var_269(hash-iterate-next ht_143 i_163))"
" fold-var_269)))"
" fold-var_268)))))"
" for-loop_262)"
" null"
"(hash-iterate-first ht_143))))))))))))"
"(define-values"
"(1/syntax-local-get-shadower)"
"(let-values(((syntax-local-get-shadower53_0)"
"(lambda(id52_0 only-generated?51_0)"
"(begin"
" 'syntax-local-get-shadower53"
"(let-values(((id_87) id52_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? id_87)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-local-get-shadower"
"                                                   \"identifier?\""
" id_87)))"
"(values))))"
"(let-values(((ctx_66)"
"(let-values(((who147_0) 'syntax-local-get-shadower))"
"(get-current-expand-context16.1 #f who147_0))))"
"(let-values(((new-id_0)(add-scopes id_87(expand-context-scopes ctx_66))))"
"(if(syntax-clean? id_87) new-id_0(syntax-taint$1 new-id_0))))))))))))))"
"(case-lambda"
"((id_88)(begin 'syntax-local-get-shadower(syntax-local-get-shadower53_0 id_88 #f)))"
"((id_89 only-generated?51_1)(syntax-local-get-shadower53_0 id_89 only-generated?51_1)))))"
"(define-values"
"(syntax-source-accessor)"
"(lambda(who_0 srcloc-accessor_0)"
"(begin"
"(lambda(s_189)"
"(let-values((()"
"(begin"
"                        (if (syntax?$1 s_189) (void) (let-values () (raise-argument-error who_0 \"syntax?\" s_189)))"
"(values))))"
"(let-values(((srcloc_8)(syntax-srcloc s_189)))(if srcloc_8(srcloc-accessor_0 srcloc_8) #f)))))))"
"(define-values(1/syntax-source)(syntax-source-accessor 'syntax-source srcloc-source))"
"(define-values(1/syntax-line)(syntax-source-accessor 'syntax-line srcloc-line))"
"(define-values(1/syntax-column)(syntax-source-accessor 'syntax-column srcloc-column))"
"(define-values(1/syntax-position)(syntax-source-accessor 'syntax-position srcloc-position))"
"(define-values(1/syntax-span)(syntax-source-accessor 'syntax-span srcloc-span))"
"(define-values"
"(encoded-srcloc?)"
"(lambda(v_71)"
"(begin"
"(let-values(((or-part_26)(if(list? v_71)(if(=(length v_71) 5)(srcloc-vector?(list->vector v_71)) #f) #f)))"
"(if or-part_26 or-part_26(if(vector? v_71)(if(=(vector-length v_71) 5)(srcloc-vector? v_71) #f) #f))))))"
"(define-values"
"(srcloc-vector?)"
"(lambda(v_73)"
"(begin"
"(if(let-values(((or-part_292)(not(vector-ref v_73 1))))"
"(if or-part_292 or-part_292(exact-positive-integer?(vector-ref v_73 1))))"
"(if(let-values(((or-part_27)(not(vector-ref v_73 2))))"
"(if or-part_27 or-part_27(exact-nonnegative-integer?(vector-ref v_73 2))))"
"(if(let-values(((or-part_10)(not(vector-ref v_73 3))))"
"(if or-part_10 or-part_10(exact-positive-integer?(vector-ref v_73 3))))"
"(let-values(((or-part_158)(not(vector-ref v_73 4))))"
"(if or-part_158 or-part_158(exact-nonnegative-integer?(vector-ref v_73 4))))"
" #f)"
" #f)"
" #f))))"
"(define-values"
"(to-srcloc-stx)"
"(lambda(v_138)"
"(begin"
"(if(srcloc? v_138)"
"(let-values()"
"(let-values(((the-struct_35) empty-syntax))"
"(if(syntax?$1 the-struct_35)"
"(let-values(((srcloc1_2) v_138))"
"(syntax1.1"
"(syntax-content the-struct_35)"
"(syntax-scopes the-struct_35)"
"(syntax-shifted-multi-scopes the-struct_35)"
"(syntax-scope-propagations+tamper the-struct_35)"
"(syntax-mpi-shifts the-struct_35)"
" srcloc1_2"
"(syntax-props the-struct_35)"
"(syntax-inspector the-struct_35)))"
"              (raise-argument-error 'struct-copy \"syntax?\" the-struct_35))))"
"(if(pair? v_138)"
"(let-values()(to-srcloc-stx(list->vector v_138)))"
"(if(vector? v_138)"
"(let-values()"
"(let-values(((the-struct_36) empty-syntax))"
"(if(syntax?$1 the-struct_36)"
"(let-values(((srcloc2_0)"
"(srcloc"
"(vector-ref v_138 0)"
"(vector-ref v_138 1)"
"(vector-ref v_138 2)"
"(vector-ref v_138 3)"
"(vector-ref v_138 4))))"
"(syntax1.1"
"(syntax-content the-struct_36)"
"(syntax-scopes the-struct_36)"
"(syntax-shifted-multi-scopes the-struct_36)"
"(syntax-scope-propagations+tamper the-struct_36)"
"(syntax-mpi-shifts the-struct_36)"
" srcloc2_0"
"(syntax-props the-struct_36)"
"(syntax-inspector the-struct_36)))"
"                  (raise-argument-error 'struct-copy \"syntax?\" the-struct_36))))"
"(let-values() v_138)))))))"
"(define-values"
"(1/syntax-e)"
"(lambda(s_0)"
"(begin"
" 'syntax-e"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-e \"syntax?\" s_0)))"
"(syntax-e$1 s_0)))))))"
"(define-values"
"(1/syntax->datum)"
"(lambda(s_189)"
"(begin"
" 'syntax->datum"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_189) (void) (let-values () (raise-argument-error 'syntax->datum \"syntax?\" s_189)))"
"(syntax->datum$1 s_189)))))))"
"(define-values(maybe-syntax->datum)(lambda(s_73)(begin(if(syntax?$1 s_73)(syntax->datum$1 s_73) s_73))))"
"(define-values"
"(1/datum->syntax)"
"(let-values(((datum->syntax6_1)"
"(lambda(stx-c4_1 s5_2 stx-l1_0 stx-p2_0 ignored3_0)"
"(begin"
" 'datum->syntax6"
"(let-values(((stx-c_4) stx-c4_1))"
"(let-values(((s_440) s5_2))"
"(let-values(((stx-l_2) stx-l1_0))"
"(let-values(((stx-p_1) stx-p2_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(let-values(((or-part_6)(not stx-c_4)))"
"(if or-part_6 or-part_6(syntax?$1 stx-c_4)))"
"(void)"
"                                        (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-c_4)))"
"(if(let-values(((or-part_293)(not stx-l_2)))"
"(if or-part_293"
" or-part_293"
"(let-values(((or-part_28)(syntax?$1 stx-l_2)))"
"(if or-part_28 or-part_28(encoded-srcloc? stx-l_2)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'datum->syntax"
"(string-append"
"                                            \"(or #f syntax?\\n\""
"                                            \"       (list/c any/c\\n\""
"                                            \"               (or/c exact-positive-integer? #f)\\n\""
"                                            \"               (or/c exact-nonnegative-integer? #f)\\n\""
"                                            \"               (or/c exact-positive-integer? #f)\\n\""
"                                            \"               (or/c exact-nonnegative-integer? #f))\\n\""
"                                            \"       (vector/c any/c\\n\""
"                                            \"                 (or/c exact-positive-integer? #f)\\n\""
"                                            \"                 (or/c exact-nonnegative-integer? #f)\\n\""
"                                            \"                 (or/c exact-positive-integer? #f)\\n\""
"                                            \"                 (or/c exact-nonnegative-integer? #f)))\")"
" stx-l_2)))"
"(if(let-values(((or-part_294)(not stx-p_1)))"
"(if or-part_294 or-part_294(syntax?$1 stx-p_1)))"
"(void)"
"                                        (let-values () (raise-argument-error 'datum->syntax \"(or #f syntax?)\" stx-p_1)))"
"(datum->syntax$1 stx-c_4 s_440(to-srcloc-stx stx-l_2) stx-p_1))))))))))))))"
"(case-lambda"
"((stx-c_5 s_77)(begin 'datum->syntax(datum->syntax6_1 stx-c_5 s_77 #f #f #f)))"
"((stx-c_6 s_4 stx-l_3 stx-p_2 ignored3_1)(datum->syntax6_1 stx-c_6 s_4 stx-l_3 stx-p_2 ignored3_1))"
"((stx-c_7 s_441 stx-l_4 stx-p2_1)(datum->syntax6_1 stx-c_7 s_441 stx-l_4 stx-p2_1 #f))"
"((stx-c_8 s_181 stx-l1_1)(datum->syntax6_1 stx-c_8 s_181 stx-l1_1 #f #f)))))"
"(define-values"
"(1/syntax->list)"
"(lambda(s_442)"
"(begin"
" 'syntax->list"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_442) (void) (let-values () (raise-argument-error 'syntax->list \"syntax?\" s_442)))"
"(syntax->list$1 s_442)))))))"
"(define-values"
"(1/syntax-original?)"
"(lambda(s_167)"
"(begin"
" 'syntax-original?"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_167) (void) (let-values () (raise-argument-error 'syntax-original? \"syntax?\" s_167)))"
"(if(syntax-property$1 s_167 original-property-sym)(not(syntax-any-macro-scopes? s_167)) #f)))))))"
"(define-values"
"(1/bound-identifier=?)"
"(let-values(((bound-identifier=?11_0)"
"(lambda(a9_0 b10_0 phase8_0)"
"(begin"
" 'bound-identifier=?11"
"(let-values(((a_57) a9_0))"
"(let-values(((b_65) b10_0))"
"(let-values(((phase_123)"
"(if(eq? phase8_0 unsafe-undefined)(1/syntax-local-phase-level) phase8_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? a_57)"
"(void)"
"                                    (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" a_57)))"
"(if(identifier? b_65)"
"(void)"
"                                    (let-values () (raise-argument-error 'bound-identifier=? \"identifier?\" b_65)))"
"(if(phase? phase_123)"
"(void)"
"(let-values()(raise-argument-error 'bound-identifier=? phase?-string phase_123)))"
"(bound-identifier=?$1 a_57 b_65 phase_123))))))))))))"
"(case-lambda"
"((a_58 b_84)(begin 'bound-identifier=?(bound-identifier=?11_0 a_58 b_84 unsafe-undefined)))"
"((a_59 b_85 phase8_1)(bound-identifier=?11_0 a_59 b_85 phase8_1)))))"
"(define-values"
"(1/free-identifier=?)"
"(let-values(((free-identifier=?17_0)"
"(lambda(a15_0 b16_1 a-phase13_0 b-phase14_0)"
"(begin"
" 'free-identifier=?17"
"(let-values(((a_60) a15_0))"
"(let-values(((b_86) b16_1))"
"(let-values(((a-phase_1)"
"(if(eq? a-phase13_0 unsafe-undefined)(1/syntax-local-phase-level) a-phase13_0)))"
"(let-values(((b-phase_1)(if(eq? b-phase14_0 unsafe-undefined) a-phase_1 b-phase14_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? a_60)"
"(void)"
"                                      (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" a_60)))"
"(if(identifier? b_86)"
"(void)"
"                                      (let-values () (raise-argument-error 'free-identifier=? \"identifier?\" b_86)))"
"(if(phase? a-phase_1)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string a-phase_1)))"
"(if(phase? b-phase_1)"
"(void)"
"(let-values()(raise-argument-error 'free-identifier=? phase?-string b-phase_1)))"
"(free-identifier=?$1 a_60 b_86 a-phase_1 b-phase_1)))))))))))))"
"(case-lambda"
"((a_61 b_39)(begin 'free-identifier=?(free-identifier=?17_0 a_61 b_39 unsafe-undefined unsafe-undefined)))"
"((a_62 b_87 a-phase_2 b-phase14_1)(free-identifier=?17_0 a_62 b_87 a-phase_2 b-phase14_1))"
"((a_63 b_88 a-phase13_1)(free-identifier=?17_0 a_63 b_88 a-phase13_1 unsafe-undefined)))))"
"(define-values"
"(1/free-transformer-identifier=?)"
"(lambda(a_64 b_89)"
"(begin"
" 'free-transformer-identifier=?"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? a_64)"
"(void)"
"                            (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" a_64)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_89)"
"(void)"
"                              (let-values () (raise-argument-error 'free-transformer-identifier=? \"identifier?\" b_89)))"
"(values))))"
"(let-values(((phase_124)(add1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_64 b_89 phase_124 phase_124)))))))))"
"(define-values"
"(1/free-template-identifier=?)"
"(lambda(a_65 b_90)"
"(begin"
" 'free-template-identifier=?"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(identifier? a_65)"
"(void)"
"                            (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" a_65)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? b_90)"
"(void)"
"                              (let-values () (raise-argument-error 'free-template-identifier=? \"identifier?\" b_90)))"
"(values))))"
"(let-values(((phase_125)(sub1(1/syntax-local-phase-level))))"
"(free-identifier=?$1 a_65 b_90 phase_125 phase_125)))))))))"
"(define-values"
"(1/free-label-identifier=?)"
"(lambda(a_66 b_91)"
"(begin"
" 'free-label-identifier=?"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? a_66)"
"(void)"
"              (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" a_66)))"
"(if(identifier? b_91)"
"(void)"
"              (let-values () (raise-argument-error 'free-label-identifier=? \"identifier?\" b_91)))"
"(free-identifier=?$1 a_66 b_91 #f #f)))))))"
"(define-values"
"(1/identifier-binding)"
"(let-values(((identifier-binding22_0)"
"(lambda(id21_0 phase19_0 top-level-symbol?20_0)"
"(begin"
" 'identifier-binding22"
"(let-values(((id_90) id21_0))"
"(let-values(((phase_126)"
"(if(eq? phase19_0 unsafe-undefined)(1/syntax-local-phase-level) phase19_0)))"
"(let-values(((top-level-symbol?_1) top-level-symbol?20_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_90)"
"(void)"
"                                    (let-values () (raise-argument-error 'identifier-binding \"identifier?\" id_90)))"
"(if(phase? phase_126)"
"(void)"
"(let-values()(raise-argument-error 'identifier-binding phase?-string phase_126)))"
"(identifier-binding$1 id_90 phase_126 top-level-symbol?_1))))))))))))"
"(case-lambda"
"((id_91)(begin 'identifier-binding(identifier-binding22_0 id_91 unsafe-undefined #f)))"
"((id_15 phase_85 top-level-symbol?20_1)(identifier-binding22_0 id_15 phase_85 top-level-symbol?20_1))"
"((id_92 phase19_1)(identifier-binding22_0 id_92 phase19_1 #f)))))"
"(define-values"
"(1/identifier-transformer-binding)"
"(let-values(((identifier-transformer-binding26_0)"
"(lambda(id25_3 phase24_1)"
"(begin"
" 'identifier-transformer-binding26"
"(let-values(((id_93) id25_3))"
"(let-values(((phase_127)"
"(if(eq? phase24_1 unsafe-undefined)(1/syntax-local-phase-level) phase24_1)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_93)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'identifier-transformer-binding \"identifier?\" id_93)))"
"(identifier-binding$1 id_93(if phase_127(add1 phase_127) #f))))))))))))"
"(case-lambda"
"((id_94)(begin 'identifier-transformer-binding(identifier-transformer-binding26_0 id_94 unsafe-undefined)))"
"((id_59 phase24_2)(identifier-transformer-binding26_0 id_59 phase24_2)))))"
"(define-values"
"(1/identifier-template-binding)"
"(lambda(id_95)"
"(begin"
" 'identifier-template-binding"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_95)"
"(void)"
"              (let-values () (raise-argument-error 'identifier-template-binding \"identifier?\" id_95)))"
"(identifier-binding$1 id_95(sub1(1/syntax-local-phase-level)))))))))"
"(define-values"
"(1/identifier-label-binding)"
"(lambda(id_78)"
"(begin"
" 'identifier-label-binding"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_78)"
"(void)"
"              (let-values () (raise-argument-error 'identifier-label-binding \"identifier?\" id_78)))"
"(identifier-binding$1 id_78 #f)))))))"
"(define-values"
"(1/identifier-binding-symbol)"
"(let-values(((identifier-binding-symbol30_0)"
"(lambda(id29_1 phase28_2)"
"(begin"
" 'identifier-binding-symbol30"
"(let-values(((id_96) id29_1))"
"(let-values(((phase_72)"
"(if(eq? phase28_2 unsafe-undefined)(1/syntax-local-phase-level) phase28_2)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_96)"
"(void)"
"                                  (let-values () (raise-argument-error 'identifier-binding-symbol \"identifier?\" id_96)))"
"(if(phase? phase_72)"
"(void)"
"(let-values()"
"(raise-argument-error 'identifier-binding-symbol phase?-string phase_72)))"
"(identifier-binding-symbol$1 id_96 phase_72)))))))))))"
"(case-lambda"
"((id_97)(begin 'identifier-binding-symbol(identifier-binding-symbol30_0 id_97 unsafe-undefined)))"
"((id_98 phase28_3)(identifier-binding-symbol30_0 id_98 phase28_3)))))"
"(define-values"
"(1/identifier-prune-lexical-context)"
"(let-values(((identifier-prune-lexical-context34_0)"
"(lambda(id33_1 syms32_1)"
"(begin"
" 'identifier-prune-lexical-context34"
"(let-values(((id_99) id33_1))"
"(let-values(((syms_22) syms32_1))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(identifier? id_99)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'identifier-prune-lexical-context \"identifier?\" id_99)))"
"(if(if(list? syms_22)(andmap2 symbol? syms_22) #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'identifier-prune-lexical-context"
"                                     \"(listof symbol?)\""
" syms_22)))"
" id_99))))))))))"
"(case-lambda"
"((id_62)(begin 'identifier-prune-lexical-context(identifier-prune-lexical-context34_0 id_62 null)))"
"((id_100 syms32_2)(identifier-prune-lexical-context34_0 id_100 syms32_2)))))"
"(define-values"
"(1/syntax-debug-info)"
"(let-values(((syntax-debug-info39_0)"
"(lambda(s38_1 phase36_0 all-bindings?37_0)"
"(begin"
" 'syntax-debug-info39"
"(let-values(((s_412) s38_1))"
"(let-values(((phase_77)"
"(if(eq? phase36_0 unsafe-undefined)(1/syntax-local-phase-level) phase36_0)))"
"(let-values(((all-bindings?_1) all-bindings?37_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_412)"
"(void)"
"                                    (let-values () (raise-argument-error 'syntax-debug-info \"syntax?\" s_412)))"
"(if(phase? phase_77)"
"(void)"
"(let-values()(raise-argument-error 'syntax-debug-info phase?-string phase_77)))"
"(syntax-debug-info$1 s_412 phase_77 all-bindings?_1))))))))))))"
"(case-lambda"
"((s_86)(begin 'syntax-debug-info(syntax-debug-info39_0 s_86 unsafe-undefined #f)))"
"((s_443 phase_128 all-bindings?37_1)(syntax-debug-info39_0 s_443 phase_128 all-bindings?37_1))"
"((s_29 phase36_1)(syntax-debug-info39_0 s_29 phase36_1 #f)))))"
"(define-values"
"(1/syntax-shift-phase-level)"
"(lambda(s_444 phase_129)"
"(begin"
" 'syntax-shift-phase-level"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_444)"
"(void)"
"              (let-values () (raise-argument-error 'syntax-shift-phase-level \"syntax?\" s_444)))"
"(if(phase? phase_129)"
"(void)"
"(let-values()(raise-argument-error 'syntax-shift-phase-level phase?-string phase_129)))"
"(syntax-shift-phase-level$1 s_444 phase_129)))))))"
"(define-values"
"(1/syntax-track-origin)"
"(lambda(new-stx_8 old-stx_4 id_101)"
"(begin"
" 'syntax-track-origin"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 new-stx_8)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" new-stx_8)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(syntax?$1 old-stx_4)"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-track-origin \"syntax?\" old-stx_4)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(identifier? id_101)"
"(void)"
"                                (let-values () (raise-argument-error 'syntax-track-origin \"identifier?\" id_101)))"
"(values))))"
"(let-values(((s_445)(syntax-track-origin$1 new-stx_8 old-stx_4 id_101)))"
"(let-values(((ctx_67)"
"(let-values(((temp60_3) #t))(get-current-expand-context16.1 temp60_3 'unexpected))))"
"(begin"
"(if ctx_67"
"(let-values()"
"(let-values(((obs_44)(expand-context-observer ctx_67)))"
"(if obs_44"
"(let-values()(let-values()(call-expand-observe obs_44 'track-origin new-stx_8 s_445)))"
"(void))))"
"(void))"
" s_445)))))))))))"
"(define-values"
"(1/namespace-attach-module)"
"(let-values(((namespace-attach-module4_0)"
"(lambda(src-namespace2_0 mod-path3_1 dest-namespace1_0)"
"(begin"
" 'namespace-attach-module4"
"(let-values(((src-namespace_0) src-namespace2_0))"
"(let-values(((mod-path_10) mod-path3_1))"
"(let-values(((dest-namespace_0)"
"(if(eq? dest-namespace1_0 unsafe-undefined)"
"(1/current-namespace)"
" dest-namespace1_0)))"
"(let-values()"
"(let-values(((temp20_2) 'namespace-attach-module)"
"((src-namespace21_0) src-namespace_0)"
"((mod-path22_0) mod-path_10)"
"((dest-namespace23_0) dest-namespace_0)"
"((temp24_5) #t))"
"(do-attach-module17.1"
" temp24_5"
" temp20_2"
" src-namespace21_0"
" mod-path22_0"
" dest-namespace23_0))))))))))"
"(case-lambda"
"((src-namespace_1 mod-path_11)"
"(begin 'namespace-attach-module(namespace-attach-module4_0 src-namespace_1 mod-path_11 unsafe-undefined)))"
"((src-namespace_2 mod-path_12 dest-namespace1_1)"
"(namespace-attach-module4_0 src-namespace_2 mod-path_12 dest-namespace1_1)))))"
"(define-values"
"(1/namespace-attach-module-declaration)"
"(let-values(((namespace-attach-module-declaration9_0)"
"(lambda(src-namespace7_0 mod-path8_2 dest-namespace6_0)"
"(begin"
" 'namespace-attach-module-declaration9"
"(let-values(((src-namespace_3) src-namespace7_0))"
"(let-values(((mod-path_13) mod-path8_2))"
"(let-values(((dest-namespace_1)"
"(if(eq? dest-namespace6_0 unsafe-undefined)"
"(1/current-namespace)"
" dest-namespace6_0)))"
"(let-values()"
"(let-values(((temp25_5) 'namespace-attach-module-declaration)"
"((src-namespace26_0) src-namespace_3)"
"((mod-path27_0) mod-path_13)"
"((dest-namespace28_0) dest-namespace_1)"
"((temp29_2) #f))"
"(do-attach-module17.1"
" temp29_2"
" temp25_5"
" src-namespace26_0"
" mod-path27_0"
" dest-namespace28_0))))))))))"
"(case-lambda"
"((src-namespace_4 mod-path_14)"
"(begin"
" 'namespace-attach-module-declaration"
"(namespace-attach-module-declaration9_0 src-namespace_4 mod-path_14 unsafe-undefined)))"
"((src-namespace_5 mod-path_15 dest-namespace6_1)"
"(namespace-attach-module-declaration9_0 src-namespace_5 mod-path_15 dest-namespace6_1)))))"
"(define-values"
"(do-attach-module17.1)"
"(lambda(attach-instances?11_0 who13_0 src-namespace14_0 mod-path15_0 dest-namespace16_0)"
"(begin"
" 'do-attach-module17"
"(let-values(((who_22) who13_0))"
"(let-values(((src-namespace_6) src-namespace14_0))"
"(let-values(((mod-path_16) mod-path15_0))"
"(let-values(((dest-namespace_2) dest-namespace16_0))"
"(let-values(((attach-instances?_0) attach-instances?11_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? src-namespace_6)"
"(void)"
"                                    (let-values () (raise-argument-error who_22 \"namespace?\" src-namespace_6)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_53)(1/module-path? mod-path_16)))"
"(if or-part_53 or-part_53(1/resolved-module-path? mod-path_16)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_22"
"                                         \"(or/c module-path? resolved-module-path?)\""
" mod-path_16)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? dest-namespace_2)"
"(void)"
"                                        (let-values () (raise-argument-error who_22 \"namespace?\" dest-namespace_2)))"
"(values))))"
"(let-values(((phase_130)(namespace-phase src-namespace_6)))"
"(let-values((()"
"(begin"
"(if(eqv? phase_130(namespace-phase dest-namespace_2))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_22"
"                                               \"source and destination namespace phases do not match\""
"                                               \"source phase\""
" phase_130"
"                                               \"destination phase\""
"(namespace-phase dest-namespace_2))))"
"(values))))"
"(let-values(((todo_0)(make-hasheq)))"
"(let-values(((missing_0)(gensym 'missing)))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_99)"
"(lambda(mpi_45"
" phase_131"
" attach-instances?_1"
" attach-phase_0)"
"(begin"
" 'loop"
"(let-values(((mod-name_19)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_6)"
"(let-values()"
"(1/module-path-index-resolve"
" mpi_45)))))"
"(let-values(((attach-this-instance?_0)"
"(if attach-instances?_1"
"(eqv? phase_131 attach-phase_0)"
" #f)))"
"(let-values(((m-ns_12)"
"(hash-ref"
"(hash-ref"
" todo_0"
" mod-name_19"
" '#hasheqv())"
" phase_131"
" missing_0)))"
"(if(let-values(((or-part_164)"
"(eq? missing_0 m-ns_12)))"
"(if or-part_164"
" or-part_164"
"(if attach-this-instance?_0"
"(not m-ns_12)"
" #f)))"
"(let-values()"
"(let-values(((m_20)"
"(namespace->module"
" src-namespace_6"
" mod-name_19)))"
"(begin"
"(if m_20"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_22"
"                                                                                         \"module not declared (in the source namespace)\""
"                                                                                         \"module name\""
" mod-name_19)))"
"(if(if(module-cross-phase-persistent?"
" m_20)"
"(if(not"
"(label-phase? phase_131))"
"(not"
"(zero-phase? phase_131))"
" #f)"
" #f)"
"(let-values()"
"(loop_99"
" mpi_45"
" 0"
" attach-instances?_1"
" 0))"
"(let-values()"
"(let-values(((already-m_0)"
"(namespace->module"
" dest-namespace_2"
" mod-name_19)))"
"(let-values((()"
"(begin"
"(if(if already-m_0"
"(not"
"(eq?"
" already-m_0"
" m_20))"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_22"
"                                                                                                               \"a different declaration is already in the destination namespace\""
"                                                                                                               \"module name\""
" mod-name_19))"
"(void))"
"(values))))"
"(let-values(((m-ns_13"
" already?_0)"
"(if(let-values(((or-part_295)"
" attach-this-instance?_0))"
"(if or-part_295"
" or-part_295"
"(module-cross-phase-persistent?"
" m_20)))"
"(let-values()"
"(let-values(((m-ns_14)"
"(let-values(((src-namespace30_0)"
" src-namespace_6)"
"((mod-name31_0)"
" mod-name_19)"
"((phase32_1)"
" phase_131))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" src-namespace30_0"
" mod-name31_0"
" phase32_1))))"
"(let-values((()"
"(begin"
"(if m-ns_14"
"(void)"
"(let-values()"
"(raise-arguments-error"
" who_22"
"                                                                                                                                     \"module not instantiated (in the source namespace)\""
"                                                                                                                                     \"module name\""
" mod-name_19)))"
"(values))))"
"(let-values(((already-m-ns_0)"
"(if already-m_0"
"(let-values(((dest-namespace33_0)"
" dest-namespace_2)"
"((mod-name34_0)"
" mod-name_19)"
"((phase35_1)"
" phase_131))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" dest-namespace33_0"
" mod-name34_0"
" phase35_1))"
" #f)))"
"(begin"
"(if(if already-m-ns_0"
"(if(not"
"(eq?"
" m-ns_14"
" already-m-ns_0))"
"(not"
"(namespace-same-instance?"
" m-ns_14"
" already-m-ns_0))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" who_22"
"                                                                                                                           \"a different instance is already in the destination namespace\""
"                                                                                                                           \"module name\""
" mod-name_19))"
"(void))"
"(values"
" m-ns_14"
"(if already-m-ns_0"
" #t"
" #f)))))))"
"(let-values()"
"(begin"
"(if(if(label-phase?"
" phase_131)"
"(not"
"(let-values(((src-namespace36_0)"
" src-namespace_6)"
"((mod-name37_0)"
" mod-name_19)"
"((phase38_0)"
" phase_131))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" src-namespace36_0"
" mod-name37_0"
" phase38_0)))"
" #f)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" src-namespace_6)"
"(let-values()"
"(let-values(((src-namespace39_0)"
" src-namespace_6)"
"((mpi40_0)"
" mpi_45)"
"((phase41_1)"
" phase_131))"
"(namespace-module-instantiate!96.1"
" #t"
" unsafe-undefined"
" unsafe-undefined"
" #f"
" src-namespace39_0"
" mpi40_0"
" phase41_1)))))"
"(void))"
"(values"
" #f"
"(if already-m_0"
" #t"
" #f)))))))"
"(begin"
"(hash-update!"
" todo_0"
" mod-name_19"
"(lambda(ht_144)"
"(hash-set"
" ht_144"
" phase_131"
" m-ns_13))"
" '#hasheqv())"
"(if already?_0"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_298)"
"(module-requires"
" m_20)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_298)))"
"((letrec-values(((for-loop_263)"
"(lambda(lst_299)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_299)"
"(let-values(((phase+reqs_1)"
"(unsafe-car"
" lst_299))"
"((rest_171)"
"(unsafe-cdr"
" lst_299)))"
"(let-values((()"
"(let-values(((lst_225)"
"(cdr"
" phase+reqs_1)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_225)))"
"((letrec-values(((for-loop_101)"
"(lambda(lst_178)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_178)"
"(let-values(((req_5)"
"(unsafe-car"
" lst_178))"
"((rest_172)"
"(unsafe-cdr"
" lst_178)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_99"
"(module-path-index-shift"
" req_5"
"(module-self"
" m_20)"
" mpi_45)"
"(phase+"
" phase_131"
"(car"
" phase+reqs_1))"
" attach-instances?_1"
" attach-phase_0))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_101"
" rest_172)"
"(values))))"
"(values))))))"
" for-loop_101)"
" lst_225)))))"
"(if(not"
" #f)"
"(for-loop_263"
" rest_171)"
"(values))))"
"(values))))))"
" for-loop_263)"
" lst_298)))"
"(void)"
"(let-values(((lst_276)"
"(module-submodule-names"
" m_20)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_276)))"
"((letrec-values(((for-loop_102)"
"(lambda(lst_164)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_164)"
"(let-values(((submod-name_0)"
"(unsafe-car"
" lst_164))"
"((rest_95)"
"(unsafe-cdr"
" lst_164)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(loop_99"
"(1/module-path-index-join"
"(list"
" 'submod"
"                                                                                                                                                                           \".\""
" submod-name_0)"
" mpi_45)"
" #f"
" #f"
" attach-phase_0))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_102"
" rest_95)"
"(values))))"
"(values))))))"
" for-loop_102)"
" lst_276)))"
"(void)"
"(if(module-supermodule-name"
" m_20)"
"(let-values()"
"(loop_99"
"(1/module-path-index-join"
" '(submod"
"                                                                                                              \"..\")"
" mpi_45)"
" #f"
" #f"
" attach-phase_0))"
"(void))))))))))))))"
"(void)))))))))"
" loop_99)"
"(1/module-path-index-join"
"(if(1/resolved-module-path? mod-path_16)"
"(resolved-module-path->module-path mod-path_16)"
" mod-path_16)"
" #f)"
" phase_130"
" attach-instances?_0"
" phase_130)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ht_145) todo_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_145)))"
"((letrec-values(((for-loop_264)"
"(lambda(i_164)"
"(begin"
" 'for-loop"
"(if i_164"
"(let-values(((mod-name_20 phases_0)"
"(hash-iterate-key+value"
" ht_145"
" i_164)))"
"(let-values((()"
"(let-values(((ht_146)"
" phases_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_146)))"
"((letrec-values(((for-loop_253)"
"(lambda(i_46)"
"(begin"
" 'for-loop"
"(if i_46"
"(let-values(((phase_132"
" m-ns_15)"
"(hash-iterate-key+value"
" ht_146"
" i_46)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((m_21)"
"(namespace->module"
" src-namespace_6"
" mod-name_20)))"
"(begin"
"(module-force-bulk-binding!"
" m_21"
" src-namespace_6)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" dest-namespace_2)"
"(let-values()"
"(let-values(((dest-namespace42_0)"
" dest-namespace_2)"
"((m43_0)"
" m_21)"
"((mod-name44_0)"
" mod-name_20))"
"(declare-module!58.1"
" #t"
" dest-namespace42_0"
" m43_0"
" mod-name44_0))))"
"(if m-ns_15"
"(let-values()"
"(begin"
"(namespace-record-module-instance-attached!"
" src-namespace_6"
" mod-name_20"
" phase_132)"
"(let-values(((or-part_25)"
"(let-values(((dest-namespace45_0)"
" dest-namespace_2)"
"((mod-name46_0)"
" mod-name_20)"
"((phase47_2)"
" phase_132))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" dest-namespace45_0"
" mod-name46_0"
" phase47_2))))"
"(if or-part_25"
" or-part_25"
"(namespace-install-module-namespace!"
" dest-namespace_2"
" mod-name_20"
" phase_132"
" m_21"
" m-ns_15)))))"
"(void)))))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_253"
"(hash-iterate-next"
" ht_146"
" i_46))"
"(values))))"
"(values))))))"
" for-loop_253)"
"(hash-iterate-first"
" ht_146))))))"
"(if(not #f)"
"(for-loop_264"
"(hash-iterate-next ht_145 i_164))"
"(values))))"
"(values))))))"
" for-loop_264)"
"(hash-iterate-first ht_145))))"
"(values))))"
"(let-values()"
"(let-values(((mnr_0)(1/current-module-name-resolver)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" dest-namespace_2)"
"(let-values()"
"(begin"
"(let-values(((ht_147) todo_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_147)))"
"((letrec-values(((for-loop_265)"
"(lambda(i_21)"
"(begin"
" 'for-loop"
"(if i_21"
"(let-values(((mod-name_21)"
"(hash-iterate-key ht_147 i_21)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(mnr_0"
" mod-name_21"
" src-namespace_6))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_265"
"(hash-iterate-next ht_147 i_21))"
"(values))))"
"(values))))))"
" for-loop_265)"
"(hash-iterate-first ht_147))))"
"(void))))))))))))))))))))))))"
"(define-values"
"(1/make-empty-namespace)"
"(lambda()"
"(begin"
" 'make-empty-namespace"
"(let-values(((current-ns_0)(1/current-namespace)))"
"(let-values(((phase_44)(namespace-phase current-ns_0)))"
"(let-values(((ns_59)(namespace->namespace-at-phase(make-namespace) phase_44)))"
"(begin"
"(1/namespace-attach-module current-ns_0 ''#%kernel ns_59)"
"(namespace-primitive-module-visit! ns_59 '#%kernel)"
" ns_59)))))))"
"(define-values"
"(1/namespace-syntax-introduce)"
"(let-values(((namespace-syntax-introduce3_0)"
"(lambda(s2_8 ns1_3)"
"(begin"
" 'namespace-syntax-introduce3"
"(let-values(((s_2) s2_8))"
"(let-values(((ns_58)(if(eq? ns1_3 unsafe-undefined)(1/current-namespace) ns1_3)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_2)"
"(void)"
"(let-values()"
"                                                  (raise-argument-error 'namespace-syntax-introduce \"syntax?\" s_2)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_58)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-syntax-introduce"
"                                                     \"namespace?\""
" ns_58)))"
"(values))))"
"(let-values(((root-ctx_5)(namespace-get-root-expand-ctx ns_58)))"
"(let-values(((post-scope_1)"
"(post-expansion-scope"
"(root-expand-context-post-expansion root-ctx_5))))"
"(let-values(((other-namespace-scopes_0)"
"(reverse$1"
"(let-values(((ht_148)"
"(syntax-scope-set"
"(root-expand-context-all-scopes-stx root-ctx_5)"
" 0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-immutable-hash-keys ht_148)))"
"((letrec-values(((for-loop_116)"
"(lambda(fold-var_239 i_165)"
"(begin"
" 'for-loop"
"(if i_165"
"(let-values(((sc_36)"
"(unsafe-immutable-hash-iterate-key"
" ht_148"
" i_165)))"
"(let-values(((fold-var_220)"
"(let-values(((fold-var_221)"
" fold-var_239))"
"(if(equal?"
" sc_36"
" post-scope_1)"
" fold-var_221"
"(let-values(((fold-var_222)"
" fold-var_221))"
"(let-values(((fold-var_223)"
"(let-values()"
"(cons"
"(let-values()"
" sc_36)"
" fold-var_222))))"
"(values"
" fold-var_223)))))))"
"(if(not #f)"
"(for-loop_116"
" fold-var_220"
"(unsafe-immutable-hash-iterate-next"
" ht_148"
" i_165))"
" fold-var_220)))"
" fold-var_239)))))"
" for-loop_116)"
" null"
"(unsafe-immutable-hash-iterate-first ht_148)))))))"
"(let-values(((add-ns-scopes_0)"
"(lambda(s_430)"
"(begin"
" 'add-ns-scopes"
"(let-values(((temp64_3)"
"(add-scopes"
"(push-scope s_430 post-scope_1)"
" other-namespace-scopes_0))"
"((temp65_1)"
"(root-expand-context-all-scopes-stx root-ctx_5))"
"((temp66_2)"
"(let-values(((or-part_74)"
"(namespace-declaration-inspector"
" ns_58)))"
"(if or-part_74"
" or-part_74"
"(current-code-inspector))))"
"((temp67_2) #t))"
"(syntax-transfer-shifts36.1"
" temp67_2"
" temp64_3"
" temp65_1"
" temp66_2))))))"
"(let-values(((maybe-module-id_0)"
"(if(pair?(1/syntax-e s_2))"
"(if(identifier?(car(1/syntax-e s_2)))"
"(add-ns-scopes_0(car(1/syntax-e s_2)))"
" #f)"
" #f)))"
"(if(if maybe-module-id_0"
"(1/free-identifier=?"
" maybe-module-id_0"
"(1/namespace-module-identifier ns_58)"
"(namespace-phase ns_58))"
" #f)"
"(let-values()"
"(1/datum->syntax"
" s_2"
"(cons maybe-module-id_0(cdr(1/syntax-e s_2)))"
" s_2"
" s_2))"
"(let-values()(add-ns-scopes_0 s_2)))))))))))))))))))"
"(case-lambda"
"((s_78)(begin 'namespace-syntax-introduce(namespace-syntax-introduce3_0 s_78 unsafe-undefined)))"
"((s_446 ns1_2)(namespace-syntax-introduce3_0 s_446 ns1_2)))))"
"(define-values"
"(namespace-datum-introduce)"
"(lambda(s_181)(begin(1/namespace-syntax-introduce(1/datum->syntax #f s_181)))))"
"(define-values"
"(1/namespace-module-identifier)"
"(let-values(((namespace-module-identifier6_0)"
"(lambda(where5_0)"
"(begin"
" 'namespace-module-identifier6"
"(let-values(((where_0)(if(eq? where5_0 unsafe-undefined)(1/current-namespace) where5_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(let-values(((or-part_82)(1/namespace? where_0)))"
"(if or-part_82 or-part_82(phase? where_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-module-identifier"
"                                   (string-append \"(or/c namespace? \" phase?-string \")\")"
" where_0)))"
"(1/datum->syntax"
"(1/syntax-shift-phase-level"
" core-stx"
"(if(1/namespace? where_0)(namespace-phase where_0) where_0))"
" 'module))))))))))"
"(case-lambda"
"(()(begin 'namespace-module-identifier(namespace-module-identifier6_0 unsafe-undefined)))"
"((where5_1)(namespace-module-identifier6_0 where5_1)))))"
"(define-values"
"(1/namespace-symbol->identifier)"
"(lambda(sym_64)"
"(begin"
" 'namespace-symbol->identifier"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym_64)"
"(void)"
"              (let-values () (raise-argument-error 'namespace-symbol->identifier \"symbol?\" sym_64)))"
"(1/namespace-syntax-introduce(1/datum->syntax #f sym_64))))))))"
"(define-values"
"(do-namespace-require21.1)"
"(lambda(copy-variable-as-constant?11_1"
" copy-variable-phase-level10_1"
" run?8_0"
" skip-variable-phase-level12_1"
" visit?9_0"
" who18_0"
" req19_0"
" ns20_1)"
"(begin"
" 'do-namespace-require21"
"(let-values(((run?_3) run?8_0))"
"(let-values(((visit?_3) visit?9_0))"
"(let-values(((who_23) who18_0))"
"(let-values(((req_6) req19_0))"
"(let-values(((ns_77) ns20_1))"
"(let-values(((copy-variable-phase-level_2) copy-variable-phase-level10_1))"
"(let-values(((copy-variable-as-constant?_2) copy-variable-as-constant?11_1))"
"(let-values(((skip-variable-phase-level_2) skip-variable-phase-level12_1))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_77)"
"(void)"
"                                          (let-values () (raise-argument-error who_23 \"namespace?\" ns_77)))"
"(values))))"
"(let-values(((ctx-stx_0)"
"(add-scopes"
" empty-syntax"
"(root-expand-context-module-scopes(namespace-get-root-expand-ctx ns_77)))))"
"(if(let-values(((or-part_164)(1/module-path-index? req_6)))"
"(if or-part_164 or-part_164(1/module-path? req_6)))"
"(let-values()"
"(let-values(((temp70_0)"
"(if(1/module-path-index? req_6)"
" req_6"
"(1/module-path-index-join req_6 #f)))"
"((temp71_0) #f)"
"((temp72_0) #f)"
"((ctx-stx73_0) ctx-stx_0)"
"((ns74_0) ns_77)"
"((run?75_0) run?_3)"
"((visit?76_0) visit?_3)"
"((temp77_0)(namespace-phase ns_77))"
"((temp78_1)(namespace-phase ns_77))"
"((copy-variable-phase-level79_0) copy-variable-phase-level_2)"
"((copy-variable-as-constant?80_0) copy-variable-as-constant?_2)"
"((skip-variable-phase-level81_0) skip-variable-phase-level_2)"
"((who82_0) who_23))"
"(perform-require!78.1"
" #f"
" #t"
" #f"
" copy-variable-as-constant?80_0"
" copy-variable-phase-level79_0"
" #f"
" 'all"
" temp77_0"
" #f"
" temp78_1"
" run?75_0"
" skip-variable-phase-level81_0"
" visit?76_0"
" who82_0"
" temp70_0"
" temp71_0"
" temp72_0"
" ctx-stx73_0"
" ns74_0)))"
"(let-values()"
"(let-values(((run?83_0) run?_3)"
"((visit?84_0) visit?_3)"
"((temp85_0)(list(1/datum->syntax ctx-stx_0 req_6)))"
"((temp86_1) #f)"
"((ns87_0) ns_77)"
"((temp88_0)(namespace-phase ns_77))"
"((temp89_1)"
"(let-values(((temp92_2) #f))(make-requires+provides8.1 #f temp92_2)))"
"((skip-variable-phase-level90_0) skip-variable-phase-level_2)"
"((who91_0) who_23))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" run?83_0"
" #f"
" skip-variable-phase-level90_0"
" visit?84_0"
" who91_0"
" temp85_0"
" temp86_1"
" ns87_0"
" temp88_0"
" temp89_1))))))))))))))))))"
"(define-values"
"(1/namespace-require)"
"(let-values(((namespace-require26_0)"
"(lambda(req25_0 ns24_0)"
"(begin"
" 'namespace-require26"
"(let-values(((req_7) req25_0))"
"(let-values(((ns_78)(if(eq? ns24_0 unsafe-undefined)(1/current-namespace) ns24_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((who94_0) 'namespace-require)((req95_0) req_7)((ns96_0) ns_78))"
"(do-namespace-require21.1 #f #f #t #f #f who94_0 req95_0 ns96_0)))))))))))"
"(case-lambda"
"((req_8)(begin 'namespace-require(namespace-require26_0 req_8 unsafe-undefined)))"
"((req_9 ns24_1)(namespace-require26_0 req_9 ns24_1)))))"
"(define-values"
"(1/namespace-require/expansion-time)"
"(let-values(((namespace-require/expansion-time30_0)"
"(lambda(req29_0 ns28_1)"
"(begin"
" 'namespace-require/expansion-time30"
"(let-values(((req_10) req29_0))"
"(let-values(((ns_79)(if(eq? ns28_1 unsafe-undefined)(1/current-namespace) ns28_1)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((temp98_1) #f)"
"((temp99_0) #t)"
"((who100_0) 'namespace-require/expansion-time)"
"((req101_0) req_10)"
"((ns102_0) ns_79))"
"(do-namespace-require21.1"
" #f"
" #f"
" temp98_1"
" #f"
" temp99_0"
" who100_0"
" req101_0"
" ns102_0)))))))))))"
"(case-lambda"
"((req_11)(begin 'namespace-require/expansion-time(namespace-require/expansion-time30_0 req_11 unsafe-undefined)))"
"((req_12 ns28_2)(namespace-require/expansion-time30_0 req_12 ns28_2)))))"
"(define-values"
"(1/namespace-require/constant)"
"(let-values(((namespace-require/constant34_0)"
"(lambda(req33_0 ns32_0)"
"(begin"
" 'namespace-require/constant34"
"(let-values(((req_13) req33_0))"
"(let-values(((ns_80)(if(eq? ns32_0 unsafe-undefined)(1/current-namespace) ns32_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((who104_1) 'namespace-require/constant)"
"((req105_0) req_13)"
"((ns106_0) ns_80)"
"((temp107_1) 0)"
"((temp108_0) #t))"
"(do-namespace-require21.1"
" temp108_0"
" temp107_1"
" #t"
" #f"
" #f"
" who104_1"
" req105_0"
" ns106_0)))))))))))"
"(case-lambda"
"((req_14)(begin 'namespace-require/constant(namespace-require/constant34_0 req_14 unsafe-undefined)))"
"((req_15 ns32_1)(namespace-require/constant34_0 req_15 ns32_1)))))"
"(define-values"
"(1/namespace-require/copy)"
"(let-values(((namespace-require/copy38_0)"
"(lambda(req37_0 ns36_0)"
"(begin"
" 'namespace-require/copy38"
"(let-values(((req_16) req37_0))"
"(let-values(((ns_81)(if(eq? ns36_0 unsafe-undefined)(1/current-namespace) ns36_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values(((who110_1) 'namespace-require/copy)"
"((req111_0) req_16)"
"((ns112_0) ns_81)"
"((temp113_1) 0)"
"((temp114_2) 0))"
"(do-namespace-require21.1"
" #f"
" temp113_1"
" #t"
" temp114_2"
" #f"
" who110_1"
" req111_0"
" ns112_0)))))))))))"
"(case-lambda"
"((req_17)(begin 'namespace-require/copy(namespace-require/copy38_0 req_17 unsafe-undefined)))"
"((req_18 ns36_1)(namespace-require/copy38_0 req_18 ns36_1)))))"
"(define-values"
"(1/namespace-variable-value)"
"(let-values(((namespace-variable-value44_0)"
"(lambda(sym43_0 use-mapping?40_0 failure-thunk41_0 ns42_0)"
"(begin"
" 'namespace-variable-value44"
"(let-values(((sym_76) sym43_0))"
"(let-values(((use-mapping?_0) use-mapping?40_0))"
"(let-values(((failure-thunk_5) failure-thunk41_0))"
"(let-values(((ns_11)(if(eq? ns42_0 unsafe-undefined)(1/current-namespace) ns42_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym_76)"
"(void)"
"                                      (let-values () (raise-argument-error 'namespace-variable-value \"symbol?\" sym_76)))"
"(if(let-values(((or-part_132)(not failure-thunk_5)))"
"(if or-part_132"
" or-part_132"
"(if(procedure? failure-thunk_5)"
"(procedure-arity-includes? failure-thunk_5 0)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-variable-value"
"                                         \"(or/c #f (procedure-arity-includes/c 0))\""
" failure-thunk_5)))"
"(if(1/namespace? ns_11)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'namespace-variable-value \"namespace?\" ns_11)))"
"((call/ec"
"(lambda(escape_0)"
"(let-values(((var-ns_0 var-phase-level_0 var-sym_6)"
"(if use-mapping?_0"
"(let-values()"
"(let-values(((id_102)(1/datum->syntax #f sym_76)))"
"(let-values(((b_14)"
"(resolve+shift/extra-inspector"
"(1/namespace-syntax-introduce id_102 ns_11)"
"(namespace-phase ns_11)"
" ns_11)))"
"(let-values((()"
"(begin"
"(if b_14"
"(let-values()"
"(namespace-visit-available-modules!"
" ns_11))"
"(void))"
"(values))))"
"(let-values(((v_196"
" primitive?_8"
" extra-inspector_9"
" protected?_9)"
"(if b_14"
"(let-values(((b116_0) b_14)"
"((empty-env117_0)"
" empty-env)"
"((null118_0) null)"
"((ns119_0) ns_11)"
"((temp120_0)"
"(namespace-phase ns_11))"
"((id121_0) id_102))"
"(binding-lookup50.1"
" #f"
" #f"
" b116_0"
" empty-env117_0"
" null118_0"
" ns119_0"
" temp120_0"
" id121_0))"
"(values variable #f #f #f))))"
"(begin"
"(if(variable? v_196)"
"(void)"
"(let-values()"
"(escape_0"
"(let-values(((or-part_52) failure-thunk_5))"
"(if or-part_52"
" or-part_52"
"(lambda()"
"(raise"
"(make-exn:fail:syntax$1"
"(format"
"(string-append"
"                                                                                   \"namespace-variable-value: bound to syntax\\n\""
"                                                                                   \"  in: ~s\")"
" sym_76)"
"(current-continuation-marks)"
" null))))))))"
"(if(module-binding? b_14)"
"(values"
"(if(top-level-module-path-index?"
"(module-binding-module b_14))"
" ns_11"
"(module-instance-namespace"
"(binding->module-instance"
" b_14"
" ns_11"
"(namespace-phase ns_11)"
" id_102)))"
"(module-binding-phase b_14)"
"(module-binding-sym b_14))"
"(values"
" ns_11"
"(namespace-phase ns_11)"
" sym_76))))))))"
"(let-values()(values ns_11(namespace-phase ns_11) sym_76)))))"
"(let-values(((val_71)"
"(namespace-get-variable"
" var-ns_0"
" var-phase-level_0"
" var-sym_6"
"(lambda()"
"(escape_0"
"(let-values(((or-part_296) failure-thunk_5))"
"(if or-part_296"
" or-part_296"
"(raise"
"(exn:fail:contract:variable"
"(format"
"(string-append"
"                                                                    \"namespace-variable-value: given name is not defined\\n\""
"                                                                    \"  name: ~s\")"
" sym_76)"
"(current-continuation-marks)"
" sym_76)))))))))"
"(lambda() val_71))))))))))))))))))"
"(case-lambda"
"((sym_77)(begin 'namespace-variable-value(namespace-variable-value44_0 sym_77 #t #f unsafe-undefined)))"
"((sym_78 use-mapping?_1 failure-thunk_6 ns42_1)"
"(namespace-variable-value44_0 sym_78 use-mapping?_1 failure-thunk_6 ns42_1))"
"((sym_79 use-mapping?_2 failure-thunk41_1)"
"(namespace-variable-value44_0 sym_79 use-mapping?_2 failure-thunk41_1 unsafe-undefined))"
"((sym_80 use-mapping?40_1)(namespace-variable-value44_0 sym_80 use-mapping?40_1 #f unsafe-undefined)))))"
"(define-values"
"(1/namespace-set-variable-value!)"
"(let-values(((namespace-set-variable-value!51_0)"
"(lambda(sym49_0 val50_0 map?46_0 ns47_2 as-constant?48_0)"
"(begin"
" 'namespace-set-variable-value!51"
"(let-values(((sym_81) sym49_0))"
"(let-values(((val_72) val50_0))"
"(let-values(((map?_0) map?46_0))"
"(let-values(((ns_82)(if(eq? ns47_2 unsafe-undefined)(1/current-namespace) ns47_2)))"
"(let-values(((as-constant?_2) as-constant?48_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym_81)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'namespace-set-variable-value! \"symbol?\" sym_81)))"
"(if(1/namespace? ns_82)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'namespace-set-variable-value! \"namespace?\" ns_82)))"
"(namespace-set-variable!"
" ns_82"
"(namespace-phase ns_82)"
" sym_81"
" val_72"
" as-constant?_2)"
"(if map?_0"
"(let-values()"
"(let-values((()"
"(begin"
"(namespace-unset-transformer!"
" ns_82"
"(namespace-phase ns_82)"
" sym_81)"
"(values))))"
"(let-values(((id_103)(1/datum->syntax #f sym_81)))"
"(let-values(((temp123_1)(1/namespace-syntax-introduce id_103 ns_82))"
"((temp124_0)"
"(let-values(((temp126_0)(namespace-mpi ns_82))"
"((temp127_3)(namespace-phase ns_82))"
"((sym128_0) sym_81))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" temp126_0"
" temp127_3"
" sym128_0)))"
"((temp125_0)(namespace-phase ns_82)))"
"(add-binding!17.1 #f #f temp123_1 temp124_0 temp125_0)))))"
"(void)))))))))))))))"
"(case-lambda"
"((sym_82 val_73)"
"(begin 'namespace-set-variable-value!(namespace-set-variable-value!51_0 sym_82 val_73 #f unsafe-undefined #f)))"
"((sym_83 val_74 map?_1 ns_83 as-constant?48_1)"
"(namespace-set-variable-value!51_0 sym_83 val_74 map?_1 ns_83 as-constant?48_1))"
"((sym_84 val_75 map?_2 ns47_3)(namespace-set-variable-value!51_0 sym_84 val_75 map?_2 ns47_3 #f))"
"((sym_85 val_76 map?46_1)(namespace-set-variable-value!51_0 sym_85 val_76 map?46_1 unsafe-undefined #f)))))"
"(define-values"
"(1/namespace-undefine-variable!)"
"(let-values(((namespace-undefine-variable!55_0)"
"(lambda(sym54_0 ns53_0)"
"(begin"
" 'namespace-undefine-variable!55"
"(let-values(((sym_86) sym54_0))"
"(let-values(((ns_84)(if(eq? ns53_0 unsafe-undefined)(1/current-namespace) ns53_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(symbol? sym_86)"
"(void)"
"                                  (let-values () (raise-argument-error 'namespace-undefine-variable! \"symbol?\" sym_86)))"
"(if(1/namespace? ns_84)"
"(void)"
"(let-values()"
"                                    (raise-argument-error 'namespace-undefine-variable! \"namespace?\" ns_84)))"
"(namespace-unset-variable! ns_84(namespace-phase ns_84) sym_86)))))))))))"
"(case-lambda"
"((sym_87)(begin 'namespace-undefine-variable!(namespace-undefine-variable!55_0 sym_87 unsafe-undefined)))"
"((sym_7 ns53_1)(namespace-undefine-variable!55_0 sym_7 ns53_1)))))"
"(define-values"
"(1/namespace-mapped-symbols)"
"(let-values(((namespace-mapped-symbols58_0)"
"(lambda(ns57_0)"
"(begin"
" 'namespace-mapped-symbols58"
"(let-values(((ns_85)(if(eq? ns57_0 unsafe-undefined)(1/current-namespace) ns57_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/namespace? ns_85)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-mapped-symbols \"namespace?\" ns_85)))"
"(set->list"
"(set-union"
"(syntax-mapped-names"
"(root-expand-context-all-scopes-stx(namespace-get-root-expand-ctx ns_85))"
"(namespace-phase ns_85))"
"(list->set(1/instance-variable-names(namespace->instance ns_85 0))))))))))))))"
"(case-lambda"
"(()(begin 'namespace-mapped-symbols(namespace-mapped-symbols58_0 unsafe-undefined)))"
"((ns57_1)(namespace-mapped-symbols58_0 ns57_1)))))"
"(define-values"
"(1/namespace-base-phase)"
"(let-values(((namespace-base-phase61_0)"
"(lambda(ns60_0)"
"(begin"
" 'namespace-base-phase61"
"(let-values(((ns_86)(if(eq? ns60_0 unsafe-undefined)(1/current-namespace) ns60_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/namespace? ns_86)"
"(void)"
"                                (let-values () (raise-argument-error 'namespace-base-phase \"namespace?\" ns_86)))"
"(namespace-phase ns_86))))))))))"
"(case-lambda"
"(()(begin 'namespace-base-phase(namespace-base-phase61_0 unsafe-undefined)))"
"((ns60_1)(namespace-base-phase61_0 ns60_1)))))"
"(define-values"
"(1/eval)"
"(let-values(((eval4_0)"
"(lambda(s3_1 ns1_4 compile2_0)"
"(begin"
" 'eval4"
"(let-values(((s_447) s3_1))"
"(let-values(((ns_87)(if(eq? ns1_4 unsafe-undefined)(1/current-namespace) ns1_4)))"
"(let-values(((compile_1)"
"(if(eq? compile2_0 unsafe-undefined)"
"(lambda(s_75 ns_55)(begin 'compile(1/compile s_75 ns_55 #f)))"
" compile2_0)))"
"(let-values()"
"(if(let-values(((or-part_28)(compiled-in-memory? s_447)))"
"(if or-part_28"
" or-part_28"
"(let-values(((or-part_294)(1/linklet-directory? s_447)))"
"(if or-part_294 or-part_294(1/linklet-bundle? s_447)))))"
"(let-values()(eval-compiled s_447 ns_87))"
"(if(if(syntax?$1 s_447)"
"(let-values(((or-part_297)(compiled-in-memory?(1/syntax-e s_447))))"
"(if or-part_297"
" or-part_297"
"(let-values(((or-part_298)(1/linklet-directory?(1/syntax-e s_447))))"
"(if or-part_298 or-part_298(1/linklet-bundle?(1/syntax-e s_447))))))"
" #f)"
"(let-values()(eval-compiled(1/syntax->datum s_447) ns_87))"
"(let-values()"
"(let-values(((s66_0) s_447)"
"((ns67_1) ns_87)"
"((temp68_2)"
"(lambda(s_180 ns_88 tail?_52)"
"(eval-compiled(compile_1 s_180 ns_88) ns_88 tail?_52)))"
"((temp69_0) #f))"
"(per-top-level54.1 #f #f temp69_0 #t #f temp68_2 #f s66_0 ns67_1)))))))))))))"
"(case-lambda"
"((s_446)(begin 'eval(eval4_0 s_446 unsafe-undefined unsafe-undefined)))"
"((s_76 ns_89 compile2_1)(eval4_0 s_76 ns_89 compile2_1))"
"((s_442 ns1_5)(eval4_0 s_442 ns1_5 unsafe-undefined)))))"
"(define-values"
"(eval-compiled)"
"(let-values(((eval-compiled9_0)"
"(lambda(c7_1 ns8_0 as-tail?6_0)"
"(begin"
" 'eval-compiled9"
"(let-values(((c_52) c7_1))"
"(let-values(((ns_90) ns8_0))"
"(let-values(((as-tail?_3) as-tail?6_0))"
"(let-values()"
"(if(1/compiled-module-expression? c_52)"
"(let-values()"
"(let-values(((c70_0) c_52)((ns71_0) ns_90))(eval-module8.1 ns71_0 #f #t c70_0)))"
"(let-values()(eval-top c_52 ns_90 eval-compiled as-tail?_3)))))))))))"
"(case-lambda"
"((c_53 ns_91)(begin(eval-compiled9_0 c_53 ns_91 #t)))"
"((c_54 ns_92 as-tail?6_1)(eval-compiled9_0 c_54 ns_92 as-tail?6_1)))))"
"(define-values"
"(1/compile)"
"(let-values(((compile16_0)"
"(lambda(s15_1 ns11_1 serializable?12_0 expand13_0 to-source?14_0)"
"(begin"
" 'compile16"
"(let-values(((s_184) s15_1))"
"(let-values(((ns_93)(if(eq? ns11_1 unsafe-undefined)(1/current-namespace) ns11_1)))"
"(let-values(((serializable?_4) serializable?12_0))"
"(let-values(((expand_0)(if(eq? expand13_0 unsafe-undefined) expand$1 expand13_0)))"
"(let-values(((to-source?_4) to-source?14_0))"
"(let-values()"
"(let-values(((cs_0)"
"(if(1/compiled-expression? s_184)"
"(let-values()(list s_184))"
"(if(if(syntax?$1 s_184)"
"(1/compiled-expression?(1/syntax-e s_184))"
" #f)"
"(let-values()(list(1/syntax-e s_184)))"
"(let-values()"
"(let-values(((s72_0) s_184)"
"((ns73_0) ns_93)"
"((temp74_0)"
"(lambda(s_448 ns_47 as-tail?_4)"
"(list"
"(compile-single$1"
" s_448"
" ns_47"
" expand_0"
" serializable?_4"
" to-source?_4))))"
"((append75_0) append)"
"((temp76_0) #f))"
"(per-top-level54.1"
" append75_0"
" #f"
" temp76_0"
" #t"
" #f"
" temp74_0"
" #f"
" s72_0"
" ns73_0)))))))"
"(if(if(= 1(length cs_0))(not(compiled-multiple-top?(car cs_0))) #f)"
"(car cs_0)"
"(let-values(((cs77_0) cs_0)"
"((to-source?78_0) to-source?_4)"
"((serializable?79_0) serializable?_4)"
"((ns80_0) ns_93))"
"(compiled-tops->compiled-top8.1"
" serializable?79_0"
" ns80_0"
" to-source?78_0"
" cs77_0))))))))))))))"
"(case-lambda"
"((s_11)(begin 'compile(compile16_0 s_11 unsafe-undefined #t unsafe-undefined #f)))"
"((s_449 ns_94 serializable?_5 expand_1 to-source?14_1)"
"(compile16_0 s_449 ns_94 serializable?_5 expand_1 to-source?14_1))"
"((s_14 ns_95 serializable?_6 expand13_1)(compile16_0 s_14 ns_95 serializable?_6 expand13_1 #f))"
"((s_15 ns_96 serializable?12_1)(compile16_0 s_15 ns_96 serializable?12_1 unsafe-undefined #f))"
"((s_83 ns11_2)(compile16_0 s_83 ns11_2 #t unsafe-undefined #f)))))"
"(define-values"
"(compile-to-linklets)"
"(let-values(((compile-to-linklets20_0)"
"(lambda(s19_0 ns18_1)"
"(begin"
" 'compile-to-linklets20"
"(let-values(((s_20) s19_0))"
"(let-values(((ns_63)(if(eq? ns18_1 unsafe-undefined)(1/current-namespace) ns18_1)))"
"(let-values()(1/compile s_20 ns_63 #t expand$1 #t))))))))"
"(case-lambda"
"((s_450)(begin(compile-to-linklets20_0 s_450 unsafe-undefined)))"
"((s_22 ns18_2)(compile-to-linklets20_0 s_22 ns18_2)))))"
"(define-values"
"(struct:lifted-parsed-begin"
" lifted-parsed-begin22.1"
" lifted-parsed-begin?"
" lifted-parsed-begin-seq"
" lifted-parsed-begin-last)"
"(let-values(((struct:_80 make-_80 ?_80 -ref_80 -set!_80)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'lifted-parsed-begin"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '(0 1)"
" #f"
" 'lifted-parsed-begin)))))"
"(values"
" struct:_80"
" make-_80"
" ?_80"
"(make-struct-field-accessor -ref_80 0 'seq)"
"(make-struct-field-accessor -ref_80 1 'last))))"
"(define-values"
"(compile-single$1)"
"(lambda(s_451 ns_97 expand_2 serializable?_7 to-source?_5)"
"(begin"
" 'compile-single"
"(let-values(((exp-s_4)(expand_2 s_451 ns_97 #f #t serializable?_7)))"
"((letrec-values(((loop_100)"
"(lambda(exp-s_5)"
"(begin"
" 'loop"
"(if(parsed-module? exp-s_5)"
"(let-values()"
"(let-values(((exp-s82_0) exp-s_5)"
"((temp83_1)"
"(let-values(((ns86_0) ns_97))"
"(make-compile-context14.1"
" #f"
" unsafe-undefined"
" #f"
" ns86_0"
" unsafe-undefined"
" unsafe-undefined)))"
"((serializable?84_0) serializable?_7)"
"((to-source?85_0) to-source?_5))"
"(compile-module13.1"
" #f"
" unsafe-undefined"
" #t"
" serializable?84_0"
" to-source?85_0"
" exp-s82_0"
" temp83_1)))"
"(if(lifted-parsed-begin? exp-s_5)"
"(let-values()"
"(let-values(((temp87_0)"
"(reverse$1"
"(let-values(((lst_168)"
"(append"
"(lifted-parsed-begin-seq exp-s_5)"
"(list(lifted-parsed-begin-last exp-s_5)))))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_168)))"
"((letrec-values(((for-loop_5)"
"(lambda(fold-var_273 lst_300)"
"(begin"
" 'for-loop"
"(if(pair? lst_300)"
"(let-values(((e_74)"
"(unsafe-car lst_300))"
"((rest_88)"
"(unsafe-cdr lst_300)))"
"(let-values(((fold-var_166)"
"(let-values(((fold-var_167)"
" fold-var_273))"
"(let-values(((fold-var_168)"
"(let-values()"
"(cons"
"(let-values()"
"(loop_100"
" e_74))"
" fold-var_167))))"
"(values"
" fold-var_168)))))"
"(if(not #f)"
"(for-loop_5 fold-var_166 rest_88)"
" fold-var_166)))"
" fold-var_273)))))"
" for-loop_5)"
" null"
" lst_168)))))"
"((to-source?88_0) to-source?_5))"
"(compiled-tops->compiled-top8.1 #f #f to-source?88_0 temp87_0)))"
"(let-values()"
"(let-values(((exp-s89_0) exp-s_5)"
"((temp90_1)"
"(let-values(((ns93_1) ns_97))"
"(make-compile-context14.1"
" #f"
" unsafe-undefined"
" #f"
" ns93_1"
" unsafe-undefined"
" unsafe-undefined)))"
"((serializable?91_0) serializable?_7)"
"((to-source?92_0) to-source?_5))"
"(compile-top9.1 serializable?91_0 #f to-source?92_0 exp-s89_0 temp90_1)))))))))"
" loop_100)"
" exp-s_4)))))"
"(define-values"
"(expand$1)"
"(let-values(((expand28_0)"
"(lambda(s27_1 ns23_0 observable?24_0 to-parsed?25_0 serializable?26_0)"
"(begin"
" 'expand28"
"(let-values(((s_452) s27_1))"
"(let-values(((ns_98)(if(eq? ns23_0 unsafe-undefined)(1/current-namespace) ns23_0)))"
"(let-values(((observable?_0) observable?24_0))"
"(let-values(((to-parsed?_2) to-parsed?25_0))"
"(let-values(((serializable?_8) serializable?26_0))"
"(let-values()"
"(let-values(((observer_2)(if observable?_0(current-expand-observe) #f)))"
"(begin"
"(if observer_2(let-values()(call-expand-observe observer_2 'start-top))(void))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-observe"
" #f)"
"(let-values()"
"(let-values(((s94_1) s_452)"
"((ns95_0) ns_98)"
"((temp96_2)"
"(lambda(s_314 ns_99 as-tail?_5)"
"(expand-single"
" s_314"
" ns_99"
" observer_2"
" to-parsed?_2"
" serializable?_8)))"
"((cons97_0) cons)"
"((re-pair98_0) re-pair)"
"((observer99_0) observer_2))"
"(per-top-level54.1"
" cons97_0"
" #f"
" observer99_0"
" #t"
" #f"
" temp96_2"
" re-pair98_0"
" s94_1"
" ns95_0))))))))))))))))"
"(case-lambda"
"((s_453)(begin 'expand(expand28_0 s_453 unsafe-undefined #f #f #f)))"
"((s_454 ns_9 observable?_1 to-parsed?_3 serializable?26_1)"
"(expand28_0 s_454 ns_9 observable?_1 to-parsed?_3 serializable?26_1))"
"((s_455 ns_100 observable?_2 to-parsed?25_1)(expand28_0 s_455 ns_100 observable?_2 to-parsed?25_1 #f))"
"((s_305 ns_101 observable?24_1)(expand28_0 s_305 ns_101 observable?24_1 #f #f))"
"((s_456 ns23_1)(expand28_0 s_456 ns23_1 #f #f #f)))))"
"(define-values"
"(expand-single)"
"(lambda(s_58 ns_102 observer_3 to-parsed?_4 serializable?_9)"
"(begin"
"(let-values(((rebuild-s_2)(keep-properties-only s_58)))"
"(let-values(((ctx_68)"
"(let-values(((ns100_0) ns_102)"
"((to-parsed?101_0) to-parsed?_4)"
"((serializable?102_0) serializable?_9)"
"((observer103_0) observer_3))"
"(make-expand-context10.1 serializable?102_0 observer103_0 to-parsed?101_0 ns100_0))))"
"(let-values(((require-lifts_3 lifts_10 exp-s_0)(expand-capturing-lifts s_58 ctx_68)))"
"(if(if(null? require-lifts_3)(null? lifts_10) #f)"
"(let-values() exp-s_0)"
"(if to-parsed?_4"
"(let-values()"
"(let-values(((require-lifts104_0) require-lifts_3)"
"((lifts105_0) lifts_10)"
"((exp-s106_0) exp-s_0)"
"((rebuild-s107_0) rebuild-s_2)"
"((temp108_1)"
"(lambda(form_0)"
"(expand-single form_0 ns_102 observer_3 to-parsed?_4 serializable?_9))))"
"(wrap-lifts-as-lifted-parsed-begin63.1"
" temp108_1"
" require-lifts104_0"
" lifts105_0"
" exp-s106_0"
" rebuild-s107_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(log-top-lift-begin-before ctx_68 require-lifts_3 lifts_10 exp-s_0 ns_102)"
"(values))))"
"(let-values(((new-s_2)"
"(let-values(((temp109_0)(append require-lifts_3 lifts_10))"
"((temp110_1)"
"(lambda(form_1)"
"(begin"
"(let-values(((obs_45)(expand-context-observer ctx_68)))"
"(if obs_45"
"(let-values()"
"(let-values()(call-expand-observe obs_45 'next)))"
"(void)))"
"(expand-single"
" form_1"
" ns_102"
" observer_3"
" to-parsed?_4"
" serializable?_9))))"
"((temp111_1)"
"(lambda(form_2)"
"(if to-parsed?_4"
"(let-values() form_2)"
"(let-values()"
"(begin"
"(let-values(((obs_46)(expand-context-observer ctx_68)))"
"(if obs_46"
"(let-values()"
"(let-values()(call-expand-observe obs_46 'next)))"
"(void)))"
"(expand-single"
" form_2"
" ns_102"
" observer_3"
" to-parsed?_4"
" serializable?_9))))))"
"((exp-s112_0) exp-s_0)"
"((temp113_2)(namespace-phase ns_102)))"
"(wrap-lifts-as-begin16.1 temp111_1 temp110_1 temp109_0 exp-s112_0 temp113_2))))"
"(begin(log-top-begin-after ctx_68 new-s_2) new-s_2))))))))))))"
"(define-values"
"(expand-once$1)"
"(let-values(((expand-once32_0)"
"(lambda(s31_0 ns30_0)"
"(begin"
" 'expand-once32"
"(let-values(((s_66) s31_0))"
"(let-values(((ns_103)(if(eq? ns30_0 unsafe-undefined)(1/current-namespace) ns30_0)))"
"(let-values()"
"(let-values(((s114_0) s_66)"
"((ns115_0) ns_103)"
"((temp116_0)"
"(lambda(s_425 ns_104 as-tail?_6)(expand-single-once s_425 ns_104)))"
"((cons117_0) cons)"
"((re-pair118_0) re-pair)"
"((temp119_1) #t)"
"((temp120_1) #f))"
"(per-top-level54.1"
" cons117_0"
" temp119_1"
" temp120_1"
" #t"
" #f"
" temp116_0"
" re-pair118_0"
" s114_0"
" ns115_0)))))))))"
"(case-lambda"
"((s_38)(begin 'expand-once(expand-once32_0 s_38 unsafe-undefined)))"
"((s_319 ns30_1)(expand-once32_0 s_319 ns30_1)))))"
"(define-values"
"(expand-single-once)"
"(lambda(s_457 ns_83)"
"(begin"
"(let-values(((require-lifts_4 lifts_11 exp-s_6)"
"(expand-capturing-lifts"
" s_457"
"(let-values(((v_128)(let-values(((ns121_0) ns_83))(make-expand-context10.1 #f #f #f ns121_0))))"
"(let-values(((the-struct_69) v_128))"
"(if(expand-context/outer? the-struct_69)"
"(let-values(((inner122_0)"
"(let-values(((the-struct_70)(root-expand-context/outer-inner v_128)))"
"(if(expand-context/inner? the-struct_70)"
"(let-values(((just-once?123_0) #t))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_70)"
"(root-expand-context/inner-module-scopes the-struct_70)"
"(root-expand-context/inner-top-level-bind-scope the-struct_70)"
"(root-expand-context/inner-all-scopes-stx the-struct_70)"
"(root-expand-context/inner-defined-syms the-struct_70)"
"(root-expand-context/inner-counter the-struct_70)"
"(root-expand-context/inner-lift-key the-struct_70)"
"(expand-context/inner-to-parsed? the-struct_70)"
"(expand-context/inner-phase the-struct_70)"
"(expand-context/inner-namespace the-struct_70)"
" just-once?123_0"
"(expand-context/inner-module-begin-k the-struct_70)"
"(expand-context/inner-allow-unbound? the-struct_70)"
"(expand-context/inner-in-local-expand? the-struct_70)"
"(expand-context/inner-keep-#%expression? the-struct_70)"
"(expand-context/inner-stops the-struct_70)"
"(expand-context/inner-declared-submodule-names the-struct_70)"
"(expand-context/inner-lifts the-struct_70)"
"(expand-context/inner-lift-envs the-struct_70)"
"(expand-context/inner-module-lifts the-struct_70)"
"(expand-context/inner-require-lifts the-struct_70)"
"(expand-context/inner-to-module-lifts the-struct_70)"
"(expand-context/inner-requires+provides the-struct_70)"
"(expand-context/inner-observer the-struct_70)"
"(expand-context/inner-for-serializable? the-struct_70)"
"(expand-context/inner-should-not-encounter-macros? the-struct_70)))"
"(raise-argument-error"
" 'struct-copy"
"                                              \"expand-context/inner?\""
" the-struct_70)))))"
"(expand-context/outer1.1"
" inner122_0"
"(root-expand-context/outer-post-expansion the-struct_69)"
"(root-expand-context/outer-use-site-scopes the-struct_69)"
"(root-expand-context/outer-frame-id the-struct_69)"
"(expand-context/outer-context the-struct_69)"
"(expand-context/outer-env the-struct_69)"
"(expand-context/outer-scopes the-struct_69)"
"(expand-context/outer-def-ctx-scopes the-struct_69)"
"(expand-context/outer-binding-layer the-struct_69)"
"(expand-context/outer-reference-records the-struct_69)"
"(expand-context/outer-only-immediate? the-struct_69)"
"(expand-context/outer-need-eventually-defined the-struct_69)"
"(expand-context/outer-current-introduction-scopes the-struct_69)"
"(expand-context/outer-current-use-scopes the-struct_69)"
"(expand-context/outer-name the-struct_69)))"
"                           (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_69)))))))"
"(if(if(null? require-lifts_4)(null? lifts_11) #f)"
"(let-values() exp-s_6)"
"(let-values()"
"(let-values(((temp124_1)(append require-lifts_4 lifts_11))"
"((exp-s125_0) exp-s_6)"
"((temp126_1)(namespace-phase ns_83)))"
"(wrap-lifts-as-begin16.1 unsafe-undefined unsafe-undefined temp124_1 exp-s125_0 temp126_1))))))))"
"(define-values"
"(expand-to-top-form$1)"
"(let-values(((expand-to-top-form36_0)"
"(lambda(s35_0 ns34_0)"
"(begin"
" 'expand-to-top-form36"
"(let-values(((s_458) s35_0))"
"(let-values(((ns_105)(if(eq? ns34_0 unsafe-undefined)(1/current-namespace) ns34_0)))"
"(let-values()"
"(let-values(((observer_4)(current-expand-observe)))"
"(begin"
"(if observer_4(let-values()(call-expand-observe observer_4 'start-top))(void))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-expand-observe"
" #f)"
"(let-values()"
"(let-values(((s127_0) s_458)"
"((ns128_0) ns_105)"
"((temp129_1) #f)"
"((temp130_0) #f)"
"((observer131_0) observer_4))"
"(per-top-level54.1"
" #f"
" #f"
" observer131_0"
" temp130_0"
" #f"
" temp129_1"
" #f"
" s127_0"
" ns128_0)))))))))))))"
"(case-lambda"
"((s_459)(begin 'expand-to-top-form(expand-to-top-form36_0 s_459 unsafe-undefined)))"
"((s_460 ns34_1)(expand-to-top-form36_0 s_460 ns34_1)))))"
"(define-values"
"(per-top-level54.1)"
"(lambda(combine39_0"
" just-once?41_0"
" observer44_0"
" quick-immediate?42_0"
" serializable?43_0"
" single38_0"
" wrap40_0"
" given-s52_0"
" ns53_2)"
"(begin"
" 'per-top-level54"
"(let-values(((given-s_0) given-s52_0))"
"(let-values(((ns_106) ns53_2))"
"(let-values(((single_0) single38_0))"
"(let-values(((combine_0) combine39_0))"
"(let-values(((wrap_2) wrap40_0))"
"(let-values(((just-once?_1) just-once?41_0))"
"(let-values(((quick-immediate?_0) quick-immediate?42_0))"
"(let-values(((serializable?_10) serializable?43_0))"
"(let-values(((observer_5) observer44_0))"
"(let-values()"
"(let-values(((s_216)(maybe-intro given-s_0 ns_106)))"
"(let-values(((ctx_69)"
"(let-values(((ns132_0) ns_106)((observer133_0) observer_5))"
"(make-expand-context10.1 #f observer133_0 #f ns132_0))))"
"(let-values(((phase_133)(namespace-phase ns_106)))"
"((letrec-values(((loop_101)"
"(lambda(s_461 phase_134 ns_107 as-tail?_7)"
"(begin"
" 'loop"
"(let-values(((tl-ctx_0)"
"(let-values(((v_197) ctx_69))"
"(let-values(((the-struct_71) v_197))"
"(if(expand-context/outer? the-struct_71)"
"(let-values(((inner134_0)"
"(let-values(((the-struct_72)"
"(root-expand-context/outer-inner"
" v_197)))"
"(if(expand-context/inner?"
" the-struct_72)"
"(let-values(((phase135_1)"
" phase_134)"
"((namespace136_0)"
" ns_107)"
"((just-once?137_0)"
" just-once?_1)"
"((for-serializable?138_0)"
" serializable?_10))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_72)"
"(root-expand-context/inner-module-scopes"
" the-struct_72)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_72)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_72)"
"(root-expand-context/inner-defined-syms"
" the-struct_72)"
"(root-expand-context/inner-counter"
" the-struct_72)"
"(root-expand-context/inner-lift-key"
" the-struct_72)"
"(expand-context/inner-to-parsed?"
" the-struct_72)"
" phase135_1"
" namespace136_0"
" just-once?137_0"
"(expand-context/inner-module-begin-k"
" the-struct_72)"
"(expand-context/inner-allow-unbound?"
" the-struct_72)"
"(expand-context/inner-in-local-expand?"
" the-struct_72)"
"(expand-context/inner-keep-#%expression?"
" the-struct_72)"
"(expand-context/inner-stops"
" the-struct_72)"
"(expand-context/inner-declared-submodule-names"
" the-struct_72)"
"(expand-context/inner-lifts"
" the-struct_72)"
"(expand-context/inner-lift-envs"
" the-struct_72)"
"(expand-context/inner-module-lifts"
" the-struct_72)"
"(expand-context/inner-require-lifts"
" the-struct_72)"
"(expand-context/inner-to-module-lifts"
" the-struct_72)"
"(expand-context/inner-requires+provides"
" the-struct_72)"
"(expand-context/inner-observer"
" the-struct_72)"
" for-serializable?138_0"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_72)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                             \"expand-context/inner?\""
" the-struct_72)))))"
"(expand-context/outer1.1"
" inner134_0"
"(root-expand-context/outer-post-expansion"
" the-struct_71)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_71)"
"(root-expand-context/outer-frame-id"
" the-struct_71)"
"(expand-context/outer-context"
" the-struct_71)"
"(expand-context/outer-env the-struct_71)"
"(expand-context/outer-scopes the-struct_71)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_71)"
"(expand-context/outer-binding-layer"
" the-struct_71)"
"(expand-context/outer-reference-records"
" the-struct_71)"
"(expand-context/outer-only-immediate?"
" the-struct_71)"
"(expand-context/outer-need-eventually-defined"
" the-struct_71)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_71)"
"(expand-context/outer-current-use-scopes"
" the-struct_71)"
"(expand-context/outer-name the-struct_71)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                           \"expand-context/outer?\""
" the-struct_71))))))"
"(let-values(((wb-s_0)(if just-once?_1 s_461 #f)))"
"(let-values((()"
"(begin"
"(let-values(((obs_47)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_47"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_47"
" 'visit"
" s_461)))"
"(void)))"
"(values))))"
"(let-values(((require-lifts_5 lifts_12 exp-s_7)"
"(expand-capturing-lifts"
" s_461"
"(let-values(((v_198) tl-ctx_0))"
"(let-values(((the-struct_73) v_198))"
"(if(expand-context/outer? the-struct_73)"
"(let-values(((only-immediate?139_0)"
" #t)"
"((inner140_0)"
"(let-values(((the-struct_74)"
"(root-expand-context/outer-inner"
" v_198)))"
"(if(expand-context/inner?"
" the-struct_74)"
"(let-values(((phase141_0)"
" phase_134)"
"((namespace142_0)"
" ns_107))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_74)"
"(root-expand-context/inner-module-scopes"
" the-struct_74)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_74)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_74)"
"(root-expand-context/inner-defined-syms"
" the-struct_74)"
"(root-expand-context/inner-counter"
" the-struct_74)"
"(root-expand-context/inner-lift-key"
" the-struct_74)"
"(expand-context/inner-to-parsed?"
" the-struct_74)"
" phase141_0"
" namespace142_0"
"(expand-context/inner-just-once?"
" the-struct_74)"
"(expand-context/inner-module-begin-k"
" the-struct_74)"
"(expand-context/inner-allow-unbound?"
" the-struct_74)"
"(expand-context/inner-in-local-expand?"
" the-struct_74)"
"(expand-context/inner-keep-#%expression?"
" the-struct_74)"
"(expand-context/inner-stops"
" the-struct_74)"
"(expand-context/inner-declared-submodule-names"
" the-struct_74)"
"(expand-context/inner-lifts"
" the-struct_74)"
"(expand-context/inner-lift-envs"
" the-struct_74)"
"(expand-context/inner-module-lifts"
" the-struct_74)"
"(expand-context/inner-require-lifts"
" the-struct_74)"
"(expand-context/inner-to-module-lifts"
" the-struct_74)"
"(expand-context/inner-requires+provides"
" the-struct_74)"
"(expand-context/inner-observer"
" the-struct_74)"
"(expand-context/inner-for-serializable?"
" the-struct_74)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_74)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                    \"expand-context/inner?\""
" the-struct_74)))))"
"(expand-context/outer1.1"
" inner140_0"
"(root-expand-context/outer-post-expansion"
" the-struct_73)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_73)"
"(root-expand-context/outer-frame-id"
" the-struct_73)"
"(expand-context/outer-context"
" the-struct_73)"
"(expand-context/outer-env"
" the-struct_73)"
"(expand-context/outer-scopes"
" the-struct_73)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_73)"
"(expand-context/outer-binding-layer"
" the-struct_73)"
"(expand-context/outer-reference-records"
" the-struct_73)"
" only-immediate?139_0"
"(expand-context/outer-need-eventually-defined"
" the-struct_73)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_73)"
"(expand-context/outer-current-use-scopes"
" the-struct_73)"
"(expand-context/outer-name"
" the-struct_73)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                  \"expand-context/outer?\""
" the-struct_73)))))))"
"(let-values(((disarmed-exp-s_0)"
"(syntax-disarm$1 exp-s_7)))"
"(if(let-values(((or-part_299)"
"(pair? require-lifts_5)))"
"(if or-part_299 or-part_299(pair? lifts_12)))"
"(let-values()"
"(let-values(((new-s_3)"
"(let-values(((temp143_1)"
"(append"
" require-lifts_5"
" lifts_12))"
"((exp-s144_0) exp-s_7)"
"((phase145_0) phase_134))"
"(wrap-lifts-as-begin16.1"
" unsafe-undefined"
" unsafe-undefined"
" temp143_1"
" exp-s144_0"
" phase145_0))))"
"(begin"
"(let-values(((obs_48)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_48"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_48"
" 'lift-loop"
" new-s_3)))"
"(void)))"
"(if just-once?_1"
" new-s_3"
"(loop_101"
" new-s_3"
" phase_134"
" ns_107"
" as-tail?_7)))))"
"(if(not single_0)"
"(let-values()"
"(begin"
"(let-values(((obs_49)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_49"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_49"
" 'return"
" exp-s_7)))"
"(void)))"
" exp-s_7))"
"(if(if just-once?_1(not(eq? exp-s_7 wb-s_0)) #f)"
"(let-values() exp-s_7)"
"(let-values()"
"(let-values(((tmp_35)"
"(core-form-sym"
" disarmed-exp-s_0"
" phase_134)))"
"(if(equal? tmp_35 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_50)"
"(expand-context-observer"
" ctx_69)))"
"(if obs_50"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_50"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_29 begin146_0 e147_0)"
"(let-values(((s_462)"
" disarmed-exp-s_0))"
"(let-values(((orig-s_33)"
" s_462))"
"(let-values(((begin146_1"
" e147_1)"
"(let-values(((s_162)"
"(if(syntax?$1"
" s_462)"
"(syntax-e$1"
" s_462)"
" s_462)))"
"(if(pair?"
" s_162)"
"(let-values(((begin148_0)"
"(let-values(((s_115)"
"(car"
" s_162)))"
" s_115))"
"((e149_0)"
"(let-values(((s_438)"
"(cdr"
" s_162)))"
"(let-values(((s_224)"
"(if(syntax?$1"
" s_438)"
"(syntax-e$1"
" s_438)"
" s_438)))"
"(let-values(((flat-s_21)"
"(to-syntax-list.1"
" s_224)))"
"(if(not"
" flat-s_21)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_33))"
"(let-values()"
" flat-s_21)))))))"
"(values"
" begin148_0"
" e149_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_33)))))"
"(values"
" #t"
" begin146_1"
" e147_1))))))"
"(letrec-values(((begin-loop_0)"
"(lambda(es_2)"
"(begin"
" 'begin-loop"
"(if(null? es_2)"
"(let-values()"
"(if combine_0"
" null"
"(void)))"
"(if(if(not"
" combine_0)"
"(null?"
"(cdr"
" es_2))"
" #f)"
"(let-values()"
"(loop_101"
"(car es_2)"
" phase_134"
" ns_107"
" as-tail?_7))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_51)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_51"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_51"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((a_67)"
"(if combine_0"
"(loop_101"
"(car"
" es_2)"
" phase_134"
" ns_107"
" #f)"
"(begin"
"(loop_101"
"(car"
" es_2)"
" phase_134"
" ns_107"
" #f)"
"(void)))))"
"(if combine_0"
"(combine_0"
" a_67"
"(begin-loop_0"
"(cdr"
" es_2)))"
"(begin-loop_0"
"(cdr"
" es_2))))))))))))"
"(if wrap_2"
"(let-values()"
"(let-values(((new-s_4)"
"(wrap_2"
" begin146_0"
" exp-s_7"
"(begin-loop_0"
" e147_0))))"
"(begin"
"(let-values(((obs_52)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_52"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_52"
" 'return"
" new-s_4)))"
"(void)))"
" new-s_4)))"
"(let-values()"
"(begin-loop_0 e147_0)))))))"
"(if(equal? tmp_35 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_43)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_43"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_43"
" 'prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values(((ok?_30"
" begin-for-syntax150_0"
" e151_0)"
"(let-values(((s_463)"
" disarmed-exp-s_0))"
"(let-values(((orig-s_34)"
" s_463))"
"(let-values(((begin-for-syntax150_1"
" e151_1)"
"(let-values(((s_127)"
"(if(syntax?$1"
" s_463)"
"(syntax-e$1"
" s_463)"
" s_463)))"
"(if(pair?"
" s_127)"
"(let-values(((begin-for-syntax152_0)"
"(let-values(((s_464)"
"(car"
" s_127)))"
" s_464))"
"((e153_0)"
"(let-values(((s_465)"
"(cdr"
" s_127)))"
"(let-values(((s_466)"
"(if(syntax?$1"
" s_465)"
"(syntax-e$1"
" s_465)"
" s_465)))"
"(let-values(((flat-s_22)"
"(to-syntax-list.1"
" s_466)))"
"(if(not"
" flat-s_22)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_34))"
"(let-values()"
" flat-s_22)))))))"
"(values"
" begin-for-syntax152_0"
" e153_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_34)))))"
"(values"
" #t"
" begin-for-syntax150_1"
" e151_1))))))"
"(let-values(((next-phase_0)"
"(add1 phase_134)))"
"(let-values(((next-ns_0)"
"(namespace->namespace-at-phase"
" ns_107"
" next-phase_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_53)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_53"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_53"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if quick-immediate?_0"
"(let-values()"
"(namespace-visit-available-modules!"
" ns_107))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
" next-ns_0)"
"(values))))"
"(let-values(((l_72)"
"(reverse$1"
"(let-values(((lst_208)"
" e151_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_208)))"
"((letrec-values(((for-loop_266)"
"(lambda(fold-var_274"
" lst_301)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_301)"
"(let-values(((s_467)"
"(unsafe-car"
" lst_301))"
"((rest_113)"
"(unsafe-cdr"
" lst_301)))"
"(let-values(((fold-var_257)"
"(let-values(((fold-var_275)"
" fold-var_274))"
"(let-values(((fold-var_205)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_54)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_54"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_54"
" 'next)))"
"(void)))"
"(loop_101"
" s_467"
" next-phase_0"
" next-ns_0"
" #f)))"
" fold-var_275))))"
"(values"
" fold-var_205)))))"
"(if(not"
" #f)"
"(for-loop_266"
" fold-var_257"
" rest_113)"
" fold-var_257)))"
" fold-var_274)))))"
" for-loop_266)"
" null"
" lst_208))))))"
"(if wrap_2"
"(let-values()"
"(let-values(((new-s_5)"
"(wrap_2"
" begin-for-syntax150_0"
" exp-s_7"
" l_72)))"
"(begin"
"(let-values(((obs_55)"
"(expand-context-observer"
" tl-ctx_0)))"
"(if obs_55"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_55"
" 'return"
" new-s_5)))"
"(void)))"
" new-s_5)))"
"(if combine_0"
"(let-values()"
"(apply"
" append"
" l_72))"
"(let-values()"
"(void)))))))))))))"
"(let-values()"
"(single_0"
" exp-s_7"
" ns_107"
" as-tail?_7))))))))))))))))))"
" loop_101)"
" s_216"
" phase_133"
" ns_106"
" #t)))))))))))))))))"
"(define-values"
"(maybe-intro)"
"(lambda(s_340 ns_108)"
"(begin(if(syntax?$1 s_340) s_340(1/namespace-syntax-introduce(1/datum->syntax #f s_340) ns_108)))))"
"(define-values"
"(re-pair)"
"(lambda(form-id_0 s_468 r_44)"
"(begin(syntax-rearm$1(1/datum->syntax(syntax-disarm$1 s_468)(cons form-id_0 r_44) s_468 s_468) s_468))))"
"(define-values"
"(expand-capturing-lifts)"
"(lambda(s_343 ctx_70)"
"(begin"
"(let-values()"
"(let-values(((ns_109)(expand-context-namespace ctx_70)))"
"(let-values((()(begin(namespace-visit-available-modules! ns_109)(values))))"
"(let-values(((lift-ctx_6)"
"(let-values(((temp154_1)(make-top-level-lift ctx_70)))"
"(make-lift-context6.1 #f temp154_1))))"
"(let-values(((require-lift-ctx_2)"
"(make-require-lift-context"
"(namespace-phase ns_109)"
"(make-parse-top-lifted-require ns_109))))"
"(let-values(((exp-s_8)"
"(let-values(((s155_0) s_343)"
"((temp156_0)"
"(let-values(((v_199) ctx_70))"
"(let-values(((the-struct_75) v_199))"
"(if(expand-context/outer? the-struct_75)"
"(let-values(((inner157_0)"
"(let-values(((the-struct_76)"
"(root-expand-context/outer-inner v_199)))"
"(if(expand-context/inner? the-struct_76)"
"(let-values(((lifts158_0) lift-ctx_6)"
"((module-lifts159_0) lift-ctx_6)"
"((require-lifts160_0)"
" require-lift-ctx_2))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_76)"
"(root-expand-context/inner-module-scopes"
" the-struct_76)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_76)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_76)"
"(root-expand-context/inner-defined-syms"
" the-struct_76)"
"(root-expand-context/inner-counter the-struct_76)"
"(root-expand-context/inner-lift-key"
" the-struct_76)"
"(expand-context/inner-to-parsed? the-struct_76)"
"(expand-context/inner-phase the-struct_76)"
"(expand-context/inner-namespace the-struct_76)"
"(expand-context/inner-just-once? the-struct_76)"
"(expand-context/inner-module-begin-k"
" the-struct_76)"
"(expand-context/inner-allow-unbound?"
" the-struct_76)"
"(expand-context/inner-in-local-expand?"
" the-struct_76)"
"(expand-context/inner-keep-#%expression?"
" the-struct_76)"
"(expand-context/inner-stops the-struct_76)"
"(expand-context/inner-declared-submodule-names"
" the-struct_76)"
" lifts158_0"
"(expand-context/inner-lift-envs the-struct_76)"
" module-lifts159_0"
" require-lifts160_0"
"(expand-context/inner-to-module-lifts"
" the-struct_76)"
"(expand-context/inner-requires+provides"
" the-struct_76)"
"(expand-context/inner-observer the-struct_76)"
"(expand-context/inner-for-serializable?"
" the-struct_76)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_76)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expand-context/inner?\""
" the-struct_76)))))"
"(expand-context/outer1.1"
" inner157_0"
"(root-expand-context/outer-post-expansion the-struct_75)"
"(root-expand-context/outer-use-site-scopes the-struct_75)"
"(root-expand-context/outer-frame-id the-struct_75)"
"(expand-context/outer-context the-struct_75)"
"(expand-context/outer-env the-struct_75)"
"(expand-context/outer-scopes the-struct_75)"
"(expand-context/outer-def-ctx-scopes the-struct_75)"
"(expand-context/outer-binding-layer the-struct_75)"
"(expand-context/outer-reference-records the-struct_75)"
"(expand-context/outer-only-immediate? the-struct_75)"
"(expand-context/outer-need-eventually-defined the-struct_75)"
"(expand-context/outer-current-introduction-scopes the-struct_75)"
"(expand-context/outer-current-use-scopes the-struct_75)"
"(expand-context/outer-name the-struct_75)))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context/outer?\""
" the-struct_75))))))"
"(expand9.1 #f #f #f s155_0 temp156_0))))"
"(values"
"(get-and-clear-require-lifts! require-lift-ctx_2)"
"(get-and-clear-lifts! lift-ctx_6)"
" exp-s_8))))))))))"
"(define-values"
"(make-parse-top-lifted-require)"
"(lambda(ns_110)"
"(begin"
"(lambda(s_347 phase_135)"
"(let-values(((ok?_31 #%require161_0 req162_0)"
"(let-values(((s_469)(syntax-disarm$1 s_347)))"
"(let-values(((orig-s_35) s_469))"
"(let-values(((#%require161_1 req162_1)"
"(let-values(((s_470)(if(syntax?$1 s_469)(syntax-e$1 s_469) s_469)))"
"(if(pair? s_470)"
"(let-values(((#%require163_0)(let-values(((s_471)(car s_470))) s_471))"
"((req164_0)"
"(let-values(((s_472)(cdr s_470)))"
"(let-values(((s_473)"
"(if(syntax?$1 s_472)"
"(syntax-e$1 s_472)"
" s_472)))"
"(if(pair? s_473)"
"(let-values(((req165_0)"
"(let-values(((s_474)(car s_473)))"
" s_474))"
"(()"
"(let-values(((s_475)(cdr s_473)))"
"(let-values(((s_476)"
"(if(syntax?$1 s_475)"
"(syntax-e$1 s_475)"
" s_475)))"
"(if(null? s_476)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_35))))))"
"(values req165_0))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_35))))))"
"(values #%require163_0 req164_0))"
"                                            (raise-syntax-error$1 #f \"bad syntax\" orig-s_35)))))"
"(values #t #%require161_1 req162_1))))))"
"(let-values(((temp166_0)(list req162_0))"
"((s167_0) s_347)"
"((ns168_0) ns_110)"
"((phase169_1) phase_135)"
"((phase170_0) phase_135)"
"((temp171_1)(let-values(((temp173_0) #f))(make-requires+provides8.1 #f temp173_0)))"
"((temp172_0) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" unsafe-undefined"
" #f"
" phase170_0"
" #f"
" #f"
" #f"
" #t"
" temp172_0"
" temp166_0"
" s167_0"
" ns168_0"
" phase169_1"
" temp171_1)))))))"
"(define-values"
"(wrap-lifts-as-lifted-parsed-begin63.1)"
"(lambda(adjust-form57_0 require-lifts59_0 lifts60_0 exp-s61_0 rebuild-s62_0)"
"(begin"
" 'wrap-lifts-as-lifted-parsed-begin63"
"(let-values(((require-lifts_6) require-lifts59_0))"
"(let-values(((lifts_13) lifts60_0))"
"(let-values(((exp-s_9) exp-s61_0))"
"(let-values(((rebuild-s_3) rebuild-s62_0))"
"(let-values(((adjust-form_1) adjust-form57_0))"
"(let-values()"
"(lifted-parsed-begin22.1"
"(append"
"(reverse$1"
"(let-values(((lst_302) require-lifts_6))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_302)))"
"((letrec-values(((for-loop_267)"
"(lambda(fold-var_276 lst_303)"
"(begin"
" 'for-loop"
"(if(pair? lst_303)"
"(let-values(((req_19)(unsafe-car lst_303))"
"((rest_173)(unsafe-cdr lst_303)))"
"(let-values(((fold-var_277)"
"(let-values(((fold-var_278) fold-var_276))"
"(let-values(((fold-var_279)"
"(let-values()"
"(cons"
"(let-values()"
"(parsed-require23.1 req_19))"
" fold-var_278))))"
"(values fold-var_279)))))"
"(if(not #f)(for-loop_267 fold-var_277 rest_173) fold-var_277)))"
" fold-var_276)))))"
" for-loop_267)"
" null"
" lst_302))))"
"(reverse$1"
"(let-values(((lst_304)(get-lifts-as-lists lifts_13)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_304)))"
"((letrec-values(((for-loop_268)"
"(lambda(fold-var_280 lst_305)"
"(begin"
" 'for-loop"
"(if(pair? lst_305)"
"(let-values(((ids+syms+rhs_0)(unsafe-car lst_305))"
"((rest_174)(unsafe-cdr lst_305)))"
"(let-values(((fold-var_281)"
"(let-values(((fold-var_282) fold-var_280))"
"(let-values(((fold-var_283)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((exp-rhs_3)"
"(adjust-form_1"
"(caddr"
" ids+syms+rhs_0))))"
"(let-values(((just-rhs_0)"
"(if(lifted-parsed-begin?"
" exp-rhs_3)"
"(lifted-parsed-begin-last"
" exp-rhs_3)"
" exp-rhs_3)))"
"(let-values(((dv_0)"
"(parsed-define-values19.1"
" rebuild-s_3"
"(car"
" ids+syms+rhs_0)"
"(cadr"
" ids+syms+rhs_0)"
" just-rhs_0)))"
"(if(lifted-parsed-begin?"
" exp-rhs_3)"
"(let-values(((the-struct_77)"
" exp-rhs_3))"
"(if(lifted-parsed-begin?"
" the-struct_77)"
"(let-values(((last174_0)"
" dv_0))"
"(lifted-parsed-begin22.1"
"(lifted-parsed-begin-seq"
" the-struct_77)"
" last174_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                   \"lifted-parsed-begin?\""
" the-struct_77)))"
" dv_0)))))"
" fold-var_282))))"
"(values fold-var_283)))))"
"(if(not #f)(for-loop_268 fold-var_281 rest_174) fold-var_281)))"
" fold-var_280)))))"
" for-loop_268)"
" null"
" lst_304)))))"
" exp-s_9))))))))))"
"(define-values"
"(log-top-lift-begin-before)"
"(lambda(ctx_71 require-lifts_7 lifts_14 exp-s_10 ns_111)"
"(begin"
"(let-values(((obs_56)(expand-context-observer ctx_71)))"
"(if obs_56"
"(let-values()"
"(let-values(((new-s_6)"
"(let-values(((temp175_0)(append require-lifts_7 lifts_14))"
"((exp-s176_0) exp-s_10)"
"((temp177_0)(namespace-phase ns_111)))"
"(wrap-lifts-as-begin16.1"
" unsafe-undefined"
" unsafe-undefined"
" temp175_0"
" exp-s176_0"
" temp177_0))))"
"(begin(call-expand-observe obs_56 'lift-loop new-s_6)(log-top-begin-before ctx_71 new-s_6))))"
"(void))))))"
"(define-values"
"(log-top-begin-before)"
"(lambda(ctx_72 new-s_7)"
"(begin"
"(let-values(((obs_57)(expand-context-observer ctx_72)))"
"(if obs_57"
"(let-values()"
"(let-values(((ok?_32 begin178_0 e179_0)"
"(let-values(((s_477) new-s_7))"
"(let-values(((orig-s_36) s_477))"
"(let-values(((begin178_1 e179_1)"
"(let-values(((s_478)(if(syntax?$1 s_477)(syntax-e$1 s_477) s_477)))"
"(if(pair? s_478)"
"(let-values(((begin180_0)(let-values(((s_479)(car s_478))) s_479))"
"((e181_0)"
"(let-values(((s_480)(cdr s_478)))"
"(let-values(((s_481)"
"(if(syntax?$1 s_480)"
"(syntax-e$1 s_480)"
" s_480)))"
"(let-values(((flat-s_23)(to-syntax-list.1 s_481)))"
"(if(not flat-s_23)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_36))"
"(let-values() flat-s_23)))))))"
"(values begin180_0 e181_0))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_36)))))"
"(values #t begin178_1 e179_1))))))"
"(begin"
"(call-expand-observe obs_57 'visit new-s_7)"
"(call-expand-observe obs_57 'resolve begin178_0)"
"(call-expand-observe obs_57 'enter-prim new-s_7)"
"(call-expand-observe obs_57 'prim-begin)"
"(call-expand-observe obs_57 'enter-list(1/datum->syntax #f e179_0 new-s_7)))))"
"(void))))))"
"(define-values"
"(log-top-begin-after)"
"(lambda(ctx_73 new-s_8)"
"(begin"
"(let-values(((obs_58)(expand-context-observer ctx_73)))"
"(if obs_58"
"(let-values()"
"(let-values(((ok?_33 begin182_0 e183_0)"
"(let-values(((s_392) new-s_8))"
"(let-values(((orig-s_37) s_392))"
"(let-values(((begin182_1 e183_1)"
"(let-values(((s_482)(if(syntax?$1 s_392)(syntax-e$1 s_392) s_392)))"
"(if(pair? s_482)"
"(let-values(((begin184_0)(let-values(((s_138)(car s_482))) s_138))"
"((e185_0)"
"(let-values(((s_139)(cdr s_482)))"
"(let-values(((s_483)"
"(if(syntax?$1 s_139)"
"(syntax-e$1 s_139)"
" s_139)))"
"(let-values(((flat-s_24)(to-syntax-list.1 s_483)))"
"(if(not flat-s_24)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                         \"bad syntax\""
" orig-s_37))"
"(let-values() flat-s_24)))))))"
"(values begin184_0 e185_0))"
"                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_37)))))"
"(values #t begin182_1 e183_1))))))"
"(let-values(((obs_59)(expand-context-observer ctx_73)))"
"(if obs_59"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_59 'exit-list(1/datum->syntax #f e183_0 new-s_8))"
"(call-expand-observe obs_59 'exit-prim new-s_8)"
"(call-expand-observe obs_59 'return new-s_8))))"
"(void)))))"
"(void))))))"
" (define-values (replace-me) (lambda (who_0) (begin (lambda args_6 (error who_0 \"this stub must be replaced\")))))"
"(define-values"
"(1/current-eval)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-eval)"
"(lambda(p_51)"
"(begin"
"(if((lambda(p_52)(if(procedure? p_52)(procedure-arity-includes? p_52 1) #f)) p_51)"
"(void)"
"             (let-values () (raise-argument-error 'current-eval \"(procedure-arity-includes/c 1)\" p_51)))"
" p_51))))))"
"(define-values"
"(1/current-compile)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-compile)"
"(lambda(p_32)"
"(begin"
"(if((lambda(p_53)(if(procedure? p_53)(procedure-arity-includes? p_53 2) #f)) p_32)"
"(void)"
"             (let-values () (raise-argument-error 'current-compile \"(procedure-arity-includes/c 2)\" p_32)))"
" p_32))))))"
"(define-values"
"(1/current-load)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-load)"
"(lambda(p_54)"
"(begin"
"(if((lambda(p_37)(if(procedure? p_37)(procedure-arity-includes? p_37 2) #f)) p_54)"
"(void)"
"             (let-values () (raise-argument-error 'current-load \"(procedure-arity-includes/c 2)\" p_54)))"
" p_54))))))"
"(define-values"
"(1/current-load/use-compiled)"
"(let-values()"
"(let-values()"
"(make-parameter"
"(replace-me 'current-load/use-compiled)"
"(lambda(p_46)"
"(begin"
"(if((lambda(p_48)(if(procedure? p_48)(procedure-arity-includes? p_48 2) #f)) p_46)"
"(void)"
"             (let-values () (raise-argument-error 'current-load/use-compiled \"(procedure-arity-includes/c 2)\" p_46)))"
" p_46))))))"
"(define-values"
"(1/current-library-collection-paths)"
"(let-values()"
"(let-values()"
"(make-parameter"
" null"
"(lambda(l_73)"
"(begin"
"(if((lambda(l_74)(if(list? l_74)(andmap2 complete-path-string? l_74) #f)) l_73)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-library-collection-paths"
"                \"(listof (and/c path-string? complete-path?))\""
" l_73)))"
"(map2 to-path l_73)))))))"
"(define-values"
"(1/current-library-collection-links)"
"(let-values()"
"(let-values()"
"(make-parameter"
" null"
"(lambda(l_8)"
"(begin"
"(if((lambda(l_75)"
"(if(list? l_75)"
"(andmap2"
"(lambda(p_55)"
"(let-values(((or-part_297)(not p_55)))"
"(if or-part_297"
" or-part_297"
"(let-values(((or-part_298)(complete-path-string? p_55)))"
"(if or-part_298"
" or-part_298"
"(if(hash? p_55)"
"(let-values(((ht_149) p_55))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_149)))"
"((letrec-values(((for-loop_269)"
"(lambda(result_116 i_166)"
"(begin"
" 'for-loop"
"(if i_166"
"(let-values(((k_35 v_3)"
"(hash-iterate-key+value ht_149 i_166)))"
"(let-values(((result_117)"
"(let-values()"
"(let-values(((result_118)"
"(let-values()"
"(let-values()"
"(if(let-values(((or-part_77)"
"(not"
" k_35)))"
"(if or-part_77"
" or-part_77"
"(if(symbol?"
" k_35)"
"(1/module-path?"
" k_35)"
" #f)))"
"(if(list? v_3)"
"(andmap2"
" complete-path-string?"
" v_3)"
" #f)"
" #f)))))"
"(values result_118)))))"
"(if(if(not((lambda x_82(not result_117)) k_35 v_3))"
"(not #f)"
" #f)"
"(for-loop_269"
" result_117"
"(hash-iterate-next ht_149 i_166))"
" result_117)))"
" result_116)))))"
" for-loop_269)"
" #t"
"(hash-iterate-first ht_149))))"
" #f))))))"
" l_75)"
" #f))"
" l_8)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-library-collection-links"
"(string-append"
"                 \"(listof (or/c #f\\n\""
"                 \"              (and/c path-string? complete-path?)\\n\""
"                 \"              (hash/c (or/c (and/c symbol? module-path?) #f)\\n\""
"                 \"                      (listof (and/c path-string? complete-path?)))))\")"
" l_8)))"
"(map2"
"(lambda(p_4)"
"(if(not p_4)"
"(let-values() #f)"
"(if(path? p_4)"
"(let-values() p_4)"
"(if(string? p_4)"
"(let-values()(string->path p_4))"
"(let-values()"
"(let-values(((ht_150) p_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_150)))"
"((letrec-values(((for-loop_270)"
"(lambda(table_208 i_167)"
"(begin"
" 'for-loop"
"(if i_167"
"(let-values(((k_36 v_200)(hash-iterate-key+value ht_150 i_167)))"
"(let-values(((table_209)"
"(let-values(((table_180) table_208))"
"(let-values(((table_210)"
"(let-values()"
"(let-values(((key_82 val_77)"
"(let-values()"
"(values"
" k_36"
"(to-path v_200)))))"
"(hash-set"
" table_180"
" key_82"
" val_77)))))"
"(values table_210)))))"
"(if(not #f)"
"(for-loop_270 table_209(hash-iterate-next ht_150 i_167))"
" table_209)))"
" table_208)))))"
" for-loop_270)"
" '#hash()"
"(hash-iterate-first ht_150)))))))))"
" l_8)))))))"
"(define-values"
"(1/use-compiled-file-paths)"
"(let-values()"
"(let-values()"
"(make-parameter"
"       (list (string->path \"compiled\"))"
"(lambda(l_48)"
"(begin"
"(if((lambda(l_76)(if(list? l_76)(andmap2 relative-path-string?$1 l_76) #f)) l_48)"
"(void)"
"(let-values()"
"               (raise-argument-error 'use-compiled-file-paths \"(listof (and/c path-string? relative-path?))\" l_48)))"
"(map2 to-path l_48)))))))"
"(define-values"
"(1/current-compiled-file-roots)"
"(let-values()"
"(let-values()"
"(make-parameter"
" '(same)"
"(lambda(l_77)"
"(begin"
"(if((lambda(l_78)"
"(if(list? l_78)"
"(andmap2"
"(lambda(p_56)"
"(let-values(((or-part_8)(path-string? p_56)))(if or-part_8 or-part_8(eq? p_56 'same))))"
" l_78)"
" #f))"
" l_77)"
"(void)"
"(let-values()"
"               (raise-argument-error 'current-compiled-file-roots \"(listof (or/c path-string? 'same))\" l_77)))"
"(map2 to-path l_77)))))))"
"(define-values"
"(1/use-compiled-file-check)"
"(let-values()"
"(let-values()"
"(make-parameter"
" 'modify-seconds"
"(lambda(v_201)"
"(begin"
"(if((lambda(v_69)"
"(let-values(((or-part_32)(eq? v_69 'modify-seconds)))"
"(if or-part_32 or-part_32(eq? v_69 'exists))))"
" v_201)"
"(void)"
"             (let-values () (raise-argument-error 'use-compiled-file-check \"(or/c 'modify-seconds 'exists)\" v_201)))"
" v_201))))))"
"(define-values(1/use-collection-link-paths)(make-parameter #t(lambda(v_82)(if v_82 #t #f))))"
"(define-values(1/use-user-specific-search-paths)(make-parameter #t(lambda(v_202)(if v_202 #t #f))))"
"(define-values(complete-path-string?)(lambda(p_57)(begin(if(path-string? p_57)(complete-path? p_57) #f))))"
"(define-values"
"(relative-path-string?$1)"
"(lambda(p_58)(begin 'relative-path-string?(if(path-string? p_58)(relative-path? p_58) #f))))"
"(define-values(to-path)(lambda(p_59)(begin(if(string? p_59)(string->path p_59) p_59))))"
"(define-values"
"(eval$1)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((s_72)(begin 'eval((1/current-eval)(intro s_72))))"
"((s_189 ns_112)"
"(begin"
"          (if (1/namespace? ns_112) (void) (let-values () (raise-argument-error 'eval \"namespace?\" ns_112)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_112)"
"(let-values()((1/current-eval)(intro s_189 ns_112))))))))))"
"(define-values"
"(1/eval-syntax)"
"(let-values()"
"(let-values()"
"(case-lambda"
"((s_8)"
"(begin"
" 'eval-syntax"
"(begin"
"            (if (syntax?$1 s_8) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_8)))"
"((1/current-eval) s_8))))"
"((s_2 ns_58)"
"(begin"
"          (if (syntax?$1 s_2) (void) (let-values () (raise-argument-error 'eval-syntax \"syntax?\" s_2)))"
"          (if (1/namespace? ns_58) (void) (let-values () (raise-argument-error 'eval-syntax \"namespace?\" ns_58)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_58)"
"(let-values()((1/current-eval) s_2)))))))))"
"(define-values(compile$1)(lambda(s_177)(begin 'compile((1/current-compile)(intro s_177) #f))))"
"(define-values"
"(1/compile-syntax)"
"(lambda(s_484)"
"(begin"
" 'compile-syntax"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_484) (void) (let-values () (raise-argument-error 'compile-syntax \"syntax?\" s_484)))"
"((1/current-compile) s_484 #f)))))))"
"(define-values(1/expand)(lambda(s_9)(begin 'expand(expand$1(intro s_9)(1/current-namespace) #t))))"
"(define-values"
"(1/expand-syntax)"
"(lambda(s_440)"
"(begin"
" 'expand-syntax"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_440) (void) (let-values () (raise-argument-error 'expand-syntax \"syntax?\" s_440)))"
"(expand$1 s_440(1/current-namespace) #t)))))))"
"(define-values(1/expand-once)(lambda(s_447)(begin 'expand-once(expand-once$1(intro s_447)))))"
"(define-values"
"(1/expand-syntax-once)"
"(lambda(s_178)"
"(begin"
" 'expand-syntax-once"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_178) (void) (let-values () (raise-argument-error 'expand-syntax-once \"syntax?\" s_178)))"
"(expand-once$1 s_178)))))))"
"(define-values(1/expand-to-top-form)(lambda(s_75)(begin 'expand-to-top-form(expand-to-top-form$1(intro s_75)))))"
"(define-values"
"(1/expand-syntax-to-top-form)"
"(lambda(s_170)"
"(begin"
" 'expand-syntax-to-top-form"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_170)"
"(void)"
"              (let-values () (raise-argument-error 'expand-syntax-to-top-form \"syntax?\" s_170)))"
"(expand-to-top-form$1 s_170)))))))"
"(define-values"
"(intro)"
"(let-values(((intro3_0)"
"(lambda(given-s2_0 ns1_6)"
"(begin"
" 'intro3"
"(let-values(((given-s_1) given-s2_0))"
"(let-values(((ns_113)(if(eq? ns1_6 unsafe-undefined)(1/current-namespace) ns1_6)))"
"(let-values()"
"(let-values(((s_304)(if(syntax?$1 given-s_1) given-s_1(1/datum->syntax #f given-s_1))))"
"(1/namespace-syntax-introduce s_304 ns_113)))))))))"
"(case-lambda"
"((given-s_2)(begin(intro3_0 given-s_2 unsafe-undefined)))"
"((given-s_3 ns1_7)(intro3_0 given-s_3 ns1_7)))))"
"(define-values"
"(do-dynamic-require)"
"(let-values(((do-dynamic-require5_0)"
"(lambda(who2_0 mod-path3_1 sym4_0 fail-k1_0)"
"(begin"
" 'do-dynamic-require5"
"(let-values(((who_24) who2_0))"
"(let-values(((mod-path_5) mod-path3_1))"
"(let-values(((sym_71) sym4_0))"
"(let-values(((fail-k_2)"
"(if(eq? fail-k1_0 unsafe-undefined)"
" default-dynamic-require-fail-thunk"
" fail-k1_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_217)(1/module-path? mod-path_5)))"
"(if or-part_217"
" or-part_217"
"(let-values(((or-part_3)(1/module-path-index? mod-path_5)))"
"(if or-part_3 or-part_3(1/resolved-module-path? mod-path_5)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_24"
"                                                   \"(or/c module-path? module-path-index? resolved-module-path?)\""
" mod-path_5)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_4)(symbol? sym_71)))"
"(if or-part_4"
" or-part_4"
"(let-values(((or-part_5)(not sym_71)))"
"(if or-part_5"
" or-part_5"
"(let-values(((or-part_6)(equal? sym_71 0)))"
"(if or-part_6 or-part_6(void? sym_71)))))))"
"(void)"
"(let-values()"
"                                                    (raise-argument-error who_24 \"(or/c symbol? #f 0 void?)\" sym_71)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(if(procedure? fail-k_2)"
"(procedure-arity-includes? fail-k_2 0)"
" #f)"
"(void)"
"                                                    (let-values () (raise-argument-error who_24 \"(-> any)\" fail-k_2)))"
"(values))))"
"(let-values(((ns_114)(1/current-namespace)))"
"(let-values(((mpi_46)"
"(if(1/module-path? mod-path_5)"
"(let-values()(1/module-path-index-join mod-path_5 #f))"
"(if(1/module-path-index? mod-path_5)"
"(let-values() mod-path_5)"
"(let-values()"
"(1/module-path-index-join"
"(resolved-module-path->module-path mod-path_5)"
" #f))))))"
"(let-values(((mod-name_22)(1/module-path-index-resolve mpi_46 #t)))"
"(let-values(((phase_109)(namespace-phase ns_114)))"
"(if(not sym_71)"
"(let-values()"
"(let-values(((ns17_0) ns_114)"
"((mpi18_0) mpi_46)"
"((phase19_2) phase_109)"
"((phase20_1) phase_109)"
"((temp21_1) #f))"
"(namespace-module-instantiate!96.1"
" temp21_1"
" phase20_1"
" unsafe-undefined"
" #f"
" ns17_0"
" mpi18_0"
" phase19_2)))"
"(if(equal? sym_71 0)"
"(let-values()"
"(let-values(((ns22_0) ns_114)"
"((mpi23_0) mpi_46)"
"((phase24_3) phase_109)"
"((phase25_0) phase_109))"
"(namespace-module-instantiate!96.1"
" #t"
" phase25_0"
" unsafe-undefined"
" #f"
" ns22_0"
" mpi23_0"
" phase24_3)))"
"(if(void? sym_71)"
"(let-values()"
"(let-values(((ns26_0) ns_114)"
"((mpi27_0) mpi_46)"
"((phase28_4) phase_109)"
"((phase29_0) phase_109))"
"(namespace-module-visit!104.1"
" phase29_0"
" ns26_0"
" mpi27_0"
" phase28_4)))"
"(let-values()"
"(let-values(((m_22)(namespace->module ns_114 mod-name_22)))"
"(let-values((()"
"(begin"
"(if m_22"
"(void)"
"(let-values()"
"(raise-unknown-module-error"
" 'dynamic-require"
" mod-name_22)))"
"(values))))"
"(let-values(((binding/p_5)"
"(hash-ref"
"(hash-ref(module-provides m_22) 0 '#hasheq())"
" sym_71"
" #f)))"
"(if(not binding/p_5)"
"(let-values()"
"(if(eq? fail-k_2 default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                 \"name is not provided\""
"                                                                 \"name\""
" sym_71"
"                                                                 \"module\""
" mod-name_22)"
"(fail-k_2)))"
"(let-values()"
"(let-values(((binding_5)"
"(provided-as-binding binding/p_5)))"
"(let-values(((ex-sym_2)"
"(module-binding-sym binding_5)))"
"(let-values(((ex-phase_0)"
"(module-binding-phase binding_5)))"
"(let-values((()"
"(begin"
"(let-values(((ns30_2) ns_114)"
"((mpi31_0) mpi_46)"
"((phase32_2) phase_109)"
"((phase33_1) phase_109)"
"((temp34_4) #f))"
"(namespace-module-instantiate!96.1"
" temp34_4"
" phase33_1"
" unsafe-undefined"
" #f"
" ns30_2"
" mpi31_0"
" phase32_2))"
"(values))))"
"(let-values(((ex-mod-name_0)"
"(1/module-path-index-resolve"
"(module-path-index-shift"
"(module-binding-module binding_5)"
"(module-self m_22)"
" mpi_46))))"
"(let-values(((m-ns_16)"
"(let-values(((ns35_0) ns_114)"
"((ex-mod-name36_0)"
" ex-mod-name_0)"
"((temp37_1)"
"(phase-"
" phase_109"
" ex-phase_0))"
"((temp38_3) #t))"
"(namespace->module-namespace82.1"
" #f"
" temp38_3"
" unsafe-undefined"
" ns35_0"
" ex-mod-name36_0"
" temp37_1))))"
"(let-values(((ex-m_0)"
"(namespace->module"
" ns_114"
" ex-mod-name_0)))"
"(let-values(((access_4)"
"(let-values(((or-part_30)"
"(module-access"
" ex-m_0)))"
"(if or-part_30"
" or-part_30"
"(module-compute-access!"
" ex-m_0)))))"
"(let-values((()"
"(begin"
"(if(if(not"
"(eq?"
" 'provided"
"(hash-ref"
"(hash-ref"
" access_4"
" ex-phase_0"
" '#hasheq())"
" ex-sym_2"
" #f)))"
"(if(not"
"(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector"
" m-ns_16)))"
"(not"
"(if(module-binding-extra-inspector"
" binding_5)"
"(inspector-superior?"
"(module-binding-extra-inspector"
" binding_5)"
"(namespace-inspector"
" m-ns_16))"
" #f))"
" #f)"
" #f)"
"(let-values()"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                   \"name is protected\""
"                                                                                                   \"name\""
" sym_71"
"                                                                                                   \"module\""
" mod-name_22))"
"(void))"
"(values))))"
"(let-values(((fail_1)"
"(lambda()"
"(begin"
" 'fail"
"(if(eq?"
" fail-k_2"
" default-dynamic-require-fail-thunk)"
"(raise-arguments-error"
" 'dynamic-require"
"                                                                                                     \"name's binding is missing\""
"                                                                                                     \"name\""
" sym_71"
"                                                                                                     \"module\""
" mod-name_22)"
"(fail-k_2))))))"
"(if(not"
"(provided-as-transformer?"
" binding/p_5))"
"(let-values()"
"(namespace-get-variable"
" m-ns_16"
" ex-phase_0"
" ex-sym_2"
" fail_1))"
"(let-values()"
"(let-values(((missing_1)"
"(gensym 'missing)))"
"(let-values((()"
"(begin"
"(let-values(((ns39_0)"
" ns_114)"
"((mpi40_1)"
" mpi_46)"
"((phase41_2)"
" phase_109)"
"((phase42_0)"
" phase_109))"
"(namespace-module-visit!104.1"
" phase42_0"
" ns39_0"
" mpi40_1"
" phase41_2))"
"(values))))"
"(let-values(((t_59)"
"(namespace-get-transformer"
" m-ns_16"
" ex-phase_0"
" ex-sym_2"
" missing_1)))"
"(if(eq? t_59 missing_1)"
"(let-values()(fail_1))"
"(let-values()"
"(let-values(((tmp-ns_0)"
"(let-values(((ns43_0)"
" ns_114))"
"(new-namespace8.1"
" #t"
" unsafe-undefined"
" ns43_0))))"
"(let-values(((mod-path_17)"
"(resolved-module-path->module-path"
" mod-name_22)))"
"(begin"
"(1/namespace-require"
" mod-path_17"
" tmp-ns_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-namespace"
" tmp-ns_0)"
"(let-values()"
"(1/eval"
" sym_71"
" tmp-ns_0))))))))))))))))))))))))))))))))))))))))))))))))"
"(case-lambda"
"((who_25 mod-path_18 sym_88)(begin(do-dynamic-require5_0 who_25 mod-path_18 sym_88 unsafe-undefined)))"
"((who_26 mod-path_19 sym_89 fail-k1_1)(do-dynamic-require5_0 who_26 mod-path_19 sym_89 fail-k1_1)))))"
" (define-values (default-dynamic-require-fail-thunk) (lambda () (begin (error \"failed\"))))"
"(define-values"
"(1/dynamic-require)"
"(let-values(((dynamic-require10_0)"
"(lambda(mod-path8_3 sym9_0 fail-k7_0)"
"(begin"
" 'dynamic-require10"
"(let-values(((mod-path_20) mod-path8_3))"
"(let-values(((sym_90) sym9_0))"
"(let-values(((fail-k_3)"
"(if(eq? fail-k7_0 unsafe-undefined)"
" default-dynamic-require-fail-thunk"
" fail-k7_0)))"
"(let-values()"
"(let-values()"
"(let-values()(do-dynamic-require 'dynamic-require mod-path_20 sym_90 fail-k_3)))))))))))"
"(case-lambda"
"((mod-path_21 sym_91)(begin 'dynamic-require(dynamic-require10_0 mod-path_21 sym_91 unsafe-undefined)))"
"((mod-path_22 sym_92 fail-k7_1)(dynamic-require10_0 mod-path_22 sym_92 fail-k7_1)))))"
"(define-values"
"(1/dynamic-require-for-syntax)"
"(let-values(((dynamic-require-for-syntax15_0)"
"(lambda(mod-path13_0 sym14_0 fail-k12_0)"
"(begin"
" 'dynamic-require-for-syntax15"
"(let-values(((mod-path_23) mod-path13_0))"
"(let-values(((sym_93) sym14_0))"
"(let-values(((fail-k_4)"
"(if(eq? fail-k12_0 unsafe-undefined)"
" default-dynamic-require-fail-thunk"
" fail-k12_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
"(let-values(((ns_115)(1/current-namespace)))"
"(namespace->namespace-at-phase ns_115(add1(namespace-phase ns_115)))))"
"(let-values()"
"(do-dynamic-require"
" 'dynamic-require-for-syntax"
" mod-path_23"
" sym_93"
" fail-k_4)))))))))))))"
"(case-lambda"
"((mod-path_24 sym_94)"
"(begin 'dynamic-require-for-syntax(dynamic-require-for-syntax15_0 mod-path_24 sym_94 unsafe-undefined)))"
"((mod-path_25 sym_95 fail-k12_1)(dynamic-require-for-syntax15_0 mod-path_25 sym_95 fail-k12_1)))))"
"(define-values"
"(1/load)"
"(lambda(s_0)"
"(begin"
" 'load"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"                          (if (path-string? s_0) (void) (let-values () (raise-argument-error 'load \"path-string?\" s_0)))"
"(values))))"
"(let-values(((p_60)(->path s_0)))"
"(call-with-current-load-relative-directory p_60(lambda()((1/current-load) p_60 #f))))))))))"
"(define-values"
"(1/load-extension)"
"(lambda(s_1)"
"(begin"
" 'load-extension"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(path-string? s_1)"
"(void)"
"                            (let-values () (raise-argument-error 'load-extension \"path-string?\" s_1)))"
"(values))))"
"(let-values(((p_61)(->path s_1)))"
"(call-with-current-load-relative-directory p_61(lambda()((current-load-extension) p_61 #f))))))))))"
"(define-values"
"(call-with-current-load-relative-directory)"
"(lambda(p_32 thunk_6)"
"(begin"
"(let-values(((base_18 name_63 dir?_2)(split-path p_32)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(eq? base_18 'relative)(current-directory)(path->complete-path base_18)))"
"(let-values()(thunk_6)))))))"
"(define-values"
"(1/load/use-compiled)"
"(lambda(f_27)"
"(begin"
" 'load/use-compiled"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(path-string? f_27)"
"(void)"
"                            (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" f_27)))"
"(values))))"
"(let-values(((p_48)(->path f_27)))((1/current-load/use-compiled) p_48 #f))))))))"
"(define-values"
"(embedded-load)"
"(lambda(start_41 end_31 str_24 as-predefined?_0)"
"(begin"
"(let-values(((s_170)"
"(if str_24"
" str_24"
"(let-values(((sp_0)(find-system-path 'exec-file)))"
"(let-values(((exe_0)(find-executable-path sp_0 #f)))"
"(let-values(((start_42)"
"(let-values(((or-part_298)(1/string->number start_41)))"
"(if or-part_298 or-part_298 0))))"
"(let-values(((end_32)"
"(let-values(((or-part_90)(1/string->number end_31)))"
"(if or-part_90 or-part_90 0))))"
"(let-values(((exe4_0) exe_0)"
"((temp5_5)"
"(lambda()"
"(begin"
" 'temp5"
"(begin"
"(file-position(current-input-port) start_42)"
"(read-bytes(max 0(- end_32 start_42))))))))"
"(with-input-from-file45.1 'binary exe4_0 temp5_5)))))))))"
"(let-values(((p_62)(open-input-bytes s_170)))"
"((letrec-values(((loop_70)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((e_75)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-compiled"
" #t"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t"
" read-on-demand-source"
" #t)"
"(let-values()(1/read p_62)))))"
"(if(eof-object? e_75)"
"(void)"
"(let-values()"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-module-declare-as-predefined"
" as-predefined?_0)"
"(let-values()((1/current-eval) e_75)))"
"(loop_70)))))))))"
" loop_70)))))))"
"(define-values(->path)(lambda(s_78)(begin(if(string? s_78)(string->path s_78) s_78))))"
"(define-values"
"(find-main-collects)"
"(lambda()"
"(begin(cache-configuration 0(lambda()(exe-relative-path->complete-path(find-system-path 'collects-dir)))))))"
"(define-values"
"(find-main-config)"
"(lambda()"
"(begin(cache-configuration 1(lambda()(exe-relative-path->complete-path(find-system-path 'config-dir)))))))"
"(define-values"
"(exe-relative-path->complete-path)"
"(lambda(collects-path_0)"
"(begin"
"(if(complete-path? collects-path_0)"
"(let-values()(simplify-path collects-path_0))"
"(if(absolute-path? collects-path_0)"
"(let-values()"
"(let-values(((exec_0)"
"(path->complete-path"
"(find-executable-path(find-system-path 'exec-file))"
"(find-system-path 'orig-dir))))"
"(let-values(((base_19 name_64 dir?_3)(split-path exec_0)))"
"(simplify-path(path->complete-path collects-path_0 base_19)))))"
"(let-values()"
"(let-values(((p_61)(find-executable-path(find-system-path 'exec-file) collects-path_0 #t)))"
"(if p_61(simplify-path p_61) #f))))))))"
"(define-values(relative-path-string?)(lambda(s_0)(begin(if(path-string? s_0)(relative-path? s_0) #f))))"
"(define-values"
"(check-collection)"
"(lambda(who_27 s_189 l_4)"
"(begin"
"(begin"
"(if(relative-path-string? s_189)"
"(void)"
"          (let-values () (raise-argument-error who_27 \"(and/c path-string? relative-path?)\" s_189)))"
"(if((lambda(l_2)(if(list? l_2)(andmap2 relative-path-string? l_2) #f)) l_4)"
"(void)"
"          (let-values () (raise-argument-error who_27 \"(listof (and/c path-string? relative-path?))\" l_4)))))))"
"(define-values"
"(check-fail)"
"(lambda(who_24 fail_2)"
"(begin"
"(if((lambda(p_53)(if(procedure? p_53)(procedure-arity-includes? p_53 1) #f)) fail_2)"
"(void)"
"        (let-values () (raise-argument-error who_24 \"(procedure-arity-includes/c 1)\" fail_2))))))"
"(define-values"
"(1/collection-path)"
"(lambda(fail_3 collection_0 collection-path_0)"
"(begin"
" 'collection-path"
"(let-values()"
"(let-values()"
"(begin"
"(check-collection 'collection-path collection_0 collection-path_0)"
"(check-fail 'collection-path fail_3)"
"(find-col-file fail_3 collection_0 collection-path_0 #f #f)))))))"
"(define-values"
"(1/collection-file-path)"
"(lambda(fail_4 check-compiled?_0 file-name_0 collection_1 collection-path_1)"
"(begin"
" 'collection-file-path"
"(let-values()"
"(let-values()"
"(begin"
"(if(relative-path-string? file-name_0)"
"(void)"
"(let-values()"
"                (raise-argument-error 'collection-file-path \"(and/c path-string? relative-path?)\" file-name_0)))"
"(check-collection 'collection-file-path collection_1 collection-path_1)"
"(check-fail 'collection-file-path fail_4)"
"(find-col-file fail_4 collection_1 collection-path_1 file-name_0 check-compiled?_0)))))))"
"(define-values"
"(get-config-table)"
"(lambda(d_34)"
"(begin"
"      (let-values (((p_63) (if d_34 (build-path d_34 \"config.rktd\") #f)))"
"(let-values(((or-part_294)"
"(if p_63"
"(if(file-exists? p_63)"
"(let-values(((p7_1) p_63)"
"((temp8_1)"
"(lambda()"
"(begin"
" 'temp8"
"(let-values(((v_2)(call-with-default-reading-parameterization 1/read)))"
"(if(hash? v_2) v_2 #f))))))"
"(with-input-from-file45.1 'binary p7_1 temp8_1))"
" #f)"
" #f)))"
"(if or-part_294 or-part_294 '#hash()))))))"
"(define-values"
"(get-installation-name)"
"(lambda(config-table_0)(begin(hash-ref config-table_0 'installation-name(version)))))"
"(define-values"
"(coerce-to-path)"
"(lambda(p_1)"
"(begin"
"(if(string? p_1)"
"(let-values()(collects-relative-path->complete-path(string->path p_1)))"
"(if(bytes? p_1)"
"(let-values()(collects-relative-path->complete-path(bytes->path p_1)))"
"(if(path? p_1)(let-values()(collects-relative-path->complete-path p_1))(let-values() p_1)))))))"
"(define-values"
"(collects-relative-path->complete-path)"
"(lambda(p_64)"
"(begin"
"(if(complete-path? p_64)"
"(let-values() p_64)"
"(let-values()"
"(path->complete-path"
" p_64"
"(let-values(((or-part_72)(find-main-collects)))(if or-part_72 or-part_72(current-directory)))))))))"
"(define-values"
"(add-config-search)"
"(lambda(ht_70 key_83 orig-l_9)"
"(begin"
"(let-values(((l_79)(hash-ref ht_70 key_83 #f)))"
"(if l_79"
"((letrec-values(((loop_102)"
"(lambda(l_64)"
"(begin"
" 'loop"
"(if(null? l_64)"
"(let-values() null)"
"(if(not(car l_64))"
"(let-values()(append orig-l_9(loop_102(cdr l_64))))"
"(let-values()(cons(coerce-to-path(car l_64))(loop_102(cdr l_64))))))))))"
" loop_102)"
" l_79)"
" orig-l_9)))))"
"(define-values"
"(1/find-library-collection-links)"
"(lambda()"
"(begin"
" 'find-library-collection-links"
"(let-values(((ht_81)(get-config-table(find-main-config))))"
"(let-values(((lf_0)"
"(coerce-to-path"
"(let-values(((or-part_80)(hash-ref ht_81 'links-file #f)))"
"(if or-part_80"
" or-part_80"
"(build-path"
"(let-values(((or-part_81)(hash-ref ht_81 'share-dir #f)))"
"                              (if or-part_81 or-part_81 (build-path 'up \"share\")))"
"                            \"links.rktd\"))))))"
"(append"
"(list #f)"
"(if(if(1/use-user-specific-search-paths)(1/use-collection-link-paths) #f)"
"             (list (build-path (find-system-path 'addon-dir) (get-installation-name ht_81) \"links.rktd\"))"
" null)"
"(if(1/use-collection-link-paths)(add-config-search ht_81 'links-search-files(list lf_0)) null)))))))"
"(define-values(links-cache)(make-weak-hash))"
"(define-values(stamp-prompt-tag)(make-continuation-prompt-tag 'stamp))"
"(define-values"
"(file->stamp)"
"(lambda(path_7 old-stamp_0)"
"(begin"
"(if(if old-stamp_0(if(cdr old-stamp_0)(not(sync/timeout 0(cdr old-stamp_0))) #f) #f)"
"(let-values() old-stamp_0)"
"(let-values()"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-exception-handler"
"(lambda(exn_1)"
"(abort-current-continuation"
" stamp-prompt-tag"
"(if(exn:fail:filesystem? exn_1)(lambda() #f)(lambda()(raise exn_1)))))"
"(lambda()"
"(let-values(((dir-evt_0)"
"(if(vector-ref(system-type 'fs-change) 2)"
"((letrec-values(((loop_65)"
"(lambda(path_8)"
"(begin"
" 'loop"
"(let-values(((base_20 name_65 dir?_4)(split-path path_8)))"
"(if(path? base_20)"
"(if(directory-exists? base_20)"
"(filesystem-change-evt base_20(lambda() #f))"
"(loop_65 base_20))"
" #f))))))"
" loop_65)"
" path_7)"
" #f)))"
"(if(not(file-exists? path_7))"
"(let-values()(cons #f dir-evt_0))"
"(let-values()"
"(let-values(((evt_0)"
"(if(vector-ref(system-type 'fs-change) 2)"
"(filesystem-change-evt path_7(lambda() #f))"
" #f)))"
"(begin"
"(if dir-evt_0(let-values()(filesystem-change-evt-cancel dir-evt_0))(void))"
"(cons(file->bytes path_7) evt_0)))))))))"
" stamp-prompt-tag))))))"
"(define-values"
"(file->bytes)"
"(lambda(path_9)"
"(begin"
"(let-values(((path9_0) path_9)"
"((temp10_4)"
"(lambda(p_65)"
"(begin"
" 'temp10"
"(let-values(((bstr_1)(read-bytes 8192 p_65)))"
"(if(if(bytes? bstr_1)(>=(bytes-length bstr_1) 8192) #f)"
"(apply"
" bytes-append"
"(cons"
" bstr_1"
"((letrec-values(((loop_103)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((bstr_2)(read-bytes 8192 p_65)))"
"(if(eof-object? bstr_2) null(cons bstr_2(loop_103))))))))"
" loop_103))))"
" bstr_1))))))"
"(call-with-input-file*61.1 'binary path9_0 temp10_4)))))"
"(define-values"
"(no-file-stamp?)"
"(lambda(a_68)(begin(let-values(((or-part_31)(not a_68)))(if or-part_31 or-part_31(not(car a_68)))))))"
"(define-values"
"(get-linked-collections)"
"(lambda(links-path_0)"
"(begin"
"(call/ec"
"(lambda(esc_1)"
"(let-values(((make-handler_0)"
"(lambda(ts_0)"
"(begin"
" 'make-handler"
"(lambda(exn_2)"
"(begin"
"(if(exn:fail? exn_2)"
"(let-values(((l_80)(current-logger)))"
"(if(log-level? l_80 'error)"
"(let-values()"
"(log-message"
" l_80"
" 'error"
"(format"
"                                         \"error reading collection links file ~s: ~a\""
" links-path_0"
"(exn-message exn_2))"
"(current-continuation-marks)))"
"(void)))"
"(void))"
"(if ts_0"
"(let-values()(hash-set! links-cache links-path_0(cons ts_0 '#hasheq())))"
"(void))"
"(if(exn:fail? exn_2)(esc_1(make-hasheq)) exn_2)))))))"
"(call-with-exception-handler"
"(make-handler_0 #f)"
"(lambda()"
"(let-values(((links-stamp+cache_0)(hash-ref links-cache links-path_0 '(#f . #hasheq()))))"
"(let-values(((a-links-stamp_0)(car links-stamp+cache_0)))"
"(let-values(((ts_1)(file->stamp links-path_0 a-links-stamp_0)))"
"(if(equal? ts_1 a-links-stamp_0)"
"(let-values()(cdr links-stamp+cache_0))"
"(let-values()"
"(call-with-exception-handler"
"(make-handler_0 ts_1)"
"(lambda()"
"(call-with-default-reading-parameterization"
"(lambda()"
"(let-values(((v_203)"
"(if(no-file-stamp? ts_1)"
" null"
"(let-values(((links-path11_0) links-path_0)"
"((temp12_3)"
"(lambda(p_39)"
"(begin"
" 'temp12"
"(begin0"
"(1/read p_39)"
"(if(eof-object?(1/read p_39))"
"(void)"
"(let-values()"
"                                                                      (error \"expected a single S-expression\"))))))))"
"(call-with-input-file*61.1 'binary links-path11_0 temp12_3)))))"
"(let-values((()"
"(begin"
"(if(if(list? v_203)"
"(andmap2"
"(lambda(p_66)"
"(if(list? p_66)"
"(if(let-values(((or-part_226)(= 2(length p_66))))"
"(if or-part_226 or-part_226(= 3(length p_66))))"
"(if(let-values(((or-part_300)(string?(car p_66))))"
"(if or-part_300"
" or-part_300"
"(let-values(((or-part_301)"
"(eq? 'root(car p_66))))"
"(if or-part_301"
" or-part_301"
"(eq? 'static-root(car p_66))))))"
"(if(path-string?(cadr p_66))"
"(let-values(((or-part_302)(null?(cddr p_66))))"
"(if or-part_302 or-part_302(regexp?(caddr p_66))))"
" #f)"
" #f)"
" #f)"
" #f))"
" v_203)"
" #f)"
"(void)"
"                                                  (let-values () (error \"ill-formed content\")))"
"(values))))"
"(let-values(((ht_151)(make-hasheq)))"
"(let-values(((dir_0)"
"(let-values(((base_21 name_66 dir?_5)(split-path links-path_0)))"
" base_21)))"
"(begin"
"(for-each2"
"(lambda(p_67)"
"(if(let-values(((or-part_266)(null?(cddr p_67))))"
"(if or-part_266 or-part_266(regexp-match?(caddr p_67)(version))))"
"(let-values()"
"(let-values(((dir_1)"
"(simplify-path(path->complete-path(cadr p_67) dir_0))))"
"(if(eq?(car p_67) 'static-root)"
"(let-values()"
"(for-each2"
"(lambda(sub_1)"
"(if(directory-exists?(build-path dir_1 sub_1))"
"(let-values()"
"(let-values(((k_37)(string->symbol(path->string sub_1))))"
"(hash-set!"
" ht_151"
" k_37"
"(cons dir_1(hash-ref ht_151 k_37 null)))))"
"(void)))"
"(directory-list dir_1)))"
"(if(eq?(car p_67) 'root)"
"(let-values()"
"(begin"
"(if(hash-ref ht_151 #f #f)"
"(void)"
"(let-values()(hash-set! ht_151 #f null)))"
"(hash-for-each"
" ht_151"
"(lambda(k_38 v_204)"
"(hash-set! ht_151 k_38(cons dir_1 v_204))))))"
"(let-values()"
"(let-values(((s_485)(string->symbol(car p_67))))"
"(hash-set!"
" ht_151"
" s_485"
"(cons(box dir_1)(hash-ref ht_151 s_485 null)))))))))"
"(void)))"
" v_203)"
"(hash-for-each"
" ht_151"
"(lambda(k_39 v_205)(hash-set! ht_151 k_39(reverse$1 v_205))))"
"(hash-set! links-cache links-path_0(cons ts_1 ht_151))"
" ht_151))))))))))))))))))))))"
"(define-values"
"(normalize-collection-reference)"
"(lambda(collection_2 collection-path_2)"
"(begin"
"(if(string? collection_2)"
"(let-values()"
"          (let-values (((m_23) (regexp-match-positions '#rx\"/+\" collection_2)))"
"(if m_23"
"(if(=(caar m_23)(sub1(string-length collection_2)))"
"(let-values()(values(substring collection_2 0(caar m_23)) collection-path_2))"
"(let-values()"
"(values"
"(substring collection_2 0(caar m_23))"
"(cons(substring collection_2(cdar m_23)) collection-path_2))))"
"(values collection_2 collection-path_2))))"
"(let-values()"
"(let-values(((base_22 name_67 dir?_6)(split-path collection_2)))"
"(if(eq? base_22 'relative)"
"(values name_67 collection-path_2)"
"(normalize-collection-reference base_22(cons name_67 collection-path_2)))))))))"
"(define-values"
"(find-col-file)"
"(lambda(fail_5 collection-in_0 collection-path-in_0 file-name_1 check-compiled?_1)"
"(begin"
"(let-values(((collection_3 collection-path_3)"
"(normalize-collection-reference collection-in_0 collection-path-in_0)))"
"(let-values(((all-paths_0)"
"(let-values(((sym_96)"
"(string->symbol"
"(if(path? collection_3)(path->string collection_3) collection_3))))"
"((letrec-values(((loop_47)"
"(lambda(l_81)"
"(begin"
" 'loop"
"(if(null? l_81)"
"(let-values() null)"
"(if(not(car l_81))"
"(let-values()"
"(append(1/current-library-collection-paths)(loop_47(cdr l_81))))"
"(if(hash?(car l_81))"
"(let-values()"
"(append"
"(map2 box(hash-ref(car l_81) sym_96 null))"
"(hash-ref(car l_81) #f null)"
"(loop_47(cdr l_81))))"
"(let-values()"
"(let-values(((ht_152)(get-linked-collections(car l_81))))"
"(append"
"(hash-ref ht_152 sym_96 null)"
"(hash-ref ht_152 #f null)"
"(loop_47(cdr l_81))))))))))))"
" loop_47)"
"(1/current-library-collection-links)))))"
"(let-values(((done_1)(lambda(p_12)(begin 'done(if file-name_1(build-path p_12 file-name_1) p_12)))))"
"(let-values(((*build-path-rep_0)"
"(lambda(p_68 c_55)"
"(begin '*build-path-rep(if(path? p_68)(build-path p_68 c_55)(unbox p_68))))))"
"(let-values(((*directory-exists?_0)"
"(lambda(orig_0 p_50)"
"(begin '*directory-exists?(if(path? orig_0)(directory-exists? p_50) #t)))))"
"(let-values(((to-string_0)"
"(lambda(p_69)(begin 'to-string(if(path? p_69)(path->string p_69) p_69)))))"
"((letrec-values(((cloop_0)"
"(lambda(paths_1 found-col_0)"
"(begin"
" 'cloop"
"(if(null? paths_1)"
"(if found-col_0"
"(done_1 found-col_0)"
"(let-values(((rest-coll_0)"
"(if(null? collection-path_3)"
"                                                            \"\""
"(apply"
" string-append"
"((letrec-values(((loop_104)"
"(lambda(cp_0)"
"(begin"
" 'loop"
"(if(null?(cdr cp_0))"
"(list(to-string_0(car cp_0)))"
"(list*"
"(to-string_0(car cp_0))"
"                                                                                      \"/\""
"(loop_104(cdr cp_0))))))))"
" loop_104)"
" collection-path_3)))))"
"(letrec-values(((filter_1)"
"(lambda(f_40 l_82)"
"(begin"
" 'filter"
"(if(null? l_82)"
" null"
"(if(f_40(car l_82))"
"(cons(car l_82)(filter_1 f_40(cdr l_82)))"
"(filter_1 f_40(cdr l_82))))))))"
"(fail_5"
"(format"
"                                                  \"collection not found\\n  collection: ~s\\n  in collection directories:~a~a\""
"(if(null? collection-path_3)"
"(to-string_0 collection_3)"
"                                                    (string-append (to-string_0 collection_3) \"/\" rest-coll_0))"
"(apply"
" string-append"
"(map2"
"                                                    (lambda (p_70) (format \"\\n ~a ~a\" \" \" p_70))"
"(let-values(((len_34)(length all-paths_0))"
"((clen_0)"
"(length(1/current-library-collection-paths))))"
"(if(<(- len_34 clen_0) 5)"
" all-paths_0"
"(append"
"(1/current-library-collection-paths)"
"(list"
"(format"
"                                                           \"... [~a additional linked and package directories]\""
"(- len_34 clen_0))))))))"
"(if(ormap2 box? all-paths_0)"
"(format"
"                                                     \"\\n   sub-collection: ~s\\n  in parent directories:~a\""
" rest-coll_0"
"(apply"
" string-append"
"(map2"
"                                                       (lambda (p_71) (format \"\\n   ~a\" (unbox p_71)))"
"(filter_1 box? all-paths_0))))"
"                                                    \"\"))))))"
"(let-values(((dir_2)(*build-path-rep_0(car paths_1) collection_3)))"
"(if(*directory-exists?_0(car paths_1) dir_2)"
"(let-values(((cpath_0)(apply build-path dir_2 collection-path_3)))"
"(if(if(null? collection-path_3) #t(directory-exists? cpath_0))"
"(if file-name_1"
"(if(let-values(((or-part_303)"
"(file-exists?/maybe-compiled"
" cpath_0"
" file-name_1"
" check-compiled?_1)))"
"(if or-part_303"
" or-part_303"
"(let-values(((alt-file-name_0)"
"(let-values(((file-name_2)"
"(if(path? file-name_1)"
"(path->string file-name_1)"
" file-name_1)))"
"(let-values(((len_35)"
"(string-length file-name_2)))"
"(if(>= len_35 4)"
"(if(string=?"
"                                                                                     \".rkt\""
"(substring"
" file-name_2"
"(- len_35 4)))"
"(string-append"
"(substring"
" file-name_2"
" 0"
"(- len_35 4))"
"                                                                                   \".ss\")"
" #f)"
" #f)))))"
"(if alt-file-name_0"
"(file-exists?/maybe-compiled"
" cpath_0"
" alt-file-name_0"
" check-compiled?_1)"
" #f))))"
"(done_1 cpath_0)"
"(cloop_0"
"(cdr paths_1)"
"(let-values(((or-part_100) found-col_0))"
"(if or-part_100 or-part_100 cpath_0))))"
"(done_1 cpath_0))"
"(cloop_0(cdr paths_1) found-col_0)))"
"(cloop_0(cdr paths_1) found-col_0))))))))"
" cloop_0)"
" all-paths_0"
" #f))))))))))"
"(define-values"
"(file-exists?/maybe-compiled)"
"(lambda(dir_3 path_10 check-compiled?_2)"
"(begin"
"(let-values(((or-part_101)(file-exists?(build-path dir_3 path_10))))"
"(if or-part_101"
" or-part_101"
"(if check-compiled?_2"
"            (let-values (((try-path_0) (path-add-extension path_10 #\".zo\"))"
"((modes_0)(1/use-compiled-file-paths))"
"((roots_0)(1/current-compiled-file-roots)))"
"(ormap2"
"(lambda(d_35)"
"(ormap2"
"(lambda(mode_16)"
"(file-exists?"
"(let-values(((p_72)(build-path dir_3 mode_16 try-path_0)))"
"(if(eq? d_35 'same)"
"(let-values() p_72)"
"(if(relative-path? d_35)"
"(let-values()(build-path p_72 d_35))"
"(let-values()(reroot-path p_72 d_35)))))))"
" modes_0))"
" roots_0))"
" #f))))))"
"(define-values"
"(1/find-library-collection-paths)"
"(let-values(((find-library-collection-paths3_0)"
"(lambda(extra-collects-dirs1_0 post-collects-dirs2_0)"
"(begin"
" 'find-library-collection-paths3"
"(let-values(((extra-collects-dirs_0) extra-collects-dirs1_0))"
"(let-values(((post-collects-dirs_0) post-collects-dirs2_0))"
"(let-values()"
"(let-values(((user-too?_0)(1/use-user-specific-search-paths))"
"((cons-if_0)"
"(lambda(f_41 r_45)(begin 'cons-if(if f_41(cons f_41 r_45) r_45))))"
"((config-table_1)(get-config-table(find-main-config))))"
"(path-list-string->path-list"
"(if user-too?_0"
"(let-values(((c_56)"
"(environment-variables-ref"
"(current-environment-variables)"
"                                              #\"PLTCOLLECTS\")))"
"                                 (if c_56 (bytes->string/locale c_56 '#\\?) \"\"))"
"                               \"\")"
"(add-config-search"
" config-table_1"
" 'collects-search-dirs"
"(cons-if_0"
"(if user-too?_0"
"(build-path"
"(find-system-path 'addon-dir)"
"(get-installation-name config-table_1)"
"                                  \"collects\")"
" #f)"
"((letrec-values(((loop_105)"
"(lambda(l_83)"
"(begin"
" 'loop"
"(if(null? l_83)"
" null"
"(let-values(((collects-path_1)(car l_83)))"
"(let-values(((v_206)"
"(exe-relative-path->complete-path"
" collects-path_1)))"
"(if v_206"
"(cons"
"(simplify-path"
"(path->complete-path v_206(current-directory)))"
"(loop_105(cdr l_83)))"
"(loop_105(cdr l_83))))))))))"
" loop_105)"
"(append"
" extra-collects-dirs_0"
"(list(find-system-path 'collects-dir))"
" post-collects-dirs_0)))))))))))))"
"(case-lambda"
"(()(begin 'find-library-collection-paths(find-library-collection-paths3_0 null null)))"
"((extra-collects-dirs_1 post-collects-dirs2_1)"
"(find-library-collection-paths3_0 extra-collects-dirs_1 post-collects-dirs2_1))"
"((extra-collects-dirs1_1)(find-library-collection-paths3_0 extra-collects-dirs1_1 null)))))"
"(define-values(prop:readtable prop:readtable? prop:readtable-ref)(make-struct-type-property 'readtable))"
"(define-values"
"(1/current-readtable)"
"(let-values()"
"(let-values()"
"(make-parameter"
" #f"
"(lambda(v_207)"
"(begin"
"(if((lambda(x_83)"
"(let-values(((or-part_11)(not x_83)))(if or-part_11 or-part_11(prop:readtable? x_83))))"
" v_207)"
"(void)"
"             (let-values () (raise-argument-error 'current-readtable \"(or/c prop:readtable? #f)\" v_207)))"
" v_207))))))"
"(define-values"
"(struct:read-config/outer"
" read-config/outer1.1"
" read-config/outer?"
" read-config/outer-inner"
" read-config/outer-wrap"
" read-config/outer-line"
" read-config/outer-col"
" read-config/outer-pos"
" read-config/outer-indentations"
" read-config/outer-keep-comment?)"
"(let-values(((struct:_36 make-_36 ?_36 -ref_36 -set!_36)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config"
" #f"
" 7"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6)"
" #f"
" 'read-config/outer)))))"
"(values"
" struct:_36"
" make-_36"
" ?_36"
"(make-struct-field-accessor -ref_36 0 'inner)"
"(make-struct-field-accessor -ref_36 1 'wrap)"
"(make-struct-field-accessor -ref_36 2 'line)"
"(make-struct-field-accessor -ref_36 3 'col)"
"(make-struct-field-accessor -ref_36 4 'pos)"
"(make-struct-field-accessor -ref_36 5 'indentations)"
"(make-struct-field-accessor -ref_36 6 'keep-comment?))))"
"(define-values"
"(struct:read-config/inner"
" read-config/inner2.1"
" read-config/inner?"
" read-config/inner-readtable"
" read-config/inner-next-readtable"
" read-config/inner-for-syntax?"
" read-config/inner-source"
" read-config/inner-read-compiled"
" read-config/inner-dynamic-require"
" read-config/inner-module-declared?"
" read-config/inner-coerce"
" read-config/inner-coerce-key"
" read-config/inner-parameter-override"
" read-config/inner-parameter-cache"
" read-config/inner-st)"
"(let-values(((struct:_81 make-_81 ?_81 -ref_81 -set!_81)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config/inner"
" #f"
" 12"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3 4 5 6 7 8 9 10 11)"
" #f"
" 'read-config/inner)))))"
"(values"
" struct:_81"
" make-_81"
" ?_81"
"(make-struct-field-accessor -ref_81 0 'readtable)"
"(make-struct-field-accessor -ref_81 1 'next-readtable)"
"(make-struct-field-accessor -ref_81 2 'for-syntax?)"
"(make-struct-field-accessor -ref_81 3 'source)"
"(make-struct-field-accessor -ref_81 4 'read-compiled)"
"(make-struct-field-accessor -ref_81 5 'dynamic-require)"
"(make-struct-field-accessor -ref_81 6 'module-declared?)"
"(make-struct-field-accessor -ref_81 7 'coerce)"
"(make-struct-field-accessor -ref_81 8 'coerce-key)"
"(make-struct-field-accessor -ref_81 9 'parameter-override)"
"(make-struct-field-accessor -ref_81 10 'parameter-cache)"
"(make-struct-field-accessor -ref_81 11 'st))))"
"(define-values"
"(read-config/make)"
"(lambda(readtable_0"
" next-readtable_0"
" for-syntax?_0"
" source_1"
" wrap_3"
" read-compiled_0"
" dynamic-require_0"
" module-declared?_0"
" coerce_0"
" coerce-key_0"
" line_1"
" col_0"
" pos_108"
" indentations_0"
" keep-comment?_0"
" parameter-override_0"
" parameter-cache_0"
" st_0)"
"(begin"
"(read-config/outer1.1"
"(read-config/inner2.1"
" readtable_0"
" next-readtable_0"
" for-syntax?_0"
" source_1"
" read-compiled_0"
" dynamic-require_0"
" module-declared?_0"
" coerce_0"
" coerce-key_0"
" parameter-override_0"
" parameter-cache_0"
" st_0)"
" wrap_3"
" line_1"
" col_0"
" pos_108"
" indentations_0"
" keep-comment?_0))))"
"(define-values(read-config-wrap)(lambda(v_27)(begin(read-config/outer-wrap v_27))))"
"(define-values(read-config-line)(lambda(v_208)(begin(read-config/outer-line v_208))))"
"(define-values(read-config-col)(lambda(v_209)(begin(read-config/outer-col v_209))))"
"(define-values(read-config-pos)(lambda(v_210)(begin(read-config/outer-pos v_210))))"
"(define-values(read-config-indentations)(lambda(v_211)(begin(read-config/outer-indentations v_211))))"
"(define-values(read-config-keep-comment?)(lambda(v_98)(begin(read-config/outer-keep-comment? v_98))))"
"(define-values"
"(read-config-readtable)"
"(lambda(v_212)(begin(read-config/inner-readtable(read-config/outer-inner v_212)))))"
"(define-values"
"(read-config-next-readtable)"
"(lambda(v_213)(begin(read-config/inner-next-readtable(read-config/outer-inner v_213)))))"
"(define-values"
"(read-config-for-syntax?)"
"(lambda(v_214)(begin(read-config/inner-for-syntax?(read-config/outer-inner v_214)))))"
"(define-values(read-config-source)(lambda(v_76)(begin(read-config/inner-source(read-config/outer-inner v_76)))))"
"(define-values"
"(read-config-read-compiled)"
"(lambda(v_215)(begin(read-config/inner-read-compiled(read-config/outer-inner v_215)))))"
"(define-values"
"(read-config-dynamic-require)"
"(lambda(v_216)(begin(read-config/inner-dynamic-require(read-config/outer-inner v_216)))))"
"(define-values"
"(read-config-module-declared?)"
"(lambda(v_217)(begin(read-config/inner-module-declared?(read-config/outer-inner v_217)))))"
"(define-values"
"(read-config-coerce)"
"(lambda(v_206)(begin(read-config/inner-coerce(read-config/outer-inner v_206)))))"
"(define-values"
"(read-config-coerce-key)"
"(lambda(v_218)(begin(read-config/inner-coerce-key(read-config/outer-inner v_218)))))"
"(define-values"
"(read-config-parameter-override)"
"(lambda(v_219)(begin(read-config/inner-parameter-override(read-config/outer-inner v_219)))))"
"(define-values"
"(read-config-parameter-cache)"
"(lambda(v_40)(begin(read-config/inner-parameter-cache(read-config/outer-inner v_40)))))"
"(define-values(read-config-st)(lambda(v_220)(begin(read-config/inner-st(read-config/outer-inner v_220)))))"
"(define-values"
"(struct:read-config-state"
" read-config-state3.1"
" read-config-state?"
" read-config-state-accum-str"
" read-config-state-graph"
" set-read-config-state-accum-str!"
" set-read-config-state-graph!)"
"(let-values(((struct:_82 make-_82 ?_82 -ref_82 -set!_82)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'read-config-state"
" #f"
" 2"
" 0"
" #f"
" null"
"(current-inspector)"
" #f"
" '()"
" #f"
" 'read-config-state)))))"
"(values"
" struct:_82"
" make-_82"
" ?_82"
"(make-struct-field-accessor -ref_82 0 'accum-str)"
"(make-struct-field-accessor -ref_82 1 'graph)"
"(make-struct-field-mutator -set!_82 0 'accum-str)"
"(make-struct-field-mutator -set!_82 1 'graph))))"
"(define-values(current-read-config)(make-parameter #f))"
"(define-values"
"(make-read-config26.1)"
"(lambda(coerce12_0"
" coerce-key13_0"
" dynamic-require10_1"
" for-syntax?5_0"
" keep-comment?14_0"
" module-declared?11_0"
" next-readtable7_0"
" read-compiled9_0"
" readtable6_0"
" source4_0"
" wrap8_0)"
"(begin"
" 'make-read-config26"
"(let-values(((source_2) source4_0))"
"(let-values(((for-syntax?_1) for-syntax?5_0))"
"(let-values(((readtable_1)(if(eq? readtable6_0 unsafe-undefined)(1/current-readtable) readtable6_0)))"
"(let-values(((next-readtable_1)"
"(if(eq? next-readtable7_0 unsafe-undefined) readtable_1 next-readtable7_0)))"
"(let-values(((wrap_4) wrap8_0))"
"(let-values(((read-compiled_1) read-compiled9_0))"
"(let-values(((dynamic-require_1) dynamic-require10_1))"
"(let-values(((module-declared?_1) module-declared?11_0))"
"(let-values(((coerce_1) coerce12_0))"
"(let-values(((coerce-key_1) coerce-key13_0))"
"(let-values(((keep-comment?_1) keep-comment?14_0))"
"(let-values()"
"(read-config/make"
" readtable_1"
" next-readtable_1"
" for-syntax?_1"
" source_2"
" wrap_4"
"(let-values(((or-part_52) read-compiled_1))"
"                                 (if or-part_52 or-part_52 (lambda (in_0) (error 'read \"no `read-compiled` provided\"))))"
"(let-values(((or-part_304) dynamic-require_1))"
"(if or-part_304"
" or-part_304"
"(lambda(mod-path_26 sym_97 failure-k_0)"
"                                     (error 'read \"no `dynamic-require` provided\"))))"
"(let-values(((or-part_178) module-declared?_1))"
"(if or-part_178"
" or-part_178"
"                                   (lambda (mod-path_27) (error 'read \"no `module-declare?` provided\"))))"
"(let-values(((or-part_221) coerce_1))"
"(if or-part_221 or-part_221(lambda(for-syntax?_2 v_144 srcloc_9) v_144)))"
"(let-values(((or-part_305) coerce-key_1))"
"(if or-part_305 or-part_305(lambda(for-syntax?_3 v_102) v_102)))"
" #f"
" #f"
" #f"
" null"
" keep-comment?_1"
" '#hasheq()"
"(make-hasheq)"
"(read-config-state3.1 #f #f)))))))))))))))))"
"(define-values"
"(read-config-update42.1)"
"(lambda(for-syntax?29_0 keep-comment?34_0 next-readtable32_0 readtable31_0 reset-graph?33_0 wrap30_0 config41_0)"
"(begin"
" 'read-config-update42"
"(let-values(((config_0) config41_0))"
"(let-values(((for-syntax?_4) for-syntax?29_0))"
"(let-values(((wrap_5) wrap30_0))"
"(let-values(((readtable_2) readtable31_0))"
"(let-values(((next-readtable_2)"
"(if(eq? next-readtable32_0 unsafe-undefined)"
"(read-config-readtable config_0)"
" next-readtable32_0)))"
"(let-values(((local-graph?_0) reset-graph?33_0))"
"(let-values(((keep-comment?_2) keep-comment?34_0))"
"(let-values()"
"(let-values(((v_221) config_0))"
"(let-values(((the-struct_78) v_221))"
"(if(read-config/outer? the-struct_78)"
"(let-values(((wrap55_0) wrap_5)"
"((keep-comment?56_0) keep-comment?_2)"
"((inner57_0)"
"(let-values(((the-struct_79)(read-config/outer-inner v_221)))"
"(if(read-config/inner? the-struct_79)"
"(let-values(((for-syntax?58_0) for-syntax?_4)"
"((readtable59_0) readtable_2)"
"((next-readtable60_0) next-readtable_2)"
"((st61_0)"
"(if local-graph?_0"
"(read-config-state3.1 #f #f)"
"(read-config-st config_0))))"
"(read-config/inner2.1"
" readtable59_0"
" next-readtable60_0"
" for-syntax?58_0"
"(read-config/inner-source the-struct_79)"
"(read-config/inner-read-compiled the-struct_79)"
"(read-config/inner-dynamic-require the-struct_79)"
"(read-config/inner-module-declared? the-struct_79)"
"(read-config/inner-coerce the-struct_79)"
"(read-config/inner-coerce-key the-struct_79)"
"(read-config/inner-parameter-override the-struct_79)"
"(read-config/inner-parameter-cache the-struct_79)"
" st61_0))"
"                                              (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_79)))))"
"(read-config/outer1.1"
" inner57_0"
" wrap55_0"
"(read-config/outer-line the-struct_78)"
"(read-config/outer-col the-struct_78)"
"(read-config/outer-pos the-struct_78)"
"(read-config/outer-indentations the-struct_78)"
" keep-comment?56_0))"
"                            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_78)))))))))))))))"
"(define-values"
"(port+config->srcloc49.1)"
"(lambda(end-pos45_0 in47_0 config48_0)"
"(begin"
" 'port+config->srcloc49"
"(let-values(((in_1) in47_0))"
"(let-values(((config_1) config48_0))"
"(let-values(((given-end-pos_0) end-pos45_0))"
"(let-values()"
"(let-values(((end-pos_0)"
"(let-values(((or-part_282) given-end-pos_0))"
"(if or-part_282"
" or-part_282"
"(let-values(((end-line_0 end-col_0 end-pos_1)(port-next-location in_1)))"
" end-pos_1)))))"
"(srcloc"
"(let-values(((or-part_306)(read-config-source config_1)))"
"(if or-part_306"
" or-part_306"
"                     (let-values (((or-part_307) (object-name in_1))) (if or-part_307 or-part_307 \"UNKNOWN\"))))"
"(read-config-line config_1)"
"(read-config-col config_1)"
"(read-config-pos config_1)"
"(if(read-config-pos config_1)"
"(if end-pos_0(max 0(- end-pos_0(read-config-pos config_1))) #f)"
" #f))))))))))"
"(define-values"
"(reading-at)"
"(lambda(config_2 line_2 col_1 pos_109)"
"(begin"
"(let-values(((v_222) config_2))"
"(let-values(((the-struct_80) v_222))"
"(if(read-config/outer? the-struct_80)"
"(let-values(((line62_0) line_2)"
"((col63_0) col_1)"
"((pos64_0) pos_109)"
"((inner65_0)(read-config/outer-inner v_222)))"
"(read-config/outer1.1"
" inner65_0"
"(read-config/outer-wrap the-struct_80)"
" line62_0"
" col63_0"
" pos64_0"
"(read-config/outer-indentations the-struct_80)"
"(read-config/outer-keep-comment? the-struct_80)))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_80)))))))"
"(define-values"
"(disable-wrapping)"
"(lambda(config_3)"
"(begin"
"(let-values(((v_223) config_3))"
"(let-values(((the-struct_81) v_223))"
"(if(read-config/outer? the-struct_81)"
"(let-values(((wrap66_0) #f)((inner67_0)(read-config/outer-inner v_223)))"
"(read-config/outer1.1"
" inner67_0"
" wrap66_0"
"(read-config/outer-line the-struct_81)"
"(read-config/outer-col the-struct_81)"
"(read-config/outer-pos the-struct_81)"
"(read-config/outer-indentations the-struct_81)"
"(read-config/outer-keep-comment? the-struct_81)))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_81)))))))"
"(define-values"
"(keep-comment)"
"(lambda(config_4)"
"(begin"
"(let-values(((v_224) config_4))"
"(let-values(((the-struct_82) v_224))"
"(if(read-config/outer? the-struct_82)"
"(let-values(((keep-comment?68_0) #t)((inner69_0)(read-config/outer-inner v_224)))"
"(read-config/outer1.1"
" inner69_0"
"(read-config/outer-wrap the-struct_82)"
"(read-config/outer-line the-struct_82)"
"(read-config/outer-col the-struct_82)"
"(read-config/outer-pos the-struct_82)"
"(read-config/outer-indentations the-struct_82)"
" keep-comment?68_0))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_82)))))))"
"(define-values"
"(discard-comment)"
"(lambda(config_5)"
"(begin"
"(if(not(read-config-keep-comment? config_5))"
"(let-values() config_5)"
"(let-values()"
"(let-values(((v_81) config_5))"
"(let-values(((the-struct_83) v_81))"
"(if(read-config/outer? the-struct_83)"
"(let-values(((keep-comment?70_0) #f)((inner71_0)(read-config/outer-inner v_81)))"
"(read-config/outer1.1"
" inner71_0"
"(read-config/outer-wrap the-struct_83)"
"(read-config/outer-line the-struct_83)"
"(read-config/outer-col the-struct_83)"
"(read-config/outer-pos the-struct_83)"
"(read-config/outer-indentations the-struct_83)"
" keep-comment?70_0))"
"                (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_83)))))))))"
"(define-values"
"(next-readtable)"
"(lambda(config_6)"
"(begin"
"(if(eq?(read-config-readtable config_6)(read-config-next-readtable config_6))"
"(let-values() config_6)"
"(let-values()"
"(let-values(((v_225) config_6))"
"(let-values(((the-struct_84) v_225))"
"(if(read-config/outer? the-struct_84)"
"(let-values(((inner72_0)"
"(let-values(((the-struct_85)(read-config/outer-inner v_225)))"
"(if(read-config/inner? the-struct_85)"
"(let-values(((readtable73_0)(read-config-next-readtable config_6)))"
"(read-config/inner2.1"
" readtable73_0"
"(read-config/inner-next-readtable the-struct_85)"
"(read-config/inner-for-syntax? the-struct_85)"
"(read-config/inner-source the-struct_85)"
"(read-config/inner-read-compiled the-struct_85)"
"(read-config/inner-dynamic-require the-struct_85)"
"(read-config/inner-module-declared? the-struct_85)"
"(read-config/inner-coerce the-struct_85)"
"(read-config/inner-coerce-key the-struct_85)"
"(read-config/inner-parameter-override the-struct_85)"
"(read-config/inner-parameter-cache the-struct_85)"
"(read-config/inner-st the-struct_85)))"
"                                  (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_85)))))"
"(read-config/outer1.1"
" inner72_0"
"(read-config/outer-wrap the-struct_84)"
"(read-config/outer-line the-struct_84)"
"(read-config/outer-col the-struct_84)"
"(read-config/outer-pos the-struct_84)"
"(read-config/outer-indentations the-struct_84)"
"(read-config/outer-keep-comment? the-struct_84)))"
"                (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_84)))))))))"
"(define-values"
"(coerce)"
"(lambda(val_78 in_2 config_7)"
"(begin"
"(let-values(((for-syntax?_5)(read-config-for-syntax? config_7)))"
"((read-config-coerce config_7)"
" for-syntax?_5"
" val_78"
"(if for-syntax?_5"
"(let-values(((in1_0) in_2)((config2_0) config_7))(port+config->srcloc49.1 #f in1_0 config2_0))"
" #f))))))"
"(define-values(default-reader-guard$1)(lambda(v_226)(begin 'default-reader-guard v_226)))"
"(define-values"
"(1/current-reader-guard)"
"(make-parameter"
" default-reader-guard$1"
"(lambda(v_227)"
"(begin"
"(if(if(procedure? v_227)(procedure-arity-includes? v_227 1) #f)"
"(void)"
"         (let-values () (raise-argument-error 'current-reader-guard \"(procedure-arity-includes/c 1)\" v_227)))"
" v_227))))"
"(define-values(1/read-square-bracket-as-paren)(make-parameter #t(lambda(v_1)(if v_1 #t #f))))"
"(define-values(1/read-curly-brace-as-paren)(make-parameter #t(lambda(v_228)(if v_228 #t #f))))"
"(define-values(1/read-square-bracket-with-tag)(make-parameter #f(lambda(v_229)(if v_229 #t #f))))"
"(define-values(1/read-curly-brace-with-tag)(make-parameter #f(lambda(v_66)(if v_66 #t #f))))"
"(define-values(1/read-cdot)(make-parameter #f(lambda(v_31)(if v_31 #t #f))))"
"(define-values(1/read-accept-graph)(make-parameter #t(lambda(v_67)(if v_67 #t #f))))"
"(define-values(1/read-accept-compiled)(make-parameter #f(lambda(v_2)(if v_2 #t #f))))"
"(define-values(1/read-accept-box)(make-parameter #t(lambda(v_230)(if v_230 #t #f))))"
"(define-values(1/read-decimal-as-inexact)(make-parameter #t(lambda(v_231)(if v_231 #t #f))))"
"(define-values(1/read-accept-dot)(make-parameter #t(lambda(v_68)(if v_68 #t #f))))"
"(define-values(1/read-accept-infix-dot)(make-parameter #t(lambda(v_32)(if v_32 #t #f))))"
"(define-values(1/read-accept-quasiquote)(make-parameter #t(lambda(v_3)(if v_3 #t #f))))"
"(define-values(1/read-accept-reader)(make-parameter #f(lambda(v_33)(if v_33 #t #f))))"
"(define-values(1/read-accept-lang)(make-parameter #t(lambda(v_4)(if v_4 #t #f))))"
"(define-values(unknown)(gensym 'unknown))"
"(define-values"
"(check-parameter)"
"(lambda(param_0 config_8)"
"(begin"
"(let-values(((cache_4)(read-config-parameter-cache config_8)))"
"(let-values(((v_70)"
"(hash-ref(read-config-parameter-override config_8) param_0(hash-ref cache_4 param_0 unknown))))"
"(if(eq? v_70 unknown)"
"(let-values()(let-values(((v_71)(param_0)))(begin(hash-set! cache_4 param_0 v_71) v_71)))"
"(let-values() v_70)))))))"
"(define-values"
"(override-parameter)"
"(lambda(param_1 config_9 v_30)"
"(begin"
"(let-values(((v_232) config_9))"
"(let-values(((the-struct_86) v_232))"
"(if(read-config/outer? the-struct_86)"
"(let-values(((inner1_0)"
"(let-values(((the-struct_87)(read-config/outer-inner v_232)))"
"(if(read-config/inner? the-struct_87)"
"(let-values(((parameter-override2_0)"
"(hash-set(read-config-parameter-override config_9) param_1 v_30)))"
"(read-config/inner2.1"
"(read-config/inner-readtable the-struct_87)"
"(read-config/inner-next-readtable the-struct_87)"
"(read-config/inner-for-syntax? the-struct_87)"
"(read-config/inner-source the-struct_87)"
"(read-config/inner-read-compiled the-struct_87)"
"(read-config/inner-dynamic-require the-struct_87)"
"(read-config/inner-module-declared? the-struct_87)"
"(read-config/inner-coerce the-struct_87)"
"(read-config/inner-coerce-key the-struct_87)"
" parameter-override2_0"
"(read-config/inner-parameter-cache the-struct_87)"
"(read-config/inner-st the-struct_87)))"
"                              (raise-argument-error 'struct-copy \"read-config/inner?\" the-struct_87)))))"
"(read-config/outer1.1"
" inner1_0"
"(read-config/outer-wrap the-struct_86)"
"(read-config/outer-line the-struct_86)"
"(read-config/outer-col the-struct_86)"
"(read-config/outer-pos the-struct_86)"
"(read-config/outer-indentations the-struct_86)"
"(read-config/outer-keep-comment? the-struct_86)))"
"            (raise-argument-error 'struct-copy \"read-config/outer?\" the-struct_86)))))))"
"(define-values"
"(force-parameters!)"
"(lambda(config_10)"
"(begin"
"(let-values(((cache_5)(read-config-parameter-cache config_10)))"
"(if(hash-ref cache_5 'all-forced #f)"
"(void)"
"(let-values()"
"(begin"
"(hash-set! cache_5 'all-forced #t)"
"(check-parameter read-case-sensitive config_10)"
"(check-parameter 1/read-square-bracket-as-paren config_10)"
"(check-parameter 1/read-curly-brace-as-paren config_10)"
"(check-parameter 1/read-square-bracket-with-tag config_10)"
"(check-parameter 1/read-curly-brace-with-tag config_10)"
"(check-parameter 1/read-cdot config_10)"
"(check-parameter 1/read-accept-graph config_10)"
"(check-parameter 1/read-accept-compiled config_10)"
"(check-parameter 1/read-accept-box config_10)"
"(check-parameter read-accept-bar-quote config_10)"
"(check-parameter 1/read-decimal-as-inexact config_10)"
"(check-parameter 1/read-accept-dot config_10)"
"(check-parameter 1/read-accept-infix-dot config_10)"
"(check-parameter 1/read-accept-quasiquote config_10)"
"(check-parameter 1/read-accept-reader config_10)"
"(check-parameter 1/read-accept-lang config_10))))))))"
"(define-values"
"(struct:special-comment 1/make-special-comment 1/special-comment? 1/special-comment-value)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'special-comment"
" #f"
" 1"
" 0"
" #f"
"(list(cons prop:authentic #t))"
"(current-inspector)"
" #f"
" '(0)"
" #f"
" 'make-special-comment)))))"
"(values struct:_0 make-_0 ?_0(make-struct-field-accessor -ref_0 0 'value))))"
"(define-values"
"(struct:readtable"
" readtable1.1"
" 1/readtable?"
" readtable-symbol-parser"
" readtable-char-ht"
" readtable-dispatch-ht"
" readtable-delimiter-ht)"
"(let-values(((struct:_23 make-_23 ?_23 -ref_23 -set!_23)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'readtable"
" #f"
" 4"
" 0"
" #f"
"(list(cons prop:readtable #t))"
"(current-inspector)"
" #f"
" '(0 1 2 3)"
" #f"
" 'readtable)))))"
"(values"
" struct:_23"
" make-_23"
" ?_23"
"(make-struct-field-accessor -ref_23 0 'symbol-parser)"
"(make-struct-field-accessor -ref_23 1 'char-ht)"
"(make-struct-field-accessor -ref_23 2 'dispatch-ht)"
"(make-struct-field-accessor -ref_23 3 'delimiter-ht))))"
"(define-values"
"(1/make-readtable)"
"(lambda(rt_0 . args_7)"
"(begin"
" 'make-readtable"
"(begin"
"(if(let-values(((or-part_53)(not rt_0)))(if or-part_53 or-part_53(1/readtable? rt_0)))"
"(void)"
"          (let-values () (raise-argument-error 'make-readtable \"(or/c readtable? #f)\" rt_0)))"
"((letrec-values(((loop_99)"
"(lambda(args_8 symbol-parser_0 char-ht_0 dispatch-ht_0 delimiter-ht_0)"
"(begin"
" 'loop"
"(if(null? args_8)"
"(let-values()(readtable1.1 symbol-parser_0 char-ht_0 dispatch-ht_0 delimiter-ht_0))"
"(let-values()"
"(let-values(((key_84)(car args_8)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_165)(not key_84)))"
"(if or-part_165 or-part_165(char? key_84)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                         \"(or/c char? #f)\""
" key_84)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(null? args_8)"
"(let-values()"
"(if key_84"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"(string-append"
"                                                                \"expected 'terminating-macro, 'non-terminating-macro, 'dispatch-macro,\""
"                                                                \" or character argument after character argument\")"
"                                                               \"character\""
" key_84))"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"                                                               \"expected 'non-terminating-macro after #f\"))))"
"(void))"
"(values))))"
"(let-values(((mode_17)(cadr args_8)))"
"(let-values((()"
"(begin"
"(if key_84"
"(let-values()"
"(if(let-values(((or-part_259)"
"(eq? mode_17 'terminating-macro)))"
"(if or-part_259"
" or-part_259"
"(let-values(((or-part_260)"
"(eq?"
" mode_17"
" 'non-terminating-macro)))"
"(if or-part_260"
" or-part_260"
"(let-values(((or-part_295)"
"(eq? mode_17 'dispatch-macro)))"
"(if or-part_295"
" or-part_295"
"(char? mode_17)))))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                   \"(or/c 'terminating-macro 'non-terminating-macro 'dispatch-macro char?)\""
" mode_17))))"
"(let-values()"
"(if(eq? mode_17 'non-terminating-macro)"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"                                                                   \"expected 'non-terminating-macro after #f\")))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(null?(cddr args_8))"
"(let-values()"
"(raise-arguments-error"
" 'make-readtable"
"(if key_84"
"                                                                   \"expected readtable or #f argument after character argument\""
"                                                                   \"expected procedure argument after symbol argument\")"
"                                                                 \"given\""
" mode_17))"
"(void))"
"(values))))"
"(let-values(((target_0)(caddr args_8)))"
"(let-values(((rest-args_0)(cdddr args_8)))"
"(if(not key_84)"
"(let-values()"
"(begin"
"(if(if(procedure? target_0)"
"(procedure-arity-includes? target_0 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                             \"(procedure-arity-includes/c 6)\""
" target_0)))"
"(loop_99"
" rest-args_0"
" target_0"
" char-ht_0"
" dispatch-ht_0"
" delimiter-ht_0)))"
"(if(eq? mode_17 'dispatch-macro)"
"(let-values()"
"(begin"
"(if(if(procedure? target_0)"
"(procedure-arity-includes? target_0 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                               \"(procedure-arity-includes/c 6)\""
" target_0)))"
"(loop_99"
" rest-args_0"
" symbol-parser_0"
" char-ht_0"
"(hash-set dispatch-ht_0 key_84 target_0)"
" delimiter-ht_0)))"
"(if(char? mode_17)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_287)"
"(not target_0)))"
"(if or-part_287"
" or-part_287"
"(1/readtable? target_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                               \"(or/c readtable? #f)\""
" target_0)))"
"(values))))"
"(let-values(((actual-target_0)"
"(let-values(((or-part_22)"
"(if target_0"
"(hash-ref"
"(readtable-char-ht target_0)"
" mode_17"
" #f)"
" #f)))"
"(if or-part_22 or-part_22 mode_17))))"
"(let-values(((new-char-ht_0)"
"(if actual-target_0"
"(hash-set"
" char-ht_0"
" key_84"
" actual-target_0)"
"(hash-remove char-ht_0 key_84))))"
"(let-values(((new-delimiter-ht_0)"
"(hash-set"
" delimiter-ht_0"
" key_84"
"(if target_0"
"(hash-ref"
"(readtable-delimiter-ht target_0)"
" mode_17"
" mode_17)"
" mode_17))))"
"(loop_99"
" rest-args_0"
" symbol-parser_0"
" new-char-ht_0"
" dispatch-ht_0"
" new-delimiter-ht_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(procedure? target_0)"
"(procedure-arity-includes? target_0 6)"
" #f)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'make-readtable"
"                                                                               \"(procedure-arity-includes/c 6)\""
" target_0)))"
"(values))))"
"(let-values(((new-char-ht_1)"
"(hash-set char-ht_0 key_84 target_0)))"
"(let-values(((new-delimiter-ht_1)"
"(hash-set"
" delimiter-ht_0"
" key_84"
"(if(eq? mode_17 'terminating-macro)"
" 'delimit"
" 'no-delimit))))"
"(loop_99"
" rest-args_0"
" symbol-parser_0"
" new-char-ht_1"
" dispatch-ht_0"
" new-delimiter-ht_1))))))))))))))))))))))"
" loop_99)"
" args_7"
"(if rt_0(readtable-symbol-parser rt_0) #f)"
"(if rt_0(readtable-char-ht rt_0) '#hasheqv())"
"(if rt_0(readtable-dispatch-ht rt_0) '#hasheqv())"
"(if rt_0(readtable-delimiter-ht rt_0) '#hasheqv()))))))"
"(define-values"
"(*readtable-effective-char)"
"(lambda(rt_1 c_57)"
"(begin"
"(let-values(((target_1)(hash-ref(readtable-char-ht rt_1) c_57 #f)))"
"(if(not target_1)(let-values() c_57)(if(char? target_1)(let-values() target_1)(let-values() '#\\x)))))))"
"(define-values"
"(effective-char)"
"(lambda(c_58 config_11)"
"(begin"
"(let-values(((rt_2)(read-config-readtable config_11))((c_59) c_58))"
"(if(let-values(((or-part_308)(not rt_2)))(if or-part_308 or-part_308(not(char? c_59))))"
"(let-values() c_59)"
"(let-values()(*readtable-effective-char rt_2 c_59)))))))"
"(define-values"
"(readtable-handler)"
"(lambda(config_12 c_60)"
"(begin"
"(let-values(((rt_3)(read-config-readtable config_12)))"
"(if rt_3"
"(let-values(((target_2)(hash-ref(readtable-char-ht rt_3) c_60 #f)))"
"(if target_2(if(not(char? target_2)) target_2 #f) #f))"
" #f)))))"
"(define-values"
"(readtable-dispatch-handler)"
"(lambda(config_13 c_61)"
"(begin"
"(let-values((()(begin(force-parameters! config_13)(values))))"
"(let-values(((rt_4)(read-config-readtable config_13)))"
"(if rt_4(hash-ref(readtable-dispatch-ht rt_4) c_61 #f) #f))))))"
"(define-values"
"(readtable-apply)"
"(lambda(handler_0 c_62 in_3 config_14 line_3 col_2 pos_110)"
"(begin"
"(let-values(((for-syntax?_6)(read-config-for-syntax? config_14)))"
"(let-values(((v_233)"
"(if(not for-syntax?_6)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_14)"
"(let-values()"
"(if(procedure-arity-includes? handler_0 2)"
"(handler_0 c_62 in_3)"
"(handler_0 c_62 in_3 #f line_3 col_2 pos_110)))))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_14)"
"(let-values()"
"(handler_0 c_62 in_3(read-config-source config_14) line_3 col_2 pos_110)))))))"
"(if(1/special-comment? v_233) v_233(coerce v_233 in_3 config_14)))))))"
"(define-values"
"(1/readtable-mapping)"
"(lambda(rt_5 c_63)"
"(begin"
" 'readtable-mapping"
"(let-values((()"
"(begin"
"(if(1/readtable? rt_5)"
"(void)"
"                        (let-values () (raise-argument-error 'readtable-mapping \"readtable?\" rt_5)))"
"(values))))"
"(let-values((()"
"(begin"
"                        (if (char? c_63) (void) (let-values () (raise-argument-error 'readtable-mapping \"char?\" c_63)))"
"(values))))"
"(let-values(((handler_1)(hash-ref(readtable-char-ht rt_5) c_63 #f)))"
"(values"
"(let-values(((or-part_167)"
"(if handler_1"
"(if(char? handler_1)"
"(let-values() handler_1)"
"(if(eq? 'delimit(hash-ref(readtable-delimiter-ht rt_5) c_63 #f))"
"(let-values() 'terminating-macro)"
"(let-values() 'non-terminating-macro)))"
" #f)))"
"(if or-part_167 or-part_167 c_63))"
"(if(char? handler_1) #f handler_1)"
"(hash-ref(readtable-dispatch-ht rt_5) c_63 #f))))))))"
"(define-values"
"(readtable-equivalent-chars)"
"(lambda(rt_6 c_64)"
"(begin"
"(let-values(((ht_153)(readtable-char-ht rt_6)))"
"(append"
"(if(hash-ref ht_153 c_64 #f) null(list c_64))"
"(reverse$1"
"(let-values(((ht_154) ht_153))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_154)))"
"((letrec-values(((for-loop_271)"
"(lambda(fold-var_85 i_168)"
"(begin"
" 'for-loop"
"(if i_168"
"(let-values(((k_40 v_94)(hash-iterate-key+value ht_154 i_168)))"
"(let-values(((fold-var_284)"
"(let-values(((fold-var_88) fold-var_85))"
"(if(eqv? v_94 c_64)"
"(let-values(((fold-var_238) fold-var_88))"
"(let-values(((fold-var_13)"
"(let-values()"
"(cons(let-values() k_40) fold-var_238))))"
"(values fold-var_13)))"
" fold-var_88))))"
"(if(not #f)"
"(for-loop_271 fold-var_284(hash-iterate-next ht_154 i_168))"
" fold-var_284)))"
" fold-var_85)))))"
" for-loop_271)"
" null"
"(hash-iterate-first ht_154))))))))))"
"(define-values"
"(struct:special special1.1 special? special-value)"
"(let-values(((struct:_83 make-_83 ?_83 -ref_83 -set!_83)"
"(let-values()"
"(let-values()(make-struct-type 'special #f 1 0 #f null(current-inspector) #f '(0) #f 'special)))))"
"(values struct:_83 make-_83 ?_83(make-struct-field-accessor -ref_83 0 'value))))"
"(define-values"
"(wrap)"
"(lambda(s-exp_3 in_2 config_7 rep_0)"
"(begin"
"(let-values(((wrap_6)(read-config-wrap config_7)))"
"(if wrap_6"
"(wrap_6"
" s-exp_3"
"(let-values(((in1_1) in_2)((config2_1) config_7))(port+config->srcloc49.1 #f in1_1 config2_1))"
" rep_0)"
" s-exp_3)))))"
"(define-values(consume-char)(lambda(in_4 c_33)(begin(begin(read-char in_4)(void)))))"
"(define-values"
"(consume-char/special)"
"(lambda(in_5 config_15 c_25)"
"(begin(begin(read-char-or-special in_5 special1.1(read-config-source config_15))(void)))))"
"(define-values"
"(reader-error12.1)"
"(lambda(continuation-marks1_0 due-to2_0 end-pos4_0 who3_0 in9_0 config10_0 str11_0 new-rest_0)"
"(begin"
" 'reader-error12"
"(let-values(((in_6) in9_0))"
"(let-values(((config_16) config10_0))"
"(let-values(((continuation-marks_0)"
"(if(eq? continuation-marks1_0 unsafe-undefined)"
"(current-continuation-marks)"
" continuation-marks1_0)))"
"(let-values(((due-to_0) due-to2_0))"
"(let-values(((who_28)"
"(if(eq? who3_0 unsafe-undefined)"
"(if(read-config-for-syntax? config_16) 'read-syntax 'read)"
" who3_0)))"
"(let-values(((end-pos_2) end-pos4_0))"
"(let-values(((str_25) str11_0))"
"(let-values(((args_9) new-rest_0))"
"                      (let-values (((msg_0) (format \"~a: ~a\" who_28 (apply format str_25 args_9))))"
"(let-values(((srcloc_10)"
"(if in_6"
"(let-values(((in23_0) in_6)((config24_0) config_16)((end-pos25_0) end-pos_2))"
"(port+config->srcloc49.1 end-pos25_0 in23_0 config24_0))"
" #f)))"
"(raise"
"((if(eof-object? due-to_0)"
"(let-values() exn:fail:read:eof)"
"(if(not(char? due-to_0))"
"(let-values() exn:fail:read:non-char)"
"(let-values() exn:fail:read)))"
"(let-values(((s_41)"
"(if(error-print-source-location)"
"(if srcloc_10(srcloc->string srcloc_10) #f)"
" #f)))"
"                              (if s_41 (string-append s_41 \": \" msg_0) msg_0))"
" continuation-marks_0"
"(if srcloc_10(list srcloc_10) null))))))))))))))))"
"(define-values"
"(bad-syntax-error20.1)"
"(lambda(due-to15_0 in17_0 config18_0 str19_0)"
"(begin"
" 'bad-syntax-error20"
"(let-values(((in_7) in17_0))"
"(let-values(((config_17) config18_0))"
"(let-values(((str_26) str19_0))"
"(let-values(((due-to_1) due-to15_0))"
"(let-values()"
"(let-values(((in26_0) in_7)"
"((config27_0) config_17)"
"((due-to28_0) due-to_1)"
"                             ((temp29_3) \"bad syntax `~a`\")"
"((str30_0) str_26))"
"(reader-error12.1"
" unsafe-undefined"
" due-to28_0"
" #f"
" unsafe-undefined"
" in26_0"
" config27_0"
" temp29_3"
"(list str30_0)))))))))))"
"(define-values"
"(catch-and-reraise-as-reader/proc)"
"(lambda(in_8 config_18 thunk_7)"
"(begin"
"(let-values(((with-handlers-predicate31_0) exn:fail?)"
"((with-handlers-handler32_0)"
"(lambda(exn_3)"
"(begin"
" 'with-handlers-handler32"
"(let-values(((in33_0) in_8)"
"((config34_0) config_18)"
"                                     ((temp35_2) \"~a\")"
"((temp36_3)"
"(let-values(((s_486)(exn-message exn_3)))"
"                                        (regexp-replace \"^[a-z-]*: \" s_486 \"\")))"
"((temp37_2)(exn-continuation-marks exn_3)))"
"(reader-error12.1"
" temp37_2"
" '#\\x"
" #f"
" unsafe-undefined"
" in33_0"
" config34_0"
" temp35_2"
"(list temp36_3)))))))"
"(let-values(((bpz_3)(continuation-mark-set-first #f break-enabled-key)))"
"(call-handled-body"
" bpz_3"
"(lambda(e_76)"
"(select-handler/no-breaks e_76 bpz_3(list(cons with-handlers-predicate31_0 with-handlers-handler32_0))))"
"(lambda()(thunk_7))))))))"
"(define-values"
"(port-next-location*)"
"(lambda(in_4 init-c_0)"
"(begin"
"(if(not init-c_0)"
"(let-values()(port-next-location in_4))"
"(let-values()"
"(let-values(((line_4 col_3 pos_111)(port-next-location in_4)))"
"(values line_4(if col_3(max 0(sub1 col_3)) #f)(if pos_111(max 1(sub1 pos_111)) #f))))))))"
"(define-values"
"(read-char/skip-whitespace-and-comments)"
"(lambda(init-c_1 read-one_0 in_5 config_15)"
"(begin"
"(let-values(((rt_7)(read-config-readtable config_15)))"
"(let-values(((source_3)(read-config-source config_15)))"
"((letrec-values(((skip-loop_0)"
"(lambda(init-c_2)"
"(begin"
" 'skip-loop"
"(let-values(((c_36)"
"(let-values(((or-part_158) init-c_2))"
"(if or-part_158"
" or-part_158"
"(let-values(((in_9) in_5)((source_4) source_3))"
"(read-char-or-special in_9 special1.1 source_4))))))"
"(let-values(((ec_0)"
"(let-values(((rt_8) rt_7)((c_65) c_36))"
"(if(let-values(((or-part_5)(not rt_8)))"
"(if or-part_5 or-part_5(not(char? c_65))))"
"(let-values() c_65)"
"(let-values()(*readtable-effective-char rt_8 c_65))))))"
"(if(eof-object? ec_0)"
"(let-values() c_36)"
"(if(not(char? ec_0))"
"(let-values()"
"(let-values(((v_1)(special-value c_36)))"
"(if(if(1/special-comment? v_1)"
"(not(read-config-keep-comment? config_15))"
" #f)"
"(let-values()(skip-loop_0 #f))"
"(let-values() c_36))))"
"(if(char-whitespace? ec_0)"
"(let-values()(skip-loop_0 #f))"
"(if(char=? '#\\; ec_0)"
"(let-values()"
"(begin"
"((letrec-values(((loop_80)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_66)"
"(let-values(((in_10) in_5)"
"((source_5) source_3))"
"(read-char-or-special"
" in_10"
" special1.1"
" source_5))))"
"(if(let-values(((or-part_309)"
"(eof-object? c_66)))"
"(if or-part_309"
" or-part_309"
"(eqv?"
" '#\\newline"
"(effective-char c_66 config_15))))"
"(void)"
"(let-values()(loop_80))))))))"
" loop_80))"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))"
"(if(if(char=? '#\\# ec_0)"
"(eqv?"
" '#\\|"
"(let-values(((in_11) in_5)((skip-count_0) 0)((source_6) source_3))"
"(let-values(((c_67)"
"(peek-char-or-special"
" in_11"
" skip-count_0"
" 'special"
" source_6)))"
"(if(eq? c_67 'special)(special1.1 'special) c_67))))"
" #f)"
"(let-values()"
"(begin"
"(skip-pipe-comment! c_36 in_5 config_15)"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))"
"(if(if(char=? '#\\# ec_0)"
"(if(eqv?"
" '#\\!"
"(let-values(((in_12) in_5)"
"((skip-count_1) 0)"
"((source_7) source_3))"
"(let-values(((c_68)"
"(peek-char-or-special"
" in_12"
" skip-count_1"
" 'special"
" source_7)))"
"(if(eq? c_68 'special)(special1.1 'special) c_68))))"
"(let-values(((c3_2)"
"(let-values(((in_13) in_5)"
"((skip-count_2) 1)"
"((source_8) source_3))"
"(let-values(((c_69)"
"(peek-char-or-special"
" in_13"
" skip-count_2"
" 'special"
" source_8)))"
"(if(eq? c_69 'special)"
"(special1.1 'special)"
" c_69)))))"
"(let-values(((or-part_310)(eqv? '#\\space c3_2)))"
"(if or-part_310 or-part_310(eqv? '#\\/ c3_2))))"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(skip-unix-line-comment! in_5 config_15)"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))"
"(if(if(char=? '#\\# ec_0)"
"(eqv?"
" '#\\;"
"(let-values(((in_14) in_5)"
"((skip-count_3) 0)"
"((source_9) source_3))"
"(let-values(((c_70)"
"(peek-char-or-special"
" in_14"
" skip-count_3"
" 'special"
" source_9)))"
"(if(eq? c_70 'special)(special1.1 'special) c_70))))"
" #f)"
"(let-values()"
"(let-values((()(begin(consume-char in_5 '#\\;)(values))))"
"(let-values(((v_234)(read-one_0 #f in_5 config_15)))"
"(begin"
"(if(eof-object? v_234)"
"(let-values()"
"(let-values(((in1_2) in_5)"
"((config2_2) config_15)"
"((v3_0) v_234)"
"((temp4_2)"
"                                                                            \"expected a commented-out element for `~a;`, but found end-of-file\")"
"((ec5_0) ec_0))"
"(reader-error12.1"
" unsafe-undefined"
" v3_0"
" #f"
" unsafe-undefined"
" in1_2"
" config2_2"
" temp4_2"
"(list ec5_0))))"
"(void))"
"(if(read-config-keep-comment? config_15)"
"(result-special-comment)"
"(skip-loop_0 #f))))))"
"(let-values() c_36))))))))))))))"
" skip-loop_0)"
" init-c_1))))))"
"(define-values(result-special-comment)(lambda()(begin(special1.1(1/make-special-comment #f)))))"
"(define-values"
"(skip-pipe-comment!)"
"(lambda(init-c_3 in_15 config_19)"
"(begin"
"(let-values(((source_10)(read-config-source config_19)))"
"(let-values(((line_5 col_4 pos_112)(port-next-location in_15)))"
"(begin"
"(consume-char in_15 '#\\|)"
"((letrec-values(((loop_106)"
"(lambda(prev-c_0 depth_10)"
"(begin"
" 'loop"
"(let-values(((c_71)"
"(let-values(((in_16) in_15)((source_11) source_10))"
"(read-char-or-special in_16 special1.1 source_11))))"
"(if(eof-object? c_71)"
"(let-values()"
"(let-values(((in6_0) in_15)"
"((temp7_3)(reading-at config_19 line_5 col_4 pos_112))"
"((c8_0) c_71)"
"                                                     ((temp9_4) \"end of file in `#|` comment\"))"
"(reader-error12.1"
" unsafe-undefined"
" c8_0"
" #f"
" unsafe-undefined"
" in6_0"
" temp7_3"
" temp9_4"
"(list))))"
"(if(not(char? c_71))"
"(let-values()(loop_106 #f depth_10))"
"(if(if(char=? '#\\| c_71)(eqv? prev-c_0 '#\\#) #f)"
"(let-values()(loop_106 #f(add1 depth_10)))"
"(if(if(char=? '#\\# c_71)(eqv? prev-c_0 '#\\|) #f)"
"(let-values()"
"(if(positive? depth_10)"
"(let-values()(loop_106 #f(sub1 depth_10)))"
"(void)))"
"(let-values()(loop_106 c_71 depth_10)))))))))))"
" loop_106)"
" #f"
" 0)))))))"
"(define-values"
"(skip-unix-line-comment!)"
"(lambda(in_17 config_20)"
"(begin"
"((letrec-values(((loop_107)"
"(lambda(backslash?_0)"
"(begin"
" 'loop"
"(let-values(((c_42)"
"(let-values(((in_18) in_17)((source_12)(read-config-source config_20)))"
"(read-char-or-special in_18 special1.1 source_12))))"
"(if(eof-object? c_42)"
"(let-values()(void))"
"(if(not(char? c_42))"
"(let-values()(loop_107 #f))"
"(if(char=? c_42 '#\\newline)"
"(let-values()(if backslash?_0(let-values()(loop_107 #f))(void)))"
"(if(char=? c_42 '#\\\\)"
"(let-values()(loop_107 #t))"
"(let-values()(loop_107 #f)))))))))))"
" loop_107)"
" #f))))"
"(define-values"
"(readtable-char-delimiter?)"
"(lambda(rt_9 c_33 config_7)"
"(begin"
"(let-values(((dc_0)"
"(let-values(((or-part_2)(if rt_9(hash-ref(readtable-delimiter-ht rt_9) c_33 #f) #f)))"
"(if or-part_2 or-part_2 c_33))))"
"(if(eq? dc_0 'no-delimit)"
"(let-values() #f)"
"(if(not(char? dc_0))"
"(let-values() #t)"
"(let-values()"
"(let-values(((or-part_26)(char-whitespace? dc_0)))"
"(if or-part_26"
" or-part_26"
"(let-values(((or-part_311)(char=? dc_0 '#\\()))"
"(if or-part_311"
" or-part_311"
"(let-values(((or-part_292)(char=? dc_0 '#\\))))"
"(if or-part_292"
" or-part_292"
"(let-values(((or-part_27)(char=? dc_0 '#\\[)))"
"(if or-part_27"
" or-part_27"
"(let-values(((or-part_10)(char=? dc_0 '#\\])))"
"(if or-part_10"
" or-part_10"
"(let-values(((or-part_158)(char=? dc_0 '#\\{)))"
"(if or-part_158"
" or-part_158"
"(let-values(((or-part_12)(char=? dc_0 '#\\})))"
"(if or-part_12"
" or-part_12"
"(let-values(((or-part_13)(char=? dc_0 '#\\')))"
"(if or-part_13"
" or-part_13"
"(let-values(((or-part_217)(char=? dc_0 '#\\`)))"
"(if or-part_217"
" or-part_217"
"(let-values(((or-part_3)(char=? dc_0 '#\\,)))"
"(if or-part_3"
" or-part_3"
"(let-values(((or-part_4)(char=? dc_0 '#\\;)))"
"(if or-part_4"
" or-part_4"
"                                                          (let-values (((or-part_5) (char=? dc_0 '#\\\")))"
"(if or-part_5"
" or-part_5"
"(if(char=? dc_0 '#\\.)"
"(check-parameter 1/read-cdot config_7)"
" #f))))))))))))))))))))))))))))))))"
"(define-values"
"(char-delimiter?)"
"(lambda(c_14 config_21)(begin(readtable-char-delimiter?(read-config-readtable config_21) c_14 config_21))))"
"(define-values"
"(char-closer?)"
"(lambda(ec_1 config_8)"
"(begin"
"(if(not(eof-object? ec_1))"
"(let-values(((or-part_1)(char=? ec_1 '#\\))))"
"(if or-part_1"
" or-part_1"
"(let-values(((or-part_11)(char=? ec_1 '#\\])))(if or-part_11 or-part_11(char=? ec_1 '#\\})))))"
" #f))))"
" (define-values (closer-name) (lambda (c_25 config_22) (begin (effective-char-names c_25 config_22 \"closer\"))))"
" (define-values (opener-name) (lambda (c_34 config_23) (begin (effective-char-names c_34 config_23 \"opener\"))))"
"(define-values"
"(effective-char-names)"
"(lambda(c_36 config_24 fallback-str_0)"
"(begin"
"(let-values(((rt_10)(read-config-readtable config_24)))"
"(if(not rt_10)"
"          (let-values () (format \"`~a`\" c_36))"
"(let-values()"
"(let-values(((cs_1)(readtable-equivalent-chars rt_10 c_36)))"
"(if(null? cs_1)"
"(let-values() fallback-str_0)"
"(if(null?(cdr cs_1))"
"                  (let-values () (format \"`~a`\" (car cs_1)))"
"(if(null?(cddr cs_1))"
"                    (let-values () (format \"`~a` or `~a`\" (car cs_1) (cadr cs_1)))"
"(let-values()"
"(apply"
" string-append"
"((letrec-values(((loop_108)"
"(lambda(cs_2)"
"(begin"
" 'loop"
"(if(null?(cdr cs_2))"
"                                               (let-values () (list (format \"or `~a`\" (car cs_2))))"
"(let-values()"
"                                                 (cons (format \"`~a`, \" (car cs_2)) (loop_108 (cdr cs_2)))))))))"
" loop_108)"
" cs_1)))))))))))))"
"(define-values"
"(closer->opener)"
"(lambda(c_65)"
"(begin"
"(let-values(((tmp_36) c_65))"
"(if(equal? tmp_36 '#\\))"
"(let-values() '#\\()"
"(if(equal? tmp_36 '#\\])"
"(let-values() '#\\[)"
"(if(equal? tmp_36 '#\\})(let-values() '#\\{)(let-values() c_65))))))))"
" (define-values (dot-name) (lambda (config_25) (begin \"`.`\")))"
"(define-values"
"(all-openers-str)"
"(lambda(config_21)"
"(begin"
"(let-values(((p_63)(opener-name '#\\( config_21)))"
"(let-values(((s_10)"
"(if(check-parameter 1/read-square-bracket-as-paren config_21)(opener-name '#\\[ config_21) #f)))"
"(let-values(((c_72)"
"(if(check-parameter 1/read-curly-brace-as-paren config_21)(opener-name '#\\{ config_21) #f)))"
"(if(if s_10 c_72 #f)"
"              (let-values () (format \"~a, ~a, or ~a\" p_63 s_10 c_72))"
"(if(let-values(((or-part_298) s_10))(if or-part_298 or-part_298 c_72))"
"(let-values()"
"                  (format \"~a or ~a\" p_63 (let-values (((or-part_309) s_10)) (if or-part_309 or-part_309 c_72))))"
"(let-values() p_63)))))))))"
"(define-values"
"(struct:accum-string"
" accum-string1.1"
" accum-string?"
" accum-string-pos"
" accum-string-str"
" set-accum-string-pos!"
" set-accum-string-str!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'accum-string #f 2 0 #f null(current-inspector) #f '() #f 'accum-string)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'pos)"
"(make-struct-field-accessor -ref_0 1 'str)"
"(make-struct-field-mutator -set!_0 0 'pos)"
"(make-struct-field-mutator -set!_0 1 'str))))"
"(define-values"
"(accum-string-init!)"
"(lambda(config_26)"
"(begin"
"(let-values(((st_1)(read-config-st config_26)))"
"(let-values(((a_69)(read-config-state-accum-str st_1)))"
"(if a_69"
"(let-values()(begin(set-read-config-state-accum-str! st_1 #f)(set-accum-string-pos! a_69 0) a_69))"
"(let-values()(accum-string1.1 0(make-string 32)))))))))"
"(define-values"
"(accum-string-add!)"
"(lambda(a_70 c_50)"
"(begin"
"(let-values(((pos_113)(accum-string-pos a_70)))"
"(let-values(((str_27)(accum-string-str a_70)))"
"(let-values(((str2_0)"
"(if(< pos_113(string-length str_27))"
"(let-values() str_27)"
"(let-values()"
"(let-values(((str2_1)(make-string(*(string-length str_27) 2))))"
"(begin(string-copy! str2_1 0 str_27)(set-accum-string-str! a_70 str2_1) str2_1))))))"
"(begin(string-set! str2_0 pos_113 c_50)(set-accum-string-pos! a_70(add1 pos_113)))))))))"
"(define-values(accum-string-count)(lambda(a_71)(begin(accum-string-pos a_71))))"
"(define-values(set-accum-string-count!)(lambda(a_72 pos_12)(begin(set-accum-string-pos! a_72 pos_12))))"
"(define-values"
"(accum-string-convert!)"
"(lambda(a_73 convert_1 start-pos_6)"
"(begin"
"(let-values(((str_28)(accum-string-str a_73)))"
"(let-values(((s_80)(convert_1(substring str_28 start-pos_6(accum-string-pos a_73)))))"
"(let-values(((len_36)(string-length s_80)))"
"(begin"
"(if(<(+ len_36 start-pos_6)(string-length str_28))"
"(void)"
"(let-values()"
"(let-values(((str2_2)(make-string(+ start-pos_6 len_36))))"
"(begin(string-copy! str2_2 0 str_28 0 start-pos_6)(set-accum-string-str! a_73 str2_2)))))"
"(string-copy!(accum-string-str a_73) start-pos_6 s_80)"
"(set-accum-string-pos! a_73(+ start-pos_6 len_36)))))))))"
"(define-values"
"(accum-string-get!6.1)"
"(lambda(start-pos2_0 a4_0 config5_0)"
"(begin"
" 'accum-string-get!6"
"(let-values(((a_58) a4_0))"
"(let-values(((config_27) config5_0))"
"(let-values(((start-pos_7) start-pos2_0))"
"(let-values()"
"(let-values(((s_43)(substring(accum-string-str a_58) start-pos_7(accum-string-pos a_58))))"
"(begin(accum-string-abandon! a_58 config_27) s_43)))))))))"
"(define-values"
"(accum-string-get-bytes!13.1)"
"(lambda(start-pos9_0 a11_0 config12_0)"
"(begin"
" 'accum-string-get-bytes!13"
"(let-values(((a_64) a11_0))"
"(let-values(((config_28) config12_0))"
"(let-values(((start-pos_8) start-pos9_0))"
"(let-values()"
"(let-values(((bstr_3)"
"(string->bytes/latin-1(accum-string-str a_64) #f start-pos_8(accum-string-pos a_64))))"
"(begin(accum-string-abandon! a_64 config_28) bstr_3)))))))))"
"(define-values"
"(accum-string-abandon!)"
"(lambda(a_74 config_29)(begin(set-read-config-state-accum-str!(read-config-st config_29) a_74))))"
"(define-values"
"(struct:indentation"
" indentation1.1"
" indentation?"
" indentation-closer"
" indentation-suspicious-closer"
" indentation-multiline?"
" indentation-start-line"
" indentation-last-line"
" indentation-suspicious-line"
" indentation-max-indent"
" indentation-suspicious-quote"
" set-indentation-suspicious-closer!"
" set-indentation-multiline?!"
" set-indentation-last-line!"
" set-indentation-suspicious-line!"
" set-indentation-max-indent!"
" set-indentation-suspicious-quote!)"
"(let-values(((struct:_0 make-_0 ?_0 -ref_0 -set!_0)"
"(let-values()"
"(let-values()"
"(make-struct-type 'indentation #f 8 0 #f null(current-inspector) #f '(0 3) #f 'indentation)))))"
"(values"
" struct:_0"
" make-_0"
" ?_0"
"(make-struct-field-accessor -ref_0 0 'closer)"
"(make-struct-field-accessor -ref_0 1 'suspicious-closer)"
"(make-struct-field-accessor -ref_0 2 'multiline?)"
"(make-struct-field-accessor -ref_0 3 'start-line)"
"(make-struct-field-accessor -ref_0 4 'last-line)"
"(make-struct-field-accessor -ref_0 5 'suspicious-line)"
"(make-struct-field-accessor -ref_0 6 'max-indent)"
"(make-struct-field-accessor -ref_0 7 'suspicious-quote)"
"(make-struct-field-mutator -set!_0 1 'suspicious-closer)"
"(make-struct-field-mutator -set!_0 2 'multiline?)"
"(make-struct-field-mutator -set!_0 4 'last-line)"
"(make-struct-field-mutator -set!_0 5 'suspicious-line)"
"(make-struct-field-mutator -set!_0 6 'max-indent)"
"(make-struct-field-mutator -set!_0 7 'suspicious-quote))))"
"(define-values"
"(make-indentation)"
"(lambda(closer_0 in_19 config_30)"
"(begin"
"(let-values(((line_6 col_5 pos_114)(port-next-location in_19)))"
"(indentation1.1 closer_0 #f #f line_6 line_6 #f(if col_5(add1 col_5) #f) #f)))))"
"(define-values"
"(track-indentation!)"
"(lambda(config_31 line_7 col_6)"
"(begin"
"(let-values(((indts_0)(read-config-indentations config_31)))"
"(let-values(((indt_0)(if(pair? indts_0)(car indts_0) #f)))"
"(if(if indt_0"
"(if line_7(if(indentation-last-line indt_0)(> line_7(indentation-last-line indt_0)) #f) #f)"
" #f)"
"(let-values()"
"(begin"
"(set-indentation-last-line! indt_0 line_7)"
"(set-indentation-multiline?! indt_0 #t)"
"(if(>= col_6(indentation-max-indent indt_0))"
"(let-values()(set-indentation-max-indent! indt_0 col_6))"
"(let-values()"
"(if(indentation-suspicious-line indt_0)"
"(void)"
"(let-values()"
"(begin"
"(set-indentation-suspicious-closer! indt_0(indentation-closer indt_0))"
"(set-indentation-suspicious-line! indt_0 line_7))))))))"
"(void)))))))"
"(define-values"
"(indentation-possible-cause)"
"(lambda(config_32)"
"(begin"
"(let-values(((indt_1)(car(read-config-indentations config_32))))"
"(if(indentation-suspicious-line indt_1)"
"(let-values()"
"(format"
"             \"\\n  possible cause: indentation suggests a missing ~a before line ~a\""
"(closer-name(indentation-suspicious-closer indt_1) config_32)"
"(indentation-suspicious-line indt_1)))"
"          (let-values () \"\"))))))"
"(define-values"
"(indentation-unexpected-closer-message)"
"(lambda(ec_2 c_73 config_33)"
"(begin"
"(let-values(((indts_1)(read-config-indentations config_33)))"
"(if(null? indts_1)"
"          (let-values () (format \"unexpected `~a`\" c_73))"
"(let-values()"
"(let-values(((indt_2)(car indts_1)))"
"(string-append"
"(if(char=? ec_2(indentation-closer indt_2))"
"                 (let-values () (format \"unexpected `~a`\" c_73))"
"(let-values()"
"(let-values(((missing_2)"
"(let-values(((or-part_301)"
"(let-values(((lst_7)(cdr indts_1)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_7)))"
"((letrec-values(((for-loop_0)"
"(lambda(result_119 lst_8)"
"(begin"
" 'for-loop"
"(if(pair? lst_8)"
"(let-values(((indt_3)(unsafe-car lst_8))"
"((rest_0)(unsafe-cdr lst_8)))"
"(let-values(((result_82)"
"(let-values()"
"(let-values(((result_120)"
"(let-values()"
"(let-values()"
"(if(char=?"
" ec_2"
"(indentation-closer"
" indt_3))"
"                                                                                                                 \"missing\""
" #f)))))"
"(values result_120)))))"
"(if(if(not"
"((lambda x_84 result_82)"
" indt_3))"
"(not #f)"
" #f)"
"(for-loop_0 result_82 rest_0)"
" result_82)))"
" result_119)))))"
" for-loop_0)"
" #f"
" lst_7)))))"
"                                   (if or-part_301 or-part_301 \"expected\"))))"
"(let-values(((opener-str_0)(opener-name(closer->opener(indentation-closer indt_2)) config_33)))"
"(format"
"                        \"~a ~a to close ~a, found instead `~a`\""
" missing_2"
"(closer-name(indentation-closer indt_2) config_33)"
"(if(indentation-multiline? indt_2)"
"                          (let-values () (format \"~a on line ~a\" opener-str_0 (indentation-start-line indt_2)))"
"                          (let-values () (format \"preceding ~a\" opener-str_0)))"
" c_73)))))"
"(indentation-possible-cause config_33)))))))))"
"(define-values"
"(read-unwrapped-sequence17.1)"
"(lambda(dot-mode2_0"
" elem-config1_0"
" first-read-one5_0"
" shape-tag?3_0"
" whitespace-read-one4_0"
" read-one11_0"
" opener-c12_0"
" opener13_0"
" closer14_0"
" in15_0"
" seq-config16_0)"
"(begin"
" 'read-unwrapped-sequence17"
"(let-values(((read-one_1) read-one11_0))"
"(let-values(((opener-c_0) opener-c12_0))"
"(let-values(((opener_0) opener13_0))"
"(let-values(((closer_1) closer14_0))"
"(let-values(((in_20) in15_0))"
"(let-values(((seq-config_0) seq-config16_0))"
"(let-values(((elem-config_0)"
"(if(eq? elem-config1_0 unsafe-undefined)"
"(next-readtable seq-config_0)"
" elem-config1_0)))"
"(let-values(((dot-mode_0) dot-mode2_0))"
"(let-values(((shape-tag?_0) shape-tag?3_0))"
"(let-values(((whitespace-read-one_0)"
"(if(eq? whitespace-read-one4_0 unsafe-undefined)"
" read-one_1"
" whitespace-read-one4_0)))"
"(let-values(((first-read-one_0)"
"(if(eq? first-read-one5_0 unsafe-undefined) read-one_1 first-read-one5_0)))"
"(let-values()"
"(let-values(((head_0) #f))"
"(let-values(((indentation_0)(make-indentation closer_1 in_20 seq-config_0)))"
"(let-values(((config_34)"
"(let-values(((v_235) elem-config_0))"
"(let-values(((the-struct_88) v_235))"
"(if(read-config/outer? the-struct_88)"
"(let-values(((indentations20_0)"
"(cons"
" indentation_0"
"(read-config-indentations seq-config_0)))"
"((inner21_0)(read-config/outer-inner v_235)))"
"(read-config/outer1.1"
" inner21_0"
"(read-config/outer-wrap the-struct_88)"
"(read-config/outer-line the-struct_88)"
"(read-config/outer-col the-struct_88)"
"(read-config/outer-pos the-struct_88)"
" indentations20_0"
"(read-config/outer-keep-comment? the-struct_88)))"
"(raise-argument-error"
" 'struct-copy"
"                                                       \"read-config/outer?\""
" the-struct_88))))))"
"(let-values(((open-end-line_0 open-end-col_0 open-end-pos_0)"
"(port-next-location in_20)))"
"(let-values(((config/keep-comment_0)(keep-comment config_34)))"
"(let-values(((read-one/not-eof_0)"
"(lambda(init-c_4 read-one_2 config_35)"
"(begin"
" 'read-one/not-eof"
"(let-values(((e_77)(read-one_2 init-c_4 in_20 config_35)))"
"(begin"
"(if(eof-object? e_77)"
"(let-values()"
"(let-values(((in22_0) in_20)"
"((seq-config23_0) seq-config_0)"
"((e24_0) e_77)"
"((open-end-pos25_0) open-end-pos_0)"
"((temp26_3)"
"                                                                                \"expected a ~a to close `~a`~a\")"
"((temp27_5)"
"(closer-name closer_1 config_35))"
"((opener-c28_0) opener-c_0)"
"((temp29_4)"
"(indentation-possible-cause config_35)))"
"(reader-error12.1"
" unsafe-undefined"
" e24_0"
" open-end-pos25_0"
" unsafe-undefined"
" in22_0"
" seq-config23_0"
" temp26_3"
"(list temp27_5 opener-c28_0 temp29_4))))"
"(void))"
" e_77))))))"
"(let-values(((seq_0)"
"((letrec-values(((loop_109)"
"(lambda(depth_11"
" accum_0"
" init-c_5"
" first?_1"
" first-read-one_1)"
"(begin"
" 'loop"
"(let-values(((c_74)"
"(read-char/skip-whitespace-and-comments"
" init-c_5"
" whitespace-read-one_0"
" in_20"
" seq-config_0)))"
"(let-values(((ec_3)"
"(effective-char"
" c_74"
" seq-config_0)))"
"(if(eqv? ec_3 closer_1)"
"(let-values()"
"(if(null? accum_0)"
" null"
"(reverse$1 accum_0)))"
"(if(if(not first?_1)"
"(if(eqv? ec_3 '#\\.)"
"(if(check-parameter"
" 1/read-accept-dot"
" config_34)"
"(char-delimiter?"
"(let-values(((in_21)"
" in_20)"
"((skip-count_4)"
" 0)"
"((source_13)"
"(read-config-source"
" config_34)))"
"(let-values(((c_75)"
"(peek-char-or-special"
" in_21"
" skip-count_4"
" 'special"
" source_13)))"
"(if(eq?"
" c_75"
" 'special)"
"(special1.1"
" 'special)"
" c_75)))"
" seq-config_0)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((dot-line_0"
" dot-col_0"
" dot-pos_0)"
"(port-next-location*"
" in_20"
" c_74)))"
"(let-values((()"
"(begin"
"(track-indentation!"
" config_34"
" dot-line_0"
" dot-col_0)"
"(values))))"
"(let-values((()"
"(begin"
"(if(if dot-mode_0"
"(not"
" head_0)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in30_0)"
" in_20)"
"((temp31_2)"
"(reading-at"
" config_34"
" dot-line_0"
" dot-col_0"
" dot-pos_0))"
"((temp32_1)"
"                                                                                                                              \"illegal use of `.`\"))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in30_0"
" temp31_2"
" temp32_1"
"(list)))))"
"(values))))"
"(let-values(((v_236)"
"(read-one/not-eof_0"
" #f"
" first-read-one_1"
" config_34)))"
"(let-values(((rest-c_0)"
"(read-char/skip-whitespace-and-comments"
" #f"
" whitespace-read-one_0"
" in_20"
" seq-config_0)))"
"(let-values(((rest-ec_0)"
"(effective-char"
" rest-c_0"
" seq-config_0)))"
"(if(eqv?"
" rest-ec_0"
" closer_1)"
"(let-values()"
"(if(null?"
" accum_0)"
" v_236"
"(append"
"(reverse$1"
" accum_0)"
" v_236)))"
"(if(if(eqv?"
" rest-ec_0"
" '#\\.)"
"(if(check-parameter"
" 1/read-accept-dot"
" config_34)"
"(if(check-parameter"
" 1/read-accept-infix-dot"
" config_34)"
"(char-delimiter?"
"(let-values(((in_22)"
" in_20)"
"((skip-count_5)"
" 0)"
"((source_14)"
"(read-config-source"
" config_34)))"
"(let-values(((c_58)"
"(peek-char-or-special"
" in_22"
" skip-count_5"
" 'special"
" source_14)))"
"(if(eq?"
" c_58"
" 'special)"
"(special1.1"
" 'special)"
" c_58)))"
" seq-config_0)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(set! head_0"
"(box"
" v_236))"
"(values))))"
"(let-values(((dot2-line_0"
" dot2-col_0"
" dot2-pos_0)"
"(port-next-location"
" in_20)))"
"(let-values((()"
"(begin"
"(track-indentation!"
" config_34"
" dot2-line_0"
" dot2-col_0)"
"(values))))"
"(let-values(((post-c_0)"
"(read-char/skip-whitespace-and-comments"
" #f"
" whitespace-read-one_0"
" in_20"
" seq-config_0)))"
"(let-values(((post-ec_0)"
"(effective-char"
" post-c_0"
" seq-config_0)))"
"(begin"
"(if(let-values(((or-part_266)"
"(eof-object?"
" post-ec_0)))"
"(if or-part_266"
" or-part_266"
"(eqv?"
" post-ec_0"
" closer_1)))"
"(let-values()"
"(let-values(((in33_1)"
" in_20)"
"((temp34_5)"
"(reading-at"
" config_34"
" dot-line_0"
" dot-col_0"
" dot-pos_0))"
"((post-ec35_0)"
" post-ec_0)"
"((temp36_4)"
"                                                                                                                                        \"illegal use of `.`\"))"
"(reader-error12.1"
" unsafe-undefined"
" post-ec35_0"
" #f"
" unsafe-undefined"
" in33_1"
" temp34_5"
" temp36_4"
"(list))))"
"(void))"
"(loop_109"
" depth_11"
" accum_0"
" post-c_0"
" #f"
" read-one_1))))))))"
"(let-values()"
"(let-values(((in37_0)"
" in_20)"
"((temp38_4)"
"(reading-at"
" config_34"
" dot-line_0"
" dot-col_0"
" dot-pos_0))"
"((rest-c39_0)"
" rest-c_0)"
"((temp40_2)"
"                                                                                                                        \"illegal use of `.`\"))"
"(reader-error12.1"
" unsafe-undefined"
" rest-c39_0"
" #f"
" unsafe-undefined"
" in37_0"
" temp38_4"
" temp40_2"
"(list)))))))))))))"
"(let-values()"
"(let-values(((v_137)"
"(read-one/not-eof_0"
" c_74"
" first-read-one_1"
" config/keep-comment_0)))"
"(if(1/special-comment? v_137)"
"(let-values()"
"(loop_109"
" depth_11"
" accum_0"
" #f"
" #f"
" read-one_1))"
"(if(> depth_11 1024)"
"(let-values()"
"(loop_109"
" depth_11"
"(cons v_137 accum_0)"
" #f"
" #f"
" read-one_1))"
"(let-values()"
"(cons"
" v_137"
"(loop_109"
"(add1 depth_11)"
" null"
" #f"
" #f"
" read-one_1)))))))))))))))"
" loop_109)"
" 0"
" null"
" #f"
" #t"
" first-read-one_0)))"
"(let-values(((full-seq_0)(if head_0(cons(unbox head_0) seq_0) seq_0)))"
"(if shape-tag?_0"
"(add-shape-tag opener_0 in_20 config_34 full-seq_0)"
" full-seq_0))))))))))))))))))))))))"
"(define-values"
"(add-shape-tag)"
"(lambda(opener_1 in_23 config_36 seq_1)"
"(begin"
"(let-values(((tag_0)"
"(let-values(((tmp_37) opener_1))"
"(if(equal? tmp_37 '#\\[)"
"(let-values()(if(check-parameter 1/read-square-bracket-with-tag config_36) '#%brackets #f))"
"(if(equal? tmp_37 '#\\{)"
"(let-values()(if(check-parameter 1/read-curly-brace-with-tag config_36) '#%braces #f))"
"(let-values() #f))))))"
"(if tag_0(cons(wrap tag_0 in_23 config_36 #f) seq_1) seq_1)))))"
" (define-values (not-an-fX.1$1) (lambda (who_7 v_61) (begin 'not-an-fX (raise-argument-error who_7 \"flonum?\" v_61))))"
"(define-values"
"(read-digits12.1)"
"(lambda(base1_0 init3_0 max-count2_0 zero-digits-result4_0 in10_1 config11_0 accum-str9_0)"
"(begin"
" 'read-digits12"
"(let-values(((in_6) in10_1))"
"(let-values(((config_16) config11_0))"
"(let-values(((accum-str_0) accum-str9_0))"
"(let-values(((base_15) base1_0))"
"(let-values(((max-count_0) max-count2_0))"
"(let-values(((init-v_0) init3_0))"
"(let-values(((zero-digits-result_0) zero-digits-result4_0))"
"(let-values()"
"(let-values(((c_68)"
"(let-values(((in_24) in_6)"
"((skip-count_6) 0)"
"((source_15)(read-config-source config_16)))"
"(let-values(((c_45)"
"(peek-char-or-special in_24 skip-count_6 'special source_15)))"
"(if(eq? c_45 'special)(special1.1 'special) c_45)))))"
"(if(digit?$1 c_68 base_15)"
"(let-values()"
"(begin"
"(consume-char in_6 c_68)"
"(if accum-str_0(let-values()(accum-string-add! accum-str_0 c_68))(void))"
"((letrec-values(((loop_110)"
"(lambda(v_200 max-count_1)"
"(begin"
" 'loop"
"(if(zero? max-count_1)"
"(let-values() v_200)"
"(let-values()"
"(let-values(((c_76)"
"(let-values(((in_25) in_6)"
"((skip-count_7) 0)"
"((source_16)"
"(read-config-source config_16)))"
"(let-values(((c_53)"
"(peek-char-or-special"
" in_25"
" skip-count_7"
" 'special"
" source_16)))"
"(if(eq? c_53 'special)"
"(special1.1 'special)"
" c_53)))))"
"(if(digit?$1 c_76 base_15)"
"(let-values()"
"(begin"
"(consume-char in_6 c_76)"
"(if accum-str_0"
"(let-values()(accum-string-add! accum-str_0 c_76))"
"(void))"
"(loop_110"
"(+(digit->number c_76)(* v_200 base_15))"
"(sub1 max-count_1))))"
"(let-values() v_200)))))))))"
" loop_110)"
"(+(digit->number c_68)(* init-v_0 base_15))"
"(sub1 max-count_0))))"
"(if zero-digits-result_0"
"(let-values() zero-digits-result_0)"
"(let-values() c_68)))))))))))))))"
"(define-values"
"(digit?$1)"
"(lambda(c_42 base_21)"
"(begin"
" 'digit?"
"(if(not(char? c_42))"
"(let-values() #f)"
"(if(= base_21 8)"
"(let-values()(octal-digit? c_42))"
"(if(= base_21 16)(let-values()(hex-digit? c_42))(let-values()(decimal-digit? c_42))))))))"
"(define-values(decimal-digit?)(lambda(c_59)(begin(if(char>=? c_59 '#\\0)(char<=? c_59 '#\\9) #f))))"
"(define-values(octal-digit?)(lambda(c_43)(begin(if(char>=? c_43 '#\\0)(char<=? c_43 '#\\7) #f))))"
"(define-values"
"(hex-digit?)"
"(lambda(c_77)"
"(begin"
"(let-values(((or-part_266)(if(char>=? c_77 '#\\0)(char<=? c_77 '#\\9) #f)))"
"(if or-part_266"
" or-part_266"
"(let-values(((or-part_312)(if(char>=? c_77 '#\\A)(char<=? c_77 '#\\F) #f)))"
"(if or-part_312 or-part_312(if(char>=? c_77 '#\\a)(char<=? c_77 '#\\f) #f))))))))"
"(define-values"
"(digit->number)"
"(lambda(c_78)"
"(begin"
"(if(if(char>=? c_78 '#\\0)(char<=? c_78 '#\\9) #f)"
"(let-values()(-(char->integer c_78)(char->integer '#\\0)))"
"(if(if(char>=? c_78 '#\\A)(char<=? c_78 '#\\F) #f)"
"(let-values()(-(char->integer c_78)(-(char->integer '#\\A) 10)))"
"(let-values()(-(char->integer c_78)(-(char->integer '#\\a) 10))))))))"
"(define-values(string->number$1) string->number)"
"(define-values"
"(1/string->number)"
"(let-values(((string->number5_0)"
"(lambda(s4_0 radix1_0 convert-mode2_0 decimal-mode3_0)"
"(begin"
" 'string->number5"
"(let-values(((s_87) s4_0))"
"(let-values(((radix_0) radix1_0))"
"(let-values(((convert-mode_0) convert-mode2_0))"
"(let-values(((decimal-mode_0)"
"(if(eq? decimal-mode3_0 unsafe-undefined)"
"(if(1/read-decimal-as-inexact) 'decimal-as-inexact 'decimal-as-exact)"
" decimal-mode3_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(string? s_87)"
"(void)"
"                                      (let-values () (raise-argument-error 'string->number \"string?\" s_87)))"
"(if((lambda(p_73)(if(exact-integer? radix_0)(<= 2 radix_0 16) #f)) radix_0)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'string->number \"(integer-in 2 16)\" radix_0)))"
"(if((lambda(p_6)"
"(let-values(((or-part_53)(eq? p_6 'number-or-false)))"
"(if or-part_53 or-part_53(eq? p_6 'read))))"
" convert-mode_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'string->number"
"                                         \"(or/c 'number-or-false 'read)\""
" convert-mode_0)))"
"(if((lambda(p_65)"
"(let-values(((or-part_7)(eq? p_65 'decimal-as-inexact)))"
"(if or-part_7 or-part_7(eq? p_65 'decimal-as-exact))))"
" decimal-mode_0)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'string->number"
"                                         \"(or/c 'decimal-as-inexact decimal-as-exact)\""
" decimal-mode_0)))"
"(let-values(((s66_1) s_87)"
"((temp67_3) 0)"
"((temp68_3)(string-length s_87))"
"((radix69_0) radix_0)"
"((temp70_1) #f)"
"((decimal-mode71_0) decimal-mode_0)"
"((convert-mode72_0) convert-mode_0))"
"(do-string->number17.1"
" #f"
" temp70_1"
" s66_1"
" temp67_3"
" temp68_3"
" radix69_0"
" decimal-mode71_0"
" convert-mode72_0))))))))))))))"
"(case-lambda"
"((s_308)(begin 'string->number(string->number5_0 s_308 10 'number-or-false unsafe-undefined)))"
"((s_487 radix_1 convert-mode_1 decimal-mode3_1)(string->number5_0 s_487 radix_1 convert-mode_1 decimal-mode3_1))"
"((s_186 radix_2 convert-mode2_1)(string->number5_0 s_186 radix_2 convert-mode2_1 unsafe-undefined))"
"((s_488 radix1_1)(string->number5_0 s_488 radix1_1 'number-or-false unsafe-undefined)))))"
"(define-values"
"(do-string->number17.1)"
"(lambda(in-complex8_0 radix-set?7_0 s11_1 start12_0 end13_0 radix14_0 exactness15_0 convert-mode16_0)"
"(begin"
" 'do-string->number17"
"(let-values(((s_17) s11_1))"
"(let-values(((start_43) start12_0))"
"(let-values(((end_33) end13_0))"
"(let-values(((radix_3) radix14_0))"
"(let-values(((radix-set?_0) radix-set?7_0))"
"(let-values(((exactness_0) exactness15_0))"
"(let-values(((in-complex_0) in-complex8_0))"
"(let-values(((convert-mode_2) convert-mode16_0))"
"(let-values()"
"(if(= start_43 end_33)"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"                              (let-values () (format \"no digits\"))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((c_64)(string-ref s_17 start_43)))"
"(if(char=? '#\\# c_64)"
"(let-values()"
"(let-values(((next_4)(add1 start_43)))"
"(if(= next_4 end_33)"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"                                          (let-values () (format \"no character after `#` indicator in `~.a`\" s_17))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((i_169)(string-ref s_17 next_4)))"
"(let-values(((tmp_38) i_169))"
"(let-values(((index_2)"
"(if(char? tmp_38)"
"(let-values(((codepoint_0)(char->integer tmp_38)))"
"(if(if(unsafe-fx>= codepoint_0 66)"
"(unsafe-fx< codepoint_0 121)"
" #f)"
"(let-values(((tbl_0)"
" '#(2"
" 0"
" 2"
" 1"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 2"
" 1"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 2)))"
"(unsafe-vector*-ref"
" tbl_0"
"(unsafe-fx- codepoint_0 66)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_2 1)"
"(let-values()"
"(if(eq?(read-complains convert-mode_2) 'must-read)"
"(let-values()"
"(format"
"                                                       \"bad `#` indicator `~a` at `~.a`\""
" i_169"
"(substring s_17 start_43 end_33)))"
"(let-values() #f)))"
"(if(unsafe-fx< index_2 2)"
"(let-values()"
"(if(let-values(((or-part_265)(exactness-set? exactness_0)))"
"(if or-part_265 or-part_265 in-complex_0))"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"(let-values()"
"(format"
"                                                             \"misplaced exactness specification at `~.a`\""
"(substring s_17 start_43 end_33)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((s73_1) s_17)"
"((temp74_1)(add1 next_4))"
"((end75_0) end_33)"
"((radix76_0) radix_3)"
"((radix-set?77_0) radix-set?_0)"
"((temp78_2)"
"(if(let-values(((or-part_211)"
"(char=? i_169 '#\\e)))"
"(if or-part_211"
" or-part_211"
"(char=? i_169 '#\\E)))"
" 'exact"
" 'inexact))"
"((temp79_1)"
"(if(eq? convert-mode_2 'read)"
" 'must-read"
" convert-mode_2)))"
"(do-string->number17.1"
" #f"
" radix-set?77_0"
" s73_1"
" temp74_1"
" end75_0"
" radix76_0"
" temp78_2"
" temp79_1)))))"
"(let-values()"
"(if(let-values(((or-part_212) radix-set?_0))"
"(if or-part_212 or-part_212 in-complex_0))"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"(let-values()"
"(format"
"                                                             \"misplaced radix specification at `~.a`\""
"(substring s_17 start_43 end_33)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((radix_4)"
"(let-values(((tmp_39) i_169))"
"(if(if(equal? tmp_39 '#\\b)"
" #t"
"(equal? tmp_39 '#\\B))"
"(let-values() 2)"
"(if(if(equal? tmp_39 '#\\o)"
" #t"
"(equal? tmp_39 '#\\O))"
"(let-values() 8)"
"(if(if(equal? tmp_39 '#\\d)"
" #t"
"(equal? tmp_39 '#\\D))"
"(let-values() 10)"
"(let-values() 16)))))))"
"(let-values(((s80_0) s_17)"
"((temp81_0)(add1 next_4))"
"((end82_0) end_33)"
"((radix83_0) radix_4)"
"((temp84_1) #t)"
"((exactness85_0) exactness_0)"
"((temp86_2)"
"(if(eq? convert-mode_2 'read)"
" 'must-read"
" convert-mode_2)))"
"(do-string->number17.1"
" #f"
" temp84_1"
" s80_0"
" temp81_0"
" end82_0"
" radix83_0"
" exactness85_0"
" temp86_2)))))))))))))))"
"(let-values(((c1_29)"
"(if(char-sign? c_64)"
"(read-special-number s_17 start_43 end_33 convert-mode_2)"
" #f)))"
"(if c1_29"
"((lambda(v_237)"
"(if(eq? exactness_0 'exact)"
"(let-values()"
"(if(eq? convert-mode_2 'must-read)"
"                                             (let-values () (format \"no exact representation for `~a`\" v_237))"
"(let-values() #f)))"
"(let-values() v_237)))"
" c1_29)"
"(let-values(((c2_3)"
"(if(char-sign? c_64)"
"(if(not in-complex_0)"
"(if(>(- end_33 start_43) 7)"
"(if(char=? '#\\i(string-ref s_17(sub1 end_33)))"
"(if(char-sign?(string-ref s_17 6))"
"(read-special-number"
" s_17"
" start_43"
"(+ start_43 6)"
" convert-mode_2)"
" #f)"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if c2_3"
"((lambda(v_39)"
"(let-values(((s87_0) s_17)"
"((temp88_1)(+ start_43 6))"
"((temp89_2)(sub1 end_33))"
"((radix90_0) radix_3)"
"((exactness91_0) exactness_0)"
"((convert-mode92_0) convert-mode_2)"
"((temp93_1) 'i)"
"((v94_0) v_39)"
"((temp95_0)"
"(lambda(v_238 v2_0)"
"(begin 'temp95(make-rectangular v_238 v2_0)))))"
"(read-for-special-compound62.1"
" temp93_1"
" #f"
" s87_0"
" temp88_1"
" temp89_2"
" radix90_0"
" exactness91_0"
" convert-mode92_0"
" v94_0"
" temp95_0)))"
" c2_3)"
"(let-values(((c3_3)"
"(if(not in-complex_0)"
"(if(>=(- end_33 start_43) 7)"
"(if(char=? '#\\i(string-ref s_17(sub1 end_33)))"
"(if(char-sign?(string-ref s_17(- end_33 7)))"
"(read-special-number"
" s_17"
"(- end_33 7)"
"(sub1 end_33)"
" convert-mode_2)"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if c3_3"
"((lambda(v2_1)"
"(if(if(= start_43(- end_33 7))(not(extflonum? v2_1)) #f)"
"(let-values()(make-rectangular 0 v2_1))"
"(let-values()"
"(let-values(((s96_0) s_17)"
"((start97_0) start_43)"
"((temp98_2)(- end_33 7))"
"((radix99_0) radix_3)"
"((exactness100_0) exactness_0)"
"((convert-mode101_0) convert-mode_2)"
"((temp102_0) 'i)"
"((temp103_0) #t)"
"((v2104_0) v2_1)"
"((temp105_1)"
"(lambda(v2_2 v_215)"
"(begin 'temp105(make-rectangular v_215 v2_2)))))"
"(read-for-special-compound62.1"
" temp102_0"
" temp103_0"
" s96_0"
" start97_0"
" temp98_2"
" radix99_0"
" exactness100_0"
" convert-mode101_0"
" v2104_0"
" temp105_1)))))"
" c3_3)"
"(let-values(((c4_0)"
"(if(char-sign? c_64)"
"(if(not in-complex_0)"
"(if(>(- end_33 start_43) 7)"
"(if(char=? '#\\@(string-ref s_17(+ start_43 6)))"
"(read-special-number"
" s_17"
" start_43"
"(+ start_43 6)"
" convert-mode_2)"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if c4_0"
"((lambda(v_217)"
"(let-values(((s106_0) s_17)"
"((temp107_2)(+ start_43 7))"
"((end108_0) end_33)"
"((radix109_0) radix_3)"
"((exactness110_0) exactness_0)"
"((convert-mode111_0) convert-mode_2)"
"((temp112_1) '@)"
"((v113_0) v_217)"
"((temp114_3)"
"(lambda(v_142 v2_3)"
"(begin 'temp114(make-polar v_142 v2_3)))))"
"(read-for-special-compound62.1"
" temp112_1"
" #f"
" s106_0"
" temp107_2"
" end108_0"
" radix109_0"
" exactness110_0"
" convert-mode111_0"
" v113_0"
" temp114_3)))"
" c4_0)"
"(let-values(((c5_0)"
"(if(not in-complex_0)"
"(if(>(- end_33 start_43) 7)"
"(if(char=? '#\\@(string-ref s_17(- end_33 7)))"
"(read-special-number"
" s_17"
"(- end_33 6)"
" end_33"
" convert-mode_2)"
" #f)"
" #f)"
" #f)))"
"(if c5_0"
"((lambda(v2_4)"
"(let-values(((s115_0) s_17)"
"((start116_0) start_43)"
"((temp117_1)(- end_33 7))"
"((radix118_0) radix_3)"
"((exactness119_0) exactness_0)"
"((convert-mode120_0) convert-mode_2)"
"((temp121_0) '@)"
"((temp122_0) #t)"
"((v2123_0) v2_4)"
"((temp124_2)"
"(lambda(v2_5 v_83)"
"(begin 'temp124(make-polar v_83 v2_5)))))"
"(read-for-special-compound62.1"
" temp121_0"
" temp122_0"
" s115_0"
" start116_0"
" temp117_1"
" radix118_0"
" exactness119_0"
" convert-mode120_0"
" v2123_0"
" temp124_2)))"
" c5_0)"
"(let-values()"
"(let-values(((s125_0) s_17)"
"((start126_0) start_43)"
"((end127_0) end_33)"
"((radix128_0) radix_3)"
"((radix-set?129_0) radix-set?_0)"
"((exactness130_0) exactness_0)"
"((in-complex131_0) in-complex_0)"
"((convert-mode132_0) convert-mode_2))"
"(do-string->non-special-number30.1"
" in-complex131_0"
" radix-set?129_0"
" s125_0"
" start126_0"
" end127_0"
" radix128_0"
" exactness130_0"
" convert-mode132_0)))))))))))))))))))))))))))))"
"(define-values"
"(do-string->non-special-number30.1)"
"(lambda(in-complex21_0 radix-set?20_0 s24_2 start25_0 end26_0 radix27_0 exactness28_0 convert-mode29_0)"
"(begin"
" 'do-string->non-special-number30"
"(let-values(((s_425) s24_2))"
"(let-values(((start_44) start25_0))"
"(let-values(((end_34) end26_0))"
"(let-values(((radix_5) radix27_0))"
"(let-values(((radix-set?_1) radix-set?20_0))"
"(let-values(((exactness_1) exactness28_0))"
"(let-values(((in-complex_1) in-complex21_0))"
"(let-values(((convert-mode_3) convert-mode29_0))"
"(let-values()"
"((letrec-values(((loop_111)"
"(lambda(i_170"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
" exp-pos_0"
" must-i?_0)"
"(begin"
" 'loop"
"(if(= i_170 end_34)"
"(let-values()"
"(if(if(not any-digits?_0)(not i-pos_3) #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                           \"no digits in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if(if must-i?_0(not i-pos_3) #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                             \"too many signs in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if(if sign-pos_0"
"(let-values(((or-part_313)"
"(if dot-pos_1(< dot-pos_1 sign-pos_0) #f)))"
"(if or-part_313"
" or-part_313"
"(if slash-pos_0(< slash-pos_0 sign-pos_0) #f)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                               \"misplaced sign in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if i-pos_3"
"(let-values()"
"(let-values(((s133_0) s_425)"
"((start134_0) start_44)"
"((sign-pos135_0) sign-pos_0)"
"((sign-pos136_0) sign-pos_0)"
"((temp137_2)(sub1 end_34))"
"((i-pos138_0) i-pos_3)"
"((sign-pos139_0) sign-pos_0)"
"((radix140_0) radix_5)"
"((radix-set?141_0) radix-set?_1)"
"((exactness142_0) exactness_1)"
"((temp143_2) 'i)"
"((convert-mode144_0) convert-mode_3))"
"(string->complex-number47.1"
" temp143_2"
" radix-set?141_0"
" s133_0"
" start134_0"
" sign-pos135_0"
" sign-pos136_0"
" temp137_2"
" i-pos138_0"
" sign-pos139_0"
" radix140_0"
" exactness142_0"
" convert-mode144_0)))"
"(if @-pos_0"
"(let-values()"
"(let-values(((s145_0) s_425)"
"((start146_0) start_44)"
"((@-pos147_0) @-pos_0)"
"((temp148_1)(add1 @-pos_0))"
"((end149_0) end_34)"
"((i-pos150_0) i-pos_3)"
"((sign-pos151_0) sign-pos_0)"
"((radix152_0) radix_5)"
"((radix-set?153_0) radix-set?_1)"
"((exactness154_0) exactness_1)"
"((temp155_1) '@)"
"((convert-mode156_0) convert-mode_3))"
"(string->complex-number47.1"
" temp155_1"
" radix-set?153_0"
" s145_0"
" start146_0"
" @-pos147_0"
" temp148_1"
" end149_0"
" i-pos150_0"
" sign-pos151_0"
" radix152_0"
" exactness154_0"
" convert-mode156_0)))"
"(let-values()"
"(string->real-number"
" s_425"
" start_44"
" end_34"
" dot-pos_1"
" slash-pos_0"
" exp-pos_0"
" any-hashes?_0"
" radix_5"
" exactness_1"
" convert-mode_3))))))))"
"(let-values()"
"(let-values(((c_79)(string-ref s_425 i_170)))"
"(if(digit? c_79 radix_5)"
"(let-values()"
"(loop_111"
"(add1 i_170)"
" #t"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
" exp-pos_0"
" must-i?_0))"
"(if(char=? c_79 '#\\#)"
"(let-values()"
"(loop_111"
"(add1 i_170)"
" #t"
" #t"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
" exp-pos_0"
" must-i?_0))"
"(if(char-sign? c_79)"
"(let-values()"
"(if(if sign-pos_0 must-i?_0 #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                     \"too many signs in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_111"
"(add1 i_170)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" i_170"
" dot-pos_1"
" slash-pos_0"
" #f"
"(if(> i_170 start_44)"
"(let-values(((or-part_314)(not @-pos_0)))"
"(if or-part_314"
" or-part_314"
"(> i_170(add1 @-pos_0))))"
" #f)))))"
"(if(char=? c_79 '#\\.)"
"(let-values()"
"(if(let-values(((or-part_315)"
"(if exp-pos_0"
"(let-values(((or-part_316)"
"(not sign-pos_0)))"
"(if or-part_316"
" or-part_316"
"(> exp-pos_0 sign-pos_0)))"
" #f)))"
"(if or-part_315"
" or-part_315"
"(if dot-pos_1"
"(let-values(((or-part_208)(not sign-pos_0)))"
"(if or-part_208"
" or-part_208"
"(> dot-pos_1 sign-pos_0)))"
" #f)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                       \"misplaced `.` in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if(if slash-pos_0"
"(let-values(((or-part_317)(not sign-pos_0)))"
"(if or-part_317"
" or-part_317"
"(> slash-pos_0 sign-pos_0)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                         \"decimal points and fractions annot be mixed `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_111"
"(add1 i_170)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" i_170"
" #f"
" #f"
" must-i?_0)))))"
"(if(char=? c_79 '#\\/)"
"(let-values()"
"(if(if dot-pos_1"
"(let-values(((or-part_318)(not sign-pos_0)))"
"(if or-part_318"
" or-part_318"
"(> dot-pos_1 sign-pos_0)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                         \"decimal points and fractions annot be mixed `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if(let-values(((or-part_319)"
"(if exp-pos_0"
"(let-values(((or-part_320)"
"(not sign-pos_0)))"
"(if or-part_320"
" or-part_320"
"(> exp-pos_0 sign-pos_0)))"
" #f)))"
"(if or-part_319"
" or-part_319"
"(if slash-pos_0"
"(let-values(((or-part_280)"
"(not sign-pos_0)))"
"(if or-part_280"
" or-part_280"
"(> slash-pos_0 sign-pos_0)))"
" #f)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                           \"misplaced `/` in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_111"
"(add1 i_170)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" #f"
" i_170"
" #f"
" must-i?_0)))))"
"(if(let-values(((or-part_321)(char=? c_79 '#\\e)))"
"(if or-part_321"
" or-part_321"
"(let-values(((or-part_322)(char=? c_79 '#\\E)))"
"(if or-part_322"
" or-part_322"
"(let-values(((or-part_323)"
"(char=? c_79 '#\\f)))"
"(if or-part_323"
" or-part_323"
"(let-values(((or-part_324)"
"(char=? c_79 '#\\F)))"
"(if or-part_324"
" or-part_324"
"(let-values(((or-part_325)"
"(char=? c_79 '#\\d)))"
"(if or-part_325"
" or-part_325"
"(let-values(((or-part_181)"
"(char=? c_79 '#\\D)))"
"(if or-part_181"
" or-part_181"
"(let-values(((or-part_326)"
"(char=?"
" c_79"
" '#\\s)))"
"(if or-part_326"
" or-part_326"
"(let-values(((or-part_327)"
"(char=?"
" c_79"
" '#\\S)))"
"(if or-part_327"
" or-part_327"
"(let-values(((or-part_209)"
"(char=?"
" c_79"
" '#\\l)))"
"(if or-part_209"
" or-part_209"
"(let-values(((or-part_328)"
"(char=?"
" c_79"
" '#\\L)))"
"(if or-part_328"
" or-part_328"
"(let-values(((or-part_173)"
"(char=?"
" c_79"
" '#\\t)))"
"(if or-part_173"
" or-part_173"
"(char=?"
" c_79"
" '#\\T)))))))))))))))))))))))"
"(let-values()"
"(if exp-pos_0"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                           \"misplaced `~a` in `~.a`\""
" c_79"
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if(if(<(add1 i_170) end_34)"
"(char-sign?(string-ref s_425(add1 i_170)))"
" #f)"
"(let-values()"
"(loop_111"
"(+ i_170 2)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
"(let-values(((or-part_329) exp-pos_0))"
"(if or-part_329 or-part_329 i_170))"
" must-i?_0))"
"(let-values()"
"(loop_111"
"(+ i_170 1)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" @-pos_0"
" sign-pos_0"
" dot-pos_1"
" slash-pos_0"
"(let-values(((or-part_330) exp-pos_0))"
"(if or-part_330 or-part_330 i_170))"
" must-i?_0)))))"
"(if(char=? c_79 '#\\@)"
"(let-values()"
"(if(eq? in-complex_1 'i)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                             \"cannot mix `@` and `i` in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if(let-values(((or-part_160) @-pos_0))"
"(if or-part_160"
" or-part_160"
"(eq? in-complex_1 '@)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                               \"too many `@`s in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if(= i_170 start_44)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                                 \"`@` cannot be at start in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if must-i?_0"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                                   \"too many signs in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_111"
"(add1 i_170)"
" any-digits?_0"
" any-hashes?_0"
" i-pos_3"
" i_170"
" #f"
" #f"
" #f"
" #f"
" must-i?_0)))))))"
"(if(if(let-values(((or-part_331)"
"(char=? c_79 '#\\i)))"
"(if or-part_331"
" or-part_331"
"(char=? c_79 '#\\I)))"
" sign-pos_0"
" #f)"
"(let-values()"
"(if(let-values(((or-part_332) @-pos_0))"
"(if or-part_332"
" or-part_332"
"(eq? in-complex_1 '@)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                               \"cannot mix `@` and `i` in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(if(let-values(((or-part_333)"
"(<(add1 i_170) end_34)))"
"(if or-part_333"
" or-part_333"
"(eq? in-complex_1 'i)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"(format"
"                                                                                 \"`i` must be at the end in `~.a`\""
"(substring s_425 start_44 end_34)))"
"(let-values() #f)))"
"(let-values()"
"(loop_111"
"(add1 i_170)"
" any-digits?_0"
" any-hashes?_0"
" i_170"
" @-pos_0"
" sign-pos_0"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values()"
"(if(char=? c_79 '#\\nul)"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"                                                                              (format \"nul character in `~.a`\" s_425))"
"(let-values() #f)))"
"(let-values()"
"(if(eq? convert-mode_3 'must-read)"
"(let-values()"
"                                                                              (format \"bad digit `~a`\" c_79))"
"(let-values() #f))))))))))))))))))))"
" loop_111)"
" start_44"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f"
" #f)))))))))))))"
"(define-values"
"(string->complex-number47.1)"
"(lambda(in-complex34_0"
" radix-set?33_0"
" s37_1"
" start138_0"
" end139_0"
" start240_0"
" end241_0"
" i-pos42_0"
" sign-pos43_0"
" radix44_0"
" exactness45_0"
" convert-mode46_0)"
"(begin"
" 'string->complex-number47"
"(let-values(((s_117) s37_1))"
"(let-values(((start1_0) start138_0))"
"(let-values(((end1_0) end139_0))"
"(let-values(((start2_0) start240_0))"
"(let-values(((end2_0) end241_0))"
"(let-values()"
"(let-values()"
"(let-values(((radix_6) radix44_0))"
"(let-values(((radix-set?_2) radix-set?33_0))"
"(let-values(((exactness_2) exactness45_0))"
"(let-values(((in-complex_2) in-complex34_0))"
"(let-values(((convert-mode_4) convert-mode46_0))"
"(let-values()"
"(let-values(((v1_0)"
"(if(= start1_0 end1_0)"
"(let-values()(if(eq? exactness_2 'inexact) 0.0 0))"
"(let-values()"
"(let-values(((s157_0) s_117)"
"((start1158_0) start1_0)"
"((end1159_0) end1_0)"
"((radix160_0) radix_6)"
"((radix-set?161_0) radix-set?_2)"
"((exactness162_0) exactness_2)"
"((in-complex163_0) in-complex_2)"
"((convert-mode164_0) convert-mode_4))"
"(do-string->number17.1"
" in-complex163_0"
" radix-set?161_0"
" s157_0"
" start1158_0"
" end1159_0"
" radix160_0"
" exactness162_0"
" convert-mode164_0))))))"
"(let-values(((v2_6)"
"(if(if(eq? in-complex_2 'i)(=(- end2_0 start2_0) 1) #f)"
"(let-values()"
"(let-values(((neg?_0)(char=?(string-ref s_117 start2_0) '#\\-)))"
"(if(eq? exactness_2 'inexact)"
"(let-values()(if neg?_0 -1.0 1.0))"
"(let-values()(if neg?_0 -1 1)))))"
"(let-values()"
"(let-values(((s165_0) s_117)"
"((start2166_0) start2_0)"
"((end2167_0) end2_0)"
"((radix168_0) radix_6)"
"((radix-set?169_0) radix-set?_2)"
"((exactness170_0) exactness_2)"
"((in-complex171_0) in-complex_2)"
"((convert-mode172_0) convert-mode_4))"
"(do-string->number17.1"
" in-complex171_0"
" radix-set?169_0"
" s165_0"
" start2166_0"
" end2167_0"
" radix168_0"
" exactness170_0"
" convert-mode172_0))))))"
"(if(let-values(((or-part_334)(not v1_0)))"
"(if or-part_334 or-part_334(not v2_6)))"
"(let-values() #f)"
"(if(if(let-values(((or-part_335)(extflonum? v1_0)))"
"(if or-part_335 or-part_335(extflonum? v2_6)))"
"(not(eq? convert-mode_4 'must-read))"
" #f)"
"(let-values()(fail-extflonum convert-mode_4 v1_0))"
"(if(string? v1_0)"
"(let-values() v1_0)"
"(if(extflonum? v1_0)"
"(let-values()(fail-extflonum convert-mode_4 v1_0))"
"(if(string? v2_6)"
"(let-values() v2_6)"
"(if(extflonum? v2_6)"
"(let-values()(fail-extflonum convert-mode_4 v2_6))"
"(if(eq? in-complex_2 'i)"
"(let-values()(make-rectangular v1_0 v2_6))"
"(let-values()"
"(let-values(((p_74)(make-polar v1_0 v2_6)))"
"(if(eq? exactness_2 'exact)"
"(inexact->exact p_74)"
" p_74))))))))))))))))))))))))))))"
"(define-values"
"(string->real-number)"
"(lambda(s_333 start_45 end_35 dot-pos_2 slash-pos_1 exp-pos_1 any-hashes?_1 radix_7 exactness_3 convert-mode_5)"
"(begin"
"(let-values(((extfl-mark?_0)"
"(lambda()(begin 'extfl-mark?(char=?(char-downcase(string-ref s_333 exp-pos_1)) '#\\t)))))"
"(let-values(((simple?_0)"
"(if(not slash-pos_1)"
"(if(let-values(((or-part_336)(eq? exactness_3 'inexact)))"
"(if or-part_336"
" or-part_336"
"(let-values(((or-part_337)(eq? exactness_3 'decimal-as-inexact)))"
"(if or-part_337 or-part_337(if(not dot-pos_2)(not exp-pos_1) #f)))))"
"(if(let-values(((or-part_338)(not exp-pos_1)))"
"(if or-part_338"
" or-part_338"
"(let-values(((or-part_223)(not(eq? convert-mode_5 'number-or-false))))"
"(if or-part_223 or-part_223(not(extfl-mark?_0))))))"
"(not(if any-hashes?_1(hashes? s_333 start_45 end_35) #f))"
" #f)"
" #f)"
" #f)))"
"(let-values(((has-sign?_0)(if(> end_35 start_45)(char-sign?(string-ref s_333 start_45)) #f)))"
"(if(=(- end_35 start_45)(+(if dot-pos_2 1 0)(if exp-pos_1 1 0)(if has-sign?_0 1 0)))"
"(let-values()"
"(if(= end_35 start_45)"
"                  (if (eq? convert-mode_5 'must-read) (let-values () (format \"missing digits\")) (let-values () #f))"
"(if(eq? convert-mode_5 'must-read)"
"                    (let-values () (format \"missing digits in `~.a`\" (substring s_333 start_45 end_35)))"
"(let-values() #f))))"
"(if simple?_0"
"(let-values()"
"(if(if exp-pos_1"
"(="
"(- exp-pos_1 start_45)"
"(+(if(if dot-pos_2(< dot-pos_2 exp-pos_1) #f) 1 0)(if has-sign?_0 1 0)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_5 'must-read)"
"(let-values()"
"                          (format \"missing digits before exponent marker in `~.a`\" (substring s_333 start_45 end_35)))"
"(let-values() #f)))"
"(if(if exp-pos_1"
"(let-values(((or-part_339)(= exp-pos_1(sub1 end_35))))"
"(if or-part_339"
" or-part_339"
"(if(= exp-pos_1(- end_35 2))(char-sign?(string-ref s_333(sub1 end_35))) #f)))"
" #f)"
"(let-values()"
"(if(eq? convert-mode_5 'must-read)"
"(let-values()"
"                            (format \"missing digits after exponent marker in `~.a`\" (substring s_333 start_45 end_35)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_31)"
"(string->number$1"
"(maybe-substring s_333 start_45 end_35)"
" radix_7"
"(if(let-values(((or-part_340)(eq? convert-mode_5 'number-or-false)))"
"(if or-part_340"
" or-part_340"
"(let-values(((or-part_147)(not exp-pos_1)))"
"(if or-part_147 or-part_147(not(extfl-mark?_0))))))"
" 'number-or-false"
" 'read))))"
"(if(let-values(((or-part_148)(not n_31)))(if or-part_148 or-part_148(string? n_31)))"
"(let-values()"
"(error"
" 'string->number"
"                               \"host `string->number` failed on ~s\""
"(substring s_333 start_45 end_35)))"
"(if(eq? exactness_3 'inexact)"
"(let-values()"
"(if(extflonum? n_31)"
"(let-values()"
"(if(eq? convert-mode_5 'must-read)"
"(let-values()"
"(format"
"                                         \"cannot convert extflonum `~.a` to inexact\""
"(substring s_333 start_45 end_35)))"
"(let-values() #f)))"
"(if(if(eqv? n_31 0)(char=?(string-ref s_333 start_45) '#\\-) #f)"
"(let-values() -0.0)"
"(let-values()(exact->inexact n_31)))))"
"(let-values() n_31))))))))"
"(if exp-pos_1"
"(let-values()"
"(let-values(((m-v_0)"
"(string->real-number"
" s_333"
" start_45"
" exp-pos_1"
" dot-pos_2"
" slash-pos_1"
" #f"
" any-hashes?_1"
" radix_7"
" 'exact"
" convert-mode_5)))"
"(let-values(((e-v_0)"
"(string->exact-integer-number s_333(+ exp-pos_1 1) end_35 radix_7 convert-mode_5)))"
"(let-values(((real->precision-inexact_0)"
"(lambda(r_46)"
"(begin"
" 'real->precision-inexact"
"(let-values(((tmp_40)(string-ref s_333 exp-pos_1)))"
"(if(if(equal? tmp_40 '#\\s)"
" #t"
"(if(equal? tmp_40 '#\\S)"
" #t"
"(if(equal? tmp_40 '#\\f) #t(equal? tmp_40 '#\\F))))"
"(let-values()(real->single-flonum r_46))"
"(if(if(equal? tmp_40 '#\\t) #t(equal? tmp_40 '#\\T))"
"(let-values()"
"(if(extflonum-available?)"
"(real->extfl r_46)"
"(string->number$1"
"(replace-hashes s_333 start_45 end_35)"
" radix_7"
" 'read)))"
"(let-values()(real->double-flonum r_46)))))))))"
"(let-values(((get-extfl?_0)(extfl-mark?_0)))"
"(if(let-values(((or-part_341)(not m-v_0)))(if or-part_341 or-part_341(not e-v_0)))"
"(let-values() #f)"
"(if(string? m-v_0)"
"(let-values() m-v_0)"
"(if(string? e-v_0)"
"(let-values() e-v_0)"
"(if(if(eq? convert-mode_5 'number-or-false) get-extfl?_0 #f)"
"(let-values() #f)"
"(if(if(let-values(((or-part_342)(eq? exactness_3 'inexact)))"
"(if or-part_342 or-part_342(eq? exactness_3 'decimal-as-inexact)))"
"(>(abs e-v_0)(if get-extfl?_0 6000 400))"
" #f)"
"(let-values()"
"(real->precision-inexact_0"
"(if(eqv? m-v_0 0)"
"(let-values()(if(char=?(string-ref s_333 start_45) '#\\-) -0.0 0.0))"
"(if(positive? m-v_0)"
"(let-values()(if(positive? e-v_0) +inf.0 0.0))"
"(let-values()(if(positive? e-v_0) -inf.0 -0.0))))))"
"(if(if(exactness-set? exactness_3) get-extfl?_0 #f)"
"(let-values()"
"(if(eq? convert-mode_5 'must-read)"
"(let-values()"
"(format"
"                                               \"cannot convert extflonum `~.a` to ~a\""
"(substring s_333 start_45 end_35)"
" exactness_3))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_32)(* m-v_0(expt radix_7 e-v_0))))"
"(if(if(not get-extfl?_0)"
"(let-values(((or-part_343)(eq? exactness_3 'exact)))"
"(if or-part_343 or-part_343(eq? exactness_3 'decimal-as-exact)))"
" #f)"
"(let-values() n_32)"
"(if(if(eqv? n_32 0)(char=?(string-ref s_333 start_45) '#\\-) #f)"
"(let-values()(real->precision-inexact_0 -0.0))"
"(let-values()(real->precision-inexact_0 n_32)))))))))))))))))"
"(if slash-pos_1"
"(let-values()"
"(let-values(((n-v_0)"
"(string->real-number"
" s_333"
" start_45"
" slash-pos_1"
" #f"
" #f"
" #f"
" any-hashes?_1"
" radix_7"
" 'exact"
" convert-mode_5)))"
"(let-values(((d-v_0)"
"(string->real-number"
" s_333"
"(add1 slash-pos_1)"
" end_35"
" #f"
" #f"
" #f"
" any-hashes?_1"
" radix_7"
" 'exact"
" convert-mode_5)))"
"(let-values(((get-inexact?_0)"
"(lambda(from-pos_0)"
"(begin"
" 'get-inexact?"
"(let-values(((or-part_344)(eq? exactness_3 'inexact)))"
"(if or-part_344"
" or-part_344"
"(if(not(eq? exactness_3 'exact))"
"(hashes? s_333 from-pos_0 end_35)"
" #f)))))))"
"(if(let-values(((or-part_345)(not n-v_0)))(if or-part_345 or-part_345(not d-v_0)))"
"(let-values() #f)"
"(if(string? n-v_0)"
"(let-values() n-v_0)"
"(if(string? d-v_0)"
"(let-values() d-v_0)"
"(if(eqv? d-v_0 0)"
"(let-values()"
"(if(get-inexact?_0(add1 slash-pos_1))"
"(let-values()(if(negative? n-v_0) -inf.0 +inf.0))"
"(let-values()"
"(if(eq?(read-complains convert-mode_5) 'must-read)"
"(let-values()"
"                                              (format \"division by zero in `~.a`\" (substring s_333 start_45 end_35)))"
"(let-values() #f)))))"
"(let-values()"
"(let-values(((n_33)(/ n-v_0 d-v_0)))"
"(if(get-inexact?_0 start_45)(exact->inexact n_33) n_33)))))))))))"
"(let-values()"
"(string->decimal-number"
" s_333"
" start_45"
" end_35"
" dot-pos_2"
" radix_7"
" exactness_3"
" convert-mode_5))))))))))))"
"(define-values"
"(string->decimal-number)"
"(lambda(s_489 start_46 end_36 dot-pos_3 radix_8 exactness_4 convert-mode_6)"
"(begin"
"(let-values(((get-exact?_0)"
"(let-values(((or-part_187)(eq? exactness_4 'exact)))"
"(if or-part_187 or-part_187(eq? exactness_4 'decimal-as-exact)))))"
"(let-values(((new-str_0)(make-string(- end_36 start_46(if(if dot-pos_3 get-exact?_0 #f) 1 0)))))"
"((letrec-values(((loop_112)"
"(lambda(i_171 j_3 hashes-pos_0)"
"(begin"
" 'loop"
"(if(< i_171 start_46)"
"(let-values()"
"(if(= hashes-pos_0 start_46)"
"(let-values()"
"(if(eq? convert-mode_6 'must-read)"
"(let-values()"
"                                            (format \"misplaced `#` in `~.a`\" (substring s_489 start_46 end_36)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_34)(string->number$1 new-str_0 radix_8)))"
"(if(not n_34)"
"(let-values()(fail-bad-number convert-mode_6 s_489 start_46 end_36))"
"(if(not get-exact?_0)"
"(let-values()"
"(if(if(eqv? n_34 0)(char=?(string-ref s_489 start_46) '#\\-) #f)"
" -0.0"
"(exact->inexact n_34)))"
"(if(if dot-pos_3 get-exact?_0 #f)"
"(let-values()(/ n_34(expt 10(- end_36 dot-pos_3 1))))"
"(let-values() n_34))))))))"
"(let-values()"
"(let-values(((c_80)(string-ref s_489 i_171)))"
"(if(char=? c_80 '#\\.)"
"(let-values()"
"(if get-exact?_0"
"(let-values()"
"(loop_112"
"(sub1 i_171)"
" j_3"
"(if(= hashes-pos_0(add1 i_171)) i_171 hashes-pos_0)))"
"(let-values()"
"(begin"
"(string-set! new-str_0 j_3 c_80)"
"(loop_112"
"(sub1 i_171)"
"(sub1 j_3)"
"(if(= hashes-pos_0(add1 i_171)) i_171 hashes-pos_0))))))"
"(if(let-values(((or-part_346)(char=? c_80 '#\\-)))"
"(if or-part_346 or-part_346(char=? c_80 '#\\+)))"
"(let-values()"
"(begin"
"(string-set! new-str_0 j_3 c_80)"
"(loop_112"
"(sub1 i_171)"
"(sub1 j_3)"
"(if(= hashes-pos_0(add1 i_171)) i_171 hashes-pos_0))))"
"(if(char=? c_80 '#\\#)"
"(let-values()"
"(if(= hashes-pos_0(add1 i_171))"
"(let-values()"
"(begin"
"(string-set! new-str_0 j_3 '#\\0)"
"(loop_112(sub1 i_171)(sub1 j_3) i_171)))"
"(let-values()"
"(if(eq? convert-mode_6 'must-read)"
"(let-values()"
"(format"
"                                                       \"misplaced `#` in `~.a`\""
"(substring s_489 start_46 end_36)))"
"(let-values() #f)))))"
"(let-values()"
"(begin"
"(string-set! new-str_0 j_3 c_80)"
"(loop_112(sub1 i_171)(sub1 j_3) hashes-pos_0)))))))))))))"
" loop_112)"
"(sub1 end_36)"
"(sub1(string-length new-str_0))"
" end_36))))))"
"(define-values"
"(string->exact-integer-number)"
"(lambda(s_490 start_47 end_37 radix_9 convert-mode_7)"
"(begin"
"(if(hashes? s_490 start_47 end_37)"
"(let-values()"
"(if(eq? convert-mode_7 'must-read)"
"            (let-values () (format \"misplaced `#` in `~.a`\" (substring s_490 start_47 end_37)))"
"(let-values() #f)))"
"(let-values()"
"(let-values(((n_35)(string->number$1(maybe-substring s_490 start_47 end_37) radix_9)))"
"(if(not n_35)"
"(let-values()"
"(if(eq? convert-mode_7 'must-read)"
"                  (let-values () (format \"bad exponent `~.a`\" (substring s_490 start_47 end_37)))"
"(let-values() #f)))"
"(let-values() n_35))))))))"
"(define-values"
"(read-special-number)"
"(lambda(s_472 start_48 end_38 convert-mode_8)"
"(begin"
"(if(=(- end_38 start_48) 6)"
"(if(let-values(((or-part_347)(char=?(string-ref s_472 start_48) '#\\+)))"
"(if or-part_347 or-part_347(char=?(string-ref s_472 start_48) '#\\-)))"
"(let-values(((or-part_348)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 1))) '#\\i)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 2))) '#\\n)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 3))) '#\\f)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 4))) '#\\.)"
"(let-values(((or-part_349)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 5))) '#\\0)"
"(if(char=?(string-ref s_472 start_48) '#\\+) +inf.0 -inf.0)"
" #f)))"
"(if or-part_349"
" or-part_349"
"(let-values(((or-part_350)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 5))) '#\\f)"
"(if(char=?(string-ref s_472 start_48) '#\\+) +inf.f -inf.f)"
" #f)))"
"(if or-part_350"
" or-part_350"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 5))) '#\\t)"
"(if(not(eq? convert-mode_8 'number-or-false))"
"(if(char=?(string-ref s_472 start_48) '#\\+) '+inf.t '-inf.t)"
" #f)"
" #f)))))"
" #f)"
" #f)"
" #f)"
" #f)))"
"(if or-part_348"
" or-part_348"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 1))) '#\\n)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 2))) '#\\a)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 3))) '#\\n)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 4))) '#\\.)"
"(let-values(((or-part_351)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 5))) '#\\0) +nan.0 #f)))"
"(if or-part_351"
" or-part_351"
"(let-values(((or-part_352)"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 5))) '#\\f) +nan.f #f)))"
"(if or-part_352"
" or-part_352"
"(if(char=?(char-downcase(string-ref s_472(+ start_48 5))) '#\\t)"
"(if(not(eq? convert-mode_8 'number-or-false)) '+nan.t #f)"
" #f)))))"
" #f)"
" #f)"
" #f)"
" #f)))"
" #f)"
" #f))))"
"(define-values"
"(fail-extflonum)"
"(lambda(convert-mode_9 v_239)"
"(begin"
"(if(eq? convert-mode_9 'must-read)"
"        (let-values () (format \"cannot combine extflonum `~a` into complex number\" v_239))"
"(let-values() #f)))))"
"(define-values"
"(read-for-special-compound62.1)"
"(lambda(in-complex50_0"
" reading-first?51_0"
" s54_0"
" start55_0"
" end56_0"
" radix57_0"
" exactness58_0"
" convert-mode59_0"
" v60_0"
" combine61_0)"
"(begin"
" 'read-for-special-compound62"
"(let-values(((s_491) s54_0))"
"(let-values(((start_49) start55_0))"
"(let-values(((end_39) end56_0))"
"(let-values(((radix_10) radix57_0))"
"(let-values(((exactness_5) exactness58_0))"
"(let-values(((convert-mode_10) convert-mode59_0))"
"(let-values(((in-complex_3) in-complex50_0))"
"(let-values(((reading-first?_0) reading-first?51_0))"
"(let-values(((v_240) v60_0))"
"(let-values(((combine_1) combine61_0))"
"(let-values()"
"(if(eq? exactness_5 'exact)"
"(let-values()"
"(if(eq? convert-mode_10 'must-read)"
"                                  (let-values () (format \"no exact representation for `~a`\" v_240))"
"(let-values() #f)))"
"(if(if(extflonum? v_240)"
"(let-values(((or-part_190)(not reading-first?_0)))"
"(if or-part_190 or-part_190(not(eq? convert-mode_10 'must-read))))"
" #f)"
"(let-values()(fail-extflonum convert-mode_10 v_240))"
"(let-values()"
"(let-values(((v2_7)"
"(let-values(((s173_0) s_491)"
"((start174_0) start_49)"
"((end175_0) end_39)"
"((radix176_0) radix_10)"
"((temp177_1) #t)"
"((exactness178_0) exactness_5)"
"((in-complex179_0) in-complex_3)"
"((convert-mode180_0) convert-mode_10))"
"(do-string->number17.1"
" in-complex179_0"
" temp177_1"
" s173_0"
" start174_0"
" end175_0"
" radix176_0"
" exactness178_0"
" convert-mode180_0))))"
"(if(string? v2_7)"
"(let-values() v2_7)"
"(if(not v2_7)"
"(let-values() v2_7)"
"(if(extflonum? v_240)"
"(let-values()(fail-extflonum convert-mode_10 v_240))"
"(let-values()(combine_1 v_240 v2_7)))))))))))))))))))))))"
"(define-values"
"(hashes?)"
"(lambda(s_263 start_50 end_40)"
"(begin"
"(let-values(((v*_6 start*_5 stop*_6 step*_5)"
"(normalise-inputs"
" 'in-string"
"                     \"string\""
"(lambda(x_85)(string? x_85))"
"(lambda(x_86)(unsafe-string-length x_86))"
" s_263"
" start_50"
" end_40"
" 1)))"
"(begin"
" #t"
"((letrec-values(((for-loop_272)"
"(lambda(result_121 idx_5)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< idx_5 stop*_6)"
"(let-values(((c_81)(string-ref v*_6 idx_5)))"
"(let-values(((result_122)"
"(let-values()"
"(let-values(((result_123)"
"(let-values()(let-values()(char=? c_81 '#\\#)))))"
"(values result_123)))))"
"(if(if(not((lambda x_87 result_122) c_81))(not #f) #f)"
"(for-loop_272 result_122(unsafe-fx+ idx_5 1))"
" result_122)))"
" result_121)))))"
" for-loop_272)"
" #f"
" start*_5))))))"
"(define-values"
"(replace-hashes)"
"(lambda(s_271 start_51 end_41)"
"(begin"
"(let-values(((new-s_9)(make-string(- end_41 start_51))))"
"(begin"
"(let-values(((v*_7 start*_6 stop*_7 step*_6)"
"(normalise-inputs"
" 'in-string"
"                         \"string\""
"(lambda(x_88)(string? x_88))"
"(lambda(x_89)(unsafe-string-length x_89))"
" s_271"
" start_51"
" end_41"
" 1))"
"((start_52) 0))"
"(begin"
" #t"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_52)))"
"((letrec-values(((for-loop_273)"
"(lambda(idx_6 pos_115)"
"(begin"
" 'for-loop"
"(if(if(unsafe-fx< idx_6 stop*_7) #t #f)"
"(let-values(((c_82)(string-ref v*_7 idx_6))((i_121) pos_115))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(char=? c_82 '#\\#)"
"(string-set! new-s_9 i_121 '#\\0)"
"(string-set! new-s_9 i_121 c_82)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_273(unsafe-fx+ idx_6 1)(+ pos_115 1))(values))))"
"(values))))))"
" for-loop_273)"
" start*_6"
" start_52)))"
"(void)"
" new-s_9)))))"
"(define-values"
"(maybe-substring)"
"(lambda(s_381 start_3 end_3)"
"(begin(if(if(= 0 start_3)(= end_3(string-length s_381)) #f) s_381(substring s_381 start_3 end_3)))))"
"(define-values"
"(exactness-set?)"
"(lambda(exactness_6)"
"(begin"
"(let-values(((or-part_353)(eq? exactness_6 'exact)))(if or-part_353 or-part_353(eq? exactness_6 'inexact))))))"
"(define-values"
"(char-sign?)"
"(lambda(c_83)"
"(begin(let-values(((or-part_354)(char=? c_83 '#\\-)))(if or-part_354 or-part_354(char=? c_83 '#\\+))))))"
"(define-values"
"(digit?)"
"(lambda(c_84 radix_11)"
"(begin"
"(let-values(((v_241)(char->integer c_84)))"
"(let-values(((or-part_355)"
"(if(>= v_241(char->integer '#\\0))(<(- v_241(char->integer '#\\0)) radix_11) #f)))"
"(if or-part_355"
" or-part_355"
"(if(> radix_11 10)"
"(let-values(((or-part_356)"
"(if(>= v_241(char->integer '#\\a))(<(- v_241(-(char->integer '#\\a) 10)) radix_11) #f)))"
"(if or-part_356"
" or-part_356"
"(if(>= v_241(char->integer '#\\A))(<(- v_241(-(char->integer '#\\A) 10)) radix_11) #f)))"
" #f)))))))"
"(define-values"
"(fail-bad-number)"
"(lambda(convert-mode_11 s_137 start_53 end_42)"
"(begin"
"(if(eq? convert-mode_11 'must-read)"
"        (let-values () (format \"bad number `~.a`\" (substring s_137 start_53 end_42)))"
"(let-values() #f)))))"
"(define-values"
"(read-complains)"
"(lambda(convert-mode_12)(begin(if(eq? convert-mode_12 'read) 'must-read convert-mode_12))))"
"(define-values"
"(read-symbol-or-number8.1)"
"(lambda(extra-prefix2_0 mode1_0 init-c5_0 in6_1 orig-config7_0)"
"(begin"
" 'read-symbol-or-number8"
"(let-values(((init-c_6) init-c5_0))"
"(let-values(((in_26) in6_1))"
"(let-values(((orig-config_0) orig-config7_0))"
"(let-values(((mode_18) mode1_0))"
"(let-values(((extra-prefix_0) extra-prefix2_0))"
"(let-values()"
"(let-values(((config_37)"
"(if(string? mode_18)(override-parameter 1/read-cdot orig-config_0 #f) orig-config_0)))"
"(let-values(((rt_10)(read-config-readtable config_37)))"
"(let-values(((c1_30)"
"(if rt_10"
"(if(let-values(((or-part_217)(eq? mode_18 'symbol-or-number)))"
"(if or-part_217 or-part_217(eq? mode_18 'symbol/indirect)))"
"(readtable-symbol-parser rt_10)"
" #f)"
" #f)))"
"(if c1_30"
"((lambda(handler_2)"
"(readtable-apply"
" handler_2"
" init-c_6"
" in_26"
" config_37"
"(read-config-line config_37)"
"(read-config-col config_37)"
"(read-config-pos config_37)))"
" c1_30)"
"(let-values()"
"(let-values(((accum-str_1)(accum-string-init! config_37)))"
"(let-values(((quoted-ever?_0) #f))"
"(let-values(((case-sens?_0)(check-parameter read-case-sensitive config_37)))"
"(let-values((()"
"(begin"
"(if extra-prefix_0"
"(let-values()(accum-string-add! accum-str_1 extra-prefix_0))"
"(void))"
"(values))))"
"(let-values(((source_17)(read-config-source config_37)))"
"(let-values(((unexpected-quoted_0)"
"(lambda(c_48 after-c_0)"
"(begin"
" 'unexpected-quoted"
"(let-values(((in11_0) in_26)"
"((config12_1) config_37)"
"((c13_0) c_48)"
"                                                                     ((temp14_2) \"~a following `~a` in ~a\")"
"((temp15_2)"
"(if(eof-object? c_48)"
"                                                                        \"end-of-file\""
"                                                                        \"non-character\"))"
"((after-c16_0) after-c_0)"
"((temp17_1)"
"(if(eq? mode_18 'keyword)"
"                                                                        (let-values () \"keyword\")"
"(if(string? mode_18)"
"                                                                          (let-values () \"number\")"
"                                                                          (let-values () \"symbol\")))))"
"(reader-error12.1"
" unsafe-undefined"
" c13_0"
" #f"
" unsafe-undefined"
" in11_0"
" config12_1"
" temp14_2"
"(list temp15_2 after-c16_0 temp17_1)))))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_102)"
"(lambda(init-c_7"
" pipe-quote-c_0"
" foldcase-from_0)"
"(begin"
" 'loop"
"(let-values(((c_85)"
"(let-values(((or-part_82)"
" init-c_7))"
"(if or-part_82"
" or-part_82"
"(let-values(((in_27)"
" in_26)"
"((skip-count_8)"
" 0)"
"((source_18)"
" source_17))"
"(let-values(((c_51)"
"(peek-char-or-special"
" in_27"
" skip-count_8"
" 'special"
" source_18)))"
"(if(eq?"
" c_51"
" 'special)"
"(special1.1"
" 'special)"
" c_51)))))))"
"(let-values(((ec_4)"
"(let-values(((rt_11)"
" rt_10)"
"((c_70)"
" c_85))"
"(if(let-values(((or-part_357)"
"(not"
" rt_11)))"
"(if or-part_357"
" or-part_357"
"(not"
"(char? c_70))))"
"(let-values() c_70)"
"(let-values()"
"(*readtable-effective-char"
" rt_11"
" c_70))))))"
"(if(if pipe-quote-c_0"
"(not(char? ec_4))"
" #f)"
"(let-values()"
"(begin"
"(if init-c_7"
"(void)"
"(let-values()"
"(consume-char/special"
" in_26"
" config_37"
" c_85)))"
"(unexpected-quoted_0"
" c_85"
" pipe-quote-c_0)))"
"(if(if(not pipe-quote-c_0)"
"(readtable-char-delimiter?"
" rt_10"
" c_85"
" config_37)"
" #f)"
"(let-values()"
"(if case-sens?_0"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_1"
" string-foldcase"
" foldcase-from_0))))"
"(if(if pipe-quote-c_0"
"(char=? c_85 pipe-quote-c_0)"
" #f)"
"(let-values()"
"(begin"
"(if init-c_7"
"(void)"
"(let-values()"
"(consume-char"
" in_26"
" c_85)))"
"(loop_102"
" #f"
" #f"
"(accum-string-count"
" accum-str_1))))"
"(if(if(char=? ec_4 '#\\|)"
"(check-parameter"
" read-accept-bar-quote"
" config_37)"
" #f)"
"(let-values()"
"(begin"
"(if init-c_7"
"(void)"
"(let-values()"
"(consume-char"
" in_26"
" c_85)))"
"(set! quoted-ever?_0 #t)"
"(if case-sens?_0"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_1"
" string-foldcase"
" foldcase-from_0)))"
"(loop_102"
" #f"
" c_85"
"(accum-string-count"
" accum-str_1))))"
"(if(if(char=? ec_4 '#\\\\)"
"(not pipe-quote-c_0)"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if init-c_7"
"(void)"
"(let-values()"
"(consume-char"
" in_26"
" c_85)))"
"(values))))"
"(let-values(((next-c_0)"
"(let-values(((in_28)"
" in_26)"
"((source_19)"
" source_17))"
"(read-char-or-special"
" in_28"
" special1.1"
" source_19))))"
"(begin"
"(if(char? next-c_0)"
"(void)"
"(let-values()"
"(unexpected-quoted_0"
" next-c_0"
" c_85)))"
"(if(let-values(((or-part_54)"
" pipe-quote-c_0))"
"(if or-part_54"
" or-part_54"
" case-sens?_0))"
"(void)"
"(let-values()"
"(accum-string-convert!"
" accum-str_1"
" string-foldcase"
" foldcase-from_0)))"
"(accum-string-add!"
" accum-str_1"
" next-c_0)"
"(set! quoted-ever?_0"
" #t)"
"(loop_102"
" #f"
" #f"
"(accum-string-count"
" accum-str_1))))))"
"(let-values()"
"(begin"
"(if init-c_7"
"(void)"
"(let-values()"
"(consume-char"
" in_26"
" c_85)))"
"(accum-string-add!"
" accum-str_1"
" c_85)"
"(loop_102"
" #f"
" pipe-quote-c_0"
" foldcase-from_0))))))))))))))"
" loop_102)"
" init-c_6"
" #f"
" 0)"
"(values))))"
"(let-values(((str_29)"
"(let-values(((accum-str18_0) accum-str_1)"
"((config19_0) config_37))"
"(accum-string-get!6.1 0 accum-str18_0 config19_0))))"
"(let-values((()"
"(begin"
"(if(if(= 1(string-length str_29))"
"(if(not quoted-ever?_0)"
"(char=?"
" '#\\."
"(effective-char(string-ref str_29 0) config_37))"
" #f)"
" #f)"
"(let-values()"
"(let-values(((in20_1) in_26)"
"((config21_0) config_37)"
"                                                                             ((temp22_5) \"illegal use of `.`\"))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in20_1"
" config21_0"
" temp22_5"
"(list))))"
"(void))"
"(values))))"
"(let-values(((num_0)"
"(if(let-values(((or-part_32)"
"(eq? mode_18 'symbol-or-number)))"
"(if or-part_32 or-part_32(string? mode_18)))"
"(if(not quoted-ever?_0)"
"(1/string->number"
"(if(string? mode_18)"
"(string-append mode_18 str_29)"
" str_29)"
" 10"
" 'read"
"(if(check-parameter"
" 1/read-decimal-as-inexact"
" config_37)"
" 'decimal-as-inexact"
" 'decimal-as-exact))"
" #f)"
" #f)))"
"(begin"
"(if(string? num_0)"
"(let-values()"
"(let-values(((in23_1) in_26)"
"((config24_1) config_37)"
"                                                                   ((temp25_6) \"~a\")"
"((num26_0) num_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in23_1"
" config24_1"
" temp25_6"
"(list num26_0))))"
"(void))"
"(if(if(not num_0)(string? mode_18) #f)"
"(let-values()"
"(let-values(((in27_0) in_26)"
"((config28_0) config_37)"
"                                                                   ((temp29_5) \"bad number: `~a`\")"
"((temp30_4)(string-append mode_18 str_29)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in27_0"
" config28_0"
" temp29_5"
"(list temp30_4))))"
"(void))"
"(wrap"
"(let-values(((or-part_358) num_0))"
"(if or-part_358"
" or-part_358"
"(let-values(((or-part_166)"
"(if(eq? mode_18 'keyword)"
"(string->keyword str_29)"
" #f)))"
"(if or-part_166 or-part_166(string->symbol str_29)))))"
" in_26"
" config_37"
" str_29))))))))))))))))))))))))))"
"(define-values"
"(read-fixnum)"
"(lambda(read-one_3 init-c_0 in_5 config_15)"
"(begin"
"(let-values(((c_25)(read-char/skip-whitespace-and-comments init-c_0 read-one_3 in_5 config_15)))"
"(let-values(((line_8 col_7 pos_116)(port-next-location* in_5 c_25)))"
"          (let-values (((v_232) (read-number-literal c_25 in_5 config_15 \"#e\")))"
"(if(fixnum? v_232)"
"(let-values() v_232)"
"(if(eof-object? v_232)"
"(let-values() v_232)"
"(let-values()"
"(let-values(((in1_3) in_5)"
"((temp2_5)(reading-at config_15 line_8 col_7 pos_116))"
"                               ((temp3_6) \"expected a fixnum, found ~a\")"
"((v4_1) v_232))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in1_3"
" temp2_5"
" temp3_6"
"(list v4_1))))))))))))"
"(define-values"
"(read-flonum)"
"(lambda(read-one_4 init-c_8 in_20 config_38)"
"(begin"
"(let-values(((c_14)(read-char/skip-whitespace-and-comments init-c_8 read-one_4 in_20 config_38)))"
"(let-values(((line_9 col_8 pos_94)(port-next-location* in_20 c_14)))"
"          (let-values (((v_31) (read-number-literal c_14 in_20 config_38 \"#i\")))"
"(if(flonum? v_31)"
"(let-values() v_31)"
"(if(eof-object? v_31)"
"(let-values() v_31)"
"(let-values()"
"(let-values(((in5_0) in_20)"
"((temp6_1)(reading-at config_38 line_9 col_8 pos_94))"
"                               ((temp7_4) \"expected a flonum, found ~a\")"
"((v8_0) v_31))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in5_0"
" temp6_1"
" temp7_4"
"(list v8_0))))))))))))"
"(define-values"
"(read-number-literal)"
"(lambda(c_49 in_29 config_39 mode_19)"
"(begin"
"(if(not(char? c_49))"
"(let-values() c_49)"
"(let-values()"
"(let-values(((c9_0) c_49)((in10_2) in_29)((config11_1) config_39)((mode12_0) mode_19))"
"(read-symbol-or-number8.1 #f mode12_0 c9_0 in10_2 config11_1)))))))"
"(define-values"
"(read-vector11.1)"
"(lambda(length2_0 mode1_0 read-one5_0 opener-c6_0 opener7_0 closer8_0 in9_1 config10_1)"
"(begin"
" 'read-vector11"
"(let-values(((read-one_5) read-one5_0))"
"(let-values(((opener-c_1) opener-c6_0))"
"(let-values(((opener_2) opener7_0))"
"(let-values(((closer_2) closer8_0))"
"(let-values(((in_30) in9_1))"
"(let-values(((config_10) config10_1))"
"(let-values(((vector-mode_0) mode1_0))"
"(let-values(((expected-len_0) length2_0))"
"(let-values()"
"(let-values(((read-one-element_0)"
"(let-values(((tmp_41) vector-mode_0))"
"(if(equal? tmp_41 'any)"
"(let-values() read-one_5)"
"(if(equal? tmp_41 'fixnum)"
"(let-values()"
"(lambda(init-c_9 in_31 config_40)"
"(begin"
" 'read-one-element"
"(read-fixnum read-one_5 init-c_9 in_31 config_40))))"
"(if(equal? tmp_41 'flonum)"
"(let-values()"
"(lambda(init-c_10 in_11 config_26)"
"(begin"
" 'read-one-element"
"(read-flonum read-one_5 init-c_10 in_11 config_26))))"
"(let-values()(void))))))))"
"(let-values(((seq_2)"
"(let-values(((read-one-element14_0) read-one-element_0)"
"((opener-c15_0) opener-c_1)"
"((opener16_0) opener_2)"
"((closer17_0) closer_2)"
"((in18_0) in_30)"
"((config19_1) config_10)"
"((read-one20_0) read-one_5)"
"((temp21_2) #f))"
"(read-unwrapped-sequence17.1"
" temp21_2"
" unsafe-undefined"
" unsafe-undefined"
" #f"
" read-one20_0"
" read-one-element14_0"
" opener-c15_0"
" opener16_0"
" closer17_0"
" in18_0"
" config19_1))))"
"(let-values(((vec_61)"
"(if(not expected-len_0)"
"(let-values()"
"(let-values(((tmp_42) vector-mode_0))"
"(if(equal? tmp_42 'any)"
"(let-values()(list->vector seq_2))"
"(if(equal? tmp_42 'fixnum)"
"(let-values()"
"(let-values(((len_37)(length seq_2)))"
"(begin"
"(if(exact-nonnegative-integer? len_37)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/fxvector"
"                                                               \"exact-nonnegative-integer?\""
" len_37)))"
"(let-values(((fill_0) 0))"
"(let-values(((v_35)(make-fxvector len_37 fill_0)))"
"(begin"
"(if(zero? len_37)"
"(void)"
"(let-values()"
"(let-values(((lst_264) seq_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_264)))"
"((letrec-values(((for-loop_274)"
"(lambda(i_3 lst_104)"
"(begin"
" 'for-loop"
"(if(pair? lst_104)"
"(let-values(((e_78)"
"(unsafe-car"
" lst_104))"
"((rest_145)"
"(unsafe-cdr"
" lst_104)))"
"(let-values(((i_172)"
"(let-values(((i_94)"
" i_3))"
"(let-values(((i_173)"
"(let-values()"
"(begin"
"(let-values(((elem_0)"
"(let-values()"
" e_78)))"
"(if(fixnum?"
" elem_0)"
"(unsafe-fxvector-set!"
" v_35"
" i_94"
" elem_0)"
"(not-an-fX.1"
" 'for*/vector"
" elem_0)))"
"(unsafe-fx+"
" 1"
" i_94)))))"
"(values"
" i_173)))))"
"(if(if(not"
"((lambda x_90"
"(unsafe-fx="
" i_172"
" len_37))"
" e_78))"
"(not #f)"
" #f)"
"(for-loop_274"
" i_172"
" rest_145)"
" i_172)))"
" i_3)))))"
" for-loop_274)"
" 0"
" lst_264)))))"
" v_35))))))"
"(if(equal? tmp_42 'flonum)"
"(let-values()"
"(let-values(((len_38)(length seq_2)))"
"(begin"
"(if(exact-nonnegative-integer? len_38)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'for/flvector"
"                                                                 \"exact-nonnegative-integer?\""
" len_38)))"
"(let-values(((fill_1) 0.0))"
"(let-values(((v_187)(make-flvector len_38 fill_1)))"
"(begin"
"(if(zero? len_38)"
"(void)"
"(let-values()"
"(let-values(((lst_24) seq_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_24)))"
"((letrec-values(((for-loop_21)"
"(lambda(i_40 lst_25)"
"(begin"
" 'for-loop"
"(if(pair? lst_25)"
"(let-values(((e_12)"
"(unsafe-car"
" lst_25))"
"((rest_9)"
"(unsafe-cdr"
" lst_25)))"
"(let-values(((i_42)"
"(let-values(((i_43)"
" i_40))"
"(let-values(((i_153)"
"(let-values()"
"(begin"
"(let-values(((elem_1)"
"(let-values()"
" e_12)))"
"(if(flonum?"
" elem_1)"
"(unsafe-flvector-set!"
" v_187"
" i_43"
" elem_1)"
"(not-an-fX.1$1"
" 'for*/vector"
" elem_1)))"
"(unsafe-fx+"
" 1"
" i_43)))))"
"(values"
" i_153)))))"
"(if(if(not"
"((lambda x_91"
"(unsafe-fx="
" i_42"
" len_38))"
" e_12))"
"(not #f)"
" #f)"
"(for-loop_21"
" i_42"
" rest_9)"
" i_42)))"
" i_40)))))"
" for-loop_21)"
" 0"
" lst_24)))))"
" v_187))))))"
"(let-values()(void)))))))"
"(let-values()"
"(let-values(((len_39)(length seq_2)))"
"(if(= expected-len_0 len_39)"
"(let-values()(list->vector seq_2))"
"(if(< expected-len_0 len_39)"
"(let-values()"
"(let-values(((in22_1) in_30)"
"((config23_0) config_10)"
"((temp24_6)"
"                                                                    \"~avector length ~a is too small, ~a values provided\")"
"((temp25_7)"
"(let-values(((tmp_43) vector-mode_0))"
"(if(equal? tmp_43 'any)"
"                                                                        (let-values () \"\")"
"(if(equal? tmp_43 'fixnum)"
"                                                                          (let-values () \"fx\")"
"(if(equal? tmp_43 'flonum)"
"                                                                            (let-values () \"fl\")"
"(let-values()(void)))))))"
"((expected-len26_0) expected-len_0)"
"((len27_0) len_39))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in22_1"
" config23_0"
" temp24_6"
"(list temp25_7 expected-len26_0 len27_0))))"
"(let-values()"
"(let-values(((last-or_0)"
"(lambda(v_242)"
"(begin"
" 'last-or"
"(if(null? seq_2)"
"(wrap v_242 in_30 config_10 #f)"
"((letrec-values(((loop_113)"
"(lambda(seq_3)"
"(begin"
" 'loop"
"(if(null?(cdr seq_3))"
"(car seq_3)"
"(loop_113"
"(cdr seq_3)))))))"
" loop_113)"
" seq_2))))))"
"(let-values((()"
"(begin"
"(if(>=(integer-length expected-len_0) 48)"
"(let-values()"
"(raise"
"(exn:fail:out-of-memory"
"                                                                              \"out of memory\""
"(current-continuation-marks))))"
"(void))"
"(values))))"
"(let-values(((vec_69)"
"(let-values(((tmp_44) vector-mode_0))"
"(if(equal? tmp_44 'any)"
"(let-values()"
"(make-vector"
" expected-len_0"
"(last-or_0 0)))"
"(if(equal? tmp_44 'fixnum)"
"(let-values()"
"(make-fxvector"
" expected-len_0"
"(last-or_0 0)))"
"(if(equal? tmp_44 'flonum)"
"(let-values()"
"(make-flvector"
" expected-len_0"
"(last-or_0 0.0)))"
"(let-values()(void))))))))"
"(begin"
"(let-values(((tmp_45) vector-mode_0))"
"(if(equal? tmp_45 'any)"
"(let-values()"
"(begin"
"(let-values(((lst_8) seq_2)((start_54) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_8)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_54)))"
"((letrec-values(((for-loop_263)"
"(lambda(lst_299 pos_117)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_299)"
" #t"
" #f)"
"(let-values(((e_79)"
"(unsafe-car"
" lst_299))"
"((rest_175)"
"(unsafe-cdr"
" lst_299))"
"((i_174)"
" pos_117))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(vector-set!"
" vec_69"
" i_174"
" e_79))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_263"
" rest_175"
"(+ pos_117 1))"
"(values))))"
"(values))))))"
" for-loop_263)"
" lst_8"
" start_54)))"
"(void)))"
"(if(equal? tmp_45 'fixnum)"
"(let-values()"
"(begin"
"(let-values(((lst_178) seq_2)((start_55) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_178)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-naturals start_55)))"
"((letrec-values(((for-loop_28)"
"(lambda(lst_276 pos_17)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_276)"
" #t"
" #f)"
"(let-values(((e_80)"
"(unsafe-car"
" lst_276))"
"((rest_123)"
"(unsafe-cdr"
" lst_276))"
"((i_99)"
" pos_17))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(fxvector-set!"
" vec_69"
" i_99"
" e_80))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_28"
" rest_123"
"(+ pos_17 1))"
"(values))))"
"(values))))))"
" for-loop_28)"
" lst_178"
" start_55)))"
"(void)))"
"(if(equal? tmp_45 'flonum)"
"(let-values()"
"(begin"
"(let-values(((lst_306) seq_2)((start_56) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_306)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-naturals start_56)))"
"((letrec-values(((for-loop_275)"
"(lambda(lst_98 pos_118)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_98)"
" #t"
" #f)"
"(let-values(((e_81)"
"(unsafe-car"
" lst_98))"
"((rest_176)"
"(unsafe-cdr"
" lst_98))"
"((i_46)"
" pos_118))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(flvector-set!"
" vec_69"
" i_46"
" e_81))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_275"
" rest_176"
"(+"
" pos_118"
" 1))"
"(values))))"
"(values))))))"
" for-loop_275)"
" lst_306"
" start_56)))"
"(void)))"
"(let-values()(void))))))"
" vec_69))))))))))))"
"(wrap vec_61 in_30 config_10 opener_2))))))))))))))))"
"(define-values"
"(read-fixnum-or-flonum-vector)"
"(lambda(read-one_6 dispatch-c_0 c_86 c2_4 in_32 config_41)"
"(begin"
"(let-values(((vector-mode_1)(if(char=? c2_4 '#\\x) 'fixnum 'flonum)))"
"(let-values((()(begin(consume-char in_32 c2_4)(values))))"
"(let-values((()"
"(begin"
"(if(read-config-for-syntax? config_41)"
"(let-values()"
"(let-values(((in28_0) in_32)"
"((config29_0) config_41)"
"                                           ((temp30_5) \"literal f~avectors not allowed\")"
"((c231_0) c2_4))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in28_0"
" config29_0"
" temp30_5"
"(list c231_0))))"
"(void))"
"(values))))"
"(let-values(((c3_3)"
"(let-values(((in_33) in_32)((source_20)(read-config-source config_41)))"
"(read-char-or-special in_33 special1.1 source_20))))"
"(let-values(((vector-len_0 len-str_0 c4_1)"
"(if(decimal-digit? c3_3)"
"(let-values()(read-simple-number in_32 config_41 c3_3))"
"                              (let-values () (values #f \"\" c3_3)))))"
"(let-values(((tmp_46) c4_1))"
"(if(equal? tmp_46 '#\\()"
"(let-values()"
"(let-values(((read-one32_0) read-one_6)"
"((temp33_2) '#\\()"
"((temp34_6) '#\\()"
"((temp35_3) '#\\))"
"((in36_0) in_32)"
"((config37_0) config_41)"
"((vector-mode38_0) vector-mode_1)"
"((vector-len39_0) vector-len_0))"
"(read-vector11.1"
" vector-len39_0"
" vector-mode38_0"
" read-one32_0"
" temp33_2"
" temp34_6"
" temp35_3"
" in36_0"
" config37_0)))"
"(if(equal? tmp_46 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_41)"
"(let-values()"
"(let-values(((read-one40_0) read-one_6)"
"((temp41_2) '#\\[)"
"((temp42_2) '#\\[)"
"((temp43_3) '#\\])"
"((in44_0) in_32)"
"((config45_0) config_41)"
"((vector-mode46_0) vector-mode_1)"
"((vector-len47_0) vector-len_0))"
"(read-vector11.1"
" vector-len47_0"
" vector-mode46_0"
" read-one40_0"
" temp41_2"
" temp42_2"
" temp43_3"
" in44_0"
" config45_0)))"
"(let-values()"
"(let-values(((in48_0) in_32)"
"((config49_0) config_41)"
"                                         ((temp50_1) (format \"~a~a\" dispatch-c_0 (format \"~a~a\" c_86 c2_4))))"
"(bad-syntax-error20.1 '#\\x in48_0 config49_0 temp50_1)))))"
"(if(equal? tmp_46 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_41)"
"(let-values()"
"(let-values(((read-one51_0) read-one_6)"
"((temp52_1) '#\\{)"
"((temp53_3) '#\\{)"
"((temp54_0) '#\\})"
"((in55_1) in_32)"
"((config56_0) config_41)"
"((vector-mode57_0) vector-mode_1)"
"((vector-len58_0) vector-len_0))"
"(read-vector11.1"
" vector-len58_0"
" vector-mode57_0"
" read-one51_0"
" temp52_1"
" temp53_3"
" temp54_0"
" in55_1"
" config56_0)))"
"(let-values()"
"(let-values(((in59_0) in_32)"
"((config60_0) config_41)"
"                                           ((temp61_3) (format \"~a~a\" dispatch-c_0 (format \"~a~a\" c_86 c2_4))))"
"(bad-syntax-error20.1 '#\\x in59_0 config60_0 temp61_3)))))"
"(let-values()"
"(let-values(((in62_0) in_32)"
"((config63_0) config_41)"
"((c464_0) c4_1)"
"                                       ((temp65_2) \"expected `(`, `[`, or `{` after `#~a~a~a`\")"
"((c66_0) c_86)"
"((c267_0) c2_4)"
"((len-str68_0) len-str_0))"
"(reader-error12.1"
" unsafe-undefined"
" c464_0"
" #f"
" unsafe-undefined"
" in62_0"
" config63_0"
" temp65_2"
"(list c66_0 c267_0 len-str68_0))))))))))))))))"
"(define-values"
"(read-simple-number)"
"(lambda(in_34 config_42 init-c_11)"
"(begin"
"(let-values(((accum-str_2)(accum-string-init! config_42)))"
"(let-values((()(begin(accum-string-add! accum-str_2 init-c_11)(values))))"
"(let-values(((init-v_1)(digit->number init-c_11)))"
"(let-values(((v_243)"
"(let-values(((in69_0) in_34)"
"((config70_0) config_42)"
"((accum-str71_0) accum-str_2)"
"((temp72_1) 10)"
"((temp73_0) +inf.0)"
"((init-v74_0) init-v_1)"
"((init-v75_0) init-v_1))"
"(read-digits12.1 temp72_1 init-v74_0 temp73_0 init-v75_0 in69_0 config70_0 accum-str71_0))))"
"(values"
" v_243"
"(let-values(((accum-str76_0) accum-str_2)((config77_0) config_42))"
"(accum-string-get!6.1 0 accum-str76_0 config77_0))"
"(let-values(((in_35) in_34)((source_21)(read-config-source config_42)))"
"(read-char-or-special in_35 special1.1 source_21))))))))))"
"(define-values"
"(read-struct)"
"(lambda(read-one_3 dispatch-c_1 in_5 config_15)"
"(begin"
"(let-values(((c_25)"
"(let-values(((in_11) in_5)((source_22)(read-config-source config_15)))"
"(read-char-or-special in_11 special1.1 source_22))))"
"(let-values(((ec_5)(effective-char c_25 config_15)))"
"(let-values(((seq_4)"
"(let-values(((tmp_47) ec_5))"
"(if(equal? tmp_47 '#\\()"
"(let-values()(read-struct-sequence read-one_3 c_25 '#\\( '#\\) in_5 config_15))"
"(if(equal? tmp_47 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_15)"
"(let-values()(read-struct-sequence read-one_3 c_25 '#\\[ '#\\] in_5 config_15))"
"(let-values()"
"(let-values(((in1_4) in_5)"
"((config2_3) config_15)"
"                                                 ((temp3_7) (format \"~as~a\" dispatch-c_1 c_25)))"
"(bad-syntax-error20.1 '#\\x in1_4 config2_3 temp3_7)))))"
"(if(equal? tmp_47 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_15)"
"(let-values()(read-struct-sequence read-one_3 c_25 '#\\{ '#\\} in_5 config_15))"
"(let-values()"
"(let-values(((in4_1) in_5)"
"((config5_1) config_15)"
"                                                   ((temp6_2) (format \"~as~a\" dispatch-c_1 c_25)))"
"(bad-syntax-error20.1 '#\\x in4_1 config5_1 temp6_2)))))"
"(let-values()"
"(let-values(((in7_0) in_5)"
"((config8_0) config_15)"
"                                               ((temp9_5) \"expected ~a after `~as`\")"
"((temp10_0)(all-openers-str config_15))"
"((dispatch-c11_0) dispatch-c_1))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in7_0"
" config8_0"
" temp9_5"
"(list temp10_0 dispatch-c11_0))))))))))"
"(let-values((()"
"(begin"
"(if(null? seq_4)"
"(let-values()"
"(let-values(((in12_0) in_5)"
"((config13_0) config_15)"
"                                             ((temp14_1) \"missing structure description in `~as` form\")"
"((dispatch-c15_0) dispatch-c_1))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in12_0"
" config13_0"
" temp14_1"
"(list dispatch-c15_0))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(prefab-key?(car seq_4))"
"(void)"
"(let-values()"
"(let-values(((in16_0) in_5)"
"((config17_0) config_15)"
"                                               ((temp18_5) \"invalid structure description in `~as` form\")"
"((dispatch-c19_0) dispatch-c_1))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in16_0"
" config17_0"
" temp18_5"
"(list dispatch-c19_0)))))"
"(values))))"
"(let-values(((st_2)"
"(let-values(((with-handlers-predicate20_0) exn:fail?)"
"((with-handlers-handler21_0)"
"(lambda(exn_4)(begin 'with-handlers-handler21 #f))))"
"(let-values(((bpz_4)(continuation-mark-set-first #f break-enabled-key)))"
"(call-handled-body"
" bpz_4"
"(lambda(e_82)"
"(select-handler/no-breaks"
" e_82"
" bpz_4"
"(list(cons with-handlers-predicate20_0 with-handlers-handler21_0))))"
"(lambda()(prefab-key->struct-type(car seq_4)(length(cdr seq_4)))))))))"
"(begin"
"(if st_2"
"(void)"
"(let-values()"
"(let-values(((in22_2) in_5)"
"((config23_1) config_15)"
"((temp24_7)"
"(string-append"
"                                       \"mismatch between structure description\""
"                                       \" and number of provided field values in `~as` form\"))"
"((dispatch-c25_0) dispatch-c_1))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in22_2"
" config23_1"
" temp24_7"
"(list dispatch-c25_0)))))"
"(if(read-config-for-syntax? config_15)"
"(let-values()"
"(if(all-fields-immutable?(car seq_4))"
"(void)"
"(let-values()"
"(let-values(((in26_1) in_5)"
"((config27_1) config_15)"
"                                         ((temp28_2) \"cannot read mutable `~as` form as syntax\")"
"((dispatch-c29_0) dispatch-c_1))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in26_1"
" config27_1"
" temp28_2"
"(list dispatch-c29_0))))))"
"(void))"
"(wrap(apply make-prefab-struct seq_4) in_5 config_15 ec_5)))))))))))"
"(define-values"
"(read-struct-sequence)"
"(lambda(read-one_7 opener-c_2 opener_3 closer_3 in_16 config_43)"
"(begin"
"(let-values(((read-one30_0) read-one_7)"
"((opener-c31_0) opener-c_2)"
"((opener32_0) opener_3)"
"((closer33_0) closer_3)"
"((in34_0) in_16)"
"((config35_0) config_43)"
"((temp36_5)"
"(lambda(init-c_12 in_36 config_11)(read-one_7 init-c_12 in_36(disable-wrapping config_11)))))"
"(read-unwrapped-sequence17.1"
" 'all"
" unsafe-undefined"
" temp36_5"
" #f"
" unsafe-undefined"
" read-one30_0"
" opener-c31_0"
" opener32_0"
" closer33_0"
" in34_0"
" config35_0)))))"
"(define-values"
"(read-vector-or-graph)"
"(lambda(read-one_3 dispatch-c_1 init-c_13 in_37 config_44)"
"(begin"
"(let-values(((accum-str_3)(accum-string-init! config_44)))"
"(let-values((()(begin(accum-string-add! accum-str_3 init-c_13)(values))))"
"(let-values(((init-v_2)(digit->number init-c_13)))"
"(let-values(((v_30)"
"(let-values(((in1_5) in_37)"
"((config2_4) config_44)"
"((accum-str3_0) accum-str_3)"
"((temp4_3) 10)"
"((temp5_6) +inf.0)"
"((init-v6_0) init-v_2)"
"((init-v7_0) init-v_2))"
"(read-digits12.1 temp4_3 init-v6_0 temp5_6 init-v7_0 in1_5 config2_4 accum-str3_0))))"
"(let-values(((post-line_0 post-col_0 post-pos_0)(port-next-location in_37)))"
"(let-values(((get-accum_0)"
"(lambda(c_52)"
"(begin"
" 'get-accum"
"(format"
"                                   \"~a~a~a\""
" dispatch-c_1"
"(let-values(((accum-str8_0) accum-str_3)((config9_0) config_44))"
"(accum-string-get!6.1 0 accum-str8_0 config9_0))"
" c_52)))))"
"(let-values(((c_87)"
"(let-values(((in_38) in_37)((source_16)(read-config-source config_44)))"
"(read-char-or-special in_38 special1.1 source_16))))"
"(let-values(((ec_6)(effective-char c_87 config_44)))"
"(let-values(((tmp_48) ec_6))"
"(if(equal? tmp_48 '#\\()"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_3 config_44)"
"(let-values(((read-one10_0) read-one_3)"
"((c11_0) c_87)"
"((temp12_4) '#\\()"
"((temp13_2) '#\\))"
"((in14_0) in_37)"
"((config15_0) config_44)"
"((v16_0) v_30))"
"(read-vector11.1 v16_0 'any read-one10_0 c11_0 temp12_4 temp13_2 in14_0 config15_0))))"
"(if(equal? tmp_48 '#\\[)"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_3 config_44)"
"(if(check-parameter 1/read-square-bracket-as-paren config_44)"
"(let-values()"
"(let-values(((read-one17_0) read-one_3)"
"((c18_1) c_87)"
"((temp19_3) '#\\[)"
"((temp20_3) '#\\])"
"((in21_0) in_37)"
"((config22_0) config_44)"
"((v23_0) v_30))"
"(read-vector11.1"
" v23_0"
" 'any"
" read-one17_0"
" c18_1"
" temp19_3"
" temp20_3"
" in21_0"
" config22_0)))"
"(let-values()"
"(let-values(((in24_0) in_37)"
"((config25_0) config_44)"
"((temp26_4)(get-accum_0(get-accum_0 c_87))))"
"(bad-syntax-error20.1 '#\\x in24_0 config25_0 temp26_4))))))"
"(if(equal? tmp_48 '#\\{)"
"(let-values()"
"(begin"
"(accum-string-abandon! accum-str_3 config_44)"
"(if(check-parameter 1/read-curly-brace-as-paren config_44)"
"(let-values()"
"(let-values(((read-one27_0) read-one_3)"
"((c28_0) c_87)"
"((temp29_6) '#\\{)"
"((temp30_6) '#\\})"
"((in31_1) in_37)"
"((config32_0) config_44)"
"((v33_0) v_30))"
"(read-vector11.1"
" v33_0"
" 'any"
" read-one27_0"
" c28_0"
" temp29_6"
" temp30_6"
" in31_1"
" config32_0)))"
"(let-values()"
"(let-values(((in34_1) in_37)"
"((config35_1) config_44)"
"((temp36_6)(get-accum_0(get-accum_0 c_87))))"
"(bad-syntax-error20.1 '#\\x in34_1 config35_1 temp36_6))))))"
"(let-values()"
"(let-values(((tmp_45) c_87))"
"(if(if(equal? tmp_45 '#\\=) #t(equal? tmp_45 '#\\#))"
"(let-values()"
"(begin"
"(if(let-values(((or-part_308)(read-config-for-syntax? config_44)))"
"(if or-part_308"
" or-part_308"
"(not(check-parameter 1/read-accept-graph config_44))))"
"(let-values()"
"(let-values(((in37_1) in_37)"
"((config38_0) config_44)"
"                                                         ((temp39_4) \"`#...~a` forms not ~a\")"
"((c40_0) c_87)"
"((temp41_3)"
"(if(read-config-for-syntax? config_44)"
"                                                            \"enabled\""
"                                                            \"allowed in `read-syntax` mode\")))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in37_1"
" config38_0"
" temp39_4"
"(list c40_0 temp41_3))))"
"(void))"
"(if(<=(accum-string-count accum-str_3) 8)"
"(void)"
"(let-values()"
"(let-values(((in42_0) in_37)"
"((config43_0) config_44)"
"                                                         ((temp44_2) \"graph ID too long in `~a~a~a`\")"
"((dispatch-c45_0) dispatch-c_1)"
"((temp46_1)"
"(let-values(((accum-str48_0) accum-str_3)"
"((config49_1) config_44))"
"(accum-string-get!6.1 0 accum-str48_0 config49_1)))"
"((c47_0) c_87))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in42_0"
" config43_0"
" temp44_2"
"(list dispatch-c45_0 temp46_1 c47_0)))))"
"(let-values(((tmp_49) c_87))"
"(if(equal? tmp_49 '#\\=)"
"(let-values()"
"(let-values(((ph_1)(make-placeholder 'placeholder)))"
"(let-values(((ht_145)(get-graph-hash config_44)))"
"(let-values((()"
"(begin"
"(if(hash-ref ht_145 v_30 #f)"
"(let-values()"
"(let-values(((in50_0) in_37)"
"((config51_0) config_44)"
"                                                                                   ((temp52_2) \"multiple `~a~a~a` tags\")"
"((dispatch-c53_0) dispatch-c_1)"
"((temp54_1)"
"(let-values(((accum-str56_0)"
" accum-str_3)"
"((config57_0)"
" config_44))"
"(accum-string-get!6.1"
" 0"
" accum-str56_0"
" config57_0)))"
"((c55_0) c_87))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in50_0"
" config51_0"
" temp52_2"
"(list dispatch-c53_0 temp54_1 c55_0))))"
"(void))"
"(values))))"
"(let-values((()(begin(hash-set! ht_145 v_30 ph_1)(values))))"
"(let-values(((result-v_0)"
"(read-one_3 #f in_37(next-readtable config_44))))"
"(begin"
"(if(eof-object? result-v_0)"
"(let-values()"
"(let-values(((in58_0) in_37)"
"((config59_0) config_44)"
"((result-v60_0) result-v_0)"
"((temp61_4)"
"                                                                            \"expected an element for graph after `~a~a~a`, found end-of-file\")"
"((dispatch-c62_0) dispatch-c_1)"
"((temp63_3)"
"(let-values(((accum-str65_0) accum-str_3)"
"((config66_0) config_44))"
"(accum-string-get!6.1"
" 0"
" accum-str65_0"
" config66_0)))"
"((c64_0) c_87))"
"(reader-error12.1"
" unsafe-undefined"
" result-v60_0"
" #f"
" unsafe-undefined"
" in58_0"
" config59_0"
" temp61_4"
"(list dispatch-c62_0 temp63_3 c64_0))))"
"(void))"
"(accum-string-abandon! accum-str_3 config_44)"
"(placeholder-set! ph_1 result-v_0)"
" ph_1)))))))"
"(if(equal? tmp_49 '#\\#)"
"(let-values()"
"(begin0"
"(hash-ref"
"(let-values(((or-part_210)"
"(read-config-state-graph(read-config-st config_44))))"
"(if or-part_210 or-part_210 '#hash()))"
" v_30"
"(lambda()"
"(let-values(((in67_0) in_37)"
"((config68_0) config_44)"
"                                                                  ((temp69_1) \"no preceding `~a~a=` for `~a~a~a`\")"
"((dispatch-c70_0) dispatch-c_1)"
"((v71_0) v_30)"
"((dispatch-c72_0) dispatch-c_1)"
"((temp73_1)"
"(let-values(((accum-str75_0) accum-str_3)"
"((config76_0) config_44))"
"(accum-string-get!6.1 0 accum-str75_0 config76_0)))"
"((c74_0) c_87))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in67_0"
" config68_0"
" temp69_1"
"(list dispatch-c70_0 v71_0 dispatch-c72_0 temp73_1 c74_0)))))"
"(accum-string-abandon! accum-str_3 config_44)))"
"(let-values()(void)))))))"
"(let-values()"
"(let-values(((in77_0) in_37)"
"((config78_0) config_44)"
"((c79_0) c_87)"
"                                                   ((temp80_0) \"bad syntax `~a`\")"
"((temp81_1)(get-accum_0 c_87)))"
"(reader-error12.1"
" unsafe-undefined"
" c79_0"
" #f"
" unsafe-undefined"
" in77_0"
" config78_0"
" temp80_0"
"(list temp81_1))))))))))))))))))))))"
"(define-values"
"(get-graph-hash)"
"(lambda(config_45)"
"(begin"
"(let-values(((st_3)(read-config-st config_45)))"
"(let-values(((or-part_359)(read-config-state-graph st_3)))"
"(if or-part_359"
" or-part_359"
"(let-values(((ht_155)(make-hasheqv)))(begin(set-read-config-state-graph! st_3 ht_155) ht_155))))))))"
"(define-values"
"(coerce-key)"
"(lambda(key_85 config_8)"
"(begin"
"(let-values(((for-syntax?_7)(read-config-for-syntax? config_8)))"
"((read-config-coerce-key config_8) for-syntax?_7 key_85)))))"
"(define-values"
"(read-hash)"
"(lambda(read-one_3 dispatch-c_1 init-c_13 in_37 config_44)"
"(begin"
"(let-values(((accum-str_3)(accum-string-init! config_44)))"
"(let-values((()(begin(accum-string-add! accum-str_3 dispatch-c_1)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_3 init-c_13)(values))))"
"(let-values(((get-next!_0)"
"(lambda(expect-c_0 expect-alt-c_0)"
"(begin"
" 'get-next!"
"(let-values(((c_46)"
"(let-values(((in_39) in_37)((source_23)(read-config-source config_44)))"
"(read-char-or-special in_39 special1.1 source_23))))"
"(begin"
"(if(let-values(((or-part_6)(eqv? c_46 expect-c_0)))"
"(if or-part_6 or-part_6(eqv? c_46 expect-alt-c_0)))"
"(void)"
"(let-values()"
"(let-values(((in1_6) in_37)"
"((config2_5) config_44)"
"((c3_4) c_46)"
"                                                   ((temp4_4) \"expected `~a` after `~a`\")"
"((expect-c5_0) expect-c_0)"
"((temp6_3)"
"(let-values(((accum-str7_0) accum-str_3)((config8_1) config_44))"
"(accum-string-get!6.1 0 accum-str7_0 config8_1))))"
"(reader-error12.1"
" unsafe-undefined"
" c3_4"
" #f"
" unsafe-undefined"
" in1_6"
" config2_5"
" temp4_4"
"(list expect-c5_0 temp6_3)))))"
"(accum-string-add! accum-str_3 c_46)))))))"
"(let-values((()(begin(get-next!_0 '#\\a '#\\A)(values))))"
"(let-values((()(begin(get-next!_0 '#\\s '#\\S)(values))))"
"(let-values((()(begin(get-next!_0 '#\\h '#\\H)(values))))"
"(let-values(((content_11 opener_4 mode_20)"
"((letrec-values(((loop_114)"
"(lambda(mode_21)"
"(begin"
" 'loop"
"(let-values(((c_50)"
"(let-values(((in_40) in_37)"
"((source_24)"
"(read-config-source config_44)))"
"(read-char-or-special"
" in_40"
" special1.1"
" source_24))))"
"(let-values(((ec_7)(effective-char c_50 config_44)))"
"(let-values(((tmp_50) ec_7))"
"(if(equal? tmp_50 '#\\()"
"(let-values()"
"(let-values(((open-end-line_1"
" open-end-col_1"
" open-end-pos_1)"
"(port-next-location in_37)))"
"(let-values(((read-one-key+value_0)"
"(make-read-one-key+value"
" read-one_3"
" c_50"
" '#\\)"
" open-end-pos_1)))"
"(values"
"(let-values(((read-one-key+value9_0)"
" read-one-key+value_0)"
"((c10_1) c_50)"
"((temp11_4) '#\\()"
"((temp12_5) '#\\))"
"((in13_0) in_37)"
"((config14_0) config_44)"
"((config15_1) config_44)"
"((temp16_5) #f))"
"(read-unwrapped-sequence17.1"
" temp16_5"
" config15_1"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" read-one-key+value9_0"
" c10_1"
" temp11_4"
" temp12_5"
" in13_0"
" config14_0))"
" ec_7"
" mode_21))))"
"(if(equal? tmp_50 '#\\[)"
"(let-values()"
"(if(check-parameter"
" 1/read-square-bracket-as-paren"
" config_44)"
"(let-values()"
"(let-values(((open-end-line_2"
" open-end-col_2"
" open-end-pos_2)"
"(port-next-location in_37)))"
"(let-values(((read-one-key+value_1)"
"(make-read-one-key+value"
" read-one_3"
" c_50"
" '#\\]"
" open-end-pos_2)))"
"(values"
"(let-values(((read-one-key+value17_0)"
" read-one-key+value_1)"
"((c18_2) c_50)"
"((temp19_4) '#\\[)"
"((temp20_4) '#\\])"
"((in21_1) in_37)"
"((config22_1) config_44)"
"((config23_2) config_44)"
"((temp24_8) #f))"
"(read-unwrapped-sequence17.1"
" temp24_8"
" config23_2"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" read-one-key+value17_0"
" c18_2"
" temp19_4"
" temp20_4"
" in21_1"
" config22_1))"
" ec_7"
" mode_21))))"
"(let-values()"
"(let-values(((in25_0) in_37)"
"((config26_0) config_44)"
"                                                                                     ((temp27_6) \"illegal use of `~a`\")"
"((c28_1) c_50))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in25_0"
" config26_0"
" temp27_6"
"(list c28_1))))))"
"(if(equal? tmp_50 '#\\{)"
"(let-values()"
"(if(check-parameter"
" 1/read-curly-brace-as-paren"
" config_44)"
"(let-values()"
"(let-values(((open-end-line_3"
" open-end-col_3"
" open-end-pos_3)"
"(port-next-location in_37)))"
"(let-values(((read-one-key+value_2)"
"(make-read-one-key+value"
" read-one_3"
" c_50"
" '#\\}"
" open-end-pos_3)))"
"(values"
"(let-values(((read-one-key+value29_0)"
" read-one-key+value_2)"
"((c30_0) c_50)"
"((temp31_3) '#\\{)"
"((temp32_2) '#\\})"
"((in33_2) in_37)"
"((config34_1) config_44)"
"((config35_1) config_44)"
"((temp36_6) #f))"
"(read-unwrapped-sequence17.1"
" temp36_6"
" config35_1"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" read-one-key+value29_0"
" c30_0"
" temp31_3"
" temp32_2"
" in33_2"
" config34_1))"
" ec_7"
" mode_21))))"
"(let-values()"
"(let-values(((in37_2) in_37)"
"((config38_1) config_44)"
"((temp39_5)"
"                                                                                        \"illegal use of `~a`\")"
"((c40_1) c_50))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in37_2"
" config38_1"
" temp39_5"
"(list c40_1))))))"
"(if(if(equal? tmp_50 '#\\e)"
" #t"
"(equal? tmp_50 '#\\E))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_3 c_50)"
"(get-next!_0 '#\\q '#\\Q)"
"(loop_114 'eq)))"
"(if(if(equal? tmp_50 '#\\v)"
" #t"
"(equal? tmp_50 '#\\V))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_3 c_50)"
"(if(eq? mode_21 'eq)"
"(loop_114 'eqv)"
"(let-values(((in41_0) in_37)"
"((config42_0) config_44)"
"((temp43_4)"
"                                                                                            \"bad syntax `~a`\")"
"((temp44_3)"
"(let-values(((accum-str45_0)"
" accum-str_3)"
"((config46_0)"
" config_44))"
"(accum-string-get!6.1"
" 0"
" accum-str45_0"
" config46_0))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in41_0"
" config42_0"
" temp43_4"
"(list temp44_3))))))"
"(let-values()"
"(begin"
"(if(char? c_50)"
"(let-values()"
"(accum-string-add! accum-str_3 c_50))"
"(void))"
"(let-values(((in47_1) in_37)"
"((config48_1) config_44)"
"((c49_0) c_50)"
"                                                                                         ((temp50_2) \"bad syntax `~a`\")"
"((temp51_1)"
"(let-values(((accum-str52_0)"
" accum-str_3)"
"((config53_0)"
" config_44))"
"(accum-string-get!6.1"
" 0"
" accum-str52_0"
" config53_0))))"
"(reader-error12.1"
" unsafe-undefined"
" c49_0"
" #f"
" unsafe-undefined"
" in47_1"
" config48_1"
" temp50_2"
"(list temp51_1)))))))))))))))))"
" loop_114)"
" 'equal)))"
"(let-values(((graph?_0)(if(read-config-state-graph(read-config-st config_44)) #t #f)))"
"(wrap"
"(let-values(((tmp_51) mode_20))"
"(if(equal? tmp_51 'equal)"
"(let-values()"
"(if graph?_0(make-hash-placeholder content_11)(make-immutable-hash content_11)))"
"(if(equal? tmp_51 'eq)"
"(let-values()"
"(if graph?_0(make-hasheq-placeholder content_11)(make-immutable-hasheq content_11)))"
"(if(equal? tmp_51 'eqv)"
"(let-values()"
"(if graph?_0"
"(make-hasheqv-placeholder content_11)"
"(make-immutable-hasheqv content_11)))"
"(let-values()(void))))))"
" in_37"
" config_44"
" opener_4)))))))))))))"
"(define-values"
"(make-read-one-key+value)"
"(lambda(read-one_8 overall-opener-c_0 overall-closer-ec_0 prefix-end-pos_0)"
"(begin"
"(lambda(init-c_14 in_41 config_46)"
"(let-values(((c_88)(read-char/skip-whitespace-and-comments init-c_14 read-one_8 in_41 config_46)))"
"(let-values(((open-line_0 open-col_0 open-pos_0)(port-next-location* in_41 c_88)))"
"(let-values(((ec_8)(effective-char c_88 config_46)))"
"(let-values(((elem-config_1)(next-readtable config_46)))"
"(let-values(((closer_4)"
"(let-values(((tmp_52) ec_8))"
"(if(equal? tmp_52 '#\\()"
"(let-values() '#\\))"
"(if(equal? tmp_52 '#\\[)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_46) '#\\] #f))"
"(if(equal? tmp_52 '#\\{)"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_46) '#\\} #f))"
"(let-values() #f)))))))"
"(if(not closer_4)"
"(let-values()"
"(if(eof-object? c_88)"
"(let-values()"
"(let-values(((in54_0) in_41)"
"((config55_0) config_46)"
"((c56_0) c_88)"
"((prefix-end-pos57_0) prefix-end-pos_0)"
"                                       ((temp58_2) \"expected ~a to close `~a`\")"
"((temp59_4)(closer-name overall-closer-ec_0 config_46))"
"((overall-opener-c60_0) overall-opener-c_0))"
"(reader-error12.1"
" unsafe-undefined"
" c56_0"
" prefix-end-pos57_0"
" unsafe-undefined"
" in54_0"
" config55_0"
" temp58_2"
"(list temp59_4 overall-opener-c60_0))))"
"(if(char-closer? ec_8 config_46)"
"(let-values()"
"(let-values(((in61_0) in_41)"
"((temp62_2)(reading-at config_46 open-line_0 open-col_0 open-pos_0))"
"                                         ((temp63_4) \"~a\")"
"((temp64_4)(indentation-unexpected-closer-message ec_8 c_88 config_46)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in61_0"
" temp62_2"
" temp63_4"
"(list temp64_4))))"
"(let-values()"
"(let-values(((v_244)(read-one_8 c_88 in_41(keep-comment elem-config_1))))"
"(if(1/special-comment? v_244)"
"(let-values()"
"((make-read-one-key+value"
" read-one_8"
" overall-opener-c_0"
" overall-closer-ec_0"
" prefix-end-pos_0)"
" #f"
" in_41"
" config_46))"
"(let-values()"
"(let-values(((in65_0) in_41)"
"((temp66_3)(reading-at config_46 open-line_0 open-col_0 open-pos_0))"
"                                               ((temp67_4) \"expected ~a to start a hash pair\")"
"((temp68_4)(all-openers-str config_46)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in65_0"
" temp66_3"
" temp67_4"
"(list temp68_4))))))))))"
"(let-values()"
"(let-values(((k_41)(read-one_8 #f in_41(disable-wrapping elem-config_1))))"
"(let-values(((dot-c_0)(read-char/skip-whitespace-and-comments #f read-one_8 in_41 config_46)))"
"(let-values(((dot-line_1 dot-col_1 dot-pos_4)(port-next-location* in_41 dot-c_0)))"
"(let-values(((dot-ec_0)(effective-char dot-c_0 config_46)))"
"(let-values((()"
"(begin"
"(if(if(eqv? dot-ec_0 '#\\.)"
"(char-delimiter?"
"(let-values(((in_42) in_41)"
"((skip-count_9) 0)"
"((source_25)(read-config-source config_46)))"
"(let-values(((c_89)"
"(peek-char-or-special"
" in_42"
" skip-count_9"
" 'special"
" source_25)))"
"(if(eq? c_89 'special)(special1.1 'special) c_89)))"
" config_46)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in69_1) in_41)"
"((temp70_2)"
"(reading-at config_46 dot-line_1 dot-col_1 dot-pos_4))"
"((dot-c71_0) dot-c_0)"
"                                                               ((temp72_2) \"expected ~a and value for hash\")"
"((temp73_2)(dot-name config_46)))"
"(reader-error12.1"
" unsafe-undefined"
" dot-c71_0"
" #f"
" unsafe-undefined"
" in69_1"
" temp70_2"
" temp72_2"
"(list temp73_2)))))"
"(values))))"
"(let-values(((v_245)(read-one_8 #f in_41 elem-config_1)))"
"(let-values(((closer-c_0)"
"(read-char/skip-whitespace-and-comments #f read-one_8 in_41 config_46)))"
"(let-values(((closer-line_0 closer-col_0 closer-pos_0)"
"(port-next-location* in_41 closer-c_0)))"
"(let-values(((closer-ec_0)(effective-char closer-c_0 config_46)))"
"(begin"
"(if(eqv? closer-ec_0 closer_4)"
"(void)"
"(let-values()"
"(let-values(((in74_0) in_41)"
"((temp75_2)"
"(reading-at"
" config_46"
" closer-line_0"
" closer-col_0"
" closer-pos_0))"
"((closer-c76_0) closer-c_0)"
"                                                           ((temp77_1) \"expected ~a after value within a hash\")"
"((temp78_3)(closer-name closer_4 config_46)))"
"(reader-error12.1"
" unsafe-undefined"
" closer-c76_0"
" #f"
" unsafe-undefined"
" in74_0"
" temp75_2"
" temp77_1"
"(list temp78_3)))))"
"(cons(coerce-key k_41 elem-config_1) v_245))))))))))))))))))))))"
"(define-values"
"(read-string5.1)"
"(lambda(mode1_1 in3_0 config4_0)"
"(begin"
" 'read-string5"
"(let-values(((in_37) in3_0))"
"(let-values(((config_44) config4_0))"
"(let-values(((mode_11) mode1_1))"
"(let-values()"
"(let-values(((source_26)(read-config-source config_44)))"
"(let-values(((open-end-line_4 open-end-col_4 open-end-pos_4)(port-next-location in_37)))"
"(let-values(((accum-str_4)(accum-string-init! config_44)))"
"(let-values(((bad-end_0)"
"(lambda(c_46)"
"(begin"
" 'bad-end"
"(if(eof-object? c_46)"
"(let-values()"
"(let-values(((in8_0) in_37)"
"((config9_1) config_44)"
"((c10_2) c_46)"
"((open-end-pos11_0) open-end-pos_4)"
"                                                       ((temp12_6) \"expected a closing `\\\"`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c10_2"
" open-end-pos11_0"
" unsafe-undefined"
" in8_0"
" config9_1"
" temp12_6"
"(list))))"
"(let-values()"
"(let-values(((in13_1) in_37)"
"((config14_1) config_44)"
"((c15_1) c_46)"
"                                                       ((temp16_6) \"found non-character while reading a ~a\")"
"((mode17_0) mode_11))"
"(reader-error12.1"
" unsafe-undefined"
" c15_1"
" #f"
" unsafe-undefined"
" in13_1"
" config14_1"
" temp16_6"
"(list mode17_0)))))))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_115)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_17)"
"(let-values(((in_43) in_37)"
"((source_27) source_26))"
"(read-char-or-special"
" in_43"
" special1.1"
" source_27))))"
"(if(not(char? c_17))"
"(let-values()(bad-end_0 c_17))"
"(if(char=? '#\\\\ c_17)"
"(let-values()"
"(let-values(((escaping-c_0) c_17))"
"(let-values(((escaped-c_0)"
"(let-values(((in_24) in_37)"
"((source_28)"
" source_26))"
"(read-char-or-special"
" in_24"
" special1.1"
" source_28))))"
"(let-values((()"
"(begin"
"(if(not(char? escaped-c_0))"
"(let-values()"
"(bad-end_0 escaped-c_0))"
"(void))"
"(values))))"
"(let-values(((unknown-error_0)"
"(lambda()"
"(begin"
" 'unknown-error"
"(let-values(((in18_1)"
" in_37)"
"((config19_2)"
" config_44)"
"((temp20_5)"
"                                                                                                          \"unknown escape sequence `~a~a` in ~a\")"
"((escaping-c21_0)"
" escaping-c_0)"
"((escaped-c22_0)"
" escaped-c_0)"
"((mode23_0)"
" mode_11))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in18_1"
" config19_2"
" temp20_5"
"(list"
" escaping-c21_0"
" escaped-c22_0"
" mode23_0)))))))"
"(begin"
"(let-values(((tmp_53) escaped-c_0))"
"(let-values(((index_3)"
"(if(char? tmp_53)"
"(let-values(((codepoint_1)"
"(char->integer"
" tmp_53)))"
"(if(if(unsafe-fx>="
" codepoint_1"
" 10)"
"(unsafe-fx<"
" codepoint_1"
" 121)"
" #f)"
"(let-values(((tbl_1)"
" '#(10"
" 0"
" 0"
" 11"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 12"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 15"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 1"
" 0"
" 0"
" 0"
" 0"
" 2"
" 3"
" 0"
" 0"
" 9"
" 7"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 5"
" 0"
" 0"
" 0"
" 8"
" 0"
" 4"
" 14"
" 6"
" 0"
" 13)))"
"(unsafe-vector*-ref"
" tbl_1"
"(unsafe-fx-"
" codepoint_1"
" 10)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_3 7)"
"(if(unsafe-fx< index_3 3)"
"(if(unsafe-fx< index_3 1)"
"(let-values()"
"(unknown-error_0))"
"(if(unsafe-fx< index_3 2)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" escaped-c_0))"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\u0007))))"
"(if(unsafe-fx< index_3 4)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\backspace))"
"(if(unsafe-fx< index_3 5)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\tab))"
"(if(unsafe-fx< index_3 6)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\newline))"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\vtab))))))"
"(if(unsafe-fx< index_3 11)"
"(if(unsafe-fx< index_3 8)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\page))"
"(if(unsafe-fx< index_3 9)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\return))"
"(if(unsafe-fx< index_3 10)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" '#\\u001B))"
"(let-values()(void)))))"
"(if(unsafe-fx< index_3 13)"
"(if(unsafe-fx< index_3 12)"
"(let-values()"
"(let-values(((maybe-newline-c_0)"
"(let-values(((in_28)"
" in_37)"
"((skip-count_10)"
" 0)"
"((source_29)"
" source_26))"
"(let-values(((c_90)"
"(peek-char-or-special"
" in_28"
" skip-count_10"
" 'special"
" source_29)))"
"(if(eq?"
" c_90"
" 'special)"
"(special1.1"
" 'special)"
" c_90)))))"
"(begin"
"(if(eqv?"
" maybe-newline-c_0"
" '#\\newline)"
"(let-values()"
"(consume-char"
" in_37"
" maybe-newline-c_0))"
"(void))"
"(void))))"
"(let-values()"
"(let-values(((pos_98)"
"(accum-string-count"
" accum-str_4)))"
"(let-values((()"
"(begin"
"(accum-string-add!"
" accum-str_4"
" escaped-c_0)"
"(values))))"
"(let-values(((init-v_3)"
"(digit->number"
" escaped-c_0)))"
"(let-values(((v_201)"
"(let-values(((in24_1)"
" in_37)"
"((config25_1)"
" config_44)"
"((accum-str26_0)"
" accum-str_4)"
"((temp27_7)"
" 8)"
"((temp28_3)"
" 2)"
"((init-v29_0)"
" init-v_3)"
"((init-v30_0)"
" init-v_3))"
"(read-digits12.1"
" temp27_7"
" init-v29_0"
" temp28_3"
" init-v30_0"
" in24_1"
" config25_1"
" accum-str26_0))))"
"(begin"
"(if(<= v_201 255)"
"(void)"
"(let-values()"
"(let-values(((in31_2)"
" in_37)"
"((config32_1)"
" config_44)"
"((temp33_3)"
"                                                                                                                        \"escape sequence `~a~a` is out of range in ~a\")"
"((escaping-c34_0)"
" escaping-c_0)"
"((temp35_4)"
"(let-values(((accum-str37_0)"
" accum-str_4)"
"((config38_2)"
" config_44)"
"((pos39_0)"
" pos_98))"
"(accum-string-get!6.1"
" pos39_0"
" accum-str37_0"
" config38_2)))"
"((mode36_0)"
" mode_11))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in31_2"
" config32_1"
" temp33_3"
"(list"
" escaping-c34_0"
" temp35_4"
" mode36_0)))))"
"(set-accum-string-count!"
" accum-str_4"
" pos_98)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_201)))))))))"
"(if(unsafe-fx< index_3 14)"
"(let-values()"
"(let-values(((pos_13)"
"(accum-string-count"
" accum-str_4)))"
"(let-values(((v_246)"
"(let-values(((in40_1)"
" in_37)"
"((config41_1)"
" config_44)"
"((accum-str42_0)"
" accum-str_4)"
"((temp43_5)"
" 16)"
"((temp44_4)"
" 2))"
"(read-digits12.1"
" temp43_5"
" 0"
" temp44_4"
" #f"
" in40_1"
" config41_1"
" accum-str42_0))))"
"(begin"
"(if(integer? v_246)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_37"
" config_44"
" v_246"
" escaping-c_0"
" escaped-c_0)))"
"(set-accum-string-count!"
" accum-str_4"
" pos_13)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_246))))))"
"(if(unsafe-fx< index_3 15)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(eq?"
" mode_11"
" 'string)"
"(void)"
"(let-values()"
"(unknown-error_0)))"
"(values))))"
"(let-values(((pos_119)"
"(accum-string-count"
" accum-str_4)))"
"(let-values(((v_247)"
"(let-values(((in45_0)"
" in_37)"
"((config46_1)"
" config_44)"
"((accum-str47_0)"
" accum-str_4)"
"((temp48_2)"
" 16)"
"((temp49_2)"
" 4))"
"(read-digits12.1"
" temp48_2"
" 0"
" temp49_2"
" #f"
" in45_0"
" config46_1"
" accum-str47_0))))"
"(begin"
"(if(integer?"
" v_247)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_37"
" config_44"
" v_247"
" escaping-c_0"
" escaped-c_0)))"
"(if(let-values(((or-part_63)"
"(<"
" v_247"
" 55296)))"
"(if or-part_63"
" or-part_63"
"(>"
" v_247"
" 57343)))"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_4"
" pos_119)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_247))))"
"(let-values()"
"(let-values(((next!_0)"
"(lambda()"
"(begin"
" 'next!"
"(let-values(((next-c_1)"
"(let-values(((in_44)"
" in_37)"
"((source_30)"
" source_26))"
"(read-char-or-special"
" in_44"
" special1.1"
" source_30))))"
"(begin"
"(if(char?"
" next-c_1)"
"(let-values()"
"(accum-string-add!"
" accum-str_4"
" next-c_1))"
"(void))"
" next-c_1))))))"
"(let-values(((v2_8)"
"(let-values(((next-c_2)"
"(next!_0)))"
"(if(char=?"
" next-c_2"
" '#\\\\)"
"(let-values()"
"(let-values(((next-c_3)"
"(next!_0)))"
"(if(char=?"
" next-c_3"
" '#\\u)"
"(let-values()"
"(let-values(((v2_9)"
"(let-values(((in50_1)"
" in_37)"
"((config51_1)"
" config_44)"
"((accum-str52_1)"
" accum-str_4)"
"((temp53_4)"
" 16)"
"((temp54_2)"
" 4))"
"(read-digits12.1"
" temp53_4"
" 0"
" temp54_2"
" #f"
" in50_1"
" config51_1"
" accum-str52_1))))"
"(if(integer?"
" v2_9)"
"(let-values()"
"(if(>="
" v2_9"
" 56320)"
"(if(<="
" v2_9"
" 57343)"
" v2_9"
" #f)"
" #f))"
"(let-values()"
" v2_9))))"
"(let-values()"
" next-c_3))))"
"(let-values()"
" next-c_2)))))"
"(if(integer?"
" v2_8)"
"(let-values()"
"(let-values(((combined-v_0)"
"(+"
"(arithmetic-shift"
"(-"
" v_247"
" 55296)"
" 10)"
"(-"
" v2_8"
" 56320)"
" 65536)))"
"(if(>"
" combined-v_0"
" 1114111)"
"(let-values()"
"(let-values(((in55_2)"
" in_37)"
"((config56_1)"
" config_44)"
"((temp57_2)"
"                                                                                                                                      \"escape sequence `~au~a` is out of range in string\")"
"((escaping-c58_0)"
" escaping-c_0)"
"((temp59_5)"
"(let-values(((accum-str60_0)"
" accum-str_4)"
"((config61_0)"
" config_44)"
"((pos62_0)"
" pos_119))"
"(accum-string-get!6.1"
" pos62_0"
" accum-str60_0"
" config61_0))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in55_2"
" config56_1"
" temp57_2"
"(list"
" escaping-c58_0"
" temp59_5))))"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_4"
" pos_119)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" combined-v_0)))))))"
"(let-values()"
"(let-values(((in63_0)"
" in_37)"
"((config64_0)"
" config_44)"
"((v265_0)"
" v2_8)"
"((temp66_4)"
"                                                                                                                                \"bad or incomplete surrogate-style encoding at `~au~a`\")"
"((escaping-c67_0)"
" escaping-c_0)"
"((temp68_5)"
"(let-values(((accum-str69_0)"
" accum-str_4)"
"((config70_1)"
" config_44)"
"((pos71_0)"
" pos_119))"
"(accum-string-get!6.1"
" pos71_0"
" accum-str69_0"
" config70_1))))"
"(reader-error12.1"
" unsafe-undefined"
" v265_0"
" #f"
" unsafe-undefined"
" in63_0"
" config64_0"
" temp66_4"
"(list"
" escaping-c67_0"
" temp68_5))))))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(eq?"
" mode_11"
" 'string)"
"(void)"
"(let-values()"
"(unknown-error_0)))"
"(values))))"
"(let-values(((pos_20)"
"(accum-string-count"
" accum-str_4)))"
"(let-values(((v_248)"
"(let-values(((in72_0)"
" in_37)"
"((config73_0)"
" config_44)"
"((accum-str74_0)"
" accum-str_4)"
"((temp75_3)"
" 16)"
"((temp76_1)"
" 8))"
"(read-digits12.1"
" temp75_3"
" 0"
" temp76_1"
" #f"
" in72_0"
" config73_0"
" accum-str74_0))))"
"(begin"
"(if(integer?"
" v_248)"
"(void)"
"(let-values()"
"(no-hex-digits"
" in_37"
" config_44"
" v_248"
" escaping-c_0"
" escaped-c_0)))"
"(if(if(let-values(((or-part_55)"
"(<"
" v_248"
" 55296)))"
"(if or-part_55"
" or-part_55"
"(>"
" v_248"
" 57343)))"
"(<="
" v_248"
" 1114111)"
" #f)"
"(let-values()"
"(begin"
"(set-accum-string-count!"
" accum-str_4"
" pos_20)"
"(accum-string-add!"
" accum-str_4"
"(integer->char"
" v_248))))"
"(let-values()"
"(let-values(((in77_1)"
" in_37)"
"((config78_1)"
" config_44)"
"((temp79_2)"
"                                                                                                                        \"escape sequence `~aU~a` is out of range in string\")"
"((escaping-c80_0)"
" escaping-c_0)"
"((temp81_2)"
"(let-values(((accum-str82_0)"
" accum-str_4)"
"((config83_0)"
" config_44)"
"((pos84_0)"
" pos_20))"
"(accum-string-get!6.1"
" pos84_0"
" accum-str82_0"
" config83_0))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in77_1"
" config78_1"
" temp79_2"
"(list"
" escaping-c80_0"
" temp81_2)))))))))))))))))"
"(loop_115)))))))"
"                                                                  (if (char=? '#\\\" c_17)"
"(let-values() null)"
"(let-values()"
"(begin"
"(if(eq? mode_11 '|byte string|)"
"(let-values()"
"(if(byte?(char->integer c_17))"
"(void)"
"(let-values()"
"(let-values(((in85_0) in_37)"
"((config86_0) config_44)"
"((temp87_1)"
"                                                                                              \"character `~a` is out of range in byte string\")"
"((c88_0) c_17))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in85_0"
" config86_0"
" temp87_1"
"(list c88_0))))))"
"(void))"
"(accum-string-add! accum-str_4 c_17)"
"(loop_115)))))))))))"
" loop_115))"
"(values))))"
"(let-values(((str_30)"
"(if(eq? mode_11 '|byte string|)"
"(let-values(((accum-str89_0) accum-str_4)((config90_0) config_44))"
"(accum-string-get-bytes!13.1 0 accum-str89_0 config90_0))"
"(let-values(((accum-str91_0) accum-str_4)((config92_0) config_44))"
"(accum-string-get!6.1 0 accum-str91_0 config92_0)))))"
"(wrap str_30 in_37 config_44 str_30))))))))))))))"
"(define-values"
"(read-here-string)"
"(lambda(in_45 config_47)"
"(begin"
"(let-values(((source_31)(read-config-source config_47)))"
"(let-values(((open-end-line_5 open-end-col_5 open-end-pos_5)(port-next-location in_45)))"
"(let-values(((accum-str_5)(accum-string-init! config_47)))"
"(let-values(((full-terminator_0)"
"(cons"
" '#\\newline"
"((letrec-values(((loop_67)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_91)"
"(let-values(((in_46) in_45)((source_32) source_31))"
"(read-char-or-special in_46 special1.1 source_32))))"
"(if(eof-object? c_91)"
"(let-values()"
"(let-values(((in93_0) in_45)"
"((config94_0) config_47)"
"((c95_0) c_91)"
"((temp96_3)"
"                                                                     \"found end-of-file after `#<<` and before a newline\"))"
"(reader-error12.1"
" unsafe-undefined"
" c95_0"
" #f"
" unsafe-undefined"
" in93_0"
" config94_0"
" temp96_3"
"(list))))"
"(if(not(char? c_91))"
"(let-values()"
"(let-values(((in97_0) in_45)"
"((config98_0) config_47)"
"((c99_0) c_91)"
"((temp100_1)"
"                                                                       \"found non-character while reading `#<<`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c99_0"
" #f"
" unsafe-undefined"
" in97_0"
" config98_0"
" temp100_1"
"(list))))"
"(if(char=? c_91 '#\\newline)"
"(let-values() null)"
"(let-values()(cons c_91(loop_67)))))))))))"
" loop_67)))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_53)"
"(lambda(terminator_0 terminator-accum_0)"
"(begin"
" 'loop"
"(let-values(((c_92)"
"(let-values(((in_47) in_45)((source_33) source_31))"
"(read-char-or-special in_47 special1.1 source_33))))"
"(if(eof-object? c_92)"
"(let-values()"
"(if(null? terminator_0)"
"(void)"
"(let-values()"
"(let-values(((in101_0) in_45)"
"((config102_0) config_47)"
"((c103_0) c_92)"
"((open-end-pos104_0) open-end-pos_5)"
"((temp105_2)"
"                                                                            \"found end-of-file before terminating `~a`\")"
"((temp106_2)"
"(list->string(cdr full-terminator_0))))"
"(reader-error12.1"
" unsafe-undefined"
" c103_0"
" open-end-pos104_0"
" unsafe-undefined"
" in101_0"
" config102_0"
" temp105_2"
"(list temp106_2))))))"
"(if(not(char? c_92))"
"(let-values()"
"(let-values(((in107_0) in_45)"
"((config108_0) config_47)"
"((c109_0) c_92)"
"((temp110_2)"
"                                                                          \"found non-character while reading `#<<`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c109_0"
" #f"
" unsafe-undefined"
" in107_0"
" config108_0"
" temp110_2"
"(list))))"
"(if(if(pair? terminator_0)"
"(char=? c_92(car terminator_0))"
" #f)"
"(let-values()"
"(loop_53"
"(cdr terminator_0)"
"(cons(car terminator_0) terminator-accum_0)))"
"(if(if(null? terminator_0)(char=? c_92 '#\\newline) #f)"
"(let-values()(void))"
"(let-values()"
"(begin"
"(if(null? terminator-accum_0)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_307)"
"(reverse$1 terminator-accum_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_307)))"
"((letrec-values(((for-loop_276)"
"(lambda(lst_28)"
"(begin"
" 'for-loop"
"(if(pair? lst_28)"
"(let-values(((c_93)"
"(unsafe-car"
" lst_28))"
"((rest_177)"
"(unsafe-cdr"
" lst_28)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(accum-string-add!"
" accum-str_5"
" c_93))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_276"
" rest_177)"
"(values))))"
"(values))))))"
" for-loop_276)"
" lst_307)))"
"(void))))"
"(if(char=? c_92 '#\\newline)"
"(let-values()"
"(loop_53"
"(cdr full-terminator_0)"
"(list '#\\newline)))"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_5 c_92)"
"(loop_53 full-terminator_0 null)))))))))))))))"
" loop_53)"
"(cdr full-terminator_0)"
" null)"
"(values))))"
"(let-values(((str_31)"
"(let-values(((accum-str111_0) accum-str_5)((config112_0) config_47))"
"(accum-string-get!6.1 0 accum-str111_0 config112_0))))"
"(wrap str_31 in_45 config_47 str_31))))))))))"
"(define-values"
"(no-hex-digits)"
"(lambda(in_48 config_48 c_94 escaping-c_1 escaped-c_1)"
"(begin"
"(let-values(((in113_0) in_48)"
"((config114_0) config_48)"
"((c115_0) c_94)"
"                   ((temp116_1) \"no hex digit following `~a~a`\")"
"((escaping-c117_0) escaping-c_1)"
"((escaped-c118_0) escaped-c_1))"
"(reader-error12.1"
" unsafe-undefined"
" c115_0"
" #f"
" unsafe-undefined"
" in113_0"
" config114_0"
" temp116_1"
"(list escaping-c117_0 escaped-c118_0))))))"
"(define-values"
"(read-character)"
"(lambda(in_4 config_8)"
"(begin"
"(let-values(((c_95)"
"(let-values(((in_49) in_4)((source_26)(read-config-source config_8)))"
"(read-char-or-special in_49 special1.1 source_26))))"
"(let-values(((char_0)"
"(if(eof-object? c_95)"
"(let-values()"
"(let-values(((in1_7) in_4)"
"((config2_6) config_8)"
"((c3_5) c_95)"
"                                       ((temp4_5) \"expected a character after `#\\\\`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c3_5"
" #f"
" unsafe-undefined"
" in1_7"
" config2_6"
" temp4_5"
"(list))))"
"(if(not(char? c_95))"
"(let-values()"
"(let-values(((in5_1) in_4)"
"((config6_0) config_8)"
"((c7_2) c_95)"
"                                         ((temp8_3) \"found non-character after `#\\\\`\"))"
"(reader-error12.1"
" unsafe-undefined"
" c7_2"
" #f"
" unsafe-undefined"
" in5_1"
" config6_0"
" temp8_3"
"(list))))"
"(if(octal-digit? c_95)"
"(let-values()"
"(let-values(((c2_5)"
"(let-values(((in_50) in_4)"
"((skip-count_11) 0)"
"((source_34)(read-config-source config_8)))"
"(let-values(((c_48)"
"(peek-char-or-special"
" in_50"
" skip-count_11"
" 'special"
" source_34)))"
"(if(eq? c_48 'special)(special1.1 'special) c_48)))))"
"(if(if(char? c2_5)(octal-digit? c2_5) #f)"
"(let-values()"
"(let-values((()(begin(consume-char in_4 c2_5)(values))))"
"(let-values(((c3_6)"
"(let-values(((in_51) in_4)"
"((source_6)(read-config-source config_8)))"
"(read-char-or-special in_51 special1.1 source_6))))"
"(let-values(((v_230)"
"(if(if(char? c3_6)(octal-digit? c3_6) #f)"
"(let-values()"
"(+"
"(arithmetic-shift(digit->number c_95) 6)"
"(arithmetic-shift(digit->number c2_5) 3)"
"(digit->number c3_6)))"
"(let-values() #f))))"
"(begin"
"(if(if v_230(<= v_230 255) #f)"
"(void)"
"(let-values()"
"(let-values(((in9_2) in_4)"
"((config10_2) config_8)"
"((c311_0) c3_6)"
"                                                             ((temp12_7) \"bad character constant `#\\\\~a~a~a`\")"
"((c13_1) c_95)"
"((c214_0) c2_5)"
"                                                             ((temp15_5) (if (char? c3_6) c3_6 \"\")))"
"(reader-error12.1"
" unsafe-undefined"
" c311_0"
" #f"
" unsafe-undefined"
" in9_2"
" config10_2"
" temp12_7"
"(list c13_1 c214_0 temp15_5)))))"
"(integer->char v_230))))))"
"(let-values() c_95))))"
"(if(let-values(((or-part_80)(char=? c_95 '#\\u)))"
"(if or-part_80 or-part_80(char=? c_95 '#\\U)))"
"(let-values()"
"(let-values(((accum-str_6)(accum-string-init! config_8)))"
"(let-values(((v_35)"
"(let-values(((in16_1) in_4)"
"((config17_1) config_8)"
"((accum-str18_1) accum-str_6)"
"((temp19_5) 16)"
"((temp20_6)(if(char=? c_95 '#\\u) 4 8)))"
"(read-digits12.1"
" temp19_5"
" 0"
" temp20_6"
" #f"
" in16_1"
" config17_1"
" accum-str18_1))))"
"(if(integer? v_35)"
"(let-values()"
"(if(if(let-values(((or-part_96)(< v_35 55296)))"
"(if or-part_96 or-part_96(> v_35 57343)))"
"(<= v_35 1114111)"
" #f)"
"(let-values()"
"(begin(accum-string-abandon! accum-str_6 config_8)(integer->char v_35)))"
"(let-values()"
"(let-values(((in21_2) in_4)"
"((config22_2) config_8)"
"                                                         ((temp23_5) \"bad character constant `#\\\\u~a`\")"
"((temp24_9)"
"(let-values(((accum-str25_0) accum-str_6)"
"((config26_1) config_8))"
"(accum-string-get!6.1 0 accum-str25_0 config26_1))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in21_2"
" config22_2"
" temp23_5"
"(list temp24_9))))))"
"(let-values()(begin(accum-string-abandon! accum-str_6 config_8) c_95))))))"
"(if(char-alphabetic? c_95)"
"(let-values()"
"(let-values(((next-c_4)"
"(let-values(((in_52) in_4)"
"((skip-count_12) 0)"
"((source_10)(read-config-source config_8)))"
"(let-values(((c_15)"
"(peek-char-or-special"
" in_52"
" skip-count_12"
" 'special"
" source_10)))"
"(if(eq? c_15 'special)(special1.1 'special) c_15)))))"
"(if(if(char? next-c_4)(char-alphabetic? next-c_4) #f)"
"(let-values()"
"(let-values(((accum-str_7)(accum-string-init! config_8)))"
"(let-values((()(begin(accum-string-add! accum-str_7 c_95)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_7 next-c_4)(values))))"
"(let-values((()(begin(consume-char in_4 next-c_4)(values))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_106)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((next-c_5)"
"(let-values(((in_53)"
" in_4)"
"((skip-count_13)"
" 0)"
"((source_35)"
"(read-config-source"
" config_8)))"
"(let-values(((c_96)"
"(peek-char-or-special"
" in_53"
" skip-count_13"
" 'special"
" source_35)))"
"(if(eq?"
" c_96"
" 'special)"
"(special1.1"
" 'special)"
" c_96)))))"
"(if(if(char? next-c_5)"
"(char-alphabetic?"
" next-c_5)"
" #f)"
"(let-values()"
"(begin"
"(accum-string-add!"
" accum-str_7"
" next-c_5)"
"(consume-char"
" in_4"
" next-c_5)"
"(loop_106)))"
"(void)))))))"
" loop_106))"
"(values))))"
"(let-values(((name_68)"
"(string-foldcase"
"(let-values(((accum-str27_0) accum-str_7)"
"((config28_1) config_8))"
"(accum-string-get!6.1 0 accum-str27_0 config28_1)))))"
"(let-values(((tmp_54) name_68))"
"                                                      (if (if (equal? tmp_54 \"nul\") #t (equal? tmp_54 \"null\"))"
"(let-values() '#\\nul)"
"                                                        (if (equal? tmp_54 \"backspace\")"
"(let-values() '#\\backspace)"
"                                                          (if (equal? tmp_54 \"tab\")"
"(let-values() '#\\tab)"
"                                                            (if (if (equal? tmp_54 \"newline\")"
" #t"
"                                                                  (equal? tmp_54 \"linefeed\"))"
"(let-values() '#\\newline)"
"                                                              (if (equal? tmp_54 \"vtab\")"
"(let-values() '#\\vtab)"
"                                                                (if (equal? tmp_54 \"page\")"
"(let-values() '#\\page)"
"                                                                  (if (equal? tmp_54 \"return\")"
"(let-values() '#\\return)"
"                                                                    (if (equal? tmp_54 \"space\")"
"(let-values() '#\\space)"
"                                                                      (if (equal? tmp_54 \"rubout\")"
"(let-values() '#\\rubout)"
"(let-values()"
"(let-values(((in29_0) in_4)"
"((config30_0) config_8)"
"((temp31_3)"
"                                                                                        \"bad character constant `#\\\\~a`\")"
"((name32_0) name_68))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in29_0"
" config30_0"
" temp31_3"
"(list name32_0)))))))))))))))))))))"
"(let-values() c_95))))"
"(let-values() c_95))))))))"
"(wrap char_0 in_4 config_8 char_0))))))"
"(define-values"
"(read-quote)"
"(lambda(read-one_3 sym_31 desc_0 c_35 in_49 config_22)"
"(begin"
"(let-values(((wrapped-sym_0)(wrap sym_31 in_49 config_22 c_35)))"
"(let-values(((end-line_1 end-col_1 end-pos_3)(port-next-location in_49)))"
"(let-values(((e_83)(read-one_3 #f in_49 config_22)))"
"(begin"
"(if(eof-object? e_83)"
"(let-values()"
"(let-values(((in1_8) in_49)"
"((config2_7) config_22)"
"((e3_0) e_83)"
"((end-pos4_1) end-pos_3)"
"                               ((temp5_7) \"expected an element for ~a, found end-of-file\")"
"((desc6_0) desc_0))"
"(reader-error12.1"
" unsafe-undefined"
" e3_0"
" end-pos4_1"
" unsafe-undefined"
" in1_8"
" config2_7"
" temp5_7"
"(list desc6_0))))"
"(void))"
"(wrap(list wrapped-sym_0 e_83) in_49 config_22 #f))))))))"
"(define-values"
"(read-delimited-constant)"
"(lambda(init-c_1 can-match?_0 chars_0 val_79 in_49 config_22)"
"(begin"
"(let-values(((accum-str_8)(accum-string-init! config_22)))"
"(begin"
"(accum-string-add! accum-str_8 init-c_1)"
"((letrec-values(((loop_116)"
"(lambda(chars_1)"
"(begin"
" 'loop"
"(let-values(((c_37)"
"(let-values(((in_54) in_49)"
"((skip-count_14) 0)"
"((source_4)(read-config-source config_22)))"
"(let-values(((c_97)"
"(peek-char-or-special"
" in_54"
" skip-count_14"
" 'special"
" source_4)))"
"(if(eq? c_97 'special)(special1.1 'special) c_97)))))"
"(if(char-delimiter? c_37 config_22)"
"(let-values()"
"(if(null? chars_1)"
"(void)"
"(let-values()"
"(let-values(((in1_9) in_49)"
"((config2_8) config_22)"
"((c3_7) c_37)"
"                                                       ((temp4_6) \"bad syntax `#~a`\")"
"((temp5_8)"
"(let-values(((accum-str6_0) accum-str_8)"
"((config7_0) config_22))"
"(accum-string-get!6.1 0 accum-str6_0 config7_0))))"
"(reader-error12.1"
" unsafe-undefined"
" c3_7"
" #f"
" unsafe-undefined"
" in1_9"
" config2_8"
" temp4_6"
"(list temp5_8))))))"
"(if(null? chars_1)"
"(let-values()"
"(begin"
"(accum-string-add! accum-str_8 c_37)"
"(let-values(((in8_1) in_49)"
"((config9_2) config_22)"
"                                                       ((temp10_5) \"bad syntax `#~a`\")"
"((temp11_5)"
"(let-values(((accum-str12_0) accum-str_8)"
"((config13_1) config_22))"
"(accum-string-get!6.1 0 accum-str12_0 config13_1))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in8_1"
" config9_2"
" temp10_5"
"(list temp11_5)))))"
"(if(if can-match?_0(char=? c_37(car chars_1)) #f)"
"(let-values()"
"(begin"
"(consume-char in_49 c_37)"
"(accum-string-add! accum-str_8 c_37)"
"(loop_116(cdr chars_1))))"
"(let-values()"
"(begin"
"(consume-char/special in_49 config_22 c_37)"
"(accum-string-add! accum-str_8 c_37)"
"(let-values(((in14_1) in_49)"
"((config15_2) config_22)"
"                                                         ((temp16_4) \"bad syntax `#~a`\")"
"((temp17_4)"
"(let-values(((accum-str18_2) accum-str_8)"
"((config19_3) config_22))"
"(accum-string-get!6.1 0 accum-str18_2 config19_3))))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in14_1"
" config15_2"
" temp16_4"
"(list temp17_4)))))))))))))"
" loop_116)"
" chars_0)"
"(wrap"
" val_79"
" in_49"
" config_22"
"(let-values(((accum-str20_0) accum-str_8)((config21_1) config_22))"
"(accum-string-get!6.1 0 accum-str20_0 config21_1))))))))"
"(define-values"
"(read-box)"
"(lambda(read-one_3 dispatch-c_1 in_5 config_15)"
"(begin"
"(let-values((()"
"(begin"
"(if(check-parameter 1/read-accept-box config_15)"
"(void)"
"(let-values()"
"(let-values(((in1_7) in_5)"
"((config2_6) config_15)"
"                                       ((temp3_8) \"`~a&` forms not enabled\")"
"((dispatch-c4_0) dispatch-c_1))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in1_7"
" config2_6"
" temp3_8"
"(list dispatch-c4_0)))))"
"(values))))"
"(let-values(((open-end-line_6 open-end-col_6 open-end-pos_6)(port-next-location in_5)))"
"(let-values(((e_84)(read-one_3 #f in_5(next-readtable config_15))))"
"(begin"
"(if(eof-object? e_84)"
"(let-values()"
"(let-values(((in5_1) in_5)"
"((config6_0) config_15)"
"((e7_1) e_84)"
"((open-end-pos8_0) open-end-pos_6)"
"                               ((temp9_6) \"expected an element for `~a&` box, found end-of-file\")"
"((dispatch-c10_0) dispatch-c_1))"
"(reader-error12.1"
" unsafe-undefined"
" e7_1"
" open-end-pos8_0"
" unsafe-undefined"
" in5_1"
" config6_0"
" temp9_6"
"(list dispatch-c10_0))))"
"(void))"
"(wrap(box e_84) in_5 config_15 #f))))))))"
"(define-values"
"(read-regexp)"
"(lambda(mode-c_0 accum-str_9 in_5 config_15)"
"(begin"
"(let-values(((c3_8)"
"(let-values(((in_55) in_5)((source_36)(read-config-source config_15)))"
"(read-char-or-special in_55 special1.1 source_36))))"
"(let-values(((no-wrap-config_0)(disable-wrapping config_15)))"
"(let-values(((rx_0)"
"(let-values(((tmp_55) c3_8))"
"                          (if (equal? tmp_55 '#\\\")"
"(let-values()"
"(let-values((()(begin(accum-string-abandon! accum-str_9 config_15)(values))))"
"(let-values(((str_32)"
"(let-values(((in1_8) in_5)((no-wrap-config2_0) no-wrap-config_0))"
"(read-string5.1 'string in1_8 no-wrap-config2_0))))"
"(catch-and-reraise-as-reader/proc"
" in_5"
" config_15"
"(lambda()((if(char=? mode-c_0 '#\\r) regexp pregexp) str_32))))))"
"(if(equal? tmp_55 '#\\#)"
"(let-values()"
"(let-values((()(begin(accum-string-add! accum-str_9 c3_8)(values))))"
"(let-values(((c4_2)"
"(let-values(((in_20) in_5)"
"((source_37)(read-config-source config_15)))"
"(read-char-or-special in_20 special1.1 source_37))))"
"(let-values(((tmp_56) c4_2))"
"                                      (if (equal? tmp_56 '#\\\")"
"(let-values()"
"(let-values((()"
"(begin(accum-string-abandon! accum-str_9 config_15)(values))))"
"(let-values(((bstr_4)"
"(let-values(((in3_1) in_5)"
"((no-wrap-config4_0) no-wrap-config_0)"
"((temp5_9) '|byte string|))"
"(read-string5.1 temp5_9 in3_1 no-wrap-config4_0))))"
"(catch-and-reraise-as-reader/proc"
" in_5"
" config_15"
"(lambda()"
"((if(char=? mode-c_0 '#\\r) byte-regexp byte-pregexp) bstr_4))))))"
"(let-values()"
"(let-values(((in6_2) in_5)"
"((config7_1) config_15)"
"((c48_0) c4_2)"
"                                                       ((temp9_0) \"expected `\\\"` after `~a`\")"
"((temp10_2)"
"(let-values(((accum-str11_0) accum-str_9)"
"((config12_2) config_15))"
"(accum-string-get!6.1 0 accum-str11_0 config12_2))))"
"(reader-error12.1"
" unsafe-undefined"
" c48_0"
" #f"
" unsafe-undefined"
" in6_2"
" config7_1"
" temp9_0"
"(list temp10_2)))))))))"
"(let-values()"
"(let-values(((in13_2) in_5)"
"((config14_2) config_15)"
"((c315_0) c3_8)"
"                                             ((temp16_7) \"expected `\\\"` or `#` after `~a`\")"
"((temp17_5)"
"(let-values(((accum-str18_3) accum-str_9)((config19_4) config_15))"
"(accum-string-get!6.1 0 accum-str18_3 config19_4))))"
"(reader-error12.1"
" unsafe-undefined"
" c315_0"
" #f"
" unsafe-undefined"
" in13_2"
" config14_2"
" temp16_7"
"(list temp17_5)))))))))"
"(wrap rx_0 in_5 config_15 #f)))))))"
"(define-values"
"(read-extension-reader)"
"(lambda(read-one_9 read-recur_0 dispatch-c_2 in_56 config_24)"
"(begin"
"(let-values(((extend-str_0)"
"(read-extension-prefix(cons dispatch-c_2 '(#\\r #\\e)) '(#\\a #\\d #\\e #\\r) in_56 config_24)))"
"(let-values((()"
"(begin"
"(if(check-parameter 1/read-accept-reader config_24)"
"(void)"
"(let-values()"
"(let-values(((in52_0) in_56)"
"((config53_1) config_24)"
"                                         ((temp54_3) \"`~a` not enabled\")"
"((extend-str55_0) extend-str_0))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in52_0"
" config53_1"
" temp54_3"
"(list extend-str55_0)))))"
"(values))))"
"(let-values(((mod-path-wrapped_0)(read-one_9 #f in_56(next-readtable config_24))))"
"(begin"
"(if(eof-object? mod-path-wrapped_0)"
"(let-values()"
"(let-values(((in56_0) in_56)"
"((config57_1) config_24)"
"((mod-path-wrapped58_0) mod-path-wrapped_0)"
"                               ((temp59_6) \"expected a datum after `~a`, found end-of-file\")"
"((extend-str60_0) extend-str_0))"
"(reader-error12.1"
" unsafe-undefined"
" mod-path-wrapped58_0"
" #f"
" unsafe-undefined"
" in56_0"
" config57_1"
" temp59_6"
"(list extend-str60_0))))"
"(void))"
"(let-values(((temp47_1)((read-config-coerce config_24) #f mod-path-wrapped_0 #f))"
"((read-recur48_0) read-recur_0)"
"((in49_0) in_56)"
"((config50_0) config_24)"
"((mod-path-wrapped51_0) mod-path-wrapped_0))"
"(read-extension44.1"
" #f"
" mod-path-wrapped51_0"
" #f"
" '|#reader|"
" temp47_1"
" read-recur48_0"
" in49_0"
" config50_0)))))))))"
"(define-values"
"(read-extension-lang7.1)"
"(lambda(get-info?1_0 read-recur3_0 dispatch-c4_1 in5_2 config6_1)"
"(begin"
" 'read-extension-lang7"
"(let-values(((read-recur_1) read-recur3_0))"
"(let-values(((dispatch-c_3) dispatch-c4_1))"
"(let-values(((in_13) in5_2))"
"(let-values(((config_49) config6_1))"
"(let-values(((get-info?_0) get-info?1_0))"
"(let-values()"
"(let-values(((extend-str_1)"
"(read-extension-prefix(cons dispatch-c_3 '(#\\l)) '(#\\a #\\n #\\g) in_13 config_49)))"
"(let-values(((c_69)"
"(let-values(((in_57) in_13)((source_18)(read-config-source config_49)))"
"(read-char-or-special in_57 special1.1 source_18))))"
"(begin"
"(if(char=? c_69 '#\\space)"
"(void)"
"(let-values()"
"(let-values(((in67_1) in_13)"
"((config68_1) config_49)"
"                                         ((temp69_2) \"expected a single space after `~a`\")"
"((extend-str70_0) extend-str_1))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in67_1"
" config68_1"
" temp69_2"
"(list extend-str70_0)))))"
"(let-values(((extend-str61_0) extend-str_1)"
"((read-recur62_0) read-recur_1)"
"((in63_1) in_13)"
"((config64_1) config_49)"
"((temp65_3) '|#lang|)"
"((get-info?66_0) get-info?_0))"
"(read-lang29.1"
" get-info?66_0"
" #f"
" temp65_3"
" extend-str61_0"
" read-recur62_0"
" in63_1"
" config64_1))))))))))))))"
"(define-values"
"(read-extension-#!16.1)"
"(lambda(get-info?10_0 read-recur12_0 dispatch-c13_0 in14_2 config15_3)"
"(begin"
" 'read-extension-#!16"
"(let-values(((read-recur_2) read-recur12_0))"
"(let-values(((dispatch-c_4) dispatch-c13_0))"
"(let-values(((in_58) in14_2))"
"(let-values(((config_50) config15_3))"
"(let-values(((get-info?_1) get-info?10_0))"
"(let-values()"
"(let-values(((c_98)"
"(let-values(((in_59) in_58)((source_38)(read-config-source config_50)))"
"(read-char-or-special in_59 special1.1 source_38))))"
"(begin"
"(if(char-lang-nonsep? c_98)"
"(void)"
"(let-values()"
"(let-values(((in78_0) in_58)"
"((config79_0) config_50)"
"((temp80_1)"
"(if(char? c_98)(string dispatch-c_4 '#\\! c_98)(string dispatch-c_4 '#\\!))))"
"(bad-syntax-error20.1 '#\\x in78_0 config79_0 temp80_1))))"
"(let-values(((temp71_1)(string dispatch-c_4 '#\\!))"
"((read-recur72_0) read-recur_2)"
"((in73_0) in_58)"
"((config74_0) config_50)"
"((c75_0) c_98)"
"((temp76_2) '|#!|)"
"((get-info?77_0) get-info?_1))"
"(read-lang29.1"
" get-info?77_0"
" c75_0"
" temp76_2"
" temp71_1"
" read-recur72_0"
" in73_0"
" config74_0)))))))))))))"
"(define-values"
"(read-lang29.1)"
"(lambda(get-info?20_0 init-c19_0 who21_0 extend-str25_0 read-recur26_0 in27_1 config28_2)"
"(begin"
" 'read-lang29"
"(let-values(((extend-str_2) extend-str25_0))"
"(let-values(((read-recur_3) read-recur26_0))"
"(let-values(((in_60) in27_1))"
"(let-values(((config_51) config28_2))"
"(let-values(((init-c_15) init-c19_0))"
"(let-values(((get-info?_2) get-info?20_0))"
"(let-values(((who_29) who21_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(check-parameter 1/read-accept-reader config_51)"
"(check-parameter 1/read-accept-lang config_51)"
" #f)"
"(void)"
"(let-values()"
"(let-values(((in88_0) in_60)"
"((config89_0) config_51)"
"                                                       ((temp90_2) \"`~a` not enabled\")"
"((extend-str91_0) extend-str_2))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in88_0"
" config89_0"
" temp90_2"
"(list extend-str91_0)))))"
"(values))))"
"(let-values(((line_10 col_9 pos_120)(port-next-location in_60)))"
"(let-values(((accum-str_10)(accum-string-init! config_51)))"
"(let-values((()"
"(begin"
"(if init-c_15"
"(let-values()(accum-string-add! accum-str_10 init-c_15))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"((letrec-values(((loop_117)"
"(lambda()"
"(begin"
" 'loop"
"(let-values(((c_9)"
"(let-values(((in_61) in_60)"
"((skip-count_15) 0)"
"((source_39)"
"(read-config-source"
" config_51)))"
"(let-values(((c_99)"
"(peek-char-or-special"
" in_61"
" skip-count_15"
" 'special"
" source_39)))"
"(if(eq? c_99 'special)"
"(special1.1 'special)"
" c_99)))))"
"(if(eof-object? c_9)"
"(let-values()(void))"
"(if(not(char? c_9))"
"(let-values()"
"(begin"
"(consume-char/special in_60 config_51 c_9)"
"(let-values(((in92_0) in_60)"
"((config93_0) config_51)"
"((c94_0) c_9)"
"((temp95_1)"
"                                                                                            \"found non-character while reading `#~a`\")"
"((extend-str96_0)"
" extend-str_2))"
"(reader-error12.1"
" unsafe-undefined"
" c94_0"
" #f"
" unsafe-undefined"
" in92_0"
" config93_0"
" temp95_1"
"(list extend-str96_0)))))"
"(if(char-whitespace? c_9)"
"(let-values()(void))"
"(if(let-values(((or-part_168)"
"(char-lang-nonsep? c_9)))"
"(if or-part_168"
" or-part_168"
"(char=? '#\\/ c_9)))"
"(let-values()"
"(begin"
"(consume-char in_60 c_9)"
"(accum-string-add! accum-str_10 c_9)"
"(loop_117)))"
"(let-values()"
"(begin"
"(consume-char in_60 c_9)"
"(let-values(((in97_1) in_60)"
"((config98_1) config_51)"
"((temp99_1)"
"(string-append"
"                                                                                                 \"expected only alphanumeric, `-`, `+`, `_`, or `/`\""
"                                                                                                 \" characters for `~a`, found `~a`\"))"
"((extend-str100_0)"
" extend-str_2)"
"((c101_0) c_9))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in97_1"
" config98_1"
" temp99_1"
"(list"
" extend-str100_0"
" c101_0))))))))))))))"
" loop_117))"
"(values))))"
"(let-values(((lang-str_0)"
"(let-values(((accum-str102_0) accum-str_10)((config103_0) config_51))"
"(accum-string-get!6.1 0 accum-str102_0 config103_0))))"
"(let-values((()"
"(begin"
"                                                  (if (equal? lang-str_0 \"\")"
"(let-values()"
"(let-values(((in104_0) in_60)"
"((config105_0) config_51)"
"((temp106_3)"
"                                                                    \"expected a non-empty sequence of alphanumeric, `-`, `+`, `_`, or `/` after `~a`\")"
"((extend-str107_0) extend-str_2))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in104_0"
" config105_0"
" temp106_3"
"(list extend-str107_0))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(char=? '#\\/(string-ref lang-str_0 0))"
"(let-values()"
"(let-values(((in108_0) in_60)"
"((config109_0) config_51)"
"((temp110_3)"
"                                                                      \"expected a name that does not start `/` after `~a`\")"
"((extend-str111_0) extend-str_2))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in108_0"
" config109_0"
" temp110_3"
"(list extend-str111_0))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(char=?"
" '#\\/"
"(string-ref lang-str_0(sub1(string-length lang-str_0))))"
"(let-values()"
"(let-values(((in112_0) in_60)"
"((config113_0) config_51)"
"((temp114_4)"
"                                                                        \"expected a name that does not end `/` after `~a`\")"
"((extend-str115_0) extend-str_2))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in112_0"
" config113_0"
" temp114_4"
"(list extend-str115_0))))"
"(void))"
"(values))))"
"(let-values(((submod-path_0)"
"(list* 'submod(string->symbol lang-str_0) '(reader))))"
"(let-values(((reader-path_0)"
"                                                        (string->symbol (string-append lang-str_0 \"/lang/reader\"))))"
"(let-values(((submod-path81_0) submod-path_0)"
"((reader-path82_0) reader-path_0)"
"((read-recur83_0) read-recur_3)"
"((in84_0) in_60)"
"((temp85_1)(reading-at config_51 line_10 col_9 pos_120))"
"((get-info?86_0) get-info?_2)"
"((who87_0) who_29))"
"(read-extension44.1"
" get-info?86_0"
" unsafe-undefined"
" submod-path81_0"
" who87_0"
" reader-path82_0"
" read-recur83_0"
" in84_0"
" temp85_1))))))))))))))))))))))))"
"(define-values"
"(char-lang-nonsep?)"
"(lambda(c_100)"
"(begin"
"(if(<(char->integer c_100) 128)"
"(let-values(((or-part_89)(char-alphabetic? c_100)))"
"(if or-part_89"
" or-part_89"
"(let-values(((or-part_305)(char-numeric? c_100)))"
"(if or-part_305"
" or-part_305"
"(let-values(((or-part_360)(char=? '#\\- c_100)))"
"(if or-part_360"
" or-part_360"
"(let-values(((or-part_361)(char=? '#\\+ c_100)))"
"(if or-part_361 or-part_361(char=? '#\\_ c_100)))))))))"
" #f))))"
"(define-values"
"(read-extension-prefix)"
"(lambda(already_0 wanted_0 in_62 config_52)"
"(begin"
"(let-values(((accum-str_11)(accum-string-init! config_52)))"
"(begin"
"(let-values(((lst_201) already_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_201)))"
"((letrec-values(((for-loop_208)"
"(lambda(lst_308)"
"(begin"
" 'for-loop"
"(if(pair? lst_308)"
"(let-values(((c_101)(unsafe-car lst_308))((rest_178)(unsafe-cdr lst_308)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(accum-string-add! accum-str_11 c_101))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_208 rest_178)(values))))"
"(values))))))"
" for-loop_208)"
" lst_201)))"
"(void)"
"((letrec-values(((loop_12)"
"(lambda(wanted_1)"
"(begin"
" 'loop"
"(if(null? wanted_1)"
"(void)"
"(let-values()"
"(let-values(((c_102)"
"(let-values(((in_63) in_62)"
"((source_40)(read-config-source config_52)))"
"(read-char-or-special in_63 special1.1 source_40))))"
"(begin"
"(if(char? c_102)(let-values()(accum-string-add! accum-str_11 c_102))(void))"
"(if(eqv? c_102(car wanted_1))"
"(void)"
"(let-values()"
"(let-values(((in118_0) in_62)"
"((config119_0) config_52)"
"((temp120_2)"
"(let-values(((accum-str122_0) accum-str_11)"
"((config123_0) config_52))"
"(accum-string-get!6.1 0 accum-str122_0 config123_0)))"
"((c121_0) c_102))"
"(bad-syntax-error20.1 c121_0 in118_0 config119_0 temp120_2))))"
"(loop_12(cdr wanted_1))))))))))"
" loop_12)"
" wanted_0)"
"(let-values(((accum-str116_0) accum-str_11)((config117_0) config_52))"
"(accum-string-get!6.1 0 accum-str116_0 config117_0)))))))"
"(define-values"
"(read-extension44.1)"
"(lambda(get-info?34_0"
" mod-path-wrapped33_0"
" try-first-mod-path32_0"
" who35_0"
" mod-path-datum40_0"
" read-recur41_0"
" in42_1"
" config43_1)"
"(begin"
" 'read-extension44"
"(let-values(((try-first-mod-path_0) try-first-mod-path32_0))"
"(let-values(((mod-path-datum_0) mod-path-datum40_0))"
"(let-values(((read-recur_4) read-recur41_0))"
"(let-values(((in_64) in42_1))"
"(let-values(((config_53) config43_1))"
"(let-values(((mod-path-wrapped_1)"
"(if(eq? mod-path-wrapped33_0 unsafe-undefined)"
"((read-config-coerce config_53)"
" #t"
" mod-path-datum_0"
"(let-values(((in124_0) in_64)((config125_0) config_53))"
"(port+config->srcloc49.1 #f in124_0 config125_0)))"
" mod-path-wrapped33_0)))"
"(let-values(((get-info?_3) get-info?34_0))"
"(let-values(((who_30) who35_0))"
"(let-values()"
"(let-values((()(begin(force-parameters! config_53)(values))))"
"(let-values(((guard_0)(1/current-reader-guard)))"
"(let-values(((mod-path_28)"
"(let-values(((or-part_362)"
"(if try-first-mod-path_0"
"(let-values(((mod-path_29)(guard_0 try-first-mod-path_0)))"
"(if((read-config-module-declared? config_53)"
" try-first-mod-path_0)"
" mod-path_29"
" #f))"
" #f)))"
"(if or-part_362 or-part_362(guard_0 mod-path-datum_0)))))"
"(let-values(((for-syntax?_8)(read-config-for-syntax? config_53)))"
"(let-values(((dynamic-require_2)(read-config-dynamic-require config_53)))"
"(let-values(((no-value_0)(gensym)))"
"(let-values(((extension_0)"
"(if get-info?_3"
"(let-values()"
"(dynamic-require_2 mod-path_28 'get-info(lambda() no-value_0)))"
"(let-values()"
"(dynamic-require_2"
" mod-path_28"
"(if for-syntax?_8 'read-syntax 'read))))))"
"(if(eq? extension_0 no-value_0)"
"(let-values() #f)"
"(let-values()"
"(let-values(((result-v_1)"
"(if(if for-syntax?_8(not get-info?_3) #f)"
"(let-values()"
"(if(procedure-arity-includes? extension_0 6)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()"
"(extension_0"
"(read-config-source config_53)"
" in_64"
" mod-path-wrapped_1"
"(read-config-line config_53)"
"(read-config-col config_53)"
"(read-config-pos config_53)))))"
"(if(procedure-arity-includes? extension_0 2)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()"
"(extension_0"
"(read-config-source config_53)"
" in_64))))"
"(let-values()"
"(raise-argument-error"
" who_30"
"                                                                   \"(or/c (procedure-arity-includes?/c 2) (procedure-arity-includes?/c 6))\""
" extension_0)))))"
"(let-values()"
"(if(procedure-arity-includes? extension_0 5)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()"
"(extension_0"
" in_64"
" mod-path-wrapped_1"
"(read-config-line config_53)"
"(read-config-col config_53)"
"(read-config-pos config_53)))))"
"(if get-info?_3"
"(let-values()"
"(raise-argument-error"
" who_30"
"                                                                   \"(procedure-arity-includes?/c 5)\""
" extension_0))"
"(if(procedure-arity-includes? extension_0 1)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-read-config"
" config_53)"
"(let-values()(extension_0 in_64))))"
"(let-values()"
"(raise-argument-error"
" who_30"
"                                                                     \"(or/c (procedure-arity-includes?/c 1) (procedure-arity-includes?/c 5))\""
" extension_0)))))))))"
"(if get-info?_3"
"(let-values()"
"(begin"
"(if(if(procedure? result-v_1)"
"(procedure-arity-includes? result-v_1 2)"
" #f)"
"(void)"
"(let-values()"
"(raise-result-error"
" 'read-language"
"                                                       \"(procedure-arity-includes?/c 2)\""
" result-v_1)))"
" result-v_1))"
"(if(1/special-comment? result-v_1)"
"(let-values()(read-recur_4 #f in_64 config_53))"
"(let-values()"
"(coerce result-v_1 in_64 config_53))))))))))))))))))))))))))"
"(define-values"
"(read-language/get-info)"
"(lambda(read-one_3 in_2 config_7 fail-k_5)"
"(begin"
"(let-values(((c_25)(read-char/skip-whitespace-and-comments #f read-one_3 in_2 config_7)))"
"(let-values(((line_8 col_7 pos_116)(port-next-location* in_2 c_25)))"
"(let-values(((l-config_0)"
"(override-parameter 1/read-accept-reader(reading-at config_7 line_8 col_7 pos_116) #t)))"
"(if(not(eqv? c_25 '#\\#))"
"              (let-values () (if fail-k_5 (fail-k_5) (lang-error in_2 l-config_0 \"\" c_25)))"
"(let-values()"
"(let-values(((c2_6)"
"(let-values(((in_54) in_2)((source_41)(read-config-source l-config_0)))"
"(read-char-or-special in_54 special1.1 source_41))))"
"(if(eqv? c2_6 '#\\l)"
"(let-values()"
"(let-values(((read-one1_0) read-one_3)"
"((c2_7) c_25)"
"((in3_2) in_2)"
"((l-config4_0) l-config_0)"
"((temp5_3) #t))"
"(read-extension-lang7.1 temp5_3 read-one1_0 c2_7 in3_2 l-config4_0)))"
"(if(eqv? c2_6 '#\\!)"
"(let-values()"
"(let-values(((read-one6_0) read-one_3)"
"((c7_3) c_25)"
"((in8_2) in_2)"
"((l-config9_0) l-config_0)"
"((temp10_6) #t))"
"(read-extension-#!16.1 temp10_6 read-one6_0 c7_3 in8_2 l-config9_0)))"
"(let-values()"
"(if fail-k_5(fail-k_5)(lang-error in_2 l-config_0(string c_25) c2_6))))))))))))))"
"(define-values"
"(lang-error)"
"(lambda(in_51 config_54 prefix_7 c_67)"
"(begin"
"(let-values(((add-prefix_0)"
"(lambda(s_78)"
"(begin"
" 'add-prefix"
"                        (if (string=? prefix_7 \"\") (format \"`~a` followed by ~a\" prefix_7 s_78) s_78)))))"
"(let-values(((in11_1) in_51)"
"((config12_3) config_54)"
"((c13_2) c_67)"
"((temp14_5) 'read-language)"
"((temp15_6)"
"(string-append"
"                       \"expected (after whitespace and comments) `#lang ` or `#!` followed\""
"                       \" immediately by a language name, found ~a\"))"
"((temp16_8)"
"(if(eof-object? c_67)"
"                        (let-values () (add-prefix_0 \"end-of-file\"))"
"(if(not(char? c_67))"
"                          (let-values () (add-prefix_0 \"non-character\"))"
"                          (let-values () (format \"`~a~a`\" prefix_7 c_67))))))"
"(reader-error12.1 unsafe-undefined c13_2 #f temp14_5 in11_1 config12_3 temp15_6(list temp16_8)))))))"
"(define-values"
"(read30.1)"
"(lambda(coerce12_1"
" coerce-key13_1"
" dynamic-require10_2"
" for-syntax?8_0"
" init-c2_0"
" keep-comment?14_1"
" local-graph?6_0"
" module-declared?11_1"
" next-readtable3_0"
" read-compiled9_1"
" readtable4_0"
" recursive?5_0"
" source7_0"
" wrap1_0"
" in29_1)"
"(begin"
" 'read30"
"(let-values(((in_20) in29_1))"
"(let-values(((wrap_7) wrap1_0))"
"(let-values(((init-c_16) init-c2_0))"
"(let-values(((next-readtable_3)"
"(if(eq? next-readtable3_0 unsafe-undefined)(1/current-readtable) next-readtable3_0)))"
"(let-values(((readtable_3)(if(eq? readtable4_0 unsafe-undefined) next-readtable_3 readtable4_0)))"
"(let-values(((recursive?_0) recursive?5_0))"
"(let-values(((local-graph?_1) local-graph?6_0))"
"(let-values(((source_5) source7_0))"
"(let-values(((for-syntax?_9) for-syntax?8_0))"
"(let-values(((read-compiled_2) read-compiled9_1))"
"(let-values(((dynamic-require_3) dynamic-require10_2))"
"(let-values(((module-declared?_2) module-declared?11_1))"
"(let-values(((coerce_2) coerce12_1))"
"(let-values(((coerce-key_2) coerce-key13_1))"
"(let-values(((keep-comment?_3)"
"(if(eq? keep-comment?14_1 unsafe-undefined)"
" recursive?_0"
" keep-comment?14_1)))"
"(let-values()"
"(let-values(((config_55)"
"(let-values(((c1_31)(if recursive?_0(current-read-config) #f)))"
"(if c1_31"
"((lambda(config_56)"
"(let-values(((config52_0) config_56)"
"((for-syntax?53_0) for-syntax?_9)"
"((wrap54_0) wrap_7)"
"((readtable55_0) readtable_3)"
"((next-readtable56_0) next-readtable_3)"
"((local-graph?57_0) local-graph?_1)"
"((keep-comment?58_0) keep-comment?_3))"
"(read-config-update42.1"
" for-syntax?53_0"
" keep-comment?58_0"
" next-readtable56_0"
" readtable55_0"
" local-graph?57_0"
" wrap54_0"
" config52_0)))"
" c1_31)"
"(let-values()"
"(let-values(((readtable59_1) readtable_3)"
"((next-readtable60_1) next-readtable_3)"
"((source61_0) source_5)"
"((for-syntax?62_0) for-syntax?_9)"
"((wrap63_0) wrap_7)"
"((read-compiled64_0) read-compiled_2)"
"((dynamic-require65_0) dynamic-require_3)"
"((module-declared?66_0) module-declared?_2)"
"((coerce67_0) coerce_2)"
"((coerce-key68_0) coerce-key_2)"
"((keep-comment?69_0) keep-comment?_3))"
"(make-read-config26.1"
" coerce67_0"
" coerce-key68_0"
" dynamic-require65_0"
" for-syntax?62_0"
" keep-comment?69_0"
" module-declared?66_0"
" next-readtable60_1"
" read-compiled64_0"
" readtable59_1"
" source61_0"
" wrap63_0)))))))"
"(let-values(((v_34)(read-one init-c_16 in_20 config_55)))"
"(if(if(let-values(((or-part_9)(not recursive?_0)))"
"(if or-part_9 or-part_9 local-graph?_1))"
"(read-config-state-graph(read-config-st config_55))"
" #f)"
"(let-values()"
"(catch-and-reraise-as-reader/proc"
" #f"
" config_55"
"(lambda()(make-reader-graph v_34))))"
"(if(if recursive?_0"
"(if(not local-graph?_1)"
"(if(not for-syntax?_9)"
"(if(not(eof-object? v_34))(not(1/special-comment? v_34)) #f)"
" #f)"
" #f)"
" #f)"
"(let-values()(begin(get-graph-hash config_55) v_34))"
"(let-values() v_34))))))))))))))))))))))))"
"(define-values"
"(read-language49.1)"
"(lambda(coerce38_0"
" coerce-key39_0"
" dynamic-require36_0"
" for-syntax?33_0"
" module-declared?37_0"
" read-compiled35_0"
" wrap34_0"
" in47_2"
" fail-k48_0)"
"(begin"
" 'read-language49"
"(let-values(((in_65) in47_2))"
"(let-values(((fail-k_6) fail-k48_0))"
"(let-values(((for-syntax?_10) for-syntax?33_0))"
"(let-values(((wrap_8) wrap34_0))"
"(let-values(((read-compiled_3) read-compiled35_0))"
"(let-values(((dynamic-require_4) dynamic-require36_0))"
"(let-values(((module-declared?_3) module-declared?37_0))"
"(let-values(((coerce_3) coerce38_0))"
"(let-values(((coerce-key_3) coerce-key39_0))"
"(let-values()"
"(let-values(((config_57)"
"(let-values(((temp70_3) #f)"
"((temp71_2) #f)"
"((for-syntax?72_0) for-syntax?_10)"
"((wrap73_0) wrap_8)"
"((read-compiled74_0) read-compiled_3)"
"((dynamic-require75_0) dynamic-require_4)"
"((module-declared?76_0) module-declared?_3)"
"((coerce77_0) coerce_3)"
"((coerce-key78_0) coerce-key_3))"
"(make-read-config26.1"
" coerce77_0"
" coerce-key78_0"
" dynamic-require75_0"
" for-syntax?72_0"
" #f"
" module-declared?76_0"
" temp71_2"
" read-compiled74_0"
" temp70_3"
" #f"
" wrap73_0))))"
"(let-values(((l-config_1)(override-parameter 1/read-accept-reader config_57 #f)))"
"(read-language/get-info read-undotted in_65 config_57 fail-k_6))))))))))))))))"
"(define-values"
"(read-one)"
"(lambda(init-c_17 in_62 config_52)"
"(begin"
"(if(not(check-parameter 1/read-cdot config_52))"
"(let-values()(read-undotted init-c_17 in_62 config_52))"
"(if(check-parameter 1/read-cdot config_52)"
"(let-values()"
"(let-values(((line_11 col_10 pos_92)(port-next-location in_62)))"
"(let-values(((v_110)(read-undotted init-c_17 in_62 config_52)))"
"(if(1/special-comment? v_110)"
"(let-values() v_110)"
"(let-values()"
"((letrec-values(((loop_118)"
"(lambda(v_112)"
"(begin"
" 'loop"
"(let-values(((c_103)"
"(let-values(((in_66) in_62)"
"((skip-count_16) 0)"
"((source_40)(read-config-source config_52)))"
"(let-values(((c_104)"
"(peek-char-or-special"
" in_66"
" skip-count_16"
" 'special"
" source_40)))"
"(if(eq? c_104 'special)(special1.1 'special) c_104)))))"
"(let-values(((ec_9)(effective-char c_103 config_52)))"
"(if(not(char? ec_9))"
"(let-values() v_112)"
"(if(char-whitespace? ec_9)"
"(let-values()(begin(consume-char in_62 c_103)(loop_118 v_112)))"
"(if(char=? ec_9 '#\\.)"
"(let-values()"
"(let-values(((dot-line_2 dot-col_2 dot-pos_5)"
"(port-next-location in_62)))"
"(let-values((()(begin(consume-char in_62 c_103)(values))))"
"(let-values(((pos-config_0)"
"(reading-at"
" config_52"
" dot-line_2"
" dot-col_2"
" dot-pos_5)))"
"(let-values(((cdot_0)"
"(wrap '#%dot in_62 pos-config_0 '#\\.)))"
"(let-values(((post-v_0)"
"(read-undotted #f in_62 config_52)))"
"(begin"
"(if(eof-object? post-v_0)"
"(let-values()"
"(let-values(((in79_0) in_62)"
"((pos-config80_0) pos-config_0)"
"((eof81_0) eof)"
"((temp82_2)"
"                                                                                    \"expected a datum after cdot, found end-of-file\"))"
"(reader-error12.1"
" unsafe-undefined"
" eof81_0"
" #f"
" unsafe-undefined"
" in79_0"
" pos-config80_0"
" temp82_2"
"(list))))"
"(void))"
"(loop_118"
"(wrap"
"(list cdot_0 v_112 post-v_0)"
" in_62"
"(reading-at config_52 line_11 col_10 pos_92)"
" '#\\.)))))))))"
"(let-values() v_112))))))))))"
" loop_118)"
" v_110))))))"
"(void))))))"
"(define-values"
"(read-undotted)"
"(lambda(init-c_18 in_67 config_58)"
"(begin"
"(let-values(((c_31)(read-char/skip-whitespace-and-comments init-c_18 read-one in_67 config_58)))"
"(let-values(((line_12 col_11 pos_121)(port-next-location* in_67 c_31)))"
"(if(eof-object? c_31)"
"(let-values() eof)"
"(if(not(char? c_31))"
"(let-values()"
"(let-values(((v_249)(special-value c_31)))"
"(if(1/special-comment? v_249)"
"(let-values()(if(read-config-keep-comment? config_58) v_249(read-undotted #f in_67 config_58)))"
"(let-values()(coerce v_249 in_67(reading-at config_58 line_12 col_11 pos_121))))))"
"(let-values(((c2_8)(readtable-handler config_58 c_31)))"
"(if c2_8"
"((lambda(handler_3)"
"(let-values(((v_250)(readtable-apply handler_3 c_31 in_67 config_58 line_12 col_11 pos_121)))"
"(retry-special-comment v_250 in_67 config_58)))"
" c2_8)"
"(let-values()"
"(let-values(((ec_10)(effective-char c_31 config_58)))"
"(let-values((()"
"(begin"
"(if(not(char-closer? ec_10 config_58))"
"(let-values()(track-indentation! config_58 line_12 col_11))"
"(void))"
"(values))))"
"(let-values(((r-config_0)(reading-at(discard-comment config_58) line_12 col_11 pos_121)))"
"(let-values(((tmp_57) ec_10))"
"(let-values(((index_4)"
"(if(char? tmp_57)"
"(let-values(((codepoint_2)(char->integer tmp_57)))"
"(if(if(unsafe-fx>= codepoint_2 34)(unsafe-fx< codepoint_2 126) #f)"
"(if(unsafe-fx< codepoint_2 91)"
"(if(unsafe-fx< codepoint_2 40)"
"(let-values(((tbl_2) '#(11 1 0 0 0 2)))"
"(unsafe-vector*-ref tbl_2(unsafe-fx- codepoint_2 34)))"
"(if(unsafe-fx< codepoint_2 42)"
"(let-values(((tbl_3) '#(5 6)))"
"(unsafe-vector*-ref tbl_3(unsafe-fx- codepoint_2 40)))"
"(if(unsafe-fx< codepoint_2 44)"
" 0"
"(if(unsafe-fx< codepoint_2 45) 4 0))))"
"(let-values(((tbl_4)"
" '#(7"
" 0"
" 8"
" 0"
" 0"
" 3"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 0"
" 9"
" 12"
" 10)))"
"(unsafe-vector*-ref tbl_4(unsafe-fx- codepoint_2 91))))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_4 6)"
"(if(unsafe-fx< index_4 2)"
"(if(unsafe-fx< index_4 1)"
"(let-values()"
"(let-values(((v_251)"
"(let-values(((c83_0) c_31)"
"((in84_1) in_67)"
"((r-config85_0) r-config_0)"
"((temp86_3)"
"(if(let-values(((or-part_280)(eq? c_31 ec_10)))"
"(if or-part_280"
" or-part_280"
"(if(<(char->integer ec_10) 128)"
"(char-numeric? ec_10)"
" #f)))"
" 'symbol-or-number"
" 'symbol/indirect)))"
"(read-symbol-or-number8.1"
" #f"
" temp86_3"
" c83_0"
" in84_1"
" r-config85_0))))"
"(retry-special-comment v_251 in_67 config_58)))"
"(let-values()(read-dispatch c_31 in_67 r-config_0 config_58)))"
"(if(unsafe-fx< index_4 3)"
"                                    (let-values () (read-quote read-one 'quote \"quoting \\\"'\\\"\" c_31 in_67 r-config_0))"
"(if(unsafe-fx< index_4 4)"
"(let-values()"
"(if(check-parameter 1/read-accept-quasiquote config_58)"
"(let-values()"
"(read-quote"
" read-one"
" 'quasiquote"
"                                             \"quasiquoting \\\"`\\\"\""
" c_31"
" in_67"
" r-config_0))"
"(let-values()"
"(let-values(((in87_0) in_67)"
"((r-config88_0) r-config_0)"
"                                                         ((temp89_3) \"illegal use of `~a`\")"
"((c90_0) c_31))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in87_0"
" r-config88_0"
" temp89_3"
"(list c90_0))))))"
"(if(unsafe-fx< index_4 5)"
"(let-values()"
"(if(check-parameter 1/read-accept-quasiquote config_58)"
"(let-values()"
"(let-values(((c2_9)"
"(let-values(((in_68) in_67)"
"((skip-count_17) 0)"
"((source_42)(read-config-source config_58)))"
"(let-values(((c_105)"
"(peek-char-or-special"
" in_68"
" skip-count_17"
" 'special"
" source_42)))"
"(if(eq? c_105 'special)"
"(special1.1 'special)"
" c_105)))))"
"(if(eqv? c2_9 '#\\@)"
"(begin"
"(consume-char in_67 c2_9)"
"(read-quote"
" read-one"
" 'unquote-splicing"
"                                                     \"unquoting `,@`\""
" c_31"
" in_67"
" r-config_0))"
"(read-quote"
" read-one"
" 'unquote"
"                                                   \"unquoting `,`\""
" c_31"
" in_67"
" r-config_0))))"
"(let-values()"
"(let-values(((in91_0) in_67)"
"((r-config92_0) r-config_0)"
"                                                           ((temp93_2) \"illegal use of `~a`\")"
"((c94_1) c_31))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in91_0"
" r-config92_0"
" temp93_2"
"(list c94_1))))))"
"(let-values()"
"(wrap"
"(let-values(((read-one95_0) read-one)"
"((ec96_0) ec_10)"
"((temp97_2) '#\\()"
"((temp98_3) '#\\))"
"((in99_0) in_67)"
"((r-config100_0) r-config_0)"
"((temp101_0) #t))"
"(read-unwrapped-sequence17.1"
" 'all"
" unsafe-undefined"
" unsafe-undefined"
" temp101_0"
" unsafe-undefined"
" read-one95_0"
" ec96_0"
" temp97_2"
" temp98_3"
" in99_0"
" r-config100_0))"
" in_67"
" r-config_0"
" ec_10))))))"
"(if(unsafe-fx< index_4 9)"
"(if(unsafe-fx< index_4 7)"
"(let-values()"
"(let-values(((in102_0) in_67)"
"((r-config103_0) r-config_0)"
"                                                   ((temp104_2) \"~a\")"
"((temp105_3)"
"(indentation-unexpected-closer-message ec_10 c_31 r-config_0)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in102_0"
" r-config103_0"
" temp104_2"
"(list temp105_3))))"
"(if(unsafe-fx< index_4 8)"
"(let-values()"
"(if(let-values(((or-part_363)"
"(check-parameter 1/read-square-bracket-as-paren config_58)))"
"(if or-part_363"
" or-part_363"
"(check-parameter 1/read-square-bracket-with-tag config_58)))"
"(let-values()"
"(wrap"
"(let-values(((read-one106_0) read-one)"
"((ec107_0) ec_10)"
"((temp108_2) '#\\[)"
"((temp109_1) '#\\])"
"((in110_0) in_67)"
"((r-config111_0) r-config_0)"
"((temp112_2) #t))"
"(read-unwrapped-sequence17.1"
" 'all"
" unsafe-undefined"
" unsafe-undefined"
" temp112_2"
" unsafe-undefined"
" read-one106_0"
" ec107_0"
" temp108_2"
" temp109_1"
" in110_0"
" r-config111_0))"
" in_67"
" r-config_0"
" ec_10))"
"(let-values()"
"(let-values(((in113_1) in_67)"
"((r-config114_0) r-config_0)"
"                                                         ((temp115_0) \"illegal use of `~a`\")"
"((c116_0) c_31))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in113_1"
" r-config114_0"
" temp115_0"
"(list c116_0))))))"
"(let-values()"
"(if(let-values(((or-part_94)"
"(check-parameter 1/read-square-bracket-as-paren config_58)))"
"(if or-part_94"
" or-part_94"
"(check-parameter 1/read-square-bracket-with-tag config_58)))"
"(let-values()"
"(let-values(((in117_0) in_67)"
"((r-config118_0) r-config_0)"
"                                                         ((temp119_2) \"~a\")"
"((temp120_3)"
"(indentation-unexpected-closer-message"
" ec_10"
" c_31"
" r-config_0)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in117_0"
" r-config118_0"
" temp119_2"
"(list temp120_3))))"
"(let-values()"
"(let-values(((in121_0) in_67)"
"((r-config122_0) r-config_0)"
"                                                         ((temp123_2) \"illegal use of `~a`\")"
"((c124_0) c_31))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in121_0"
" r-config122_0"
" temp123_2"
"(list c124_0))))))))"
"(if(unsafe-fx< index_4 10)"
"(let-values()"
"(if(let-values(((or-part_281)"
"(check-parameter 1/read-curly-brace-as-paren config_58)))"
"(if or-part_281"
" or-part_281"
"(check-parameter 1/read-curly-brace-with-tag config_58)))"
"(let-values()"
"(wrap"
"(let-values(((read-one125_0) read-one)"
"((ec126_0) ec_10)"
"((temp127_4) '#\\{)"
"((temp128_3) '#\\})"
"((in129_0) in_67)"
"((r-config130_0) r-config_0)"
"((temp131_1) #t))"
"(read-unwrapped-sequence17.1"
" 'all"
" unsafe-undefined"
" unsafe-undefined"
" temp131_1"
" unsafe-undefined"
" read-one125_0"
" ec126_0"
" temp127_4"
" temp128_3"
" in129_0"
" r-config130_0))"
" in_67"
" r-config_0"
" ec_10))"
"(let-values()"
"(let-values(((in132_0) in_67)"
"((r-config133_0) r-config_0)"
"                                                       ((temp134_2) \"illegal use of `~a`\")"
"((c135_0) c_31))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in132_0"
" r-config133_0"
" temp134_2"
"(list c135_0))))))"
"(if(unsafe-fx< index_4 11)"
"(let-values()"
"(if(let-values(((or-part_282)"
"(check-parameter 1/read-curly-brace-as-paren config_58)))"
"(if or-part_282"
" or-part_282"
"(check-parameter 1/read-curly-brace-with-tag config_58)))"
"(let-values()"
"(let-values(((in136_0) in_67)"
"((r-config137_0) r-config_0)"
"                                                         ((temp138_1) \"~a\")"
"((temp139_1)"
"(indentation-unexpected-closer-message"
" ec_10"
" c_31"
" r-config_0)))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in136_0"
" r-config137_0"
" temp138_1"
"(list temp139_1))))"
"(let-values()"
"(let-values(((in140_0) in_67)"
"((r-config141_0) r-config_0)"
"                                                         ((temp142_1) \"illegal use of `~a`\")"
"((c143_0) c_31))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in140_0"
" r-config141_0"
" temp142_1"
"(list c143_0))))))"
"(if(unsafe-fx< index_4 12)"
"(let-values()"
"(let-values(((in144_0) in_67)((r-config145_0) r-config_0))"
"(read-string5.1 'string in144_0 r-config145_0)))"
"(let-values()"
"(let-values(((c146_0) c_31)"
"((in147_0) in_67)"
"((r-config148_0) r-config_0)"
"((temp149_1) 'symbol))"
"(read-symbol-or-number8.1"
" #f"
" temp149_1"
" c146_0"
" in147_0"
" r-config148_0)))))))))))))))))))))))"
"(define-values"
"(read-dispatch)"
"(lambda(dispatch-c_5 in_69 config_59 orig-config_1)"
"(begin"
"(let-values(((c_106)"
"(let-values(((in_70) in_69)((source_43)(read-config-source config_59)))"
"(read-char-or-special in_70 special1.1 source_43))))"
"(if(eof-object? c_106)"
"(let-values()"
"(let-values(((in150_0) in_69)"
"((config151_0) config_59)"
"((c152_0) c_106)"
"                         ((temp153_1) \"bad syntax `~a`\")"
"((dispatch-c154_0) dispatch-c_5))"
"(reader-error12.1"
" unsafe-undefined"
" c152_0"
" #f"
" unsafe-undefined"
" in150_0"
" config151_0"
" temp153_1"
"(list dispatch-c154_0))))"
"(if(not(char? c_106))"
"(let-values()"
"(let-values(((in155_0) in_69)"
"((config156_0) config_59)"
"((c157_0) c_106)"
"                           ((temp158_0) \"bad syntax `~a`\")"
"((dispatch-c159_0) dispatch-c_5))"
"(reader-error12.1"
" unsafe-undefined"
" c157_0"
" #f"
" unsafe-undefined"
" in155_0"
" config156_0"
" temp158_0"
"(list dispatch-c159_0))))"
"(let-values(((c3_9)(readtable-dispatch-handler orig-config_1 c_106)))"
"(if c3_9"
"((lambda(handler_4)"
"(let-values(((line_13)(read-config-line config_59)))"
"(let-values(((col_12)(read-config-col config_59)))"
"(let-values(((pos_122)(read-config-pos config_59)))"
"(let-values(((v_252)"
"(readtable-apply handler_4 c_106 in_69 config_59 line_13 col_12 pos_122)))"
"(retry-special-comment v_252 in_69 orig-config_1))))))"
" c3_9)"
"(let-values()"
"(let-values()"
"(let-values(((tmp_58) c_106))"
"(let-values(((index_5)"
"(if(char? tmp_58)"
"(let-values(((codepoint_3)(char->integer tmp_58)))"
"(if(if(unsafe-fx>= codepoint_3 33)(unsafe-fx< codepoint_3 127) #f)"
"(let-values(((tbl_5)"
" '#(34"
" 11"
" 0"
" 0"
" 13"
" 6"
" 7"
" 2"
" 0"
" 0"
" 0"
" 9"
" 0"
" 0"
" 0"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 1"
" 14"
" 0"
" 12"
" 0"
" 0"
" 0"
" 0"
" 0"
" 22"
" 29"
" 25"
" 18"
" 16"
" 0"
" 30"
" 20"
" 0"
" 0"
" 0"
" 0"
" 0"
" 24"
" 0"
" 0"
" 0"
" 0"
" 15"
" 0"
" 0"
" 0"
" 28"
" 0"
" 0"
" 3"
" 10"
" 0"
" 0"
" 0"
" 8"
" 0"
" 26"
" 29"
" 21"
" 17"
" 16"
" 0"
" 30"
" 19"
" 0"
" 0"
" 33"
" 0"
" 0"
" 23"
" 32"
" 0"
" 31"
" 5"
" 15"
" 0"
" 0"
" 0"
" 27"
" 0"
" 0"
" 4"
" 0"
" 0"
" 35)))"
"(unsafe-vector*-ref tbl_5(unsafe-fx- codepoint_3 33)))"
" 0))"
" 0)))"
"(if(unsafe-fx< index_5 17)"
"(if(unsafe-fx< index_5 8)"
"(if(unsafe-fx< index_5 3)"
"(if(unsafe-fx< index_5 1)"
"(let-values()"
"(let-values(((in160_0) in_69)"
"((config161_0) config_59)"
"                                               ((temp162_2) \"bad syntax `~a~a`\")"
"((dispatch-c163_0) dispatch-c_5)"
"((c164_0) c_106))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in160_0"
" config161_0"
" temp162_2"
"(list dispatch-c163_0 c164_0))))"
"(if(unsafe-fx< index_5 2)"
"(let-values()(read-vector-or-graph read-one dispatch-c_5 c_106 in_69 config_59))"
"(let-values()"
"(let-values(((read-one165_0) read-one)"
"((temp166_1) '#\\()"
"((temp167_0) '#\\()"
"((temp168_2) '#\\))"
"((in169_0) in_69)"
"((config170_0) config_59))"
"(read-vector11.1"
" #f"
" 'any"
" read-one165_0"
" temp166_1"
" temp167_0"
" temp168_2"
" in169_0"
" config170_0)))))"
"(if(unsafe-fx< index_5 5)"
"(if(unsafe-fx< index_5 4)"
"(let-values()"
"(if(check-parameter 1/read-square-bracket-as-paren config_59)"
"(let-values()"
"(let-values(((read-one171_0) read-one)"
"((temp172_1) '#\\[)"
"((temp173_1) '#\\[)"
"((temp174_0) '#\\])"
"((in175_0) in_69)"
"((config176_0) config_59))"
"(read-vector11.1"
" #f"
" 'any"
" read-one171_0"
" temp172_1"
" temp173_1"
" temp174_0"
" in175_0"
" config176_0)))"
"(let-values()"
"(let-values(((in177_0) in_69)"
"((config178_0) config_59)"
"                                                     ((temp179_0) (format \"~a~a\" dispatch-c_5 c_106)))"
"(bad-syntax-error20.1 '#\\x in177_0 config178_0 temp179_0)))))"
"(let-values()"
"(if(check-parameter 1/read-curly-brace-as-paren config_59)"
"(let-values()"
"(let-values(((read-one180_0) read-one)"
"((temp181_0) '#\\{)"
"((temp182_0) '#\\{)"
"((temp183_0) '#\\})"
"((in184_0) in_69)"
"((config185_0) config_59))"
"(read-vector11.1"
" #f"
" 'any"
" read-one180_0"
" temp181_0"
" temp182_0"
" temp183_0"
" in184_0"
" config185_0)))"
"(let-values()"
"(let-values(((in186_0) in_69)"
"((config187_0) config_59)"
"                                                     ((temp188_0) (format \"~a~a\" dispatch-c_5 c_106)))"
"(bad-syntax-error20.1 '#\\x in186_0 config187_0 temp188_0))))))"
"(if(unsafe-fx< index_5 6)"
"(let-values()(read-struct read-one dispatch-c_5 in_69 config_59))"
"(if(unsafe-fx< index_5 7)"
"(let-values()(read-box read-one dispatch-c_5 in_69 config_59))"
"                                    (let-values () (read-quote read-one 'syntax \"quoting #'\" c_106 in_69 config_59))))))"
"(if(unsafe-fx< index_5 12)"
"(if(unsafe-fx< index_5 9)"
"(let-values()"
"                                  (read-quote read-one 'quasisyntax \"quasiquoting #`\" c_106 in_69 config_59))"
"(if(unsafe-fx< index_5 10)"
"(let-values()"
"(let-values(((c2_10)"
"(let-values(((in_71) in_69)"
"((skip-count_18) 0)"
"((source_44)(read-config-source config_59)))"
"(let-values(((c_107)"
"(peek-char-or-special"
" in_71"
" skip-count_18"
" 'special"
" source_44)))"
"(if(eq? c_107 'special)(special1.1 'special) c_107)))))"
"(if(eqv? c2_10 '#\\@)"
"(begin"
"(consume-char in_69 c2_10)"
"(read-quote"
" read-one"
" 'unsyntax-splicing"
"                                           \"unquoting #,@\""
" c_106"
" in_69"
" config_59))"
"                                        (read-quote read-one 'unsyntax \"unquoting #,\" c_106 in_69 config_59))))"
"(if(unsafe-fx< index_5 11)"
"(let-values()(read-character in_69 config_59))"
"(let-values()"
"(let-values(((in189_0) in_69)"
"((config190_0) config_59)"
"((temp191_0) '|byte string|))"
"(read-string5.1 temp191_0 in189_0 config190_0))))))"
"(if(unsafe-fx< index_5 14)"
"(if(unsafe-fx< index_5 13)"
"(let-values()"
"(let-values(((c2_11)"
"(let-values(((in_72) in_69)"
"((skip-count_19) 0)"
"((source_45)(read-config-source config_59)))"
"(let-values(((c_108)"
"(peek-char-or-special"
" in_72"
" skip-count_19"
" 'special"
" source_45)))"
"(if(eq? c_108 'special)(special1.1 'special) c_108)))))"
"(if(eqv? '#\\< c2_11)"
"(let-values()"
"(begin(consume-char in_69 '#\\<)(read-here-string in_69 config_59)))"
"(let-values()"
"(let-values(((in192_0) in_69)"
"((config193_0) config_59)"
"((c2194_0) c2_11)"
"                                                       ((temp195_0) \"bad syntax `~a<`\")"
"((dispatch-c196_0) dispatch-c_5))"
"(reader-error12.1"
" unsafe-undefined"
" c2194_0"
" #f"
" unsafe-undefined"
" in192_0"
" config193_0"
" temp195_0"
"(list dispatch-c196_0)))))))"
"(let-values()"
"(let-values(((c197_0) c_106)"
"((in198_0) in_69)"
"((config199_0) config_59)"
"((dispatch-c200_0) dispatch-c_5)"
"((temp201_1) 'symbol))"
"(read-symbol-or-number8.1 dispatch-c200_0 temp201_1 c197_0 in198_0 config199_0))))"
"(if(unsafe-fx< index_5 15)"
"(let-values()"
"(let-values(((temp202_0) #f)"
"((in203_0) in_69)"
"((config204_0) config_59)"
"((temp205_0) 'keyword))"
"(read-symbol-or-number8.1 #f temp205_0 temp202_0 in203_0 config204_0)))"
"(if(unsafe-fx< index_5 16)"
"(let-values()"
"(let-values(((c2_12)"
"(let-values(((in_73) in_69)"
"((skip-count_20) 0)"
"((source_46)(read-config-source config_59)))"
"(let-values(((c_109)"
"(peek-char-or-special"
" in_73"
" skip-count_20"
" 'special"
" source_46)))"
"(if(eq? c_109 'special)(special1.1 'special) c_109)))))"
"(if(char-delimiter? c2_12 config_59)"
"(let-values()(wrap #t in_69 config_59 c_106))"
"(let-values()"
"(read-delimited-constant"
" c_106"
"(char=? c_106 '#\\t)"
" '(#\\r #\\u #\\e)"
" #t"
" in_69"
" config_59)))))"
"(let-values()"
"(let-values(((c2_13)"
"(let-values(((in_74) in_69)"
"((skip-count_21) 0)"
"((source_47)(read-config-source config_59)))"
"(let-values(((c_110)"
"(peek-char-or-special"
" in_74"
" skip-count_21"
" 'special"
" source_47)))"
"(if(eq? c_110 'special)(special1.1 'special) c_110)))))"
"(if(char-delimiter? c2_13 config_59)"
"(let-values()(wrap #f in_69 config_59 c_106))"
"(if(let-values(((or-part_364)(char=? c2_13 '#\\x)))"
"(if or-part_364 or-part_364(char=? c2_13 '#\\l)))"
"(let-values()"
"(read-fixnum-or-flonum-vector"
" read-one"
" dispatch-c_5"
" c_106"
" c2_13"
" in_69"
" config_59))"
"(let-values()"
"(read-delimited-constant"
" c_106"
"(char=? c_106 '#\\f)"
" '(#\\a #\\l #\\s #\\e)"
" #f"
" in_69"
" config_59)))))))))))"
"(if(unsafe-fx< index_5 26)"
"(if(unsafe-fx< index_5 21)"
"(if(unsafe-fx< index_5 18)"
"(let-values()"
"(let-values(((temp206_0) #f)"
"((in207_0) in_69)"
"((config208_0) config_59)"
"                                               ((temp209_2) \"#e\"))"
"(read-symbol-or-number8.1 #f temp209_2 temp206_0 in207_0 config208_0)))"
"(if(unsafe-fx< index_5 19)"
"(let-values()"
"(let-values(((temp210_1) #f)"
"((in211_0) in_69)"
"((config212_0) config_59)"
"                                                 ((temp213_1) \"#E\"))"
"(read-symbol-or-number8.1 #f temp213_1 temp210_1 in211_0 config212_0)))"
"(if(unsafe-fx< index_5 20)"
"(let-values()"
"(let-values(((temp214_1) #f)"
"((in215_0) in_69)"
"((config216_0) config_59)"
"                                                   ((temp217_2) \"#i\"))"
"(read-symbol-or-number8.1 #f temp217_2 temp214_1 in215_0 config216_0)))"
"(let-values()"
"(let-values(((temp218_0) #f)"
"((in219_0) in_69)"
"((config220_0) config_59)"
"                                                   ((temp221_2) \"#I\"))"
"(read-symbol-or-number8.1 #f temp221_2 temp218_0 in219_0 config220_0))))))"
"(if(unsafe-fx< index_5 23)"
"(if(unsafe-fx< index_5 22)"
"(let-values()"
"(let-values(((temp222_1) #f)"
"((in223_0) in_69)"
"((config224_0) config_59)"
"                                                 ((temp225_1) \"#d\"))"
"(read-symbol-or-number8.1 #f temp225_1 temp222_1 in223_0 config224_0)))"
"(let-values()"
"(let-values(((temp226_2) #f)"
"((in227_0) in_69)"
"((config228_0) config_59)"
"                                                 ((temp229_2) \"#B\"))"
"(read-symbol-or-number8.1 #f temp229_2 temp226_2 in227_0 config228_0))))"
"(if(unsafe-fx< index_5 24)"
"(let-values()"
"(let-values(((temp230_2) #f)"
"((in231_0) in_69)"
"((config232_0) config_59)"
"                                                 ((temp233_1) \"#o\"))"
"(read-symbol-or-number8.1 #f temp233_1 temp230_2 in231_0 config232_0)))"
"(if(unsafe-fx< index_5 25)"
"(let-values()"
"(let-values(((temp234_0) #f)"
"((in235_0) in_69)"
"((config236_0) config_59)"
"                                                   ((temp237_0) \"#O\"))"
"(read-symbol-or-number8.1 #f temp237_0 temp234_0 in235_0 config236_0)))"
"(let-values()"
"(let-values(((temp238_0) #f)"
"((in239_0) in_69)"
"((config240_0) config_59)"
"                                                   ((temp241_0) \"#D\"))"
"(read-symbol-or-number8.1 #f temp241_0 temp238_0 in239_0 config240_0)))))))"
"(if(unsafe-fx< index_5 30)"
"(if(unsafe-fx< index_5 27)"
"(let-values()"
"(let-values(((temp242_1) #f)"
"((in243_0) in_69)"
"((config244_0) config_59)"
"                                               ((temp245_0) \"#b\"))"
"(read-symbol-or-number8.1 #f temp245_0 temp242_1 in243_0 config244_0)))"
"(if(unsafe-fx< index_5 28)"
"(let-values()"
"(let-values(((temp246_0) #f)"
"((in247_0) in_69)"
"((config248_0) config_59)"
"                                                 ((temp249_1) \"#x\"))"
"(read-symbol-or-number8.1 #f temp249_1 temp246_0 in247_0 config248_0)))"
"(if(unsafe-fx< index_5 29)"
"(let-values()"
"(let-values(((temp250_2) #f)"
"((in251_0) in_69)"
"((config252_0) config_59)"
"                                                   ((temp253_0) \"#X\"))"
"(read-symbol-or-number8.1 #f temp253_0 temp250_2 in251_0 config252_0)))"
"(let-values()"
"(let-values(((c2_14)"
"(let-values(((in_75) in_69)"
"((source_48)(read-config-source config_59)))"
"(read-char-or-special in_75 special1.1 source_48))))"
"(let-values(((tmp_1) c2_14))"
"(if(if(equal? tmp_1 '#\\s) #t(equal? tmp_1 '#\\S))"
"(let-values()"
"(read-one #f in_69(override-parameter read-case-sensitive config_59 #t)))"
"(if(if(equal? tmp_1 '#\\i) #t(equal? tmp_1 '#\\I))"
"(let-values()"
"(read-one"
" #f"
" in_69"
"(override-parameter read-case-sensitive config_59 #f)))"
"(let-values()"
"(let-values(((in254_0) in_69)"
"((config255_0) config_59)"
"((c2256_0) c2_14)"
"                                                             ((temp257_0) \"expected `s', `S`, `i`, or `I` after `~a~a`\")"
"((dispatch-c258_0) dispatch-c_5)"
"((c259_0) c_106))"
"(reader-error12.1"
" unsafe-undefined"
" c2256_0"
" #f"
" unsafe-undefined"
" in254_0"
" config255_0"
" temp257_0"
"(list dispatch-c258_0 c259_0))))))))))))"
"(if(unsafe-fx< index_5 32)"
"(if(unsafe-fx< index_5 31)"
"(let-values()(read-hash read-one dispatch-c_5 c_106 in_69 config_59))"
"(let-values()"
"(let-values(((accum-str_12)(accum-string-init! config_59)))"
"(let-values((()(begin(accum-string-add! accum-str_12 dispatch-c_5)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_12 c_106)(values))))"
"(let-values(((c2_15)"
"(let-values(((in_76) in_69)"
"((source_49)(read-config-source config_59)))"
"(read-char-or-special in_76 special1.1 source_49))))"
"(begin"
"(if(char? c2_15)"
"(let-values()(accum-string-add! accum-str_12 c2_15))"
"(void))"
"(let-values(((tmp_59) c2_15))"
"(if(equal? tmp_59 '#\\x)"
"(let-values()(read-regexp c_106 accum-str_12 in_69 config_59))"
"(if(equal? tmp_59 '#\\e)"
"(let-values()"
"(read-extension-reader"
" read-one"
" read-undotted"
" dispatch-c_5"
" in_69"
" config_59))"
"(let-values()"
"(let-values(((in260_0) in_69)"
"((config261_0) config_59)"
"((c2262_0) c2_15)"
"((temp263_0)"
"(let-values(((accum-str264_0) accum-str_12)"
"((config265_0) config_59))"
"(accum-string-get!6.1"
" 0"
" accum-str264_0"
" config265_0))))"
"(bad-syntax-error20.1"
" c2262_0"
" in260_0"
" config261_0"
" temp263_0)))))))))))))"
"(if(unsafe-fx< index_5 33)"
"(let-values()"
"(let-values(((accum-str_13)(accum-string-init! config_59)))"
"(let-values((()(begin(accum-string-add! accum-str_13 dispatch-c_5)(values))))"
"(let-values((()(begin(accum-string-add! accum-str_13 c_106)(values))))"
"(let-values(((c2_16)"
"(let-values(((in_77) in_69)"
"((source_50)(read-config-source config_59)))"
"(read-char-or-special in_77 special1.1 source_50))))"
"(begin"
"(if(char? c2_16)"
"(let-values()(accum-string-add! accum-str_13 c2_16))"
"(void))"
"(let-values(((tmp_60) c2_16))"
"(if(equal? tmp_60 '#\\x)"
"(let-values()(read-regexp c_106 accum-str_13 in_69 config_59))"
"(let-values()"
"(let-values(((in266_0) in_69)"
"((config267_0) config_59)"
"((c2268_0) c2_16)"
"((temp269_0)"
"(let-values(((accum-str270_0) accum-str_13)"
"((config271_0) config_59))"
"(accum-string-get!6.1"
" 0"
" accum-str270_0"
" config271_0))))"
"(bad-syntax-error20.1"
" c2268_0"
" in266_0"
" config267_0"
" temp269_0)))))))))))"
"(if(unsafe-fx< index_5 34)"
"(let-values()"
"(let-values(((read-undotted272_0) read-undotted)"
"((dispatch-c273_0) dispatch-c_5)"
"((in274_0) in_69)"
"((config275_0) config_59))"
"(read-extension-lang7.1"
" #f"
" read-undotted272_0"
" dispatch-c273_0"
" in274_0"
" config275_0)))"
"(if(unsafe-fx< index_5 35)"
"(let-values()"
"(let-values(((read-undotted276_0) read-undotted)"
"((dispatch-c277_0) dispatch-c_5)"
"((in278_0) in_69)"
"((config279_0) config_59))"
"(read-extension-#!16.1"
" #f"
" read-undotted276_0"
" dispatch-c277_0"
" in278_0"
" config279_0)))"
"(let-values()"
"(if(check-parameter 1/read-accept-compiled config_59)"
"(let-values()"
"(wrap((read-config-read-compiled config_59) in_69) in_69 config_59 c_106))"
"(let-values()"
"(let-values(((in280_0) in_69)"
"((config281_0) config_59)"
"                                                         ((temp282_0) \"`~a~~` compiled expressions not enabled\")"
"((dispatch-c283_0) dispatch-c_5))"
"(reader-error12.1"
" unsafe-undefined"
" '#\\x"
" #f"
" unsafe-undefined"
" in280_0"
" config281_0"
" temp282_0"
"(list dispatch-c283_0)))))))))))))))))))))))))"
"(define-values"
"(retry-special-comment)"
"(lambda(v_253 in_78 config_60)"
"(begin"
"(if(1/special-comment? v_253)"
"(let-values()(if(read-config-keep-comment? config_60) v_253(read-undotted #f in_78 config_60)))"
"(let-values() v_253)))))"
"(define-values"
"(1/module-declared?)"
"(let-values(((module-declared?3_0)"
"(lambda(mod2_0 load?1_0)"
"(begin"
" 'module-declared?3"
"(let-values(((mod_4) mod2_0))"
"(let-values(((load?_3) load?1_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_4)"
"(void)"
"(let-values()"
"(raise-argument-error 'module-declared? module-reference-str mod_4)))"
"(values))))"
"(let-values(((ns_116)(1/current-namespace)))"
"(let-values(((name_40)"
"(let-values(((mod31_0) mod_4)((load?32_0) load?_3))"
"(reference->resolved-module-path27.1 load?32_0 mod31_0))))"
"(if(namespace->module ns_116 name_40) #t #f)))))))))))))"
"(case-lambda"
"((mod_5)(begin 'module-declared?(module-declared?3_0 mod_5 #f)))"
"((mod_6 load?1_1)(module-declared?3_0 mod_6 load?1_1)))))"
"(define-values"
"(1/module-predefined?)"
"(lambda(mod_7)"
"(begin"
" 'module-predefined?"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_7)"
"(void)"
"(let-values()(raise-argument-error 'module-predefined? module-reference-str mod_7)))"
"(values))))"
"(let-values(((ns_68)(1/current-namespace)))"
"(let-values(((name_69)"
"(let-values(((mod34_0) mod_7)((temp35_5) #f))"
"(reference->resolved-module-path27.1 temp35_5 mod34_0))))"
"(let-values(((m_24)(namespace->module ns_68 name_69)))"
"(if m_24(module-is-predefined? m_24) #f))))))))))"
"(define-values"
"(module->)"
"(let-values(((module->9_0)"
"(lambda(extract6_0 who7_0 mod8_0 load?5_0)"
"(begin"
" 'module->9"
"(let-values(((extract_1) extract6_0))"
"(let-values(((who_31) who7_0))"
"(let-values(((mod_8) mod8_0))"
"(let-values(((load?_4) load?5_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_8)"
"(void)"
"(let-values()"
"(raise-argument-error who_31 module-reference-str mod_8)))"
"(values))))"
"(let-values(((m_25)"
"(namespace->module/complain"
" who_31"
"(1/current-namespace)"
"(let-values(((mod36_0) mod_8)((load?37_0) load?_4))"
"(reference->resolved-module-path27.1 load?37_0 mod36_0)))))"
"(extract_1 m_25))))))))))))"
"(case-lambda"
"((extract_2 who_22 mod_9)(begin(module->9_0 extract_2 who_22 mod_9 #f)))"
"((extract_3 who_32 mod_10 load?5_1)(module->9_0 extract_3 who_32 mod_10 load?5_1)))))"
"(define-values"
"(1/module->language-info)"
"(let-values(((module->language-info13_0)"
"(lambda(mod12_0 load?11_0)"
"(begin"
" 'module->language-info13"
"(let-values(((mod_11) mod12_0))"
"(let-values(((load?_5) load?11_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(module-> module-language-info 'module->language-info mod_11 load?_5))))))))))"
"(case-lambda"
"((mod_12)(begin 'module->language-info(module->language-info13_0 mod_12 #f)))"
"((mod_13 load?11_1)(module->language-info13_0 mod_13 load?11_1)))))"
"(define-values"
"(1/module->imports)"
"(lambda(mod_14)"
"(begin 'module->imports(let-values()(let-values()(module-> module-requires 'module->imports mod_14))))))"
"(define-values"
"(1/module->exports)"
"(lambda(mod_15)"
"(begin"
" 'module->exports"
"(let-values(((provides_12 self_27)"
"(module->"
"(lambda(m_26)(values(module-provides m_26)(module-self m_26)))"
" 'module->exports"
" mod_15)))"
"(provides->api-provides provides_12 self_27)))))"
"(define-values"
"(1/module->indirect-exports)"
"(lambda(mod_16)"
"(begin"
" 'module->indirect-exports"
"(module->"
"(lambda(m_27)(variables->api-nonprovides(module-provides m_27)((module-get-all-variables m_27))))"
" 'module->indirect-exports"
" mod_16))))"
"(define-values"
"(1/module-provide-protected?)"
"(lambda(mod_17 sym_98)"
"(begin"
" 'module-provide-protected?"
"(module->"
"(lambda(m_28)"
"(let-values(((b/p_3)(hash-ref(module-provides m_28) sym_98 #f)))"
"(let-values(((or-part_287)(not b/p_3)))(if or-part_287 or-part_287(provided-as-protected? b/p_3)))))"
" 'module-provide-protected?"
" mod_17))))"
"(define-values"
"(1/module->namespace)"
"(let-values(((module->namespace17_0)"
"(lambda(mod16_0 ns15_0)"
"(begin"
" 'module->namespace17"
"(let-values(((mod_18) mod16_0))"
"(let-values(((ns_48)(if(eq? ns15_0 unsafe-undefined)(1/current-namespace) ns15_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(module-reference? mod_18)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'module->namespace"
" module-reference-str"
" mod_18)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_48)"
"(void)"
"(let-values()"
"                                                    (raise-argument-error 'module->namespace \"namespace?\" ns_48)))"
"(values))))"
"(let-values(((name_41)"
"(let-values(((mod44_0) mod_18)((temp45_1) #t))"
"(reference->resolved-module-path27.1 temp45_1 mod44_0))))"
"(let-values(((phase_136)(namespace-phase ns_48)))"
"(let-values(((m-ns_17)"
"(let-values(((ns46_0) ns_48)"
"((name47_1) name_41)"
"((phase48_1) phase_136))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" ns46_0"
" name47_1"
" phase48_1))))"
"(begin"
"(if m-ns_17"
"(void)"
"(let-values()"
"(begin"
"(namespace->module/complain 'module->namespace ns_48 name_41)"
"(raise-arguments-error"
" 'module->namespace"
"                                                 \"module not instantiated in the current namespace\""
"                                                 \"name\""
" name_41))))"
"(if(inspector-superior?"
"(current-code-inspector)"
"(namespace-inspector m-ns_17))"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'module->namespace"
"                                               \"current code inspector cannot access namespace of module\""
"                                               \"module name\""
" name_41)))"
"(if(namespace-get-root-expand-ctx m-ns_17)"
"(void)"
"(let-values()"
"(namespace-set-root-expand-ctx!"
" m-ns_17"
"(let-values(((temp49_3)(namespace-mpi m-ns_17)))"
"(make-root-expand-context13.1"
" #f"
" null"
" unsafe-undefined"
" unsafe-undefined"
" temp49_3)))))"
"(let-values(((ns41_0) ns_48)"
"((temp42_3)(namespace-mpi m-ns_17))"
"((phase43_1) phase_136))"
"(namespace-module-make-available!112.1"
" unsafe-undefined"
" ns41_0"
" temp42_3"
" phase43_1))"
" m-ns_17)))))))))))))))"
"(case-lambda"
"((mod_19)(begin 'module->namespace(module->namespace17_0 mod_19 unsafe-undefined)))"
"((mod_20 ns15_1)(module->namespace17_0 mod_20 ns15_1)))))"
"(define-values"
"(1/namespace-unprotect-module)"
"(let-values(((namespace-unprotect-module22_0)"
"(lambda(insp20_0 mod21_0 ns19_1)"
"(begin"
" 'namespace-unprotect-module22"
"(let-values(((insp_18) insp20_0))"
"(let-values(((mod_21) mod21_0))"
"(let-values(((ns_117)(if(eq? ns19_1 unsafe-undefined)(1/current-namespace) ns19_1)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(inspector? insp_18)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                     \"inspector?\""
" insp_18)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod_21)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                       \"module-path?\""
" mod_21)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(1/namespace? ns_117)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'namespace-unprotect-module"
"                                                         \"namespace?\""
" ns_117)))"
"(values))))"
"(let-values(((name_70)"
"(let-values(((mod51_0) mod_21)((temp52_3) #f))"
"(reference->resolved-module-path27.1 temp52_3 mod51_0))))"
"(let-values(((phase_6)(namespace-phase ns_117)))"
"(let-values(((m-ns_18)"
"(let-values(((ns53_3) ns_117)"
"((name54_0) name_70)"
"((phase55_1) phase_6))"
"(namespace->module-namespace82.1"
" #f"
" #f"
" unsafe-undefined"
" ns53_3"
" name54_0"
" phase55_1))))"
"(begin"
"(if m-ns_18"
"(void)"
"(let-values()"
"(raise-arguments-error"
" 'namespace-unprotect-module"
"                                                   \"module not instantiated\""
"                                                   \"module name\""
" name_70)))"
"(if(inspector-superior? insp_18(namespace-inspector m-ns_18))"
"(let-values()"
"(set-namespace-inspector!"
" m-ns_18"
"(make-inspector(current-code-inspector))))"
"(void)))))))))))))))))))"
"(case-lambda"
"((insp_19 mod_22)"
"(begin 'namespace-unprotect-module(namespace-unprotect-module22_0 insp_19 mod_22 unsafe-undefined)))"
"((insp_9 mod_23 ns19_2)(namespace-unprotect-module22_0 insp_9 mod_23 ns19_2)))))"
"(define-values"
"(namespace->module/complain)"
"(lambda(who_33 ns_118 name_71)"
"(begin"
"(let-values(((or-part_211)(namespace->module ns_118 name_71)))"
"(if or-part_211"
" or-part_211"
"          (raise-arguments-error who_33 \"unknown module in the current namespace\" \"name\" name_71))))))"
"(define-values"
"(module-reference?)"
"(lambda(mod_24)"
"(begin"
"(let-values(((or-part_134)(1/module-path? mod_24)))"
"(if or-part_134"
" or-part_134"
"(let-values(((or-part_258)(1/module-path-index? mod_24)))"
"(if or-part_258 or-part_258(1/resolved-module-path? mod_24))))))))"
" (define-values (module-reference-str) \"(or/c module-path? module-path-index? resolved-module-path?)\")"
"(define-values"
"(reference->resolved-module-path27.1)"
"(lambda(load?24_0 mod26_0)"
"(begin"
" 'reference->resolved-module-path27"
"(let-values(((mod_25) mod26_0))"
"(let-values(((load?_6) load?24_0))"
"(let-values()"
"(if(1/resolved-module-path? mod_25)"
"(let-values() mod_25)"
"(let-values()"
"(let-values(((mpi_47)(if(1/module-path-index? mod_25) mod_25(1/module-path-index-join mod_25 #f))))"
"(1/module-path-index-resolve mpi_47 load?_6))))))))))"
"(define-values"
"(read-syntax$1)"
"(lambda(src_0 in_26)"
"(begin"
" 'read-syntax"
"(if(default-read-handler? in_26)"
"(let-values()"
"(begin"
"(maybe-flush-stdout in_26)"
"(let-values(((in22_3) in_26)((temp23_6) #t)((src24_0) src_0))"
"(read*14.1 temp23_6 #f #f unsafe-undefined #f src24_0 in22_3))))"
"(let-values()(values((port-read-handler in_26) in_26 src_0)))))))"
"(define-values"
"(read-syntax/recursive$1)"
"(lambda(src_1 in_30 start_57 readtable_4 graph?_1)"
"(begin"
" 'read-syntax/recursive"
"(let-values(((in25_1) in_30)"
"((temp26_5) #t)"
"((temp27_8) #t)"
"((src28_0) src_1)"
"((start29_0) start_57)"
"((readtable30_0) readtable_4)"
"((temp31_4)(not graph?_1)))"
"(read*14.1 temp26_5 start29_0 temp31_4 readtable30_0 temp27_8 src28_0 in25_1)))))"
"(define-values"
"(read$1)"
"(lambda(in_11)"
"(begin"
" 'read"
"(if(default-read-handler? in_11)"
"(let-values()"
"(begin"
"(maybe-flush-stdout in_11)"
"(let-values(((in32_0) in_11)((temp33_4) #f))(read*14.1 temp33_4 #f #f unsafe-undefined #f #f in32_0))))"
"(let-values()(values((port-read-handler in_11) in_11)))))))"
"(define-values"
"(read/recursive$1)"
"(lambda(in_43 start_58 readtable_5 graph?_2)"
"(begin"
" 'read/recursive"
"(let-values(((in34_2) in_43)"
"((temp35_6) #f)"
"((temp36_7) #t)"
"((start37_0) start_58)"
"((readtable38_0) readtable_5)"
"((temp39_6)(not graph?_2)))"
"(read*14.1 temp35_6 start37_0 temp39_6 readtable38_0 temp36_7 #f in34_2)))))"
"(define-values"
"(read*14.1)"
"(lambda(for-syntax?1_0 init-c4_0 local-graph?6_1 readtable5_0 recursive?2_0 source3_0 in13_3)"
"(begin"
" 'read*14"
"(let-values(((in_79) in13_3))"
"(let-values(((for-syntax?_11) for-syntax?1_0))"
"(let-values(((recursive?_1) recursive?2_0))"
"(let-values(((source_51) source3_0))"
"(let-values(((init-c_19) init-c4_0))"
"(let-values(((readtable_6)"
"(if(eq? readtable5_0 unsafe-undefined)(1/current-readtable) readtable5_0)))"
"(let-values(((local-graph?_2) local-graph?6_1))"
"(let-values()"
"(let-values()"
"(let-values(((in40_2) in_79)"
"((for-syntax?41_0) for-syntax?_11)"
"((recursive?42_0) recursive?_1)"
"((source43_0) source_51)"
"((temp44_5)(if for-syntax?_11 read-to-syntax #f))"
"((init-c45_0) init-c_19)"
"((readtable46_0) readtable_6)"
"((local-graph?47_0) local-graph?_2)"
"((read-compiled-linklet48_0) 1/read-compiled-linklet)"
"((dynamic-require-reader49_0) dynamic-require-reader)"
"((read-module-declared?50_0) read-module-declared?)"
"((read-coerce51_0) read-coerce)"
"((read-coerce-key52_0) read-coerce-key))"
"(read30.1"
" read-coerce51_0"
" read-coerce-key52_0"
" dynamic-require-reader49_0"
" for-syntax?41_0"
" init-c45_0"
" unsafe-undefined"
" local-graph?47_0"
" read-module-declared?50_0"
" unsafe-undefined"
" read-compiled-linklet48_0"
" readtable46_0"
" recursive?42_0"
" source43_0"
" temp44_5"
" in40_2))))))))))))))"
"(define-values"
"(read-language$1)"
"(lambda(in_80 fail-thunk_0)"
"(begin"
" 'read-language"
"(let-values(((in53_0) in_80)"
"((fail-thunk54_0) fail-thunk_0)"
"((temp55_2) #t)"
"((read-to-syntax56_0) read-to-syntax)"
"((read-compiled-linklet57_0) 1/read-compiled-linklet)"
"((dynamic-require-reader58_0) dynamic-require-reader)"
"((read-module-declared?59_0) read-module-declared?)"
"((read-coerce60_0) read-coerce)"
"((read-coerce-key61_0) read-coerce-key))"
"(read-language49.1"
" read-coerce60_0"
" read-coerce-key61_0"
" dynamic-require-reader58_0"
" temp55_2"
" read-module-declared?59_0"
" read-compiled-linklet57_0"
" read-to-syntax56_0"
" in53_0"
" fail-thunk54_0)))))"
"(define-values"
"(read-to-syntax)"
"(lambda(s-exp_4 srcloc_11 rep_1)"
"(begin"
"(let-values(((the-struct_89) empty-syntax))"
"(if(syntax?$1 the-struct_89)"
"(let-values(((content62_0)(datum-intern-literal s-exp_4))"
"((srcloc63_0) srcloc_11)"
"((props64_0)"
"(let-values(((tmp_61) rep_1))"
"(if(equal? tmp_61 '#\\[)"
"(let-values() original-square-props)"
"(if(equal? tmp_61 '#\\{)"
"(let-values() original-curly-props)"
"(let-values() original-props))))))"
"(syntax1.1"
" content62_0"
"(syntax-scopes the-struct_89)"
"(syntax-shifted-multi-scopes the-struct_89)"
"(syntax-scope-propagations+tamper the-struct_89)"
"(syntax-mpi-shifts the-struct_89)"
" srcloc63_0"
" props64_0"
"(syntax-inspector the-struct_89)))"
"          (raise-argument-error 'struct-copy \"syntax?\" the-struct_89))))))"
"(define-values(original-props)(syntax-props(syntax-property$1 empty-syntax original-property-sym #t)))"
"(define-values"
"(original-square-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\[)))"
"(define-values"
"(original-curly-props)"
"(syntax-props(syntax-property$1(syntax-property$1 empty-syntax original-property-sym #t) 'paren-shape '#\\{)))"
"(define-values(read-module-declared?)(lambda(mod-path_30)(begin(1/module-declared? mod-path_30 #t))))"
"(define-values"
"(read-coerce)"
"(lambda(for-syntax?_12 v_254 srcloc_12)"
"(begin"
"(if(not for-syntax?_12)"
"(let-values()(if(syntax?$1 v_254)(let-values()(syntax->datum$1 v_254))(let-values() v_254)))"
"(if(syntax?$1 v_254)"
"(let-values() v_254)"
"(if(list? v_254)"
"(let-values()"
"(read-to-syntax"
"(reverse$1"
"(let-values(((lst_188) v_254))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_188)))"
"((letrec-values(((for-loop_121)"
"(lambda(fold-var_235 lst_287)"
"(begin"
" 'for-loop"
"(if(pair? lst_287)"
"(let-values(((e_85)(unsafe-car lst_287))"
"((rest_162)(unsafe-cdr lst_287)))"
"(let-values(((fold-var_240)"
"(let-values(((fold-var_241) fold-var_235))"
"(let-values(((fold-var_242)"
"(let-values()"
"(cons"
"(let-values()"
"(read-coerce #t e_85 srcloc_12))"
" fold-var_241))))"
"(values fold-var_242)))))"
"(if(not #f)(for-loop_121 fold-var_240 rest_162) fold-var_240)))"
" fold-var_235)))))"
" for-loop_121)"
" null"
" lst_188))))"
" srcloc_12"
" #f))"
"(if(pair? v_254)"
"(let-values()"
"(read-to-syntax"
"(cons(read-coerce #t(car v_254) srcloc_12)(read-coerce #t(cdr v_254) srcloc_12))"
" srcloc_12"
" #f))"
"(let-values()(read-to-syntax v_254 srcloc_12 #f)))))))))"
"(define-values"
"(read-coerce-key)"
"(lambda(for-syntax?_0 k_42)"
"(begin(if for-syntax?_0(let-values()(datum-intern-literal k_42))(let-values() k_42)))))"
"(define-values(default-read-handler) #f)"
"(define-values"
"(default-read-handler?)"
"(lambda(in_81)"
"(begin"
"(if(not default-read-handler)"
"(let-values()(begin(set! default-read-handler(port-read-handler in_81)) #t))"
"(let-values()(eq? default-read-handler(port-read-handler in_81)))))))"
"(define-values(orig-input-port)(current-input-port))"
"(define-values(orig-output-port)(current-output-port))"
"(define-values(orig-error-port)(current-error-port))"
"(define-values"
"(maybe-flush-stdout)"
"(lambda(in_82)"
"(begin"
"(if(eq? in_82 orig-input-port)"
"(let-values()(begin(flush-output orig-output-port)(flush-output orig-error-port)))"
"(void)))))"
"(define-values"
"(dynamic-require-reader)"
"(let-values(((dynamic-require-reader20_0)"
"(lambda(mod-path18_0 sym19_1 fail-thunk17_0)"
"(begin"
" 'dynamic-require-reader20"
"(let-values(((mod-path_31) mod-path18_0))"
"(let-values(((sym_99) sym19_1))"
"(let-values(((fail-thunk_1)"
"(if(eq? fail-thunk17_0 unsafe-undefined)"
" default-dynamic-require-fail-thunk"
" fail-thunk17_0)))"
"(let-values()"
"(let-values(((root-ns_0)(namespace-root-namespace(1/current-namespace))))"
"(if root-ns_0"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" root-ns_0)"
"(let-values()(1/dynamic-require mod-path_31 sym_99 fail-thunk_1)))"
"(1/dynamic-require mod-path_31 sym_99 fail-thunk_1)))))))))))"
"(case-lambda"
"((mod-path_32 sym_100)(begin(dynamic-require-reader20_0 mod-path_32 sym_100 unsafe-undefined)))"
"((mod-path_0 sym_101 fail-thunk17_1)(dynamic-require-reader20_0 mod-path_0 sym_101 fail-thunk17_1)))))"
"(define-values"
"(1/read-syntax)"
"(let-values(((read-syntax3_0)"
"(lambda(src1_0 in2_0)"
"(begin"
" 'read-syntax3"
"(let-values(((src_2)(if(eq? src1_0 unsafe-undefined)(object-name(current-input-port)) src1_0)))"
"(let-values(((in_49)(if(eq? in2_0 unsafe-undefined)(current-input-port) in2_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_49)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-syntax \"input-port?\" in_49)))"
"(read-syntax$1 src_2 in_49)))))))))))"
"(case-lambda"
"(()(begin 'read-syntax(read-syntax3_0 unsafe-undefined unsafe-undefined)))"
"((src_3 in2_1)(read-syntax3_0 src_3 in2_1))"
"((src1_1)(read-syntax3_0 src1_1 unsafe-undefined)))))"
"(define-values"
"(1/read-syntax/recursive)"
"(let-values(((read-syntax/recursive10_0)"
"(lambda(src5_0 in6_3 start7_0 readtable8_0 graph?9_0)"
"(begin"
" 'read-syntax/recursive10"
"(let-values(((src_4)(if(eq? src5_0 unsafe-undefined)(object-name(current-input-port)) src5_0)))"
"(let-values(((in_83)(if(eq? in6_3 unsafe-undefined)(current-input-port) in6_3)))"
"(let-values(((start_59) start7_0))"
"(let-values(((readtable_7)"
"(if(eq? readtable8_0 unsafe-undefined)(1/current-readtable) readtable8_0)))"
"(let-values(((graph?_3) graph?9_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_83)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'read-syntax/recursive \"input-port?\" in_83)))"
"(if((lambda(x_92)"
"(let-values(((or-part_298)(not x_92)))"
"(if or-part_298 or-part_298(char? x_92))))"
" start_59)"
"(void)"
"(let-values()"
"                                          (raise-argument-error 'read-syntax/recursive \"(or/c char? #f)\" start_59)))"
"(if((lambda(x_93)"
"(let-values(((or-part_90)(not x_93)))"
"(if or-part_90 or-part_90(1/readtable? x_93))))"
" readtable_7)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'read-syntax/recursive"
"                                           \"(or/c readtable? #f)\""
" readtable_7)))"
"(read-syntax/recursive$1 src_4 in_83 start_59 readtable_7 graph?_3))))))))))))))"
"(case-lambda"
"(()"
"(begin"
" 'read-syntax/recursive"
"(read-syntax/recursive10_0 unsafe-undefined unsafe-undefined #f unsafe-undefined #t)))"
"((src_5 in_6 start_60 readtable_8 graph?9_1)(read-syntax/recursive10_0 src_5 in_6 start_60 readtable_8 graph?9_1))"
"((src_6 in_40 start_14 readtable8_1)(read-syntax/recursive10_0 src_6 in_40 start_14 readtable8_1 #t))"
"((src_7 in_13 start7_1)(read-syntax/recursive10_0 src_7 in_13 start7_1 unsafe-undefined #t))"
"((src_8 in6_4)(read-syntax/recursive10_0 src_8 in6_4 #f unsafe-undefined #t))"
"((src5_1)(read-syntax/recursive10_0 src5_1 unsafe-undefined #f unsafe-undefined #t)))))"
"(define-values"
"(1/read)"
"(let-values(((read13_0)"
"(lambda(in12_1)"
"(begin"
" 'read13"
"(let-values(((in_84)(if(eq? in12_1 unsafe-undefined)(current-input-port) in12_1)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_84)"
"(void)"
"                                (let-values () (raise-argument-error 'read \"input-port?\" in_84)))"
"(read$1 in_84))))))))))"
"(case-lambda(()(begin 'read(read13_0 unsafe-undefined)))((in12_2)(read13_0 in12_2)))))"
"(define-values"
"(1/read/recursive)"
"(let-values(((read/recursive19_0)"
"(lambda(in15_1 start16_0 readtable17_0 graph?18_0)"
"(begin"
" 'read/recursive19"
"(let-values(((in_79)(if(eq? in15_1 unsafe-undefined)(current-input-port) in15_1)))"
"(let-values(((start_61) start16_0))"
"(let-values(((readtable_9)"
"(if(eq? readtable17_0 unsafe-undefined)(1/current-readtable) readtable17_0)))"
"(let-values(((graph?_4) graph?18_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_79)"
"(void)"
"                                      (let-values () (raise-argument-error 'read/recursive \"input-port?\" in_79)))"
"(if((lambda(x_94)"
"(let-values(((or-part_31)(not x_94)))"
"(if or-part_31 or-part_31(char? x_94))))"
" start_61)"
"(void)"
"                                      (let-values () (raise-argument-error 'read/recursive \"(or/c char? #f)\" start_61)))"
"(if((lambda(x_95)"
"(let-values(((or-part_159)(not x_95)))"
"(if or-part_159 or-part_159(1/readtable? x_95))))"
" readtable_9)"
"(void)"
"(let-values()"
"                                        (raise-argument-error 'read/recursive \"(or/c readtable? #f)\" readtable_9)))"
"(read/recursive$1 in_79 start_61 readtable_9 graph?_4)))))))))))))"
"(case-lambda"
"(()(begin 'read/recursive(read/recursive19_0 unsafe-undefined #f unsafe-undefined #t)))"
"((in_85 start_62 readtable_10 graph?18_1)(read/recursive19_0 in_85 start_62 readtable_10 graph?18_1))"
"((in_86 start_63 readtable17_1)(read/recursive19_0 in_86 start_63 readtable17_1 #t))"
"((in_87 start16_1)(read/recursive19_0 in_87 start16_1 unsafe-undefined #t))"
"((in15_2)(read/recursive19_0 in15_2 #f unsafe-undefined #t)))))"
"(define-values"
"(1/read-language)"
"(let-values(((read-language23_0)"
"(lambda(in21_3 fail-thunk22_0)"
"(begin"
" 'read-language23"
"(let-values(((in_17)(if(eq? in21_3 unsafe-undefined)(current-input-port) in21_3)))"
"(let-values(((fail-thunk_2)"
"(if(eq? fail-thunk22_0 unsafe-undefined) read-language-fail-thunk fail-thunk22_0)))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(input-port? in_17)"
"(void)"
"                                  (let-values () (raise-argument-error 'read-language \"input-port?\" in_17)))"
"(if((lambda(p_75)(if(procedure? p_75)(procedure-arity-includes? p_75 0) #f))"
" fail-thunk_2)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'read-language"
"                                     \"(procedure-arity-includes/c 0)\""
" fail-thunk_2)))"
"(read-language$1"
" in_17"
"(if(eq? fail-thunk_2 read-language-fail-thunk) #f fail-thunk_2))))))))))))"
"(case-lambda"
"(()(begin 'read-language(read-language23_0 unsafe-undefined unsafe-undefined)))"
"((in_88 fail-thunk22_1)(read-language23_0 in_88 fail-thunk22_1))"
"((in21_4)(read-language23_0 in21_4 unsafe-undefined)))))"
" (define-values (read-language-fail-thunk) (lambda () (begin (error \"fail\"))))"
"(define-values"
"(declare-primitive-module!)"
"(lambda(name_72 inst_6 in-ns_0 protected_0 cross-phase-persistent?_3)"
"(begin"
"(let-values(((mpi_48)(1/module-path-index-join(list 'quote name_72) #f)))"
"(let-values(((in-ns1_0) in-ns_0)"
"((temp2_6)"
"(let-values(((temp4_0)(1/current-module-declare-source))"
"((cross-phase-persistent?5_0) cross-phase-persistent?_3)"
"((temp6_4)(zero?(hash-count protected_0)))"
"((mpi7_0) mpi_48)"
"((temp8_4)"
"(hasheqv"
" 0"
"(let-values(((lst_77)(1/instance-variable-names inst_6)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_77)))"
"((letrec-values(((for-loop_98)"
"(lambda(table_206 lst_78)"
"(begin"
" 'for-loop"
"(if(pair? lst_78)"
"(let-values(((sym_68)(unsafe-car lst_78))"
"((rest_36)(unsafe-cdr lst_78)))"
"(let-values(((table_170)"
"(let-values(((table_211) table_206))"
"(let-values(((table_212)"
"(let-values()"
"(let-values(((key_33"
" val_80)"
"(let-values()"
"(let-values(((binding_26)"
"(let-values(((mpi10_0)"
" mpi_48)"
"((temp11_6)"
" 0)"
"((sym12_0)"
" sym_68))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" mpi10_0"
" temp11_6"
" sym12_0))))"
"(values"
" sym_68"
"(if(hash-ref"
" protected_0"
" sym_68"
" #f)"
"(provided1.1"
" binding_26"
" #t"
" #f)"
" binding_26))))))"
"(hash-set"
" table_211"
" key_33"
" val_80)))))"
"(values table_212)))))"
"(if(not #f)"
"(for-loop_98 table_170 rest_36)"
" table_170)))"
" table_206)))))"
" for-loop_98)"
" '#hash()"
" lst_77)))))"
"((temp9_7)"
"(lambda(data-box_5"
" ns_46"
" phase-shift_19"
" phase-level_22"
" self_28"
" bulk-binding-registry_18"
" insp_20)"
"(if(= 0 phase-level_22)"
"(let-values()"
"(begin"
"(let-values(((lst_22)(1/instance-variable-names inst_6)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_22)))"
"((letrec-values(((for-loop_20)"
"(lambda(lst_261)"
"(begin"
" 'for-loop"
"(if(pair? lst_261)"
"(let-values(((sym_102)(unsafe-car lst_261))"
"((rest_179)(unsafe-cdr lst_261)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((val_81)"
"(1/instance-variable-value"
" inst_6"
" sym_102)))"
"(namespace-set-variable!"
" ns_46"
" 0"
" sym_102"
" val_81)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_20 rest_179)"
"(values))))"
"(values))))))"
" for-loop_20)"
" lst_22)))"
"(void)))"
"(void)))))"
"(make-module39.1"
" cross-phase-persistent?5_0"
" unsafe-undefined"
" unsafe-undefined"
" temp9_7"
" #f"
" 0"
" 0"
" temp6_4"
" unsafe-undefined"
" #f"
" unsafe-undefined"
" #f"
" temp8_4"
" null"
" mpi7_0"
" temp4_0"
" null"
" #f)))"
"((temp3_9)(substitute-module-declare-name name_72)))"
"(declare-module!58.1 #t in-ns1_0 temp2_6 temp3_9))))))"
"(define-values"
"(1/prop:exn:missing-module 1/exn:missing-module? 1/exn:missing-module-accessor)"
"(make-struct-type-property"
" 'missing-module"
"(lambda(v_29 info_6)"
"(begin"
"(if(if(procedure? v_29)(procedure-arity-includes? v_29 1) #f)"
"(void)"
"(let-values()"
"           (raise-argument-error 'guard-for-prop:exn:missing-module \"(procedure-arity-includes/c 1)\" v_29)))"
" v_29))))"
"(define-values"
"(1/struct:exn:fail:filesystem:missing-module"
" 1/make-exn:fail:filesystem:missing-module"
" 1/exn:fail:filesystem:missing-module?"
" 1/exn:fail:filesystem:missing-module-path)"
"(let-values(((struct:_84 make-_84 ?_84 -ref_84 -set!_84)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:filesystem:missing-module"
" struct:exn:fail:filesystem"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:exn:missing-module(lambda(e_86)(1/exn:fail:filesystem:missing-module-path e_86))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:filesystem:missing-module)))))"
"(values struct:_84 make-_84 ?_84(make-struct-field-accessor -ref_84 0 'path))))"
"(define-values"
"(1/struct:exn:fail:syntax:missing-module"
" 1/make-exn:fail:syntax:missing-module"
" 1/exn:fail:syntax:missing-module?"
" 1/exn:fail:syntax:missing-module-path)"
"(let-values(((struct:_68 make-_68 ?_68 -ref_68 -set!_68)"
"(let-values()"
"(let-values()"
"(make-struct-type"
" 'exn:fail:syntax:missing-module"
" 1/struct:exn:fail:syntax"
" 1"
" 0"
" #f"
"(list"
"(cons 1/prop:exn:missing-module(lambda(e_33)(1/exn:fail:syntax:missing-module-path e_33))))"
" #f"
" #f"
" '(0)"
" #f"
" 'exn:fail:syntax:missing-module)))))"
"(values struct:_68 make-_68 ?_68(make-struct-field-accessor -ref_68 0 'path))))"
"(define-values"
"(1/current-module-path-for-load)"
"(make-parameter"
" #f"
"(lambda(v_234)"
"(begin"
"(if(let-values(((or-part_67)(not v_234)))"
"(if or-part_67"
" or-part_67"
"(let-values(((or-part_68)(1/module-path? v_234)))"
"(if or-part_68 or-part_68(if(syntax?$1 v_234)(1/module-path?(syntax->datum$1 v_234)) #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'current-module-path-for-load"
"(string-append"
"             \"(or/c module-path?\""
"             \" (and/c syntax? (lambda (stx) (module-path? (syntax->datum stx))))\""
"             \" #f)\")"
" v_234)))"
" v_234))))"
"(define-values"
"(maybe-raise-missing-module)"
"(lambda(name_73 filename_0 pre_0 rel_0 post_0 errstr_0)"
"(begin"
"(let-values(((path_11)(1/current-module-path-for-load)))"
"(if path_11"
"(let-values()"
"(begin"
"(if(syntax?$1 path_11)"
"(let-values()"
"(raise"
"(1/make-exn:fail:syntax:missing-module"
"(format"
"(string-append"
"                      \"~a: cannot open module file\\n\""
"                      \"  module path: ~a\\n\""
"                      \"  path: ~a~a~a~a\\n\""
"                      \"  system error: ~a\")"
"(if(syntax-srcloc path_11)(srcloc->string(syntax-srcloc path_11)) name_73)"
"(syntax->datum$1 path_11)"
" filename_0"
" pre_0"
" rel_0"
" post_0"
" errstr_0)"
"(current-continuation-marks)"
"(list path_11)"
"(syntax->datum$1 path_11))))"
"(void))"
"(raise"
"(1/make-exn:fail:filesystem:missing-module"
"(format"
"(string-append"
"                  \"~a: cannot open module file\\n\""
"                  \"  module path: ~a\\n\""
"                  \"  path: ~a~a~a~a\\n\""
"                  \"  system error: ~a\")"
" name_73"
" path_11"
" filename_0"
" pre_0"
" rel_0"
" post_0"
" errstr_0)"
"(current-continuation-marks)"
" path_11))))"
"(void))))))"
"(define-values"
"(1/local-expand)"
"(let-values(((local-expand5_0)"
"(lambda(s2_9 context3_0 stop-ids4_0 intdefs1_0)"
"(begin"
" 'local-expand5"
"(let-values(((s_8) s2_9))"
"(let-values(((context_10) context3_0))"
"(let-values(((stop-ids_2) stop-ids4_0))"
"(let-values(((intdefs_4) intdefs1_0))"
"(let-values()"
"(let-values(((temp53_0) 'local-expand)"
"((s54_1) s_8)"
"((context55_0) context_10)"
"((stop-ids56_0) stop-ids_2)"
"((intdefs57_0) intdefs_4))"
"(do-local-expand50.1"
" #f"
" #f"
" #t"
" unsafe-undefined"
" #f"
" #f"
" #f"
" temp53_0"
" s54_1"
" context55_0"
" stop-ids56_0"
" intdefs57_0)))))))))))"
"(case-lambda"
"((s_447 context_11 stop-ids_3)(begin 'local-expand(local-expand5_0 s_447 context_11 stop-ids_3 '())))"
"((s_75 context_12 stop-ids_4 intdefs1_1)(local-expand5_0 s_75 context_12 stop-ids_4 intdefs1_1)))))"
"(define-values"
"(1/local-expand/capture-lifts)"
"(let-values(((local-expand/capture-lifts12_0)"
"(lambda(s9_1 context10_0 stop-ids11_0 intdefs7_0 lift-key8_0)"
"(begin"
" 'local-expand/capture-lifts12"
"(let-values(((s_492) s9_1))"
"(let-values(((context_13) context10_0))"
"(let-values(((stop-ids_5) stop-ids11_0))"
"(let-values(((intdefs_5) intdefs7_0))"
"(let-values(((lift-key_4)"
"(if(eq? lift-key8_0 unsafe-undefined)(generate-lift-key) lift-key8_0)))"
"(let-values()"
"(let-values(((temp58_3) 'local-expand)"
"((s59_0) s_492)"
"((context60_0) context_13)"
"((stop-ids61_0) stop-ids_5)"
"((intdefs62_0) intdefs_5)"
"((temp63_5) #t)"
"((lift-key64_0) lift-key_4))"
"(do-local-expand50.1"
" #f"
" temp63_5"
" #t"
" lift-key64_0"
" #f"
" #f"
" #f"
" temp58_3"
" s59_0"
" context60_0"
" stop-ids61_0"
" intdefs62_0))))))))))))"
"(case-lambda"
"((s_41 context_14 stop-ids_6)"
"(begin"
" 'local-expand/capture-lifts"
"(local-expand/capture-lifts12_0 s_41 context_14 stop-ids_6 '() unsafe-undefined)))"
"((s_87 context_15 stop-ids_7 intdefs_6 lift-key8_1)"
"(local-expand/capture-lifts12_0 s_87 context_15 stop-ids_7 intdefs_6 lift-key8_1))"
"((s_431 context_16 stop-ids_8 intdefs7_1)"
"(local-expand/capture-lifts12_0 s_431 context_16 stop-ids_8 intdefs7_1 unsafe-undefined)))))"
"(define-values"
"(1/local-transformer-expand)"
"(let-values(((local-transformer-expand18_0)"
"(lambda(s15_1 context16_0 stop-ids17_0 intdefs14_0)"
"(begin"
" 'local-transformer-expand18"
"(let-values(((s_35) s15_1))"
"(let-values(((context_17) context16_0))"
"(let-values(((stop-ids_9) stop-ids17_0))"
"(let-values(((intdefs_7) intdefs14_0))"
"(let-values()"
"(let-values(((temp65_4) 'local-expand)"
"((s66_2) s_35)"
"((context67_0) context_17)"
"((stop-ids68_0) stop-ids_9)"
"((intdefs69_0) intdefs_7)"
"((temp70_4) #t))"
"(do-local-expand50.1"
" temp70_4"
" #f"
" #t"
" unsafe-undefined"
" #f"
" #f"
" #f"
" temp65_4"
" s66_2"
" context67_0"
" stop-ids68_0"
" intdefs69_0)))))))))))"
"(case-lambda"
"((s_187 context_18 stop-ids_10)"
"(begin 'local-transformer-expand(local-transformer-expand18_0 s_187 context_18 stop-ids_10 '())))"
"((s_493 context_19 stop-ids_11 intdefs14_1)"
"(local-transformer-expand18_0 s_493 context_19 stop-ids_11 intdefs14_1)))))"
"(define-values"
"(1/local-transformer-expand/capture-lifts)"
"(let-values(((local-transformer-expand/capture-lifts25_0)"
"(lambda(s22_1 context23_0 stop-ids24_0 intdefs20_0 lift-key21_0)"
"(begin"
" 'local-transformer-expand/capture-lifts25"
"(let-values(((s_92) s22_1))"
"(let-values(((context_20) context23_0))"
"(let-values(((stop-ids_12) stop-ids24_0))"
"(let-values(((intdefs_8) intdefs20_0))"
"(let-values(((lift-key_5)"
"(if(eq? lift-key21_0 unsafe-undefined)(generate-lift-key) lift-key21_0)))"
"(let-values()"
"(let-values(((temp71_3) 'local-expand)"
"((s72_1) s_92)"
"((context73_0) context_20)"
"((stop-ids74_0) stop-ids_12)"
"((intdefs75_0) intdefs_8)"
"((temp76_3) #t)"
"((temp77_2) #t)"
"((lift-key78_0) lift-key_5))"
"(do-local-expand50.1"
" temp76_3"
" temp77_2"
" #t"
" lift-key78_0"
" #f"
" #f"
" #f"
" temp71_3"
" s72_1"
" context73_0"
" stop-ids74_0"
" intdefs75_0))))))))))))"
"(case-lambda"
"((s_19 context_21 stop-ids_13)"
"(begin"
" 'local-transformer-expand/capture-lifts"
"(local-transformer-expand/capture-lifts25_0 s_19 context_21 stop-ids_13 '() unsafe-undefined)))"
"((s_450 context_22 stop-ids_14 intdefs_9 lift-key21_1)"
"(local-transformer-expand/capture-lifts25_0 s_450 context_22 stop-ids_14 intdefs_9 lift-key21_1))"
"((s_494 context_23 stop-ids_15 intdefs20_1)"
"(local-transformer-expand/capture-lifts25_0 s_494 context_23 stop-ids_15 intdefs20_1 unsafe-undefined)))))"
"(define-values"
"(1/syntax-local-expand-expression)"
"(let-values(((syntax-local-expand-expression29_0)"
"(lambda(s28_1 opaque-only?27_0)"
"(begin"
" 'syntax-local-expand-expression29"
"(let-values(((s_495) s28_1))"
"(let-values(((opaque-only?_0) opaque-only?27_0))"
"(let-values()"
"(let-values(((exp-s_11)"
"(let-values(((temp79_1) 'syntax-local-expand-expression)"
"((s80_1) s_495)"
"((temp81_3) 'expression)"
"((null82_0) null)"
"((temp83_2) #f)"
"((opaque-only?84_0) opaque-only?_0)"
"((temp85_2) #t)"
"((temp86_4) #t)"
"((temp87_2) #f))"
"(do-local-expand50.1"
" #f"
" #f"
" temp87_2"
" unsafe-undefined"
" temp85_2"
" opaque-only?84_0"
" temp86_4"
" temp79_1"
" s80_1"
" temp81_3"
" null82_0"
" temp83_2))))"
"(let-values(((ctx_74)(let-values()(get-current-expand-context16.1 #f 'unexpected))))"
"(let-values(((ae_1)"
"(flip-introduction-scopes"
"(datum->syntax$1"
" #f"
"(already-expanded1.1"
"(if(parsed? exp-s_11)"
" exp-s_11"
"(flip-introduction-scopes exp-s_11 ctx_74))"
"(expand-context-binding-layer ctx_74)))"
" ctx_74)))"
"(begin"
"(let-values(((obs_60)(expand-context-observer ctx_74)))"
"(if obs_60"
"(let-values()(let-values()(call-expand-observe obs_60 'opaque-expr ae_1)))"
"(void)))"
"(let-values(((obs_4)(expand-context-observer ctx_74)))"
"(if obs_4"
"(let-values()(let-values()(call-expand-observe obs_4 'exit-local exp-s_11)))"
"(void)))"
"(values(if(not opaque-only?_0) exp-s_11 #f) ae_1))))))))))))"
"(case-lambda"
"((s_46)(begin 'syntax-local-expand-expression(syntax-local-expand-expression29_0 s_46 #f)))"
"((s_486 opaque-only?27_1)(syntax-local-expand-expression29_0 s_486 opaque-only?27_1)))))"
"(define-values"
"(do-local-expand50.1)"
"(lambda(as-transformer?32_0"
" capture-lifts?31_0"
" keep-#%expression?34_0"
" lift-key35_0"
" skip-log-exit?37_0"
" to-parsed-ok?33_0"
" track-to-be-defined?36_0"
" who46_1"
" s-or-s-exp47_0"
" context48_0"
" stop-ids49_0"
" intdefs45_0)"
"(begin"
" 'do-local-expand50"
"(let-values(((who_34) who46_1))"
"(let-values(((s-or-s-exp_0) s-or-s-exp47_0))"
"(let-values(((context_24) context48_0))"
"(let-values(((stop-ids_16) stop-ids49_0))"
"(let-values(((intdefs_10) intdefs45_0))"
"(let-values(((capture-lifts?_0) capture-lifts?31_0))"
"(let-values(((as-transformer?_6) as-transformer?32_0))"
"(let-values(((to-parsed-ok?_1) to-parsed-ok?33_0))"
"(let-values(((keep-#%expression?_2) keep-#%expression?34_0))"
"(let-values(((lift-key_6)"
"(if(eq? lift-key35_0 unsafe-undefined)"
"(if(let-values(((or-part_40) capture-lifts?_0))"
"(if or-part_40 or-part_40 as-transformer?_6))"
"(generate-lift-key)"
" #f)"
" lift-key35_0)))"
"(let-values(((track-to-be-defined?_1) track-to-be-defined?36_0))"
"(let-values(((skip-log-exit?_0) skip-log-exit?37_0))"
"(let-values()"
"(let-values()"
"(let-values(((s_496)(datum->syntax$1 #f s-or-s-exp_0)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_365)(list? context_24)))"
"(if or-part_365"
" or-part_365"
"(memq"
" context_24"
"(if as-transformer?_6"
" '(expression top-level)"
" '(expression top-level module module-begin)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_34"
"(if as-transformer?_6"
"                                                           \"(or/c 'expression 'top-level list?)\""
"                                                           \"(or/c 'expression 'top-level 'module 'module-begin list?)\")"
" context_24)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_45)(not stop-ids_16)))"
"(if or-part_45"
" or-part_45"
"(if(list? stop-ids_16)"
"(andmap2 identifier? stop-ids_16)"
" #f)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_34"
"                                                           \"(or/c (listof identifier?) #f)\""
" stop-ids_16)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(intdefs-or-false? intdefs_10)"
"(void)"
"(let-values()"
"(raise-argument-error"
" who_34"
" intdefs-or-false?-string"
" intdefs_10)))"
"(values))))"
"(let-values(((ctx_75)"
"(let-values(((who88_0) who_34))"
"(get-current-expand-context16.1 #f who88_0))))"
"(let-values(((phase_93)"
"(if as-transformer?_6"
"(add1(expand-context-phase ctx_75))"
"(expand-context-phase ctx_75))))"
"(let-values(((local-ctx_0)"
"(let-values(((ctx89_0) ctx_75)"
"((context90_0) context_24)"
"((phase91_0) phase_93)"
"((intdefs92_0) intdefs_10)"
"((stop-ids93_0) stop-ids_16)"
"((to-parsed-ok?94_0) to-parsed-ok?_1)"
"((temp95_2)"
"(let-values(((or-part_169)"
" keep-#%expression?_2))"
"(if or-part_169"
" or-part_169"
"(if(expand-context-in-local-expand?"
" ctx_75)"
"(expand-context-keep-#%expression?"
" ctx_75)"
" #f))))"
"((track-to-be-defined?96_0)"
" track-to-be-defined?_1))"
"(make-local-expand-context42.1"
" context90_0"
" intdefs92_0"
" temp95_2"
" phase91_0"
" stop-ids93_0"
" to-parsed-ok?94_0"
" track-to-be-defined?96_0"
" ctx89_0))))"
"(let-values((()"
"(begin"
"(namespace-visit-available-modules!"
"(expand-context-namespace ctx_75)"
" phase_93)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_7)"
"(expand-context-observer local-ctx_0)))"
"(if obs_7"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_7"
" 'enter-local"
" s_496)))"
"(void)))"
"(values))))"
"(let-values(((input-s_1)"
"(let-values(((temp97_3)"
"(flip-introduction-scopes s_496 ctx_75))"
"((intdefs98_0) intdefs_10))"
"(add-intdef-scopes24.1"
" unsafe-undefined"
" #f"
" temp97_3"
" intdefs98_0))))"
"(let-values((()"
"(begin"
"(if as-transformer?_6"
"(let-values()"
"(let-values(((obs_61)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_61"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_61"
" 'phase-up)))"
"(void))))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_62)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_62"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_62"
" 'local-pre"
" input-s_1)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if stop-ids_16"
"(let-values()"
"(let-values(((obs_63)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_63"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_63"
" 'start)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((output-s_0)"
"(if(if as-transformer?_6 capture-lifts?_0 #f)"
"(let-values()"
"(let-values(((input-s99_0) input-s_1)"
"((local-ctx100_0)"
" local-ctx_0)"
"((context101_0) context_24)"
"((temp102_1) #f)"
"((temp103_1) #t)"
"((lift-key104_0) lift-key_6)"
"((temp105_4) #t)"
"((temp106_4) #t))"
"(expand-transformer92.1"
" temp105_4"
" temp103_1"
" context101_0"
" temp102_1"
" temp106_4"
" lift-key104_0"
" input-s99_0"
" local-ctx100_0)))"
"(if as-transformer?_6"
"(let-values()"
"(let-values(((input-s107_0) input-s_1)"
"((local-ctx108_0)"
" local-ctx_0)"
"((context109_0) context_24)"
"((temp110_4) #f)"
"((temp111_2)"
"(eq?"
" 'top-level"
" context_24))"
"((lift-key112_0)"
" lift-key_6)"
"((temp113_3) #t))"
"(expand-transformer92.1"
" #f"
" temp111_2"
" context109_0"
" temp110_4"
" temp113_3"
" lift-key112_0"
" input-s107_0"
" local-ctx108_0)))"
"(if capture-lifts?_0"
"(let-values()"
"(let-values(((input-s114_0)"
" input-s_1)"
"((local-ctx115_0)"
" local-ctx_0)"
"((temp116_2) #t)"
"((lift-key117_0)"
" lift-key_6)"
"((temp118_1) #t))"
"(expand/capture-lifts75.1"
" temp118_1"
" temp116_2"
" #f"
" lift-key117_0"
" input-s114_0"
" local-ctx115_0)))"
"(let-values()"
"(let-values(((input-s119_0)"
" input-s_1)"
"((local-ctx120_0)"
" local-ctx_0))"
"(expand9.1"
" #f"
" #f"
" #f"
" input-s119_0"
" local-ctx120_0))))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_64)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_64"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_64"
" 'local-post"
" output-s_0)))"
"(void)))"
"(values))))"
"(let-values(((result-s_8)"
"(if(parsed? output-s_0)"
" output-s_0"
"(flip-introduction-scopes"
" output-s_0"
" ctx_75))))"
"(begin"
"(if skip-log-exit?_0"
"(void)"
"(let-values()"
"(let-values(((obs_65)"
"(expand-context-observer"
" local-ctx_0)))"
"(if obs_65"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_65"
" 'exit-local"
" result-s_8)))"
"(void)))))"
" result-s_8))))))))))))))))))))))))))))))))))"
"(define-values"
"(1/syntax-tainted?)"
"(lambda(s_0)"
"(begin"
" 'syntax-tainted?"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_0) (void) (let-values () (raise-argument-error 'syntax-tainted? \"syntax?\" s_0)))"
"(syntax-tainted?$1 s_0)))))))"
"(define-values"
"(1/syntax-arm)"
"(let-values(((syntax-arm4_0)"
"(lambda(s3_2 maybe-insp1_0 use-mode?2_0)"
"(begin"
" 'syntax-arm4"
"(let-values(((s_2) s3_2))"
"(let-values(((maybe-insp_0) maybe-insp1_0))"
"(let-values(((use-mode?_0) use-mode?2_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_2)"
"(void)"
"                                                  (let-values () (raise-argument-error 'syntax-arm \"syntax?\" s_2)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_12)(not maybe-insp_0)))"
"(if or-part_12 or-part_12(inspector? maybe-insp_0)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'syntax-arm"
"                                                       \"(or/c inspector? #f)\""
" maybe-insp_0)))"
"(values))))"
"(let-values(((insp_21)(inspector-for-taint maybe-insp_0)))"
"(if use-mode?_0"
"(let-values()"
"(taint-dispatch"
" s_2"
"(lambda(s_440)(syntax-arm$1 s_440 insp_21))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-arm$1 s_2 insp_21))))))))))))))))"
"(case-lambda"
"((s_497)(begin 'syntax-arm(syntax-arm4_0 s_497 #f #f)))"
"((s_447 maybe-insp_1 use-mode?2_1)(syntax-arm4_0 s_447 maybe-insp_1 use-mode?2_1))"
"((s_75 maybe-insp1_1)(syntax-arm4_0 s_75 maybe-insp1_1 #f)))))"
"(define-values"
"(1/syntax-disarm)"
"(lambda(s_498 maybe-insp_2)"
"(begin"
" 'syntax-disarm"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(syntax?$1 s_498)"
"(void)"
"                            (let-values () (raise-argument-error 'syntax-disarm \"syntax?\" s_498)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_309)(not maybe-insp_2)))"
"(if or-part_309 or-part_309(inspector? maybe-insp_2)))"
"(void)"
"                              (let-values () (raise-argument-error 'syntax-disarm \"(or/c inspector? #f)\" maybe-insp_2)))"
"(values))))"
"(let-values(((insp_22)(inspector-for-taint maybe-insp_2)))(syntax-disarm$1 s_498 insp_22)))))))))"
"(define-values"
"(1/syntax-rearm)"
"(let-values(((syntax-rearm9_0)"
"(lambda(s7_1 from-s8_0 use-mode?6_0)"
"(begin"
" 'syntax-rearm9"
"(let-values(((s_180) s7_1))"
"(let-values(((from-s_2) from-s8_0))"
"(let-values(((use-mode?_1) use-mode?6_0))"
"(let-values()"
"(let-values()"
"(let-values()"
"(begin"
"(if(syntax?$1 s_180)"
"(void)"
"                                    (let-values () (raise-argument-error 'syntax-rearm \"syntax?\" s_180)))"
"(if(syntax?$1 from-s_2)"
"(void)"
"                                    (let-values () (raise-argument-error 'syntax-rearm \"syntax?\" from-s_2)))"
"(if use-mode?_1"
"(let-values()"
"(taint-dispatch"
" s_180"
"(lambda(s_76)(syntax-rearm$1 s_76 from-s_2))"
"(1/syntax-local-phase-level)))"
"(let-values()(syntax-rearm$1 s_180 from-s_2))))))))))))))"
"(case-lambda"
"((s_181 from-s_3)(begin 'syntax-rearm(syntax-rearm9_0 s_181 from-s_3 #f)))"
"((s_442 from-s_4 use-mode?6_1)(syntax-rearm9_0 s_442 from-s_4 use-mode?6_1)))))"
"(define-values"
"(1/syntax-taint)"
"(lambda(s_5)"
"(begin"
" 'syntax-taint"
"(let-values()"
"(let-values()"
"(begin"
"            (if (syntax?$1 s_5) (void) (let-values () (raise-argument-error 'syntax-taint \"syntax?\" s_5)))"
"(syntax-taint$1 s_5)))))))"
"(define-values"
"(inspector-for-taint)"
"(lambda(maybe-insp_3)"
"(begin"
"(let-values(((or-part_366) maybe-insp_3))"
"(if or-part_366"
" or-part_366"
"(let-values(((or-part_163)(current-module-code-inspector)))"
"(if or-part_163 or-part_163(current-code-inspector))))))))"
"(define-values"
"(1/variable-reference->empty-namespace)"
"(lambda(vr_0)"
"(begin"
" 'variable-reference->empty-namespace"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/variable-reference? vr_0)"
"(void)"
"              (let-values () (raise-argument-error 'variable-reference->empty-namespace \"variable-reference?\" vr_0)))"
"(let-values(((temp2_7)(1/variable-reference->namespace vr_0)))"
"(new-namespace8.1 #t unsafe-undefined temp2_7))))))))"
"(define-values"
"(1/variable-reference->namespace)"
"(lambda(vr_1)"
"(begin"
" 'variable-reference->namespace"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_1)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'variable-reference->namespace \"variable-reference?\" vr_1)))"
"(values))))"
"(let-values(((ns_60)(variable-reference->namespace* vr_1)))"
"(let-values(((mpi_49)(namespace-mpi ns_60)))"
"(begin"
"(if(non-self-module-path-index? mpi_49)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_60)"
"(let-values()"
"(let-values(((ns4_1) ns_60)((mpi5_0) mpi_49)((temp6_5)(namespace-0-phase ns_60)))"
"(namespace-module-make-available!112.1 unsafe-undefined ns4_1 mpi5_0 temp6_5)))))"
"(void))"
" ns_60)))))))))"
"(define-values"
"(variable-reference->namespace*)"
"(lambda(vr_2)"
"(begin"
"(let-values(((inst_7)(1/variable-reference->instance vr_2)))"
"(if(symbol? inst_7)"
"(let-values()"
"(1/module->namespace(list 'quote inst_7)(1/instance-data(1/variable-reference->instance vr_2 #t))))"
"(if(not inst_7)"
"(let-values()(1/instance-data(1/variable-reference->instance vr_2 #t)))"
"(let-values()(1/instance-data inst_7))))))))"
"(define-values"
"(1/variable-reference->module-path-index)"
"(lambda(vr_3)"
"(begin"
" 'variable-reference->module-path-index"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_3)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'variable-reference->module-path-index \"variable-reference?\" vr_3)))"
"(values))))"
"(let-values(((mpi_50)(namespace-mpi(variable-reference->namespace* vr_3))))"
"(if(top-level-module-path-index? mpi_50) #f mpi_50))))))))"
"(define-values"
"(1/variable-reference->resolved-module-path)"
"(lambda(vr_4)"
"(begin"
" 'variable-reference->resolved-module-path"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_4)"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'variable-reference->resolved-module-path"
"                               \"variable-reference?\""
" vr_4)))"
"(values))))"
"(let-values(((mpi_51)(1/variable-reference->module-path-index vr_4)))"
"(if mpi_51(1/module-path-index-resolve mpi_51) #f))))))))"
"(define-values"
"(1/variable-reference->module-source)"
"(lambda(vr_5)"
"(begin"
" 'variable-reference->module-source"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(if(1/variable-reference? vr_5)"
"(void)"
"(let-values()"
"                              (raise-argument-error 'variable-reference->module-source \"variable-reference?\" vr_5)))"
"(values))))"
"(let-values(((ns_119)(variable-reference->namespace* vr_5)))(namespace-source-name ns_119))))))))"
"(define-values"
"(1/variable-reference->phase)"
"(lambda(vr_6)"
"(begin"
" 'variable-reference->phase"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/variable-reference? vr_6)"
"(void)"
"              (let-values () (raise-argument-error 'variable-reference->phase \"variable-reference?\" vr_6)))"
"(namespace-phase(variable-reference->namespace* vr_6))))))))"
"(define-values"
"(1/variable-reference->module-base-phase)"
"(lambda(vr_7)"
"(begin"
" 'variable-reference->module-base-phase"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/variable-reference? vr_7)"
"(void)"
"              (let-values () (raise-argument-error 'variable-reference->module-base-phase \"variable-reference?\" vr_7)))"
"(namespace-0-phase(variable-reference->namespace* vr_7))))))))"
"(define-values"
"(1/variable-reference->module-declaration-inspector)"
"(lambda(vr_8)"
"(begin"
" 'variable-reference->module-declaration-inspector"
"(let-values()"
"(let-values()"
"(begin"
"(if(1/variable-reference? vr_8)"
"(void)"
"(let-values()"
"                (raise-argument-error 'variable-reference->module-declaration-inspector \"variable-reference?\" vr_8)))"
"(if(1/variable-reference->instance vr_8)"
"(let-values()"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"                 \"variable reference does not refer to an anonymous module variable\""
"                 \"variable reference\""
" vr_8))"
"(void))"
"(let-values(((or-part_72)(namespace-declaration-inspector(variable-reference->namespace* vr_8))))"
"(if or-part_72"
" or-part_72"
"(raise-arguments-error"
" 'variable-reference->module-declaration-inspector"
"                 \"given variable reference is not from a module\")))))))))"
"(define-values"
"(primitive-ids)"
"(seteq"
" 'syntax?"
" 'syntax-e"
" 'syntax->datum"
" 'datum->syntax"
" 'bound-identifier=?"
" 'free-identifier=?"
" 'free-transformer-identifier=?"
" 'free-template-identifier=?"
" 'free-label-identifier=?"
" 'identifier-binding"
" 'identifier-transformer-binding"
" 'identifier-template-binding"
" 'identifier-label-binding"
" 'identifier-binding-symbol"
" 'identifier-prune-lexical-context"
" 'syntax-debug-info"
" 'syntax-track-origin"
" 'syntax-shift-phase-level"
" 'syntax-source-module"
" 'identifier-prune-to-source-module"
" 'syntax-source"
" 'syntax-line"
" 'syntax-column"
" 'syntax-position"
" 'syntax-span"
" 'syntax->list"
" 'syntax-property"
" 'syntax-property-remove"
" 'syntax-property-preserved?"
" 'syntax-property-symbol-keys"
" 'syntax-original?"
" 'syntax-tainted?"
" 'syntax-arm"
" 'syntax-disarm"
" 'syntax-rearm"
" 'syntax-taint"
" 'raise-syntax-error"
" 'struct:exn:fail:syntax"
" 'exn:fail:syntax"
" 'make-exn:fail:syntax"
" 'exn:fail:syntax?"
" 'exn:fail:syntax-exprs"
" 'struct:exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound"
" 'make-exn:fail:syntax:unbound"
" 'exn:fail:syntax:unbound?"
" 'current-module-path-for-load"
" 'prop:exn:missing-module"
" 'exn:missing-module?"
" 'exn:missing-module-accessor"
" 'struct:exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module"
" 'make-exn:fail:filesystem:missing-module"
" 'exn:fail:filesystem:missing-module?"
" 'exn:fail:filesystem:missing-module-path"
" 'struct:exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module"
" 'make-exn:fail:syntax:missing-module"
" 'exn:fail:syntax:missing-module?"
" 'exn:fail:syntax:missing-module-path"
" 'syntax-transforming?"
" 'syntax-transforming-with-lifts?"
" 'syntax-transforming-module-expression?"
" 'syntax-local-transforming-module-provides?"
" 'syntax-local-context"
" 'syntax-local-introduce"
" 'syntax-local-identifier-as-binding"
" 'syntax-local-phase-level"
" 'syntax-local-name"
" 'make-syntax-introducer"
" 'make-interned-syntax-introducer"
" 'make-syntax-delta-introducer"
" 'syntax-local-make-delta-introducer"
" 'syntax-local-value"
" 'syntax-local-value/immediate"
" 'syntax-local-lift-expression"
" 'syntax-local-lift-values-expression"
" 'syntax-local-lift-context"
" 'syntax-local-lift-module"
" 'syntax-local-lift-require"
" 'syntax-local-lift-provide"
" 'syntax-local-lift-module-end-declaration"
" 'syntax-local-module-defined-identifiers"
" 'syntax-local-module-required-identifiers"
" 'syntax-local-module-exports"
" 'syntax-local-submodules"
" 'syntax-local-get-shadower"
" 'local-expand"
" 'local-expand/capture-lifts"
" 'local-transformer-expand"
" 'local-transformer-expand/capture-lifts"
" 'syntax-local-expand-expression"
" 'internal-definition-context?"
" 'syntax-local-make-definition-context"
" 'syntax-local-bind-syntaxes"
" 'internal-definition-context-binding-identifiers"
" 'internal-definition-context-introduce"
" 'internal-definition-context-seal"
" 'identifier-remove-from-definition-context"
" 'make-set!-transformer"
" 'prop:set!-transformer"
" 'set!-transformer?"
" 'set!-transformer-procedure"
" 'rename-transformer?"
" 'prop:rename-transformer"
" 'make-rename-transformer"
" 'rename-transformer-target"
" 'prop:liberal-define-context"
" 'liberal-define-context?"
" 'prop:expansion-contexts"
" 'module-path?"
" 'resolved-module-path?"
" 'make-resolved-module-path"
" 'resolved-module-path-name"
" 'module-path-index?"
" 'module-path-index-resolve"
" 'module-path-index-join"
" 'module-path-index-split"
" 'module-path-index-submodule"
" 'current-module-name-resolver"
" 'current-module-declare-name"
" 'current-module-declare-source"
" 'current-namespace"
" 'namespace-module-registry"
" 'namespace?"
" 'variable-reference->empty-namespace"
" 'variable-reference->namespace"
" 'variable-reference->resolved-module-path"
" 'variable-reference->module-path-index"
" 'variable-reference->module-source"
" 'variable-reference->phase"
" 'variable-reference->module-base-phase"
" 'variable-reference->module-declaration-inspector"
" 'read-syntax"
" 'read-syntax/recursive))"
"(void"
"(begin"
"(add-core-primitive! 'syntax? syntax?$1)"
"(add-core-primitive! 'syntax-e 1/syntax-e)"
"(add-core-primitive! 'syntax->datum 1/syntax->datum)"
"(add-core-primitive! 'datum->syntax 1/datum->syntax)"
"(add-core-primitive! 'bound-identifier=? 1/bound-identifier=?)"
"(add-core-primitive! 'free-identifier=? 1/free-identifier=?)"
"(add-core-primitive! 'free-transformer-identifier=? 1/free-transformer-identifier=?)"
"(add-core-primitive! 'free-template-identifier=? 1/free-template-identifier=?)"
"(add-core-primitive! 'free-label-identifier=? 1/free-label-identifier=?)"
"(add-core-primitive! 'identifier-binding 1/identifier-binding)"
"(add-core-primitive! 'identifier-transformer-binding 1/identifier-transformer-binding)"
"(add-core-primitive! 'identifier-template-binding 1/identifier-template-binding)"
"(add-core-primitive! 'identifier-label-binding 1/identifier-label-binding)"
"(add-core-primitive! 'identifier-binding-symbol 1/identifier-binding-symbol)"
"(add-core-primitive! 'identifier-prune-lexical-context 1/identifier-prune-lexical-context)"
"(add-core-primitive! 'syntax-debug-info 1/syntax-debug-info)"
"(add-core-primitive! 'syntax-track-origin 1/syntax-track-origin)"
"(add-core-primitive! 'syntax-shift-phase-level 1/syntax-shift-phase-level)"
"(add-core-primitive! 'syntax-source-module 1/syntax-source-module)"
"(add-core-primitive! 'identifier-prune-to-source-module 1/identifier-prune-to-source-module)"
"(add-core-primitive! 'syntax-source 1/syntax-source)"
"(add-core-primitive! 'syntax-line 1/syntax-line)"
"(add-core-primitive! 'syntax-column 1/syntax-column)"
"(add-core-primitive! 'syntax-position 1/syntax-position)"
"(add-core-primitive! 'syntax-span 1/syntax-span)"
"(add-core-primitive! 'syntax->list 1/syntax->list)"
"(add-core-primitive! 'syntax-property syntax-property$1)"
"(add-core-primitive! 'syntax-property-remove 1/syntax-property-remove)"
"(add-core-primitive! 'syntax-property-preserved? 1/syntax-property-preserved?)"
"(add-core-primitive! 'syntax-property-symbol-keys 1/syntax-property-symbol-keys)"
"(add-core-primitive! 'syntax-original? 1/syntax-original?)"
"(add-core-primitive! 'syntax-tainted? 1/syntax-tainted?)"
"(add-core-primitive! 'syntax-arm 1/syntax-arm)"
"(add-core-primitive! 'syntax-disarm 1/syntax-disarm)"
"(add-core-primitive! 'syntax-rearm 1/syntax-rearm)"
"(add-core-primitive! 'syntax-taint 1/syntax-taint)"
"(add-core-primitive! 'raise-syntax-error raise-syntax-error$1)"
"(add-core-primitive! 'struct:exn:fail:syntax 1/struct:exn:fail:syntax)"
"(add-core-primitive! 'exn:fail:syntax make-exn:fail:syntax$1)"
"(add-core-primitive! 'make-exn:fail:syntax make-exn:fail:syntax$1)"
"(add-core-primitive! 'exn:fail:syntax? 1/exn:fail:syntax?)"
"(add-core-primitive! 'exn:fail:syntax-exprs 1/exn:fail:syntax-exprs)"
"(add-core-primitive! 'struct:exn:fail:syntax:unbound 1/struct:exn:fail:syntax:unbound)"
"(add-core-primitive! 'exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1)"
"(add-core-primitive! 'make-exn:fail:syntax:unbound make-exn:fail:syntax:unbound$1)"
"(add-core-primitive! 'exn:fail:syntax:unbound? 1/exn:fail:syntax:unbound?)"
"(add-core-primitive! 'current-module-path-for-load 1/current-module-path-for-load)"
"(add-core-primitive! 'prop:exn:missing-module 1/prop:exn:missing-module)"
"(add-core-primitive! 'exn:missing-module? 1/exn:missing-module?)"
"(add-core-primitive! 'exn:missing-module-accessor 1/exn:missing-module-accessor)"
"(add-core-primitive! 'struct:exn:fail:filesystem:missing-module 1/struct:exn:fail:filesystem:missing-module)"
"(add-core-primitive! 'exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module)"
"(add-core-primitive! 'make-exn:fail:filesystem:missing-module 1/make-exn:fail:filesystem:missing-module)"
"(add-core-primitive! 'exn:fail:filesystem:missing-module? 1/exn:fail:filesystem:missing-module?)"
"(add-core-primitive! 'exn:fail:filesystem:missing-module-path 1/exn:fail:filesystem:missing-module-path)"
"(add-core-primitive! 'struct:exn:fail:syntax:missing-module 1/struct:exn:fail:syntax:missing-module)"
"(add-core-primitive! 'exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module)"
"(add-core-primitive! 'make-exn:fail:syntax:missing-module 1/make-exn:fail:syntax:missing-module)"
"(add-core-primitive! 'exn:fail:syntax:missing-module? 1/exn:fail:syntax:missing-module?)"
"(add-core-primitive! 'exn:fail:syntax:missing-module-path 1/exn:fail:syntax:missing-module-path)"
"(add-core-primitive! 'syntax-transforming? 1/syntax-transforming?)"
"(add-core-primitive! 'syntax-transforming-with-lifts? 1/syntax-transforming-with-lifts?)"
"(add-core-primitive! 'syntax-transforming-module-expression? 1/syntax-transforming-module-expression?)"
"(add-core-primitive! 'syntax-local-transforming-module-provides? 1/syntax-local-transforming-module-provides?)"
"(add-core-primitive! 'syntax-local-context 1/syntax-local-context)"
"(add-core-primitive! 'syntax-local-introduce 1/syntax-local-introduce)"
"(add-core-primitive! 'syntax-local-identifier-as-binding 1/syntax-local-identifier-as-binding)"
"(add-core-primitive! 'syntax-local-phase-level 1/syntax-local-phase-level)"
"(add-core-primitive! 'syntax-local-name 1/syntax-local-name)"
"(add-core-primitive! 'make-syntax-introducer 1/make-syntax-introducer)"
"(add-core-primitive! 'make-interned-syntax-introducer 1/make-interned-syntax-introducer)"
"(add-core-primitive! 'make-syntax-delta-introducer 1/make-syntax-delta-introducer)"
"(add-core-primitive! 'syntax-local-make-delta-introducer 1/syntax-local-make-delta-introducer)"
"(add-core-primitive! 'syntax-local-value 1/syntax-local-value)"
"(add-core-primitive! 'syntax-local-value/immediate 1/syntax-local-value/immediate)"
"(add-core-primitive! 'syntax-local-lift-expression 1/syntax-local-lift-expression)"
"(add-core-primitive! 'syntax-local-lift-values-expression 1/syntax-local-lift-values-expression)"
"(add-core-primitive! 'syntax-local-lift-context 1/syntax-local-lift-context)"
"(add-core-primitive! 'syntax-local-lift-module 1/syntax-local-lift-module)"
"(add-core-primitive! 'syntax-local-lift-require 1/syntax-local-lift-require)"
"(add-core-primitive! 'syntax-local-lift-provide 1/syntax-local-lift-provide)"
"(add-core-primitive! 'syntax-local-lift-module-end-declaration 1/syntax-local-lift-module-end-declaration)"
"(add-core-primitive! 'syntax-local-module-defined-identifiers 1/syntax-local-module-defined-identifiers)"
"(add-core-primitive! 'syntax-local-module-required-identifiers 1/syntax-local-module-required-identifiers)"
"(add-core-primitive! 'syntax-local-module-exports 1/syntax-local-module-exports)"
"(add-core-primitive! 'syntax-local-submodules 1/syntax-local-submodules)"
"(add-core-primitive! 'syntax-local-get-shadower 1/syntax-local-get-shadower)"
"(add-core-primitive! 'local-expand 1/local-expand)"
"(add-core-primitive! 'local-expand/capture-lifts 1/local-expand/capture-lifts)"
"(add-core-primitive! 'local-transformer-expand 1/local-transformer-expand)"
"(add-core-primitive! 'local-transformer-expand/capture-lifts 1/local-transformer-expand/capture-lifts)"
"(add-core-primitive! 'syntax-local-expand-expression 1/syntax-local-expand-expression)"
"(add-core-primitive! 'internal-definition-context? 1/internal-definition-context?)"
"(add-core-primitive! 'syntax-local-make-definition-context 1/syntax-local-make-definition-context)"
"(add-core-primitive! 'syntax-local-bind-syntaxes 1/syntax-local-bind-syntaxes)"
"(add-core-primitive!"
" 'internal-definition-context-binding-identifiers"
" 1/internal-definition-context-binding-identifiers)"
"(add-core-primitive! 'internal-definition-context-introduce 1/internal-definition-context-introduce)"
"(add-core-primitive! 'internal-definition-context-seal 1/internal-definition-context-seal)"
"(add-core-primitive! 'identifier-remove-from-definition-context 1/identifier-remove-from-definition-context)"
"(add-core-primitive! 'make-set!-transformer 1/make-set!-transformer)"
"(add-core-primitive! 'prop:set!-transformer 1/prop:set!-transformer)"
"(add-core-primitive! 'set!-transformer? 1/set!-transformer?)"
"(add-core-primitive! 'set!-transformer-procedure 1/set!-transformer-procedure)"
"(add-core-primitive! 'rename-transformer? 1/rename-transformer?)"
"(add-core-primitive! 'prop:rename-transformer 1/prop:rename-transformer)"
"(add-core-primitive! 'make-rename-transformer 1/make-rename-transformer)"
"(add-core-primitive! 'rename-transformer-target 1/rename-transformer-target)"
"(add-core-primitive! 'prop:liberal-define-context 1/prop:liberal-define-context)"
"(add-core-primitive! 'liberal-define-context? has-liberal-define-context-property?)"
"(add-core-primitive! 'prop:expansion-contexts 1/prop:expansion-contexts)"
"(add-core-primitive! 'module-path? 1/module-path?)"
"(add-core-primitive! 'resolved-module-path? 1/resolved-module-path?)"
"(add-core-primitive! 'make-resolved-module-path 1/make-resolved-module-path)"
"(add-core-primitive! 'resolved-module-path-name 1/resolved-module-path-name)"
"(add-core-primitive! 'module-path-index? 1/module-path-index?)"
"(add-core-primitive! 'module-path-index-resolve 1/module-path-index-resolve)"
"(add-core-primitive! 'module-path-index-join 1/module-path-index-join)"
"(add-core-primitive! 'module-path-index-split 1/module-path-index-split)"
"(add-core-primitive! 'module-path-index-submodule 1/module-path-index-submodule)"
"(add-core-primitive! 'current-module-name-resolver 1/current-module-name-resolver)"
"(add-core-primitive! 'current-module-declare-name 1/current-module-declare-name)"
"(add-core-primitive! 'current-module-declare-source 1/current-module-declare-source)"
"(add-core-primitive! 'current-namespace 1/current-namespace)"
"(add-core-primitive! 'namespace-module-registry namespace-module-registry$1)"
"(add-core-primitive! 'namespace? 1/namespace?)"
"(add-core-primitive! 'variable-reference->empty-namespace 1/variable-reference->empty-namespace)"
"(add-core-primitive! 'variable-reference->namespace 1/variable-reference->namespace)"
"(add-core-primitive! 'variable-reference->resolved-module-path 1/variable-reference->resolved-module-path)"
"(add-core-primitive! 'variable-reference->module-path-index 1/variable-reference->module-path-index)"
"(add-core-primitive! 'variable-reference->module-source 1/variable-reference->module-source)"
"(add-core-primitive! 'variable-reference->phase 1/variable-reference->phase)"
"(add-core-primitive! 'variable-reference->module-base-phase 1/variable-reference->module-base-phase)"
"(add-core-primitive!"
" 'variable-reference->module-declaration-inspector"
" 1/variable-reference->module-declaration-inspector)"
"(add-core-primitive! 'read-syntax 1/read-syntax)"
"(add-core-primitive! 'read-syntax/recursive 1/read-syntax/recursive)))"
"(define-values"
"(declare-kernel-module!8.1)"
"(lambda(eval1_0 main-ids2_0 read-ids3_0 ns7_1)"
"(begin"
" 'declare-kernel-module!8"
"(let-values(((ns_120) ns7_1))"
"(let-values()"
"(let-values(((main-ids_0) main-ids2_0))"
"(let-values(((read-ids_0) read-ids3_0))"
"(let-values()"
"(begin"
"(let-values(((temp53_5) '#%kernel)"
"((temp54_4) '#%runtime)"
"((temp55_3)(set-union primitive-ids(set-union main-ids_0 read-ids_0)))"
"((temp56_4)"
"(hasheq"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference-constant?"
" 1/variable-reference-constant?"
" 'variable-reference-from-unsafe?"
" 1/variable-reference-from-unsafe?))"
"((ns57_2) ns_120))"
"(copy-runtime-module!26.1 unsafe-undefined temp56_4 ns57_2 #t #f temp55_3 temp54_4 temp53_5))"
"(let-values(((temp58_4) '#%kernel)((temp59_7) '(#%core #%runtime #%main #%read))((ns60_2) ns_120))"
"(declare-reexporting-module!50.1 ns60_2 #t temp58_4 temp59_7)))))))))))"
"(define-values"
"(copy-runtime-module!26.1)"
"(lambda(alts14_0 extras15_0 namespace12_0 primitive?16_0 protected?17_0 skip13_0 to11_0 name25_1)"
"(begin"
" 'copy-runtime-module!26"
"(let-values(((name_74) name25_1))"
"(let-values(((to-name_0)(if(eq? to11_0 unsafe-undefined) name_74 to11_0)))"
"(let-values(((ns_121) namespace12_0))"
"(let-values(((skip-syms_0)(if(eq? skip13_0 unsafe-undefined)(seteq) skip13_0)))"
"(let-values(((alts_0)(if(eq? alts14_0 unsafe-undefined) '#hasheq() alts14_0)))"
"(let-values(((extras_0)(if(eq? extras15_0 unsafe-undefined) '#hasheq() extras15_0)))"
"(let-values(((primitive?_9) primitive?16_0))"
"(let-values(((protected?_10) protected?17_0))"
"(let-values()"
"(let-values(((prims_0)(1/primitive-table name_74)))"
"(let-values((()"
"(begin"
"(let-values(((ht_156) prims_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_156)))"
"((letrec-values(((for-loop_17)"
"(lambda(i_175)"
"(begin"
" 'for-loop"
"(if i_175"
"(let-values(((sym_65)"
"(hash-iterate-key ht_156 i_175)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(register-built-in-symbol!"
" sym_65))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_17"
"(hash-iterate-next ht_156 i_175))"
"(values))))"
"(values))))))"
" for-loop_17)"
"(hash-iterate-first ht_156))))"
"(values))))"
"(let-values()"
"(let-values(((ht_157)"
"(let-values(((ht_158) prims_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_158)))"
"((letrec-values(((for-loop_249)"
"(lambda(table_213 i_97)"
"(begin"
" 'for-loop"
"(if i_97"
"(let-values(((sym_93 val_82)"
"(hash-iterate-key+value"
" ht_158"
" i_97)))"
"(let-values(((table_214)"
"(let-values(((table_10)"
" table_213))"
"(if(set-member?"
" skip-syms_0"
" sym_93)"
" table_10"
"(let-values(((table_11)"
" table_10))"
"(let-values(((table_12)"
"(let-values()"
"(let-values(((key_14"
" val_5)"
"(let-values()"
"(values"
" sym_93"
"(let-values(((or-part_167)"
"(hash-ref"
" alts_0"
" sym_93"
" #f)))"
"(if or-part_167"
" or-part_167"
" val_82))))))"
"(hash-set"
" table_11"
" key_14"
" val_5)))))"
"(values table_12)))))))"
"(if(not #f)"
"(for-loop_249"
" table_214"
"(hash-iterate-next ht_158 i_97))"
" table_214)))"
" table_213)))))"
" for-loop_249)"
" '#hasheq()"
"(hash-iterate-first ht_158))))))"
"(let-values(((ht+extras_0)"
"(let-values(((ht_146) extras_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_146)))"
"((letrec-values(((for-loop_253)"
"(lambda(ht_153 i_169)"
"(begin"
" 'for-loop"
"(if i_169"
"(let-values(((k_43 v_48)"
"(hash-iterate-key+value"
" ht_146"
" i_169)))"
"(let-values(((ht_159)"
"(let-values(((ht_160)"
" ht_153))"
"(let-values(((ht_161)"
"(let-values()"
"(hash-set"
" ht_160"
" k_43"
" v_48))))"
"(values ht_161)))))"
"(if(not #f)"
"(for-loop_253"
" ht_159"
"(hash-iterate-next ht_146 i_169))"
" ht_159)))"
" ht_153)))))"
" for-loop_253)"
" ht_157"
"(hash-iterate-first ht_146))))))"
"(let-values(((to-name61_0) to-name_0)"
"((ht+extras62_0) ht+extras_0)"
"((ns63_0) ns_121)"
"((primitive?64_0) primitive?_9)"
"((protected?65_0) protected?_10))"
"(declare-hash-based-module!41.1"
" ns63_0"
" primitive?64_0"
" null"
" protected?65_0"
" #f"
" to-name61_0"
" ht+extras62_0)))))))))))))))))))"
"(define-values"
"(declare-hash-based-module!41.1)"
"(lambda(namespace29_0 primitive?30_0 protected32_0 protected?31_0 register-builtin?33_0 name39_0 ht40_0)"
"(begin"
" 'declare-hash-based-module!41"
"(let-values(((name_75) name39_0))"
"(let-values(((ht_162) ht40_0))"
"(let-values(((ns_122) namespace29_0))"
"(let-values(((primitive?_10) primitive?30_0))"
"(let-values(((protected?_11) protected?31_0))"
"(let-values(((protected-syms_0) protected32_0))"
"(let-values(((register-builtin?_0) register-builtin?33_0))"
"(let-values()"
"(let-values(((mpi_5)(1/module-path-index-join(list 'quote name_75) #f)))"
"(let-values(((ns66_0) ns_122)"
"((temp67_5)"
"(let-values(((temp69_3) #t)"
"((primitive?70_0) primitive?_10)"
"((temp71_4) #t)"
"((temp72_3)(not protected?_11))"
"((mpi73_1) mpi_5)"
"((temp74_2)"
"(hasheqv"
" 0"
"(let-values(((ht_163) ht_162))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_163)))"
"((letrec-values(((for-loop_277)"
"(lambda(table_215 i_176)"
"(begin"
" 'for-loop"
"(if i_176"
"(let-values(((sym_103)"
"(hash-iterate-key"
" ht_163"
" i_176)))"
"(let-values(((table_6)"
"(let-values(((table_7)"
" table_215))"
"(let-values(((table_216)"
"(let-values()"
"(let-values(((key_86"
" val_83)"
"(let-values()"
"(let-values((()"
"(begin"
"(if register-builtin?_0"
"(let-values()"
"(register-built-in-symbol!"
" sym_103))"
"(void))"
"(values))))"
"(let-values(((binding_27)"
"(let-values(((mpi76_0)"
" mpi_5)"
"((temp77_3)"
" 0)"
"((sym78_0)"
" sym_103))"
"(make-module-binding22.1"
" #f"
" null"
" #f"
" #f"
" unsafe-undefined"
" unsafe-undefined"
" 0"
" unsafe-undefined"
" unsafe-undefined"
" mpi76_0"
" temp77_3"
" sym78_0))))"
"(values"
" sym_103"
"(if(let-values(((or-part_56)"
" protected?_11))"
"(if or-part_56"
" or-part_56"
"(member"
" sym_103"
" protected-syms_0)))"
"(provided1.1"
" binding_27"
" #t"
" #f)"
" binding_27)))))))"
"(hash-set"
" table_7"
" key_86"
" val_83)))))"
"(values"
" table_216)))))"
"(if(not #f)"
"(for-loop_277"
" table_6"
"(hash-iterate-next"
" ht_163"
" i_176))"
" table_6)))"
" table_215)))))"
" for-loop_277)"
" '#hash()"
"(hash-iterate-first ht_163))))))"
"((temp75_4)"
"(lambda(data-box_6"
" ns_123"
" phase-shift_20"
" phase-level_23"
" self_29"
" bulk-binding-registry_19"
" insp_23)"
"(if(= 0 phase-level_23)"
"(let-values()"
"(begin"
"(let-values(((ht_164) ht_162))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash ht_164)))"
"((letrec-values(((for-loop_278)"
"(lambda(i_177)"
"(begin"
" 'for-loop"
"(if i_177"
"(let-values(((sym_104 val_84)"
"(hash-iterate-key+value"
" ht_164"
" i_177)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" ns_123"
" 0"
" sym_104"
" val_84))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_278"
"(hash-iterate-next"
" ht_164"
" i_177))"
"(values))))"
"(values))))))"
" for-loop_278)"
"(hash-iterate-first ht_164))))"
"(void)))"
"(void)))))"
"(make-module39.1"
" temp69_3"
" unsafe-undefined"
" unsafe-undefined"
" temp75_4"
" #f"
" 0"
" 0"
" temp72_3"
" unsafe-undefined"
" temp71_4"
" unsafe-undefined"
" primitive?70_0"
" temp74_2"
" null"
" mpi73_1"
" #f"
" null"
" #f)))"
"((temp68_6)(1/module-path-index-resolve mpi_5)))"
"(declare-module!58.1 #t ns66_0 temp67_5 temp68_6))))))))))))))"
"(define-values"
"(declare-reexporting-module!50.1)"
"(lambda(namespace45_0 reexport?44_0 name48_0 require-names49_0)"
"(begin"
" 'declare-reexporting-module!50"
"(let-values(((name_76) name48_0))"
"(let-values(((require-names_0) require-names49_0))"
"(let-values(((reexport?_0) reexport?44_0))"
"(let-values(((ns_124) namespace45_0))"
"(let-values()"
"(let-values(((mpi_52)(1/module-path-index-join(list 'quote name_76) #f)))"
"(let-values(((require-mpis_0)"
"(reverse$1"
"(let-values(((lst_108) require-names_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_108)))"
"((letrec-values(((for-loop_209)"
"(lambda(fold-var_143 lst_109)"
"(begin"
" 'for-loop"
"(if(pair? lst_109)"
"(let-values(((require-name_0)(unsafe-car lst_109))"
"((rest_110)(unsafe-cdr lst_109)))"
"(let-values(((fold-var_145)"
"(let-values(((fold-var_285) fold-var_143))"
"(let-values(((fold-var_39)"
"(let-values()"
"(cons"
"(let-values()"
"(1/module-path-index-join"
"(list"
" 'quote"
" require-name_0)"
" #f))"
" fold-var_285))))"
"(values fold-var_39)))))"
"(if(not #f)"
"(for-loop_209 fold-var_145 rest_110)"
" fold-var_145)))"
" fold-var_143)))))"
" for-loop_209)"
" null"
" lst_108))))))"
"(let-values(((ns79_1) ns_124)"
"((temp80_2)"
"(let-values(((temp82_3) #t)"
"((temp83_3) #t)"
"((mpi84_0) mpi_52)"
"((temp85_3)(list(cons 0 require-mpis_0)))"
"((temp86_5)"
"(if reexport?_0"
"(hasheqv"
" 0"
"(let-values(((lst_159) require-mpis_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_159)))"
"((letrec-values(((for-loop_279)"
"(lambda(table_217 lst_309)"
"(begin"
" 'for-loop"
"(if(pair? lst_309)"
"(let-values(((require-mpi_0)"
"(unsafe-car lst_309))"
"((rest_180)"
"(unsafe-cdr lst_309)))"
"(let-values(((table_218)"
"(let-values(((m_29)"
"(namespace->module"
" ns_124"
"(1/module-path-index-resolve"
" require-mpi_0))))"
"(begin"
" #t"
"((letrec-values(((for-loop_187)"
"(lambda(table_140)"
"(begin"
" 'for-loop"
"(let-values()"
"(let-values(((table_219)"
"(let-values(((ht_165)"
"(hash-ref"
"(shift-provides-module-path-index"
"(module-provides"
" m_29)"
"(module-self"
" m_29)"
" require-mpi_0)"
" 0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-in-hash"
" ht_165)))"
"((letrec-values(((for-loop_280)"
"(lambda(table_141"
" i_178)"
"(begin"
" 'for-loop"
"(if i_178"
"(let-values(((sym_105"
" binding_28)"
"(hash-iterate-key+value"
" ht_165"
" i_178)))"
"(let-values(((table_31)"
"(let-values(((table_32)"
" table_141))"
"(let-values(((table_220)"
"(let-values()"
"(let-values(((key_87"
" val_85)"
"(let-values()"
"(values"
" sym_105"
" binding_28))))"
"(hash-set"
" table_32"
" key_87"
" val_85)))))"
"(values"
" table_220)))))"
"(if(not"
" #f)"
"(for-loop_280"
" table_31"
"(hash-iterate-next"
" ht_165"
" i_178))"
" table_31)))"
" table_141)))))"
" for-loop_280)"
" table_140"
"(hash-iterate-first"
" ht_165))))))"
" table_219))))))"
" for-loop_187)"
" table_217)))))"
"(if(not #f)"
"(for-loop_279 table_218 rest_180)"
" table_218)))"
" table_217)))))"
" for-loop_279)"
" '#hash()"
" lst_159))))"
" '#hasheqv()))"
"((void87_0) void))"
"(make-module39.1"
" temp82_3"
" unsafe-undefined"
" unsafe-undefined"
" void87_0"
" #f"
" 0"
" 0"
" #f"
" unsafe-undefined"
" temp83_3"
" unsafe-undefined"
" #f"
" temp86_5"
" temp85_3"
" mpi84_0"
" #f"
" null"
" #f)))"
"((temp81_4)(1/module-path-index-resolve mpi_52)))"
"(declare-module!58.1 #t ns79_1 temp80_2 temp81_4))))))))))))"
"(define-values"
"(read-primitives)"
"(hasheq"
" 'read"
" 1/read"
" 'read/recursive"
" 1/read/recursive"
" 'read-language"
" 1/read-language"
" 'string->number"
" 1/string->number"
" 'current-reader-guard"
" 1/current-reader-guard"
" 'read-square-bracket-as-paren"
" 1/read-square-bracket-as-paren"
" 'read-curly-brace-as-paren"
" 1/read-curly-brace-as-paren"
" 'read-square-bracket-with-tag"
" 1/read-square-bracket-with-tag"
" 'read-curly-brace-with-tag"
" 1/read-curly-brace-with-tag"
" 'read-cdot"
" 1/read-cdot"
" 'read-accept-graph"
" 1/read-accept-graph"
" 'read-accept-compiled"
" 1/read-accept-compiled"
" 'read-accept-box"
" 1/read-accept-box"
" 'read-decimal-as-inexact"
" 1/read-decimal-as-inexact"
" 'read-accept-dot"
" 1/read-accept-dot"
" 'read-accept-infix-dot"
" 1/read-accept-infix-dot"
" 'read-accept-quasiquote"
" 1/read-accept-quasiquote"
" 'read-accept-reader"
" 1/read-accept-reader"
" 'read-accept-lang"
" 1/read-accept-lang"
" 'current-readtable"
" 1/current-readtable"
" 'readtable?"
" 1/readtable?"
" 'make-readtable"
" 1/make-readtable"
" 'readtable-mapping"
" 1/readtable-mapping"
" 'special-comment?"
" 1/special-comment?"
" 'make-special-comment"
" 1/make-special-comment"
" 'special-comment-value"
" 1/special-comment-value))"
"(define-values"
"(main-primitives)"
"(hasheq"
" 'eval"
" eval$1"
" 'eval-syntax"
" 1/eval-syntax"
" 'compile"
" compile$1"
" 'compile-syntax"
" 1/compile-syntax"
" 'expand"
" 1/expand"
" 'expand-syntax"
" 1/expand-syntax"
" 'expand-once"
" 1/expand-once"
" 'expand-syntax-once"
" 1/expand-syntax-once"
" 'expand-to-top-form"
" 1/expand-to-top-form"
" 'expand-syntax-to-top-form"
" 1/expand-syntax-to-top-form"
" 'dynamic-require"
" 1/dynamic-require"
" 'dynamic-require-for-syntax"
" 1/dynamic-require-for-syntax"
" 'load"
" 1/load"
" 'load-extension"
" 1/load-extension"
" 'load/use-compiled"
" 1/load/use-compiled"
" 'current-eval"
" 1/current-eval"
" 'current-compile"
" 1/current-compile"
" 'current-load"
" 1/current-load"
" 'current-load/use-compiled"
" 1/current-load/use-compiled"
" 'collection-path"
" 1/collection-path"
" 'collection-file-path"
" 1/collection-file-path"
" 'find-library-collection-paths"
" 1/find-library-collection-paths"
" 'find-library-collection-links"
" 1/find-library-collection-links"
" 'current-library-collection-paths"
" 1/current-library-collection-paths"
" 'current-library-collection-links"
" 1/current-library-collection-links"
" 'use-compiled-file-paths"
" 1/use-compiled-file-paths"
" 'current-compiled-file-roots"
" 1/current-compiled-file-roots"
" 'use-compiled-file-check"
" 1/use-compiled-file-check"
" 'use-collection-link-paths"
" 1/use-collection-link-paths"
" 'use-user-specific-search-paths"
" 1/use-user-specific-search-paths"
" 'compiled-expression?"
" 1/compiled-expression?"
" 'compiled-module-expression?"
" 1/compiled-module-expression?"
" 'module-compiled-name"
" 1/module-compiled-name"
" 'module-compiled-submodules"
" 1/module-compiled-submodules"
" 'module-compiled-language-info"
" 1/module-compiled-language-info"
" 'module-compiled-imports"
" 1/module-compiled-imports"
" 'module-compiled-exports"
" 1/module-compiled-exports"
" 'module-compiled-indirect-exports"
" 1/module-compiled-indirect-exports"
" 'compiled-expression-recompile"
" 1/compiled-expression-recompile"
" 'make-empty-namespace"
" 1/make-empty-namespace"
" 'namespace-attach-module"
" 1/namespace-attach-module"
" 'namespace-attach-module-declaration"
" 1/namespace-attach-module-declaration"
" 'namespace-symbol->identifier"
" 1/namespace-symbol->identifier"
" 'namespace-module-identifier"
" 1/namespace-module-identifier"
" 'namespace-syntax-introduce"
" 1/namespace-syntax-introduce"
" 'namespace-require"
" 1/namespace-require"
" 'namespace-require/copy"
" 1/namespace-require/copy"
" 'namespace-require/constant"
" 1/namespace-require/constant"
" 'namespace-require/expansion-time"
" 1/namespace-require/expansion-time"
" 'namespace-variable-value"
" 1/namespace-variable-value"
" 'namespace-set-variable-value!"
" 1/namespace-set-variable-value!"
" 'namespace-undefine-variable!"
" 1/namespace-undefine-variable!"
" 'namespace-mapped-symbols"
" 1/namespace-mapped-symbols"
" 'namespace-base-phase"
" 1/namespace-base-phase"
" 'module-declared?"
" 1/module-declared?"
" 'module-predefined?"
" 1/module-predefined?"
" 'module->language-info"
" 1/module->language-info"
" 'module->imports"
" 1/module->imports"
" 'module->exports"
" 1/module->exports"
" 'module->indirect-exports"
" 1/module->indirect-exports"
" 'module-compiled-cross-phase-persistent?"
" 1/module-compiled-cross-phase-persistent?"
" 'module-provide-protected?"
" 1/module-provide-protected?"
" 'module->namespace"
" 1/module->namespace"
" 'namespace-unprotect-module"
" 1/namespace-unprotect-module))"
"(define-values"
"(utils-primitives)"
"(hasheq"
" 'path-string?"
" path-string?"
" 'normal-case-path"
" normal-case-path"
" 'path-replace-extension"
" path-replace-extension"
" 'path-add-extension"
" path-add-extension"
" 'reroot-path"
" reroot-path"
" 'path-list-string->path-list"
" path-list-string->path-list"
" 'find-executable-path"
" find-executable-path"
" 'call-with-default-reading-parameterization"
" call-with-default-reading-parameterization"
" 'collection-path"
" 1/collection-path"
" 'collection-file-path"
" 1/collection-file-path"
" 'find-library-collection-paths"
" 1/find-library-collection-paths"
" 'find-library-collection-links"
" 1/find-library-collection-links"
" 'load/use-compiled"
" 1/load/use-compiled"
" 'find-main-config"
" find-main-config"
" 'find-main-collects"
" find-main-collects))"
"(define-values(expobs-primitives)(hasheq 'current-expand-observe current-expand-observe))"
"(define-values"
"(struct:TH-place-channel TH-place-channel TH-place-channel? TH-place-channel-ref TH-place-channel-set!)"
"(make-struct-type 'TH-place-channel #f 2 0 #f(list(cons prop:evt(lambda(x_96)(TH-place-channel-ref x_96 0))))))"
"(define-values"
"(TH-place-channel-in TH-place-channel-out)"
"(values(lambda(x_97)(TH-place-channel-ref x_97 0))(lambda(x_83)(TH-place-channel-ref x_83 1))))"
"(define-values"
"(place-struct-primitives)"
"(hasheq"
" 'struct:TH-place-channel"
" struct:TH-place-channel"
" 'TH-place-channel"
" TH-place-channel"
" 'TH-place-channel?"
" TH-place-channel?"
" 'TH-place-channel-in"
" TH-place-channel-in"
" 'TH-place-channel-out"
" TH-place-channel-out))"
"(define-values"
"(linklet-primitives)"
"(hasheq"
" 'primitive-table"
" 1/primitive-table"
" 'primitive->compiled-position"
" 1/primitive->compiled-position"
" 'compiled-position->primitive"
" 1/compiled-position->primitive"
" 'primitive-in-category?"
" 1/primitive-in-category?"
" 'linklet?"
" 1/linklet?"
" 'compile-linklet"
" 1/compile-linklet"
" 'recompile-linklet"
" 1/recompile-linklet"
" 'eval-linklet"
" 1/eval-linklet"
" 'read-compiled-linklet"
" 1/read-compiled-linklet"
" 'instantiate-linklet"
" 1/instantiate-linklet"
" 'linklet-import-variables"
" 1/linklet-import-variables"
" 'linklet-export-variables"
" 1/linklet-export-variables"
" 'instance?"
" 1/instance?"
" 'make-instance"
" 1/make-instance"
" 'instance-name"
" 1/instance-name"
" 'instance-data"
" 1/instance-data"
" 'instance-variable-names"
" 1/instance-variable-names"
" 'instance-variable-value"
" 1/instance-variable-value"
" 'instance-set-variable-value!"
" 1/instance-set-variable-value!"
" 'instance-unset-variable!"
" 1/instance-unset-variable!"
" 'linklet-directory?"
" 1/linklet-directory?"
" 'hash->linklet-directory"
" 1/hash->linklet-directory"
" 'linklet-directory->hash"
" 1/linklet-directory->hash"
" 'linklet-bundle?"
" 1/linklet-bundle?"
" 'hash->linklet-bundle"
" 1/hash->linklet-bundle"
" 'linklet-bundle->hash"
" 1/linklet-bundle->hash"
" 'variable-reference?"
" 1/variable-reference?"
" 'variable-reference->instance"
" 1/variable-reference->instance"
" 'variable-reference-constant?"
" 1/variable-reference-constant?"
" 'variable-reference-from-unsafe?"
" 1/variable-reference-from-unsafe?))"
"(define-values"
"(with-module-reading-parameterization)"
"(lambda(thunk_3)"
"(begin"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t"
" 1/read-accept-compiled"
" #t"
" read-case-sensitive"
" #t"
" 1/read-square-bracket-as-paren"
" #t"
" 1/read-curly-brace-as-paren"
" #t"
" 1/read-square-bracket-with-tag"
" #f"
" 1/read-curly-brace-with-tag"
" #f"
" 1/read-accept-box"
" #t"
" read-accept-bar-quote"
" #t"
" 1/read-accept-graph"
" #t"
" 1/read-decimal-as-inexact"
" #t"
" 1/read-cdot"
" #f"
" 1/read-accept-dot"
" #t"
" 1/read-accept-infix-dot"
" #t"
" 1/read-accept-quasiquote"
" #t"
" 1/current-readtable"
" #f)"
"(let-values()(thunk_3))))))"
"(define-values"
"(check-module-form)"
"(lambda(exp_0 filename_1)"
"(begin"
"(if(let-values(((or-part_311)(eof-object? exp_0)))"
"(if or-part_311 or-part_311(eof-object?(1/syntax-e exp_0))))"
"(let-values()"
"(if filename_1"
"(error"
" 'load-handler"
"             (string-append \"expected a `module' declaration, but found end-of-file\\n\" \"  file: ~a\")"
" filename_1)"
" #f))"
"(if(1/compiled-module-expression?(1/syntax-e exp_0))"
"(let-values() exp_0)"
"(if(if(syntax?$1 exp_0)"
"(if(pair?(1/syntax-e exp_0))"
"(if(eq? 'module(1/syntax-e(car(1/syntax-e exp_0))))"
"(let-values(((r_42)(cdr(1/syntax-e exp_0))))"
"(let-values(((r_4)(if(syntax?$1 r_42)(1/syntax-e r_42) r_42)))"
"(if(pair? r_4)(identifier?(car r_4)) #f)))"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(1/datum->syntax exp_0(cons(1/namespace-module-identifier)(cdr(1/syntax-e exp_0))) exp_0 exp_0))"
"(let-values()"
"(if filename_1"
"(error"
" 'default-load-handler"
"                 (string-append \"expected a `module' declaration, but found something else\\n\" \"  file: ~a\")"
" filename_1)"
" #f))))))))"
"(define-values"
"(default-load-handler)"
"(lambda(path_12 expected-mod_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(path-string? path_12)"
"(void)"
"                        (let-values () (raise-argument-error 'default-load-handler \"path-string?\" path_12)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_11)(not expected-mod_0)))"
"(if or-part_11"
" or-part_11"
"(let-values(((or-part_2)(symbol? expected-mod_0)))"
"(if or-part_2"
" or-part_2"
"(if(pair? expected-mod_0)"
"(if(list? expected-mod_0)"
"(if(let-values(((or-part_26)(not(car expected-mod_0))))"
"(if or-part_26 or-part_26(symbol?(car expected-mod_0))))"
"(andmap2 symbol?(cdr expected-mod_0))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'default-load-handler"
"                             \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" expected-mod_0)))"
"(values))))"
"(let-values(((maybe-count-lines!_0)"
"(lambda(i_126)"
"(begin"
" 'maybe-count-lines!"
"                            (if (regexp-match? '#rx\"[.]zo$\" path_12)"
"(void)"
"(let-values()(port-count-lines! i_126)))))))"
"(if expected-mod_0"
"(let-values()"
"((call-with-input-module-file"
" path_12"
"(lambda(i_179)"
"(begin"
"(maybe-count-lines!_0 i_179)"
"(with-module-reading-parameterization+delay-source"
" path_12"
"(lambda()"
"(let-values(((c1_32)(linklet-directory-start i_179)))"
"(if c1_32"
"((lambda(pos_123)"
"(let-values(((b-pos_0)"
"(search-directory i_179 pos_123(encode-symbols expected-mod_0))))"
"(if b-pos_0"
"(let-values()"
"(begin"
"(file-position i_179 b-pos_0)"
"(let-values(((or-part_12)(cached-bundle i_179)))"
"(if or-part_12"
" or-part_12"
"(let-values(((v_0)(1/read i_179)))"
"(if(1/compiled-module-expression? v_0)"
"(lambda()((1/current-eval) v_0))"
"(error"
" 'default-load-handler"
"(string-append"
"                                                  \"expected a compiled module\\n\""
"                                                  \"  in: ~e\\n\""
"                                                  \"  found: ~e\")"
"(object-name i_179)"
" v_0)))))))"
"(if(pair? expected-mod_0)"
"(let-values() void)"
"(let-values()"
"(error"
" 'default-load-handler"
"                                         (string-append \"could not find main module\\n\" \"  in: ~e\")"
"(object-name i_179)))))))"
" c1_32)"
"(if(if(pair? expected-mod_0)(not(car expected-mod_0)) #f)"
"(let-values() void)"
"(let-values(((c2_17)(cached-bundle i_179)))"
"(if c2_17"
"((lambda(thunk_8) thunk_8) c2_17)"
"(let-values()"
"(let-values(((s_178)(1/read-syntax(object-name i_179) i_179)))"
"(let-values((()"
"(begin"
"(if(eof-object? s_178)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                             \"expected a `module' declaration;\\n\""
"                                                             \" found end-of-file\\n\""
"                                                             \"  in: ~e\")"
"(object-name i_179)))"
"(void))"
"(values))))"
"(let-values(((m-s_0)(check-module-form s_178 path_12)))"
"(let-values(((s2_10)(1/read-syntax(object-name i_179) i_179)))"
"(begin"
"(if(eof-object? s2_10)"
"(void)"
"(let-values()"
"(error"
" 'default-load-handler"
"(string-append"
"                                                     \"expected a `module' declaration;\\n\""
"                                                     \" found an extra form\\n\""
"                                                     \"  in: ~e\\n\""
"                                                     \"  found: ~.s\")"
"(object-name i_179)"
" s2_10)))"
"(lambda()((1/current-eval) m-s_0))))))))))))))))))))"
"(let-values()"
"(let-values(((add-top-interaction_0)"
"(lambda(s_498)"
"(begin"
" 'add-top-interaction"
"(1/namespace-syntax-introduce"
"(1/datum->syntax #f(cons '#%top-interaction s_498) s_498))))))"
"(let-values(((path1_0) path_12)"
"((temp2_8)"
"(lambda(i_180)"
"(begin"
" 'temp2"
"(begin"
"(maybe-count-lines!_0 i_180)"
"((letrec-values(((loop_35)"
"(lambda(vals_7)"
"(begin"
" 'loop"
"(let-values(((s_304)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/read-accept-compiled"
" #t"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #t)"
"(let-values()"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_12))"
"(let-values()"
"(1/read-syntax"
"(object-name i_180)"
" i_180)))"
"(1/read-syntax"
"(object-name i_180)"
" i_180))))))"
"(if(eof-object? s_304)"
"(apply values vals_7)"
"(loop_35"
"(call-with-continuation-prompt"
"(lambda()"
"(call-with-values"
"(lambda()"
"((1/current-eval)(add-top-interaction_0 s_304)))"
" list))"
"(default-continuation-prompt-tag)"
"(lambda args_10"
"(apply"
" abort-current-continuation"
"(default-continuation-prompt-tag)"
" args_10))))))))))"
" loop_35)"
"(list(void))))))))"
"(call-with-input-file*61.1 'binary path1_0 temp2_8)))))))))))"
"(define-values"
"(linklet-bundle-or-directory-start)"
"(lambda(i_144 tag_1)"
"(begin"
"(let-values(((version-length_0)(string-length(version))))"
"(if(equal?(peek-byte i_144)(char->integer '#\\#))"
"(if(equal?(peek-byte i_144 1)(char->integer '#\\~))"
"(if(equal?(peek-byte i_144 2) version-length_0)"
"(if(equal?(peek-bytes version-length_0 3 i_144)(string->bytes/utf-8(version)))"
"(if(equal?(peek-byte i_144(+ 3 version-length_0))(char->integer tag_1))(+ version-length_0 4) #f)"
" #f)"
" #f)"
" #f)"
" #f)))))"
"(define-values"
"(linklet-directory-start)"
"(lambda(i_92)"
"(begin(let-values(((pos_95)(linklet-bundle-or-directory-start i_92 '#\\D)))(if pos_95(+ pos_95 4) #f)))))"
"(define-values"
"(linklet-bundle-hash-code)"
"(lambda(i_181)"
"(begin"
"(let-values(((pos_15)(linklet-bundle-or-directory-start i_181 '#\\B)))"
"(let-values(((hash-code_7)(if pos_15(peek-bytes 20 pos_15 i_181) #f)))"
"(if(bytes? hash-code_7)"
"(if(= 20(bytes-length hash-code_7))"
"(if(let-values(((vec_70 len_37)"
"(let-values(((vec_71) hash-code_7))"
"(begin(check-bytes vec_71)(values vec_71(unsafe-bytes-length vec_71))))))"
"(begin"
" #f"
"((letrec-values(((for-loop_237)"
"(lambda(result_124 pos_99)"
"(begin"
" 'for-loop"
"(if(unsafe-fx< pos_99 len_37)"
"(let-values(((c_52)(unsafe-bytes-ref vec_70 pos_99)))"
"(let-values(((result_125)"
"(let-values()"
"(let-values(((result_126)"
"(let-values()"
"(let-values()(not(eq? c_52 0))))))"
"(values result_126)))))"
"(if(if(not((lambda x_98 result_125) c_52))(not #f) #f)"
"(for-loop_237 result_125(unsafe-fx+ 1 pos_99))"
" result_125)))"
" result_124)))))"
" for-loop_237)"
" #f"
" 0)))"
" hash-code_7"
" #f)"
" #f)"
" #f))))))"
"(define-values"
"(cached-bundle)"
"(lambda(i_94)"
"(begin"
"(let-values(((c3_10)(module-cache-ref(make-module-cache-key(linklet-bundle-hash-code i_94)))))"
"(if c3_10"
"((lambda(declare-module_0)(lambda()(declare-module_0(1/current-namespace)))) c3_10)"
"(let-values() #f))))))"
"(define-values"
"(read-number)"
"(lambda(i_62)"
"(begin"
"(let-values(((read-byte/not-eof_0)"
"(lambda(i_182)"
"(begin"
" 'read-byte/not-eof"
"(let-values(((v_187)(read-byte i_182)))(if(eof-object? v_187) 0 v_187))))))"
"(bitwise-ior"
"(read-byte/not-eof_0 i_62)"
"(arithmetic-shift(read-byte/not-eof_0 i_62) 8)"
"(arithmetic-shift(read-byte/not-eof_0 i_62) 16)"
"(arithmetic-shift(read-byte/not-eof_0 i_62) 24))))))"
"(define-values"
"(search-directory)"
"(lambda(i_183 pos_124 bstr_5)"
"(begin"
"(if(zero? pos_124)"
"(let-values() #f)"
"(let-values()"
"(let-values((()(begin(file-position i_183 pos_124)(values))))"
"(let-values(((name-len_0)(read-number i_183)))"
"(let-values(((v_255)(read-bytes name-len_0 i_183)))"
"(begin"
"(if(if(bytes? v_255)(=(bytes-length v_255) name-len_0) #f)"
"(void)"
"(let-values()"
"(error"
" 'deafult-load-handler"
"(string-append"
"                        \"failure getting submodule path\\n\""
"                        \"  in: ~e\\n\""
"                        \"  at position: ~a\\n\""
"                        \"  expected bytes: ~a\\n\""
"                        \"  read bytes: ~e\")"
"(object-name i_183)"
" pos_124"
" name-len_0"
" v_255)))"
"(if(bytes=? bstr_5 v_255)"
"(let-values()(read-number i_183))"
"(if(bytes<? bstr_5 v_255)"
"(let-values()"
"(begin"
"(read-number i_183)"
"(read-number i_183)"
"(search-directory i_183(read-number i_183) bstr_5)))"
"(let-values()"
"(begin"
"(read-number i_183)"
"(read-number i_183)"
"(read-number i_183)"
"(search-directory i_183(read-number i_183) bstr_5))))))))))))))"
"(define-values"
"(encode-symbols)"
"(lambda(expected-mod_1)"
"(begin"
"(if(symbol? expected-mod_1)"
"        (let-values () #\"\")"
"(let-values()"
"(apply"
" bytes-append"
"(reverse$1"
"(let-values(((lst_267)(cdr expected-mod_1)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_267)))"
"((letrec-values(((for-loop_111)"
"(lambda(fold-var_74 lst_93)"
"(begin"
" 'for-loop"
"(if(pair? lst_93)"
"(let-values(((s_185)(unsafe-car lst_93))((rest_44)(unsafe-cdr lst_93)))"
"(let-values(((fold-var_75)"
"(let-values(((fold-var_65) fold-var_74))"
"(let-values(((fold-var_76)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((bstr_6)"
"(string->bytes/utf-8"
"(symbol->string s_185))))"
"(let-values(((len_40)"
"(bytes-length bstr_6)))"
"(if(< len_40 255)"
"(let-values()"
"(bytes-append"
"(bytes len_40)"
" bstr_6))"
"(let-values()"
"(bytes-append"
" 255"
"(integer->integer-bytes"
" len_40"
" 4"
" #f"
" #f)"
" bstr_6))))))"
" fold-var_65))))"
"(values fold-var_76)))))"
"(if(not #f)(for-loop_111 fold-var_75 rest_44) fold-var_75)))"
" fold-var_74)))))"
" for-loop_111)"
" null"
" lst_267))))))))))"
"(define-values"
"(with-module-reading-parameterization+delay-source)"
"(lambda(path_13 thunk_9)"
"(begin"
"(if(load-on-demand-enabled)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" read-on-demand-source"
"(path->complete-path path_13))"
"(let-values()(with-module-reading-parameterization thunk_9)))"
"(with-module-reading-parameterization thunk_9)))))"
"(define-values"
"(call-with-input-module-file)"
"(lambda(path_14 proc_10)"
"(begin"
"(let-values(((i_156) #f))"
"(dynamic-wind"
"(lambda()"
"(set! i_156(let-values(((path3_0) path_14)((temp4_7) #t))(open-input-file6.1 temp4_7 'binary path3_0))))"
"(lambda()(proc_10 i_156))"
"(lambda()(close-input-port i_156)))))))"
"(define-values(dll-suffix)(system-type 'so-suffix))"
"(define-values"
"(default-load/use-compiled)"
"(let-values(((resolve_0)"
"(lambda(s_72)"
"(begin"
" 'resolve"
"(if(complete-path? s_72)"
" s_72"
"(let-values(((d_36)(current-load-relative-directory)))"
"(if d_36(path->complete-path s_72 d_36) s_72)))))))"
"(let-values(((date-of-1_0)"
"(lambda(a_29)"
"(begin"
" 'date-of-1"
"(let-values(((v_72)(file-or-directory-modify-seconds a_29 #f(lambda() #f))))"
"(if v_72(cons a_29 v_72) #f))))))"
"(let-values(((date-of_0)"
"(lambda(a_39 modes_1 roots_1)"
"(begin"
" 'date-of"
"(ormap2"
"(lambda(root-dir_0)"
"(ormap2"
"(lambda(compiled-dir_0)"
"(let-values(((a_75)(a_39 root-dir_0 compiled-dir_0)))(date-of-1_0 a_75)))"
" modes_1))"
" roots_1)))))"
"(let-values(((date>=?_0)"
"(lambda(modes_2 roots_2 a_76 bm_0)"
"(begin"
" 'date>=?"
"(if a_76"
"(let-values(((am_0)(date-of_0 a_76 modes_2 roots_2)))"
"(let-values(((or-part_28)(if(not bm_0) am_0 #f)))"
"(if or-part_28"
" or-part_28"
"(if am_0(if bm_0(if(>=(cdr am_0)(cdr bm_0)) am_0 #f) #f) #f))))"
" #f)))))"
"(let-values(((with-dir*_0)"
"(lambda(base_23 t_60)"
"(begin"
" 'with-dir*"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" current-load-relative-directory"
"(if(path? base_23) base_23(current-directory)))"
"(let-values()(t_60)))))))"
"(lambda(path_15 expect-module_0)"
"(begin"
"(let-values((()"
"(begin"
"(if(path-string? path_15)"
"(void)"
"                                  (let-values () (raise-argument-error 'load/use-compiled \"path-string?\" path_15)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_73)(not expect-module_0)))"
"(if or-part_73"
" or-part_73"
"(let-values(((or-part_74)(symbol? expect-module_0)))"
"(if or-part_74"
" or-part_74"
"(if(list? expect-module_0)"
"(if(>(length expect-module_0) 1)"
"(if(let-values(((or-part_75)(symbol?(car expect-module_0))))"
"(if or-part_75 or-part_75(not(car expect-module_0))))"
"(andmap2 symbol?(cdr expect-module_0))"
" #f)"
" #f)"
" #f)))))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'load/use-compiled"
"                                       \"(or/c #f symbol? (cons/c (or/c #f symbol?) (non-empty-listof symbol?)))\""
" path_15)))"
"(values))))"
"(let-values(((name_55)(if expect-module_0(1/current-module-declare-name) #f)))"
"(let-values(((ns-hts_0)"
"(if name_55"
"(registry-table-ref(namespace-module-registry$1(1/current-namespace)))"
" #f)))"
"(let-values(((use-path/src_0)(if ns-hts_0(hash-ref(cdr ns-hts_0) name_55 #f) #f)))"
"(if use-path/src_0"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-module-declare-source"
"(cadr use-path/src_0))"
"(let-values()"
"(with-dir*_0"
"(caddr use-path/src_0)"
"(lambda()((1/current-load)(car use-path/src_0) expect-module_0)))))"
"(let-values(((orig-path_0)(resolve_0 path_15)))"
"(let-values(((base_24 orig-file_0 dir?_7)(split-path path_15)))"
"(let-values(((file_1 alt-file_0)"
"(if expect-module_0"
"(let-values(((b_92)(path->bytes orig-file_0)))"
"(let-values(((len_41)(bytes-length b_92)))"
"(if(if(>= len_41 4)"
"                                                          (bytes=? #\".rkt\" (subbytes b_92 (- len_41 4)))"
" #f)"
"(let-values()"
"(values"
" orig-file_0"
"(bytes->path"
"                                                          (bytes-append (subbytes b_92 0 (- len_41 4)) #\".ss\"))))"
"(let-values()(values orig-file_0 #f)))))"
"(values orig-file_0 #f))))"
"(let-values(((path_16)"
"(if(eq? file_1 orig-file_0) orig-path_0(build-path base_24 file_1))))"
"(let-values(((alt-path_0)"
"(if alt-file_0"
"(if(eq? alt-file_0 orig-file_0)"
" orig-path_0"
"(build-path base_24 alt-file_0))"
" #f)))"
"(let-values(((base_25)(if(eq? base_24 'relative) 'same base_24)))"
"(let-values(((modes_3)(1/use-compiled-file-paths)))"
"(let-values(((roots_3)(1/current-compiled-file-roots)))"
"(let-values(((reroot_0)"
"(lambda(p_76 d_37)"
"(begin"
" 'reroot"
"(if(eq? d_37 'same)"
"(let-values() p_76)"
"(if(relative-path? d_37)"
"(let-values()(build-path p_76 d_37))"
"(let-values()(reroot-path p_76 d_37))))))))"
"(let-values(((main-path-d_0)(date-of-1_0 path_16)))"
"(let-values(((alt-path-d_0)"
"(if alt-path_0"
"(if(not main-path-d_0)(date-of-1_0 alt-path_0) #f)"
" #f)))"
"(let-values(((path-d_0)"
"(let-values(((or-part_53) main-path-d_0))"
"(if or-part_53 or-part_53 alt-path-d_0))))"
"(let-values(((get-so_0)"
"(lambda(file_2 rep-sfx?_0)"
"(begin"
" 'get-so"
"(lambda(root-dir_1 compiled-dir_1)"
"(build-path"
"(reroot_0 base_25 root-dir_1)"
" compiled-dir_1"
"                                                                         \"native\""
"(system-library-subpath)"
"(if rep-sfx?_0"
"(path-add-extension file_2 dll-suffix)"
" file_2)))))))"
"(let-values(((zo_0)"
"(lambda(root-dir_2 compiled-dir_2)"
"(begin"
" 'zo"
"(build-path"
"(reroot_0 base_25 root-dir_2)"
" compiled-dir_2"
"                                                                         (path-add-extension file_1 #\".zo\"))))))"
"(let-values(((alt-zo_0)"
"(lambda(root-dir_3 compiled-dir_3)"
"(begin"
" 'alt-zo"
"(build-path"
"(reroot_0 base_25 root-dir_3)"
" compiled-dir_3"
"                                                                           (path-add-extension alt-file_0 #\".zo\"))))))"
"(let-values(((so_0)(get-so_0 file_1 #t)))"
"(let-values(((alt-so_0)(get-so_0 alt-file_0 #t)))"
"(let-values(((try-main?_0)"
"(let-values(((or-part_367) main-path-d_0))"
"(if or-part_367"
" or-part_367"
"(not alt-path-d_0)))))"
"(let-values(((try-alt?_0)"
"(if alt-file_0"
"(let-values(((or-part_166)"
" alt-path-d_0))"
"(if or-part_166"
" or-part_166"
"(not main-path-d_0)))"
" #f)))"
"(let-values(((with-dir_0)"
"(lambda(t_61)"
"(begin"
" 'with-dir"
"(with-dir*_0 base_25 t_61)))))"
"(let-values(((c1_33)"
"(if try-main?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" so_0"
" path-d_0)"
" #f)))"
"(if c1_33"
"((lambda(so-d_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((current-load-extension)"
"(car so-d_0)"
" expect-module_0))))))"
" c1_33)"
"(let-values(((c2_18)"
"(if try-alt?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" alt-so_0"
" alt-path-d_0)"
" #f)))"
"(if c2_18"
"((lambda(so-d_1)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_0)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((current-load-extension)"
"(car so-d_1)"
" expect-module_0))))))"
" c2_18)"
"(let-values(((c3_11)"
"(if try-main?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" zo_0"
" path-d_0)"
" #f)))"
"(if c3_11"
"((lambda(zo-d_0)"
"(begin"
"(register-zo-path"
" name_55"
" ns-hts_0"
"(car zo-d_0)"
" #f"
" base_25)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" #f)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((1/current-load)"
"(car zo-d_0)"
" expect-module_0)))))))"
" c3_11)"
"(let-values(((c4_3)"
"(if try-alt?_0"
"(date>=?_0"
" modes_3"
" roots_3"
" alt-zo_0"
" path-d_0)"
" #f)))"
"(if c4_3"
"((lambda(zo-d_1)"
"(begin"
"(register-zo-path"
" name_55"
" ns-hts_0"
"(car zo-d_1)"
" alt-path_0"
" base_25)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
" alt-path_0)"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((1/current-load)"
"(car zo-d_1)"
" expect-module_0)))))))"
" c4_3)"
"(if(let-values(((or-part_368)"
"(not"
"(pair?"
" expect-module_0))))"
"(if or-part_368"
" or-part_368"
"(car expect-module_0)))"
"(let-values()"
"(let-values(((p_77)"
"(if try-main?_0"
" path_16"
" alt-path_0)))"
"(if(if(pair?"
" expect-module_0)"
"(not"
"(file-exists? p_77))"
" #f)"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-source"
"(if expect-module_0"
"(if(not try-main?_0)"
" p_77"
" #f)"
" #f))"
"(let-values()"
"(with-dir_0"
"(lambda()"
"((1/current-load)"
" p_77"
" expect-module_0)))))))))"
"(void))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(register-zo-path)"
"(lambda(name_77 ns-hts_1 path_17 src-path_0 base_26)"
"(begin(if ns-hts_1(let-values()(hash-set!(cdr ns-hts_1) name_77(list path_17 src-path_0 base_26)))(void)))))"
"(define-values(default-reader-guard)(lambda(path_18)(begin path_18)))"
"(define-values(-module-hash-table-table)(make-weak-hasheq))"
"(define-values"
"(registry-table-ref)"
"(lambda(reg_0)"
"(begin(let-values(((e_87)(hash-ref -module-hash-table-table reg_0 #f)))(if e_87(ephemeron-value e_87) #f)))))"
"(define-values"
"(registry-table-set!)"
"(lambda(reg_1 v_205)(begin(hash-set! -module-hash-table-table reg_1(make-ephemeron reg_1 v_205)))))"
"(define-values(CACHE-N) 512)"
"(define-values(-path-cache)(make-vector CACHE-N #f))"
"(define-values"
"(path-cache-get)"
"(lambda(p_47)"
"(begin"
"(let-values(((i_45)(modulo(abs(equal-hash-code p_47)) CACHE-N)))"
"(let-values(((w_1)(vector-ref -path-cache i_45)))"
"(let-values(((l_84)(if w_1(weak-box-value w_1) #f)))"
"(if l_84(let-values(((a_77)(1/assoc p_47 l_84)))(if a_77(cdr a_77) #f)) #f)))))))"
"(define-values"
"(path-cache-set!)"
"(lambda(p_78 v_256)"
"(begin"
"(let-values(((i_164)(modulo(abs(equal-hash-code p_78)) CACHE-N)))"
"(let-values(((w_2)(vector-ref -path-cache i_164)))"
"(let-values(((l_19)(if w_2(weak-box-value w_2) #f)))"
"(vector-set!"
" -path-cache"
" i_164"
"(make-weak-box"
"(cons(cons p_78 v_256)(let-values(((or-part_65) l_19))(if or-part_65 or-part_65 null)))))))))))"
"(define-values(-loading-filename)(gensym))"
"(define-values(-loading-prompt-tag)(make-continuation-prompt-tag 'module-loading))"
"(define-values(-prev-relto) #f)"
"(define-values(-prev-relto-dir) #f)"
"(define-values"
"(split-relative-string)"
"(lambda(s_499 coll-mode?_0)"
"(begin"
"(let-values(((l_85)"
"((letrec-values(((loop_46)"
"(lambda(s_306)"
"(begin"
" 'loop"
"(let-values(((len_42)(string-length s_306)))"
"((letrec-values(((iloop_2)"
"(lambda(i_100)"
"(begin"
" 'iloop"
"(if(= i_100 len_42)"
"(let-values()(list s_306))"
"(if(char=? '#\\/(string-ref s_306 i_100))"
"(let-values()"
"(cons"
"(substring s_306 0 i_100)"
"(loop_46(substring s_306(add1 i_100)))))"
"(let-values()(iloop_2(add1 i_100)))))))))"
" iloop_2)"
" 0))))))"
" loop_46)"
" s_499)))"
"(if coll-mode?_0"
" l_85"
"((letrec-values(((loop_47)"
"(lambda(l_81)"
"(begin"
" 'loop"
"(if(null?(cdr l_81))"
"(values null(car l_81))"
"(let-values(((c_111 f_42)(loop_47(cdr l_81))))"
"(values(cons(car l_81) c_111) f_42)))))))"
" loop_47)"
" l_85))))))"
"(define-values"
"(format-source-location)"
"(lambda(stx_18)"
"(begin"
"(srcloc->string"
"(srcloc"
"(1/syntax-source stx_18)"
"(1/syntax-line stx_18)"
"(1/syntax-column stx_18)"
"(1/syntax-position stx_18)"
"(1/syntax-span stx_18))))))"
"(define-values(orig-paramz) #f)"
"(define-values"
"(standard-module-name-resolver)"
"(let-values()"
"(let-values(((planet-resolver_0) #f))"
"(let-values(((prep-planet-resolver!_0)"
"(lambda()"
"(begin"
" 'prep-planet-resolver!"
"(if planet-resolver_0"
"(void)"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
" orig-paramz"
"(set! planet-resolver_0"
"                               (1/dynamic-require '(lib \"planet/resolver.rkt\") 'planet-module-name-resolver)))))))))"
"(letrec-values(((standard-module-name-resolver_0)"
"(case-lambda"
"((s_173 from-namespace_1)"
"(begin"
" 'standard-module-name-resolver"
"(begin"
"(if(1/resolved-module-path? s_173)"
"(void)"
"(let-values()"
"                                   (raise-argument-error 'standard-module-name-resolver \"resolved-module-path?\" s_173)))"
"(if(let-values(((or-part_134)(not from-namespace_1)))"
"(if or-part_134 or-part_134(1/namespace? from-namespace_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                    \"(or/c #f namespace?)\""
" from-namespace_1)))"
"(if planet-resolver_0(let-values()(planet-resolver_0 s_173))(void))"
"(let-values(((hts_1)"
"(let-values(((or-part_98)"
"(registry-table-ref"
"(namespace-module-registry$1(1/current-namespace)))))"
"(if or-part_98"
" or-part_98"
"(let-values(((hts_2)(cons(make-hasheq)(make-hasheq))))"
"(begin"
"(registry-table-set!"
"(namespace-module-registry$1(1/current-namespace))"
" hts_2)"
" hts_2))))))"
"(begin"
"(hash-set!(car hts_1) s_173 'declared)"
"(if from-namespace_1"
"(let-values()"
"(let-values(((root-name_2)"
"(if(pair?(1/resolved-module-path-name s_173))"
"(1/make-resolved-module-path"
"(car(1/resolved-module-path-name s_173)))"
" s_173))"
"((from-hts_0)"
"(registry-table-ref"
"(namespace-module-registry$1 from-namespace_1))))"
"(if from-hts_0"
"(let-values()"
"(let-values(((use-path/src_1)(hash-ref(cdr from-hts_0) root-name_2 #f)))"
"(if use-path/src_1"
"(let-values()(hash-set!(cdr hts_1) root-name_2 use-path/src_1))"
"(void))))"
"(void))))"
"(void)))))))"
"((s_451 relto_0 stx_19)"
"(begin"
"(log-message"
"(current-logger)"
" 'error"
"                              \"default module name resolver called with three arguments (deprecated)\""
" #f)"
"(standard-module-name-resolver_0 s_451 relto_0 stx_19 #t)))"
"((s_500 relto_1 stx_20 load?_7)"
"(let-values((()"
"(begin"
"(if(1/module-path? s_500)"
"(void)"
"(let-values()"
"(if(syntax?$1 stx_20)"
"                                                 (raise-syntax-error$1 #f \"bad module path\" stx_20)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"module-path?\""
" s_500))))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_359)(not relto_1)))"
"(if or-part_359 or-part_359(1/resolved-module-path? relto_1)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                  \"(or/c #f resolved-module-path?)\""
" relto_1)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_55)(not stx_20)))"
"(if or-part_55 or-part_55(syntax?$1 stx_20)))"
"(void)"
"(let-values()"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                    \"(or/c #f syntax?)\""
" stx_20)))"
"(values))))"
"(let-values(((flatten-sub-path_0)"
"(lambda(base_27 orig-l_10)"
"(begin"
" 'flatten-sub-path"
"((letrec-values(((loop_119)"
"(lambda(a_78 l_35)"
"(begin"
" 'loop"
"(if(null? l_35)"
"(let-values()"
"(if(null? a_78)"
" base_27"
"(cons base_27(reverse$1 a_78))))"
"                                                                           (if (equal? (car l_35) \"..\")"
"(let-values()"
"(if(null? a_78)"
"(error"
" 'standard-module-name-resolver"
"                                                                                  \"too many \\\"..\\\"s in submodule path: ~.s\""
"(list*"
" 'submod"
"                                                                                   (if (equal? base_27 \".\")"
" base_27"
"(if(path? base_27)"
" base_27"
"(list"
"(if(symbol? base_27)"
" 'quote"
" 'file)"
" base_27)))"
" orig-l_10))"
"(loop_119(cdr a_78)(cdr l_35))))"
"(let-values()"
"(loop_119"
"(cons(car l_35) a_78)"
"(cdr l_35)))))))))"
" loop_119)"
" null"
" orig-l_10)))))"
"(if(if(pair? s_500)(eq?(car s_500) 'quote) #f)"
"(let-values()(1/make-resolved-module-path(cadr s_500)))"
"(if(if(pair? s_500)"
"(if(eq?(car s_500) 'submod)"
"(if(pair?(cadr s_500))(eq?(caadr s_500) 'quote) #f)"
" #f)"
" #f)"
"(let-values()"
"(1/make-resolved-module-path(flatten-sub-path_0(cadadr s_500)(cddr s_500))))"
"(if(if(pair? s_500)"
"(if(eq?(car s_500) 'submod)"
"                                               (if (let-values (((or-part_101) (equal? (cadr s_500) \".\")))"
"                                                     (if or-part_101 or-part_101 (equal? (cadr s_500) \"..\")))"
"(if relto_1"
"(let-values(((p_79)(1/resolved-module-path-name relto_1)))"
"(let-values(((or-part_369)(symbol? p_79)))"
"(if or-part_369"
" or-part_369"
"(if(pair? p_79)(symbol?(car p_79)) #f))))"
" #f)"
" #f)"
" #f)"
" #f)"
"(let-values()"
"(let-values(((rp_0)(1/resolved-module-path-name relto_1)))"
"(1/make-resolved-module-path"
"(flatten-sub-path_0"
"(if(pair? rp_0)(car rp_0) rp_0)"
"(let-values(((r_47)"
"                                                             (if (equal? (cadr s_500) \"..\") (cdr s_500) (cddr s_500))))"
"(if(pair? rp_0)(append(cdr rp_0) r_47) r_47))))))"
"(if(if(pair? s_500)(eq?(car s_500) 'planet) #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_0)"
"(planet-resolver_0 s_500 relto_1 stx_20 load?_7 #f orig-paramz)))"
"(if(if(pair? s_500)"
"(if(eq?(car s_500) 'submod)"
"(if(pair?(cadr s_500))(eq?(caadr s_500) 'planet) #f)"
" #f)"
" #f)"
"(let-values()"
"(begin"
"(prep-planet-resolver!_0)"
"(planet-resolver_0"
"(cadr s_500)"
" relto_1"
" stx_20"
" load?_7"
"(cddr s_500)"
" orig-paramz)))"
"(let-values()"
"(let-values(((get-dir_0)"
"(lambda()"
"(begin"
" 'get-dir"
"(let-values(((or-part_41)"
"(if relto_1"
"(if(eq? relto_1 -prev-relto)"
" -prev-relto-dir"
"(let-values(((p_80)"
"(1/resolved-module-path-name"
" relto_1)))"
"(let-values(((p_81)"
"(if(pair? p_80)"
"(car p_80)"
" p_80)))"
"(if(path? p_81)"
"(let-values(((base_28"
" n_36"
" d?_0)"
"(split-path"
" p_81)))"
"(begin"
"(set! -prev-relto relto_1)"
"(set! -prev-relto-dir"
" base_28)"
" base_28))"
" #f))))"
" #f)))"
"(if or-part_41"
" or-part_41"
"(let-values(((or-part_370)"
"(current-load-relative-directory)))"
"(if or-part_370"
" or-part_370"
"(current-directory))))))))"
"((get-reg_0)"
"(lambda()"
"(begin"
" 'get-reg"
"(namespace-module-registry$1(1/current-namespace)))))"
"((show-collection-err_0)"
"(lambda(msg_1)"
"(begin"
" 'show-collection-err"
"(let-values(((msg_2)"
"(string-append"
"(let-values(((or-part_365)"
"(if stx_20"
"(if(error-print-source-location)"
"(format-source-location"
" stx_20)"
" #f)"
" #f)))"
"(if or-part_365"
" or-part_365"
"                                                                                    \"standard-module-name-resolver\"))"
"                                                                                \": \""
"(regexp-replace"
"                                                                                 '#rx\"\\n\""
" msg_1"
"(format"
"                                                                                  \"\\n  for module path: ~s\\n\""
" s_500)))))"
"(raise"
"(if stx_20"
"(1/make-exn:fail:syntax:missing-module"
" msg_2"
"(current-continuation-marks)"
"(list stx_20)"
" s_500)"
"(1/make-exn:fail:filesystem:missing-module"
" msg_2"
"(current-continuation-marks)"
" s_500)))))))"
"((ss->rkt_0)"
"(lambda(s_501)"
"(begin"
" 'ss->rkt"
"(let-values(((len_43)(string-length s_501)))"
"(if(if(>= len_43 3)"
"(if(equal?"
" '#\\."
"(string-ref s_501(- len_43 3)))"
"(if(equal?"
" '#\\s"
"(string-ref s_501(- len_43 2)))"
"(equal?"
" '#\\s"
"(string-ref s_501(- len_43 1)))"
" #f)"
" #f)"
" #f)"
"(string-append"
"(substring s_501 0(- len_43 3))"
"                                                                      \".rkt\")"
" s_501)))))"
"((path-ss->rkt_0)"
"(lambda(p_82)"
"(begin"
" 'path-ss->rkt"
"(let-values(((base_29 name_78 dir?_8)"
"(split-path p_82)))"
"                                                                   (if (regexp-match '#rx\"[.]ss$\" (path->bytes name_78))"
"                                                                     (path-replace-extension p_82 #\".rkt\")"
" p_82)))))"
"((s_502)"
"(if(if(pair? s_500)(eq? 'submod(car s_500)) #f)"
"(let-values(((v_257)(cadr s_500)))"
"                                                                 (if (let-values (((or-part_371) (equal? v_257 \".\")))"
"                                                                       (if or-part_371 or-part_371 (equal? v_257 \"..\")))"
"(if relto_1"
"(let-values(((p_7)"
"(1/resolved-module-path-name"
" relto_1)))"
"(if(pair? p_7)(car p_7) p_7))"
"(error"
" 'standard-module-name-resolver"
"                                                                      \"no base path for relative submodule path: ~.s\""
" s_500))"
" v_257))"
" s_500))"
"((subm-path_0)"
"(if(if(pair? s_500)(eq? 'submod(car s_500)) #f)"
"(let-values(((p_83)"
"(if(if(let-values(((or-part_168)"
"(equal?"
"(cadr s_500)"
"                                                                                                    \".\")))"
"(if or-part_168"
" or-part_168"
"                                                                                         (equal? (cadr s_500) \"..\")))"
" relto_1"
" #f)"
"(let-values(((p_84)"
"(1/resolved-module-path-name"
" relto_1))"
"((r_48)"
"(if(equal?"
"(cadr s_500)"
"                                                                                                  \"..\")"
"(cdr s_500)"
"(cddr s_500))))"
"(if(pair? p_84)"
"(flatten-sub-path_0"
"(car p_84)"
"(append(cdr p_84) r_48))"
"(flatten-sub-path_0 p_84 r_48)))"
"(flatten-sub-path_0"
"                                                                                \".\""
"                                                                                (if (equal? (cadr s_500) \"..\")"
"(cdr s_500)"
"(cddr s_500))))))"
"(if(pair? p_83)(cdr p_83) #f))"
" #f)))"
"(let-values(((s-parsed_0)"
"(if(symbol? s_502)"
"(let-values()"
"(let-values(((or-part_46)"
"(path-cache-get"
"(cons s_502(get-reg_0)))))"
"(if or-part_46"
" or-part_46"
"(let-values(((cols_0 file_3)"
"(split-relative-string"
"(symbol->string s_502)"
" #f)))"
"(let-values(((f-file_0)"
"(if(null? cols_0)"
"                                                                                         \"main.rkt\""
"(string-append"
" file_3"
"                                                                                          \".rkt\"))))"
"(find-col-file"
" show-collection-err_0"
"(if(null? cols_0) file_3(car cols_0))"
"(if(null? cols_0) null(cdr cols_0))"
" f-file_0"
" #t))))))"
"(if(string? s_502)"
"(let-values()"
"(let-values(((dir_4)(get-dir_0)))"
"(let-values(((or-part_372)"
"(path-cache-get"
"(cons s_502 dir_4))))"
"(if or-part_372"
" or-part_372"
"(let-values(((cols_1 file_4)"
"(split-relative-string"
" s_502"
" #f)))"
"(if(null? cols_1)"
"(build-path dir_4(ss->rkt_0 file_4))"
"(apply"
" build-path"
" dir_4"
"(append"
"(map2"
"(lambda(s_56)"
"                                                                                    (if (string=? s_56 \".\")"
"(let-values() 'same)"
"                                                                                      (if (string=? s_56 \"..\")"
"(let-values() 'up)"
"(let-values() s_56))))"
" cols_1)"
"(list(ss->rkt_0 file_4))))))))))"
"(if(path? s_502)"
"(let-values()"
"(path-ss->rkt_0"
"(simplify-path"
"(if(complete-path? s_502)"
" s_502"
"(path->complete-path s_502(get-dir_0))))))"
"(if(eq?(car s_502) 'lib)"
"(let-values()"
"(let-values(((or-part_84)"
"(path-cache-get"
"(cons s_502(get-reg_0)))))"
"(if or-part_84"
" or-part_84"
"(let-values(((cols_2 file_5)"
"(split-relative-string"
"(cadr s_502)"
" #f)))"
"(let-values(((old-style?_0)"
"(if(null?(cddr s_502))"
"(if(null? cols_2)"
"(regexp-match?"
"                                                                                                  '#rx\"[.]\""
" file_5)"
" #f)"
" #t)))"
"(let-values(((f-file_1)"
"(if old-style?_0"
"(ss->rkt_0 file_5)"
"(if(null? cols_2)"
"                                                                                                   \"main.rkt\""
"(if(regexp-match?"
"                                                                                                        '#rx\"[.]\""
" file_5)"
"(ss->rkt_0 file_5)"
"(string-append"
" file_5"
"                                                                                                      \".rkt\"))))))"
"(let-values(((cols_3)"
"(if old-style?_0"
"(append"
"(if(null?"
"(cddr s_502))"
"                                                                                                      '(\"mzlib\")"
"(apply"
" append"
"(map2"
"(lambda(p_3)"
"(split-relative-string"
" p_3"
" #t))"
"(cddr s_502))))"
" cols_2)"
"(if(null? cols_2)"
"(list file_5)"
" cols_2))))"
"(find-col-file"
" show-collection-err_0"
"(car cols_3)"
"(cdr cols_3)"
" f-file_1"
" #t))))))))"
"(if(eq?(car s_502) 'file)"
"(let-values()"
"(path-ss->rkt_0"
"(simplify-path"
"(path->complete-path"
"(expand-user-path(cadr s_502))"
"(get-dir_0)))))"
"(void))))))))"
"(begin"
"(if(let-values(((or-part_373)(path? s-parsed_0)))"
"(if or-part_373 or-part_373(vector? s-parsed_0)))"
"(void)"
"(let-values()"
"(if stx_20"
"(raise-syntax-error$1"
" 'require"
"(format"
"                                                             \"bad module path~a\""
"                                                             (if s-parsed_0 (car s-parsed_0) \"\"))"
" stx_20)"
"(raise-argument-error"
" 'standard-module-name-resolver"
"                                                            \"module-path?\""
" s_502))))"
"(let-values(((filename_2)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 0)"
"(simplify-path(cleanse-path s-parsed_0) #f))))"
"(let-values(((normal-filename_0)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 1)"
"(normal-case-path filename_2))))"
"(let-values(((base_30 name_79 dir?_9)"
"(if(vector? s-parsed_0)"
"(values"
" 'ignored"
"(vector-ref s-parsed_0 2)"
" 'ignored)"
"(split-path filename_2))))"
"(let-values(((no-sfx_0)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 3)"
"                                                                           (path-replace-extension name_79 #\"\"))))"
"(let-values(((root-modname_0)"
"(if(vector? s-parsed_0)"
"(vector-ref s-parsed_0 4)"
"(1/make-resolved-module-path filename_2))))"
"(let-values(((hts_3)"
"(let-values(((or-part_374)"
"(registry-table-ref"
"(get-reg_0))))"
"(if or-part_374"
" or-part_374"
"(let-values(((hts_4)"
"(cons"
"(make-hasheq)"
"(make-hasheq))))"
"(begin"
"(registry-table-set!"
"(get-reg_0)"
" hts_4)"
" hts_4))))))"
"(let-values(((modname_0)"
"(if subm-path_0"
"(1/make-resolved-module-path"
"(cons"
"(1/resolved-module-path-name"
" root-modname_0)"
" subm-path_0))"
" root-modname_0)))"
"(begin"
"(if load?_7"
"(let-values()"
"(let-values(((got_0)"
"(hash-ref"
"(car hts_3)"
" modname_0"
" #f)))"
"(if got_0"
"(void)"
"(let-values()"
"(let-values(((loading_0)"
"(let-values(((tag_2)"
"(if(continuation-prompt-available?"
" -loading-prompt-tag)"
" -loading-prompt-tag"
"(default-continuation-prompt-tag))))"
"(continuation-mark-set-first"
" #f"
" -loading-filename"
" null"
" tag_2)))"
"((nsr_0)(get-reg_0)))"
"(begin"
"(for-each2"
"(lambda(s_60)"
"(if(if(equal?"
"(cdr s_60)"
" normal-filename_0)"
"(eq?(car s_60) nsr_0)"
" #f)"
"(let-values()"
"(error"
" 'standard-module-name-resolver"
"                                                                                           \"cycle in loading\\n  at path: ~a\\n  paths:~a\""
" filename_2"
"(apply"
" string-append"
"((letrec-values(((loop_9)"
"(lambda(l_86)"
"(begin"
" 'loop"
"(if(null?"
" l_86)"
" '()"
"(list*"
"                                                                                                                     \"\\n   \""
"(path->string"
"(cdar"
" l_86))"
"(loop_9"
"(cdr"
" l_86))))))))"
" loop_9)"
"(reverse$1 loading_0)))))"
"(void)))"
" loading_0)"
"((if(continuation-prompt-available?"
" -loading-prompt-tag)"
"(lambda(f_43)(f_43))"
"(lambda(f_44)"
"(call-with-continuation-prompt"
" f_44"
" -loading-prompt-tag)))"
"(lambda()"
"(with-continuation-mark"
" -loading-filename"
"(cons"
"(cons nsr_0 normal-filename_0)"
" loading_0)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" 1/current-module-declare-name"
" root-modname_0"
" 1/current-module-path-for-load"
"((if stx_20"
"(lambda(p_85)"
"(1/datum->syntax"
" #f"
" p_85"
" stx_20))"
" values)"
"(if(symbol? s_502)"
"(let-values() s_502)"
"(if(if(pair? s_502)"
"(eq?(car s_502) 'lib)"
" #f)"
"(let-values() s_502)"
"(let-values()"
"(if(1/resolved-module-path?"
" root-modname_0)"
"(let-values(((src_9)"
"(1/resolved-module-path-name"
" root-modname_0)))"
"(if(symbol? src_9)"
"(list"
" 'quote"
" src_9)"
" src_9))"
" root-modname_0))))))"
"(let-values()"
"((1/current-load/use-compiled)"
" filename_2"
"(let-values(((sym_77)"
"(string->symbol"
"(path->string"
" no-sfx_0))))"
"(if subm-path_0"
"(if(hash-ref"
"(car hts_3)"
" root-modname_0"
" #f)"
"(cons #f subm-path_0)"
"(cons"
" sym_77"
" subm-path_0))"
" sym_77))))))))))))))"
"(void))"
"(if(if(not(vector? s-parsed_0))"
"(if load?_7"
"(let-values(((or-part_375)"
"(string? s_502)))"
"(if or-part_375"
" or-part_375"
"(let-values(((or-part_376)"
"(symbol? s_502)))"
"(if or-part_376"
" or-part_376"
"(if(pair? s_502)"
"(eq?(car s_502) 'lib)"
" #f)))))"
" #f)"
" #f)"
"(let-values()"
"(path-cache-set!"
"(if(string? s_502)"
"(cons s_502(get-dir_0))"
"(cons s_502(get-reg_0)))"
"(vector"
" filename_2"
" normal-filename_0"
" name_79"
" no-sfx_0"
" root-modname_0)))"
"(void))"
" modname_0)))))))))))))))))))))))))"
" standard-module-name-resolver_0)))))"
"(define-values"
"(default-eval-handler)"
"(lambda(s_36)"
"(begin"
"(1/eval"
" s_36"
"(1/current-namespace)"
"(let-values(((c_112)(1/current-compile)))"
"(lambda(e_88 ns_17)"
"(if(eq? ns_17(1/current-namespace))"
"(c_112 e_88 #t)"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization(continuation-mark-set-first #f parameterization-key) 1/current-namespace ns_17)"
"(let-values()(c_112 e_88 #t))))))))))"
"(define-values"
"(default-compile-handler)"
"(lambda(s_503 immediate-eval?_0)(begin(1/compile s_503(1/current-namespace)(not immediate-eval?_0)))))"
"(define-values"
"(default-read-interaction)"
"(lambda(src_10 in_89)"
"(begin"
"(begin"
"(if(input-port? in_89)"
"(void)"
"          (let-values () (raise-argument-error 'default-read-interaction \"input-port?\" in_89)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/read-accept-reader"
" #t"
" 1/read-accept-lang"
" #f)"
"(let-values()(1/read-syntax src_10 in_89)))))))"
"(define-values"
"(boot)"
"(lambda()"
"(begin"
"(begin"
"(seal)"
"(1/current-module-name-resolver standard-module-name-resolver)"
"(1/current-load/use-compiled default-load/use-compiled)"
"(1/current-reader-guard default-reader-guard)"
"(1/current-eval default-eval-handler)"
"(1/current-compile default-compile-handler)"
"(1/current-load default-load-handler)"
"(current-read-interaction default-read-interaction)))))"
"(define-values"
"(seal)"
"(lambda()(begin(set! orig-paramz(reparameterize(continuation-mark-set-first #f parameterization-key))))))"
"(define-values(get-original-parameterization)(lambda()(begin orig-paramz)))"
"(define-values"
"(boot-primitives)"
"(hash 'boot boot 'seal seal 'get-original-parameterization get-original-parameterization))"
"(define-values"
"(prepare-next-phase-namespace)"
"(lambda(ctx_76)"
"(begin"
"(let-values(((phase_44)(add1(expand-context-phase ctx_76))))"
"(let-values(((ns_59)(namespace->namespace-at-phase(expand-context-namespace ctx_76) phase_44)))"
"(namespace-visit-available-modules! ns_59 phase_44))))))"
"(define-values"
"(expand-body7.1)"
"(lambda(source1_0 stratified?2_0 bodys5_0 ctx6_0)"
"(begin"
" 'expand-body7"
"(let-values(((bodys_7) bodys5_0))"
"(let-values(((ctx_77) ctx6_0))"
"(let-values(((s_492) source1_0))"
"(let-values(((stratified?_0) stratified?2_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_66)(expand-context-observer ctx_77)))"
"(if obs_66"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_66 'enter-block(datum->syntax$1 #f bodys_7))))"
"(void)))"
"(values))))"
"(let-values(((inside-sc_0)(new-scope 'intdef)))"
"(let-values(((init-bodys_0)"
"(reverse$1"
"(let-values(((lst_22) bodys_7))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_22)))"
"((letrec-values(((for-loop_20)"
"(lambda(fold-var_9 lst_23)"
"(begin"
" 'for-loop"
"(if(pair? lst_23)"
"(let-values(((body_9)(unsafe-car lst_23))"
"((rest_8)(unsafe-cdr lst_23)))"
"(let-values(((fold-var_10)"
"(let-values(((fold-var_11) fold-var_9))"
"(let-values(((fold-var_12)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_9"
" inside-sc_0))"
" fold-var_11))))"
"(values fold-var_12)))))"
"(if(not #f)"
"(for-loop_20 fold-var_10 rest_8)"
" fold-var_10)))"
" fold-var_9)))))"
" for-loop_20)"
" null"
" lst_22))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_67)(expand-context-observer ctx_77)))"
"(if obs_67"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_67"
" 'block-renames"
"(datum->syntax$1 #f init-bodys_0)"
"(datum->syntax$1 #f bodys_7))))"
"(void)))"
"(values))))"
"(let-values(((phase_137)(expand-context-phase ctx_77)))"
"(let-values(((frame-id_7)(make-reference-record)))"
"(let-values(((def-ctx-scopes_6)(box null)))"
"(let-values(((body-ctx_0)"
"(let-values(((v_258) ctx_77))"
"(let-values(((the-struct_90) v_258))"
"(if(expand-context/outer? the-struct_90)"
"(let-values(((context51_0)(list(make-liberal-define-context)))"
"((name52_0) #f)"
"((only-immediate?53_0) #t)"
"((def-ctx-scopes54_0) def-ctx-scopes_6)"
"((post-expansion55_0)"
"(lambda(s_168)"
"(begin"
" 'post-expansion55"
"(add-scope s_168 inside-sc_0))))"
"((scopes56_0)"
"(cons inside-sc_0(expand-context-scopes ctx_77)))"
"((use-site-scopes57_0)(box null))"
"((frame-id58_0) frame-id_7)"
"((reference-records59_0)"
"(cons"
" frame-id_7"
"(expand-context-reference-records ctx_77)))"
"((inner60_0)(root-expand-context/outer-inner v_258)))"
"(expand-context/outer1.1"
" inner60_0"
" post-expansion55_0"
" use-site-scopes57_0"
" frame-id58_0"
" context51_0"
"(expand-context/outer-env the-struct_90)"
" scopes56_0"
" def-ctx-scopes54_0"
"(expand-context/outer-binding-layer the-struct_90)"
" reference-records59_0"
" only-immediate?53_0"
"(expand-context/outer-need-eventually-defined the-struct_90)"
"(expand-context/outer-current-introduction-scopes the-struct_90)"
"(expand-context/outer-current-use-scopes the-struct_90)"
" name52_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                   \"expand-context/outer?\""
" the-struct_90))))))"
"(let-values(((maybe-increment-binding-layer_0)"
"(lambda(ids_29 body-ctx_1)"
"(begin"
" 'maybe-increment-binding-layer"
"(if(eq?"
"(expand-context-binding-layer body-ctx_1)"
"(expand-context-binding-layer ctx_77))"
"(increment-binding-layer ids_29 body-ctx_1 inside-sc_0)"
"(expand-context-binding-layer body-ctx_1))))))"
"(let-values(((name_80)(expand-context-name ctx_77)))"
"((letrec-values(((loop_120)"
"(lambda(body-ctx_2"
" bodys_8"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" stx-clauses_0"
" dups_0)"
"(begin"
" 'loop"
"(if(null? bodys_8)"
"(let-values()"
"(let-values(((body-ctx61_0) body-ctx_2)"
"((frame-id62_0) frame-id_7)"
"((def-ctx-scopes63_0) def-ctx-scopes_6)"
"((temp64_5)(reverse$1 val-idss_0))"
"((temp65_5)(reverse$1 val-keyss_0))"
"((temp66_5)(reverse$1 val-rhss_0))"
"((temp67_6)(reverse$1 track-stxs_0))"
"((temp68_7)(reverse$1 stx-clauses_0))"
"((temp69_4)(reverse$1 done-bodys_0))"
"((s70_0) s_492)"
"((stratified?71_0) stratified?_0)"
"((name72_0) name_80)"
"((temp73_3)(reverse$1 trans-idss_1)))"
"(finish-expanding-body27.1"
" temp73_3"
" name72_0"
" s70_0"
" stratified?71_0"
" body-ctx61_0"
" frame-id62_0"
" def-ctx-scopes63_0"
" temp64_5"
" temp65_5"
" temp66_5"
" temp67_6"
" temp68_7"
" temp69_4)))"
"(let-values()"
"(let-values(((rest-bodys_0)(cdr bodys_8)))"
"(let-values((()"
"(begin"
"(let-values(((obs_68)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_68"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_68"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_0)"
"(let-values(((temp74_3)(car bodys_8))"
"((temp75_5)"
"(if(if name_80"
"(null?"
"(cdr bodys_8))"
" #f)"
"(let-values(((v_259)"
" body-ctx_2))"
"(let-values(((the-struct_91)"
" v_259))"
"(if(expand-context/outer?"
" the-struct_91)"
"(let-values(((name76_0)"
" name_80)"
"((inner77_0)"
"(root-expand-context/outer-inner"
" v_259)))"
"(expand-context/outer1.1"
" inner77_0"
"(root-expand-context/outer-post-expansion"
" the-struct_91)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_91)"
"(root-expand-context/outer-frame-id"
" the-struct_91)"
"(expand-context/outer-context"
" the-struct_91)"
"(expand-context/outer-env"
" the-struct_91)"
"(expand-context/outer-scopes"
" the-struct_91)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_91)"
"(expand-context/outer-binding-layer"
" the-struct_91)"
"(expand-context/outer-reference-records"
" the-struct_91)"
"(expand-context/outer-only-immediate?"
" the-struct_91)"
"(expand-context/outer-need-eventually-defined"
" the-struct_91)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_91)"
"(expand-context/outer-current-use-scopes"
" the-struct_91)"
" name76_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                       \"expand-context/outer?\""
" the-struct_91))))"
" body-ctx_2)))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp74_3"
" temp75_5))))"
"(let-values(((disarmed-exp-body_0)"
"(syntax-disarm$1 exp-body_0)))"
"(let-values(((tmp_62)"
"(core-form-sym"
" disarmed-exp-body_0"
" phase_137)))"
"(if(equal? tmp_62 'begin)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_69)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_69"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_69"
" 'prim-begin)))"
"(void)))"
"(values))))"
"(let-values(((ok?_34 begin78_0 e79_0)"
"(let-values(((s_504)"
" disarmed-exp-body_0))"
"(let-values(((orig-s_38)"
" s_504))"
"(let-values(((begin78_1"
" e79_1)"
"(let-values(((s_505)"
"(if(syntax?$1"
" s_504)"
"(syntax-e$1"
" s_504)"
" s_504)))"
"(if(pair?"
" s_505)"
"(let-values(((begin80_0)"
"(let-values(((s_176)"
"(car"
" s_505)))"
" s_176))"
"((e81_0)"
"(let-values(((s_451)"
"(cdr"
" s_505)))"
"(let-values(((s_46)"
"(if(syntax?$1"
" s_451)"
"(syntax-e$1"
" s_451)"
" s_451)))"
"(let-values(((flat-s_25)"
"(to-syntax-list.1"
" s_46)))"
"(if(not"
" flat-s_25)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_38))"
"(let-values()"
" flat-s_25)))))))"
"(values"
" begin80_0"
" e81_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_38)))))"
"(values"
" #t"
" begin78_1"
" e79_1))))))"
"(let-values(((track_0)"
"(lambda(e_89)"
"(begin"
" 'track"
"(syntax-track-origin$1"
" e_89"
" exp-body_0)))))"
"(let-values(((splice-bodys_0)"
"(append"
"(map2 track_0 e79_0)"
" rest-bodys_0)))"
"(begin"
"(let-values(((obs_35)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_35"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_35"
" 'splice"
" splice-bodys_0)))"
"(void)))"
"(loop_120"
" body-ctx_2"
" splice-bodys_0"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" stx-clauses_0"
" dups_0)))))))"
"(if(equal? tmp_62 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_70)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_70"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_70"
" 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values(((ok?_35"
" define-values82_0"
" id83_0"
" rhs84_0)"
"(let-values(((s_32)"
" disarmed-exp-body_0))"
"(let-values(((orig-s_39)"
" s_32))"
"(let-values(((define-values82_1"
" id83_1"
" rhs84_1)"
"(let-values(((s_51)"
"(if(syntax?$1"
" s_32)"
"(syntax-e$1"
" s_32)"
" s_32)))"
"(if(pair?"
" s_51)"
"(let-values(((define-values85_0)"
"(let-values(((s_452)"
"(car"
" s_51)))"
" s_452))"
"((id86_0"
" rhs87_0)"
"(let-values(((s_506)"
"(cdr"
" s_51)))"
"(let-values(((s_507)"
"(if(syntax?$1"
" s_506)"
"(syntax-e$1"
" s_506)"
" s_506)))"
"(if(pair?"
" s_507)"
"(let-values(((id88_0)"
"(let-values(((s_508)"
"(car"
" s_507)))"
"(let-values(((s_53)"
"(if(syntax?$1"
" s_508)"
"(syntax-e$1"
" s_508)"
" s_508)))"
"(let-values(((flat-s_26)"
"(to-syntax-list.1"
" s_53)))"
"(if(not"
" flat-s_26)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_39))"
"(let-values()"
"(let-values(((id_63)"
"(let-values(((lst_194)"
" flat-s_26))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_194)))"
"((letrec-values(((for-loop_205)"
"(lambda(id_81"
" lst_13)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_13)"
"(let-values(((s_314)"
"(unsafe-car"
" lst_13))"
"((rest_105)"
"(unsafe-cdr"
" lst_13)))"
"(let-values(((id_104)"
"(let-values(((id_105)"
" id_81))"
"(let-values(((id_82)"
"(let-values()"
"(let-values(((id91_0)"
"(let-values()"
"(if(let-values(((or-part_213)"
"(if(syntax?$1"
" s_314)"
"(symbol?"
"(syntax-e$1"
" s_314))"
" #f)))"
"(if or-part_213"
" or-part_213"
"(symbol?"
" s_314)))"
" s_314"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_39"
" s_314)))))"
"(cons"
" id91_0"
" id_105)))))"
"(values"
" id_82)))))"
"(if(not"
" #f)"
"(for-loop_205"
" id_104"
" rest_105)"
" id_104)))"
" id_81)))))"
" for-loop_205)"
" null"
" lst_194)))))"
"(reverse$1"
" id_63))))))))"
"((rhs89_0)"
"(let-values(((s_33)"
"(cdr"
" s_507)))"
"(let-values(((s_509)"
"(if(syntax?$1"
" s_33)"
"(syntax-e$1"
" s_33)"
" s_33)))"
"(if(pair?"
" s_509)"
"(let-values(((rhs90_0)"
"(let-values(((s_96)"
"(car"
" s_509)))"
" s_96))"
"(()"
"(let-values(((s_57)"
"(cdr"
" s_509)))"
"(let-values(((s_510)"
"(if(syntax?$1"
" s_57)"
"(syntax-e$1"
" s_57)"
" s_57)))"
"(if(null?"
" s_510)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_39))))))"
"(values"
" rhs90_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_39))))))"
"(values"
" id88_0"
" rhs89_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_39))))))"
"(values"
" define-values85_0"
" id86_0"
" rhs87_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                     \"bad syntax\""
" orig-s_39)))))"
"(values"
" #t"
" define-values82_1"
" id83_1"
" rhs84_1))))))"
"(let-values(((ids_30)"
"(remove-use-site-scopes"
" id83_0"
" body-ctx_2)))"
"(let-values((()"
"(begin"
"(let-values(((obs_71)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_71"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_71"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_30"
" rhs84_0)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_0)"
"(let-values(((ids92_0)"
" ids_30)"
"((phase93_0)"
" phase_137)"
"((exp-body94_0)"
" exp-body_0)"
"((dups95_0)"
" dups_0))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" ids92_0"
" phase93_0"
" exp-body94_0"
" dups95_0))))"
"(let-values(((counter_5)"
"(root-expand-context-counter"
" ctx_77)))"
"(let-values(((keys_5)"
"(reverse$1"
"(let-values(((lst_292)"
" ids_30))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_292)))"
"((letrec-values(((for-loop_281)"
"(lambda(fold-var_189"
" lst_310)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_310)"
"(let-values(((id_106)"
"(unsafe-car"
" lst_310))"
"((rest_181)"
"(unsafe-cdr"
" lst_310)))"
"(let-values(((fold-var_286)"
"(let-values(((fold-var_287)"
" fold-var_189))"
"(let-values(((fold-var_288)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id96_0)"
" id_106)"
"((phase97_0)"
" phase_137)"
"((counter98_0)"
" counter_5)"
"((frame-id99_0)"
" frame-id_7)"
"((exp-body100_0)"
" exp-body_0))"
"(add-local-binding!37.1"
" frame-id99_0"
" exp-body100_0"
" id96_0"
" phase97_0"
" counter98_0)))"
" fold-var_287))))"
"(values"
" fold-var_288)))))"
"(if(not"
" #f)"
"(for-loop_281"
" fold-var_286"
" rest_181)"
" fold-var_286)))"
" fold-var_189)))))"
" for-loop_281)"
" null"
" lst_292))))))"
"(let-values(((extended-env_0)"
"(let-values(((lst_228)"
" keys_5)"
"((lst_307)"
" ids_30))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_228)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_307)))"
"((letrec-values(((for-loop_276)"
"(lambda(env_17"
" lst_311"
" lst_312)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_311)"
"(pair?"
" lst_312)"
" #f)"
"(let-values(((key_88)"
"(unsafe-car"
" lst_311))"
"((rest_182)"
"(unsafe-cdr"
" lst_311))"
"((id_107)"
"(unsafe-car"
" lst_312))"
"((rest_183)"
"(unsafe-cdr"
" lst_312)))"
"(let-values(((env_18)"
"(let-values(((env_19)"
" env_17))"
"(let-values(((env_20)"
"(let-values()"
"(env-extend"
" env_19"
" key_88"
"(local-variable1.1"
" id_107)))))"
"(values"
" env_20)))))"
"(if(not"
" #f)"
"(for-loop_276"
" env_18"
" rest_182"
" rest_183)"
" env_18)))"
" env_17)))))"
" for-loop_276)"
"(expand-context-env"
" body-ctx_2)"
" lst_228"
" lst_307)))))"
"(loop_120"
"(let-values(((v_260)"
" body-ctx_2))"
"(let-values(((the-struct_92)"
" v_260))"
"(if(expand-context/outer?"
" the-struct_92)"
"(let-values(((env101_0)"
" extended-env_0)"
"((binding-layer102_0)"
"(maybe-increment-binding-layer_0"
" ids_30"
" body-ctx_2))"
"((inner103_0)"
"(root-expand-context/outer-inner"
" v_260)))"
"(expand-context/outer1.1"
" inner103_0"
"(root-expand-context/outer-post-expansion"
" the-struct_92)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_92)"
"(root-expand-context/outer-frame-id"
" the-struct_92)"
"(expand-context/outer-context"
" the-struct_92)"
" env101_0"
"(expand-context/outer-scopes"
" the-struct_92)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_92)"
" binding-layer102_0"
"(expand-context/outer-reference-records"
" the-struct_92)"
"(expand-context/outer-only-immediate?"
" the-struct_92)"
"(expand-context/outer-need-eventually-defined"
" the-struct_92)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_92)"
"(expand-context/outer-current-use-scopes"
" the-struct_92)"
"(expand-context/outer-name"
" the-struct_92)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                      \"expand-context/outer?\""
" the-struct_92))))"
" rest-bodys_0"
" null"
"(cons"
" ids_30"
"(append"
"(reverse$1"
"(let-values(((lst_313)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_313)))"
"((letrec-values(((for-loop_282)"
"(lambda(fold-var_289"
" lst_155)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_155)"
"(let-values(((done-body_0)"
"(unsafe-car"
" lst_155))"
"((rest_79)"
"(unsafe-cdr"
" lst_155)))"
"(let-values(((fold-var_290)"
"(let-values(((fold-var_291)"
" fold-var_289))"
"(let-values(((fold-var_292)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_291))))"
"(values"
" fold-var_292)))))"
"(if(not"
" #f)"
"(for-loop_282"
" fold-var_290"
" rest_79)"
" fold-var_290)))"
" fold-var_289)))))"
" for-loop_282)"
" null"
" lst_313))))"
" val-idss_0))"
"(cons"
" keys_5"
"(append"
"(reverse$1"
"(let-values(((lst_314)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_314)))"
"((letrec-values(((for-loop_283)"
"(lambda(fold-var_293"
" lst_32)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_32)"
"(let-values(((done-body_1)"
"(unsafe-car"
" lst_32))"
"((rest_184)"
"(unsafe-cdr"
" lst_32)))"
"(let-values(((fold-var_294)"
"(let-values(((fold-var_295)"
" fold-var_293))"
"(let-values(((fold-var_141)"
"(let-values()"
"(cons"
"(let-values()"
" null)"
" fold-var_295))))"
"(values"
" fold-var_141)))))"
"(if(not"
" #f)"
"(for-loop_283"
" fold-var_294"
" rest_184)"
" fold-var_294)))"
" fold-var_293)))))"
" for-loop_283)"
" null"
" lst_314))))"
" val-keyss_0))"
"(cons"
" rhs84_0"
"(append"
"(reverse$1"
"(let-values(((lst_107)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_107)))"
"((letrec-values(((for-loop_126)"
"(lambda(fold-var_296"
" lst_315)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_315)"
"(let-values(((done-body_2)"
"(unsafe-car"
" lst_315))"
"((rest_185)"
"(unsafe-cdr"
" lst_315)))"
"(let-values(((fold-var_297)"
"(let-values(((fold-var_298)"
" fold-var_296))"
"(let-values(((fold-var_145)"
"(let-values()"
"(cons"
"(let-values()"
"(no-binds"
" done-body_2"
" s_492"
" phase_137))"
" fold-var_298))))"
"(values"
" fold-var_145)))))"
"(if(not"
" #f)"
"(for-loop_126"
" fold-var_297"
" rest_185)"
" fold-var_297)))"
" fold-var_296)))))"
" for-loop_126)"
" null"
" lst_107))))"
" val-rhss_0))"
"(cons"
" exp-body_0"
"(append"
"(reverse$1"
"(let-values(((lst_157)"
" done-bodys_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_157)))"
"((letrec-values(((for-loop_284)"
"(lambda(fold-var_299"
" lst_316)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_316)"
"(let-values(((done-body_3)"
"(unsafe-car"
" lst_316))"
"((rest_186)"
"(unsafe-cdr"
" lst_316)))"
"(let-values(((fold-var_41)"
"(let-values(((fold-var_42)"
" fold-var_299))"
"(let-values(((fold-var_300)"
"(let-values()"
"(cons"
"(let-values()"
" #f)"
" fold-var_42))))"
"(values"
" fold-var_300)))))"
"(if(not"
" #f)"
"(for-loop_284"
" fold-var_41"
" rest_186)"
" fold-var_41)))"
" fold-var_299)))))"
" for-loop_284)"
" null"
" lst_157))))"
" track-stxs_0))"
" trans-idss_1"
" stx-clauses_0"
" new-dups_0))))))))))"
"(if(equal? tmp_62 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_15)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_15"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_15"
" 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values(((ok?_36"
" define-syntaxes104_0"
" id105_0"
" rhs106_0)"
"(let-values(((s_71)"
" disarmed-exp-body_0))"
"(let-values(((orig-s_7)"
" s_71))"
"(let-values(((define-syntaxes104_1"
" id105_1"
" rhs106_1)"
"(let-values(((s_511)"
"(if(syntax?$1"
" s_71)"
"(syntax-e$1"
" s_71)"
" s_71)))"
"(if(pair?"
" s_511)"
"(let-values(((define-syntaxes107_0)"
"(let-values(((s_216)"
"(car"
" s_511)))"
" s_216))"
"((id108_0"
" rhs109_0)"
"(let-values(((s_512)"
"(cdr"
" s_511)))"
"(let-values(((s_513)"
"(if(syntax?$1"
" s_512)"
"(syntax-e$1"
" s_512)"
" s_512)))"
"(if(pair?"
" s_513)"
"(let-values(((id110_0)"
"(let-values(((s_514)"
"(car"
" s_513)))"
"(let-values(((s_515)"
"(if(syntax?$1"
" s_514)"
"(syntax-e$1"
" s_514)"
" s_514)))"
"(let-values(((flat-s_27)"
"(to-syntax-list.1"
" s_515)))"
"(if(not"
" flat-s_27)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_7))"
"(let-values()"
"(let-values(((id_108)"
"(let-values(((lst_317)"
" flat-s_27))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_317)))"
"((letrec-values(((for-loop_285)"
"(lambda(id_109"
" lst_318)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_318)"
"(let-values(((s_159)"
"(unsafe-car"
" lst_318))"
"((rest_187)"
"(unsafe-cdr"
" lst_318)))"
"(let-values(((id_65)"
"(let-values(((id_110)"
" id_109))"
"(let-values(((id_111)"
"(let-values()"
"(let-values(((id113_0)"
"(let-values()"
"(if(let-values(((or-part_377)"
"(if(syntax?$1"
" s_159)"
"(symbol?"
"(syntax-e$1"
" s_159))"
" #f)))"
"(if or-part_377"
" or-part_377"
"(symbol?"
" s_159)))"
" s_159"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_7"
" s_159)))))"
"(cons"
" id113_0"
" id_110)))))"
"(values"
" id_111)))))"
"(if(not"
" #f)"
"(for-loop_285"
" id_65"
" rest_187)"
" id_65)))"
" id_109)))))"
" for-loop_285)"
" null"
" lst_317)))))"
"(reverse$1"
" id_108))))))))"
"((rhs111_0)"
"(let-values(((s_103)"
"(cdr"
" s_513)))"
"(let-values(((s_104)"
"(if(syntax?$1"
" s_103)"
"(syntax-e$1"
" s_103)"
" s_103)))"
"(if(pair?"
" s_104)"
"(let-values(((rhs112_0)"
"(let-values(((s_516)"
"(car"
" s_104)))"
" s_516))"
"(()"
"(let-values(((s_217)"
"(cdr"
" s_104)))"
"(let-values(((s_105)"
"(if(syntax?$1"
" s_217)"
"(syntax-e$1"
" s_217)"
" s_217)))"
"(if(null?"
" s_105)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                   \"bad syntax\""
" orig-s_7))))))"
"(values"
" rhs112_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_7))))))"
"(values"
" id110_0"
" rhs111_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_7))))))"
"(values"
" define-syntaxes107_0"
" id108_0"
" rhs109_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                       \"bad syntax\""
" orig-s_7)))))"
"(values"
" #t"
" define-syntaxes104_1"
" id105_1"
" rhs106_1))))))"
"(let-values(((ids_31)"
"(remove-use-site-scopes"
" id105_0"
" body-ctx_2)))"
"(let-values((()"
"(begin"
"(let-values(((obs_18)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_18"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_18"
" 'rename-one"
"(datum->syntax$1"
" #f"
"(list"
" ids_31"
" rhs106_0)))))"
"(void)))"
"(values))))"
"(let-values(((new-dups_1)"
"(let-values(((ids114_0)"
" ids_31)"
"((phase115_0)"
" phase_137)"
"((exp-body116_0)"
" exp-body_0)"
"((dups117_0)"
" dups_0))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" ids114_0"
" phase115_0"
" exp-body116_0"
" dups117_0))))"
"(let-values(((counter_6)"
"(root-expand-context-counter"
" ctx_77)))"
"(let-values(((keys_6)"
"(reverse$1"
"(let-values(((lst_319)"
" ids_31))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_319)))"
"((letrec-values(((for-loop_286)"
"(lambda(fold-var_301"
" lst_320)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_320)"
"(let-values(((id_112)"
"(unsafe-car"
" lst_320))"
"((rest_188)"
"(unsafe-cdr"
" lst_320)))"
"(let-values(((fold-var_302)"
"(let-values(((fold-var_303)"
" fold-var_301))"
"(let-values(((fold-var_304)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id118_0)"
" id_112)"
"((phase119_0)"
" phase_137)"
"((counter120_0)"
" counter_6)"
"((frame-id121_0)"
" frame-id_7)"
"((exp-body122_0)"
" exp-body_0))"
"(add-local-binding!37.1"
" frame-id121_0"
" exp-body122_0"
" id118_0"
" phase119_0"
" counter120_0)))"
" fold-var_303))))"
"(values"
" fold-var_304)))))"
"(if(not"
" #f)"
"(for-loop_286"
" fold-var_302"
" rest_188)"
" fold-var_302)))"
" fold-var_301)))))"
" for-loop_286)"
" null"
" lst_319))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_72)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_72"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_72"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(prepare-next-phase-namespace"
" ctx_77)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_73)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_73"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_73"
" 'enter-bind)))"
"(void)))"
"(values))))"
"(let-values(((vals_8)"
"(eval-for-syntaxes-binding"
" 'define-syntaxes"
" rhs106_0"
" ids_31"
" body-ctx_2)))"
"(let-values(((extended-env_1)"
"(let-values(((lst_321)"
" keys_6)"
"((lst_322)"
" vals_8)"
"((lst_323)"
" ids_31))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_321)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_322)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_323)))"
"((letrec-values(((for-loop_287)"
"(lambda(env_21"
" lst_324"
" lst_325"
" lst_326)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_324)"
"(if(pair?"
" lst_325)"
"(pair?"
" lst_326)"
" #f)"
" #f)"
"(let-values(((key_89)"
"(unsafe-car"
" lst_324))"
"((rest_189)"
"(unsafe-cdr"
" lst_324))"
"((val_41)"
"(unsafe-car"
" lst_325))"
"((rest_190)"
"(unsafe-cdr"
" lst_325))"
"((id_113)"
"(unsafe-car"
" lst_326))"
"((rest_191)"
"(unsafe-cdr"
" lst_326)))"
"(let-values(((env_22)"
"(let-values(((env_23)"
" env_21))"
"(let-values(((env_24)"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_41"
" id_113"
" phase_137"
" body-ctx_2)"
"(env-extend"
" env_23"
" key_89"
" val_41)))))"
"(values"
" env_24)))))"
"(if(not"
" #f)"
"(for-loop_287"
" env_22"
" rest_189"
" rest_190"
" rest_191)"
" env_22)))"
" env_21)))))"
" for-loop_287)"
"(expand-context-env"
" body-ctx_2)"
" lst_321"
" lst_322"
" lst_323)))))"
"(begin"
"(let-values(((obs_74)"
"(expand-context-observer"
" body-ctx_2)))"
"(if obs_74"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_74"
" 'exit-bind)))"
"(void)))"
"(loop_120"
"(let-values(((v_261)"
" body-ctx_2))"
"(let-values(((the-struct_93)"
" v_261))"
"(if(expand-context/outer?"
" the-struct_93)"
"(let-values(((env123_0)"
" extended-env_1)"
"((binding-layer124_0)"
"(maybe-increment-binding-layer_0"
" ids_31"
" body-ctx_2))"
"((inner125_0)"
"(root-expand-context/outer-inner"
" v_261)))"
"(expand-context/outer1.1"
" inner125_0"
"(root-expand-context/outer-post-expansion"
" the-struct_93)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_93)"
"(root-expand-context/outer-frame-id"
" the-struct_93)"
"(expand-context/outer-context"
" the-struct_93)"
" env123_0"
"(expand-context/outer-scopes"
" the-struct_93)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_93)"
" binding-layer124_0"
"(expand-context/outer-reference-records"
" the-struct_93)"
"(expand-context/outer-only-immediate?"
" the-struct_93)"
"(expand-context/outer-need-eventually-defined"
" the-struct_93)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_93)"
"(expand-context/outer-current-use-scopes"
" the-struct_93)"
"(expand-context/outer-name"
" the-struct_93)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                  \"expand-context/outer?\""
" the-struct_93))))"
" rest-bodys_0"
" done-bodys_0"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
"(cons"
" ids_31"
" trans-idss_1)"
"(cons"
"(datum->syntax$1"
" #f"
"(list"
" ids_31"
" rhs106_0)"
" exp-body_0)"
" stx-clauses_0)"
" new-dups_1)))))))))))))))"
"(let-values()"
"(if stratified?_0"
"(let-values()"
"(begin"
"(if(null? done-bodys_0)"
"(void)"
"(let-values()"
"(error"
"                                                                                           \"internal error: accumulated expressions not empty\")))"
"(loop_120"
" body-ctx_2"
" null"
"(if(if(null? val-idss_0)"
"(null? trans-idss_1)"
" #f)"
"(reverse$1"
"(cons"
" exp-body_0"
" rest-bodys_0))"
"(list"
"(datum->syntax$1"
" #f"
"(cons"
"(core-id"
" '#%stratified-body"
" phase_137)"
"(cons"
" exp-body_0"
" rest-bodys_0)))))"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" stx-clauses_0"
" dups_0)))"
"(let-values()"
"(loop_120"
" body-ctx_2"
" rest-bodys_0"
"(cons exp-body_0 done-bodys_0)"
" val-idss_0"
" val-keyss_0"
" val-rhss_0"
" track-stxs_0"
" trans-idss_1"
" stx-clauses_0"
" dups_0))))))))))))))))))"
" loop_120)"
" body-ctx_0"
" init-bodys_0"
" null"
" null"
" null"
" null"
" null"
" null"
" null"
"(make-check-no-duplicate-table))))))))))))))))))))"
"(define-values"
"(finish-expanding-body27.1)"
"(lambda(disappeared-transformer-bindings13_0"
" name12_0"
" source10_0"
" stratified?11_0"
" body-ctx18_0"
" frame-id19_0"
" def-ctx-scopes20_0"
" val-idss21_0"
" val-keyss22_0"
" val-rhss23_0"
" track-stxs24_0"
" stx-clauses25_0"
" done-bodys26_0)"
"(begin"
" 'finish-expanding-body27"
"(let-values(((body-ctx_3) body-ctx18_0))"
"(let-values(((frame-id_13) frame-id19_0))"
"(let-values(((def-ctx-scopes_7) def-ctx-scopes20_0))"
"(let-values(((val-idss_1) val-idss21_0))"
"(let-values(((val-keyss_1) val-keyss22_0))"
"(let-values(((val-rhss_1) val-rhss23_0))"
"(let-values(((track-stxs_1) track-stxs24_0))"
"(let-values(((stx-clauses_1) stx-clauses25_0))"
"(let-values(((done-bodys_1) done-bodys26_0))"
"(let-values(((s_233) source10_0))"
"(let-values(((stratified?_1) stratified?11_0))"
"(let-values(((name_81) name12_0))"
"(let-values(((disappeared-transformer-bindings_0) disappeared-transformer-bindings13_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? done-bodys_1)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                       \"no expression after a sequence of internal definitions\""
" s_233))"
"(void))"
"(values))))"
"(let-values(((finish-ctx_0)"
"(let-values(((v_262)"
"(accumulate-def-ctx-scopes"
" body-ctx_3"
" def-ctx-scopes_7)))"
"(let-values(((the-struct_94) v_262))"
"(if(expand-context/outer? the-struct_94)"
"(let-values(((context126_0) 'expression)"
"((use-site-scopes127_0)(box null))"
"((scopes128_0)"
"(append"
"(unbox"
"(root-expand-context-use-site-scopes"
" body-ctx_3))"
"(expand-context-scopes body-ctx_3)))"
"((only-immediate?129_0) #f)"
"((def-ctx-scopes130_0) #f)"
"((post-expansion131_0) #f)"
"((inner132_0)"
"(root-expand-context/outer-inner v_262)))"
"(expand-context/outer1.1"
" inner132_0"
" post-expansion131_0"
" use-site-scopes127_0"
"(root-expand-context/outer-frame-id the-struct_94)"
" context126_0"
"(expand-context/outer-env the-struct_94)"
" scopes128_0"
" def-ctx-scopes130_0"
"(expand-context/outer-binding-layer the-struct_94)"
"(expand-context/outer-reference-records the-struct_94)"
" only-immediate?129_0"
"(expand-context/outer-need-eventually-defined the-struct_94)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_94)"
"(expand-context/outer-current-use-scopes the-struct_94)"
"(expand-context/outer-name the-struct_94)))"
"(raise-argument-error"
" 'struct-copy"
"                                                         \"expand-context/outer?\""
" the-struct_94))))))"
"(let-values(((finish-bodys_0)"
"(lambda()"
"(begin"
" 'finish-bodys"
"(let-values(((block->list?_0)(null? val-idss_1)))"
"(let-values((()"
"(begin"
"(if block->list?_0"
"(void)"
"(let-values()"
"(let-values(((obs_75)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_75"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_75"
" 'next-group)))"
"(void)))))"
"(values))))"
"(let-values(((last-i_1)(sub1(length done-bodys_1))))"
"(let-values((()"
"(begin"
"(let-values(((obs_76)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_76"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_76"
" 'enter-list"
"(datum->syntax$1"
" #f"
" done-bodys_1))))"
"(void)))"
"(values))))"
"(let-values(((exp-bodys_0)"
"(reverse$1"
"(let-values(((lst_213) done-bodys_1)"
"((start_64) 0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_213)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-naturals start_64)))"
"((letrec-values(((for-loop_288)"
"(lambda(fold-var_305"
" lst_5"
" pos_125)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_5)"
" #t"
" #f)"
"(let-values(((done-body_4)"
"(unsafe-car"
" lst_5))"
"((rest_192)"
"(unsafe-cdr"
" lst_5))"
"((i_14)"
" pos_125))"
"(let-values(((fold-var_306)"
"(let-values(((fold-var_307)"
" fold-var_305))"
"(let-values(((fold-var_308)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_77)"
"(expand-context-observer"
" body-ctx_3)))"
"(if obs_77"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_77"
" 'next)))"
"(void)))"
"(let-values(((done-body133_0)"
" done-body_4)"
"((temp134_3)"
"(if(if name_81"
"(="
" i_14"
" last-i_1)"
" #f)"
"(let-values(((v_263)"
" finish-ctx_0))"
"(let-values(((the-struct_95)"
" v_263))"
"(if(expand-context/outer?"
" the-struct_95)"
"(let-values(((name135_0)"
" name_81)"
"((inner136_0)"
"(root-expand-context/outer-inner"
" v_263)))"
"(expand-context/outer1.1"
" inner136_0"
"(root-expand-context/outer-post-expansion"
" the-struct_95)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_95)"
"(root-expand-context/outer-frame-id"
" the-struct_95)"
"(expand-context/outer-context"
" the-struct_95)"
"(expand-context/outer-env"
" the-struct_95)"
"(expand-context/outer-scopes"
" the-struct_95)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_95)"
"(expand-context/outer-binding-layer"
" the-struct_95)"
"(expand-context/outer-reference-records"
" the-struct_95)"
"(expand-context/outer-only-immediate?"
" the-struct_95)"
"(expand-context/outer-need-eventually-defined"
" the-struct_95)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_95)"
"(expand-context/outer-current-use-scopes"
" the-struct_95)"
" name135_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                         \"expand-context/outer?\""
" the-struct_95))))"
" finish-ctx_0)))"
"(expand9.1"
" #f"
" #f"
" #f"
" done-body133_0"
" temp134_3))))"
" fold-var_307))))"
"(values"
" fold-var_308)))))"
"(if(not"
" #f)"
"(for-loop_288"
" fold-var_306"
" rest_192"
"(+"
" pos_125"
" 1))"
" fold-var_306)))"
" fold-var_305)))))"
" for-loop_288)"
" null"
" lst_213"
" start_64))))))"
"(begin"
"(let-values(((obs_78)"
"(expand-context-observer body-ctx_3)))"
"(if obs_78"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_78"
" 'exit-list"
"(datum->syntax$1 #f exp-bodys_0))))"
"(void)))"
"(reference-record-clear! frame-id_13)"
" exp-bodys_0))))))))))"
"(if(if(null? val-idss_1)(null? disappeared-transformer-bindings_0) #f)"
"(let-values()"
"(begin"
"(let-values(((obs_79)(expand-context-observer finish-ctx_0)))"
"(if obs_79"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_79"
" 'block->list"
"(datum->syntax$1 s_233 done-bodys_1))))"
"(void)))"
"(finish-bodys_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_80)"
"(expand-context-observer finish-ctx_0)))"
"(if obs_80"
"(let-values()"
"(log-letrec-values$1"
" obs_80"
" finish-ctx_0"
" s_233"
" val-idss_1"
" val-rhss_1"
" track-stxs_1"
" stx-clauses_1"
" done-bodys_1))"
"(void)))"
"(values))))"
"(let-values(((exp-s_12)"
"(let-values(((val-idss137_0) val-idss_1)"
"((val-keyss138_0) val-keyss_1)"
"((val-rhss139_0) val-rhss_1)"
"((track-stxs140_0) track-stxs_1)"
"((temp141_2)(not stratified?_1))"
"((frame-id142_0) frame-id_13)"
"((finish-ctx143_0) finish-ctx_0)"
"((s144_0) s_233)"
"((temp145_1)(pair? stx-clauses_1))"
"((finish-bodys146_0) finish-bodys_0)"
"((temp147_0) #f))"
"(expand-and-split-bindings-by-reference48.1"
" finish-ctx143_0"
" frame-id142_0"
" finish-bodys146_0"
" temp145_1"
" s144_0"
" temp141_2"
" temp147_0"
" val-idss137_0"
" val-keyss138_0"
" val-rhss139_0"
" track-stxs140_0))))"
"(begin"
"(let-values(((obs_81)(expand-context-observer body-ctx_3)))"
"(if obs_81"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_81 'exit-prim exp-s_12)"
"(call-expand-observe obs_81 'return exp-s_12))))"
"(void)))"
"(if(expand-context-to-parsed? body-ctx_3)"
"(list exp-s_12)"
"(list"
"(attach-disappeared-transformer-bindings"
" exp-s_12"
" disappeared-transformer-bindings_0))))))))))))))))))))))))))))"
"(define-values"
"(expand-and-split-bindings-by-reference48.1)"
"(lambda(ctx32_0"
" frame-id31_0"
" get-body35_0"
" had-stxes?34_0"
" source33_0"
" split?30_0"
" track?36_0"
" idss44_0"
" keyss45_0"
" rhss46_0"
" track-stxs47_0)"
"(begin"
" 'expand-and-split-bindings-by-reference48"
"(let-values(((idss_1) idss44_0))"
"(let-values(((keyss_0) keyss45_0))"
"(let-values(((rhss_1) rhss46_0))"
"(let-values(((track-stxs_2) track-stxs47_0))"
"(let-values(((split?_0) split?30_0))"
"(let-values(((frame-id_14) frame-id31_0))"
"(let-values(((ctx_78) ctx32_0))"
"(let-values(((s_366) source33_0))"
"(let-values(((had-stxes?_0) had-stxes?34_0))"
"(let-values(((get-body_0) get-body35_0))"
"(let-values(((track?_1) track?36_0))"
"(let-values()"
"(let-values(((phase_138)(expand-context-phase ctx_78)))"
"((letrec-values(((loop_27)"
"(lambda(idss_2"
" keyss_1"
" rhss_2"
" track-stxs_3"
" accum-idss_0"
" accum-keyss_0"
" accum-rhss_0"
" accum-track-stxs_0"
" track?_2"
" get-list?_0"
" can-log?_0)"
"(begin"
" 'loop"
"(if(null? idss_2)"
"(let-values()"
"(if(if(null? accum-idss_0) get-list?_0 #f)"
"(let-values()(get-body_0))"
"(let-values()"
"(let-values(((exp-body_1)(get-body_0)))"
"(let-values(((result-s_9)"
"(if(expand-context-to-parsed? ctx_78)"
"(if(null? accum-idss_0)"
"(parsed-let-values17.1"
"(keep-properties-only s_366)"
" null"
" null"
" exp-body_1)"
"(parsed-letrec-values18.1"
"(keep-properties-only s_366)"
"(reverse$1 accum-idss_0)"
"(reverse$1"
"(map2"
" list"
" accum-keyss_0"
" accum-rhss_0))"
" exp-body_1))"
"(let-values(((track?148_0) track?_2)"
"((s149_0) s_366)"
"((temp150_1)"
"(list*"
"(if(null? accum-idss_0)"
"(core-id"
" 'let-values"
" phase_138)"
"(core-id"
" 'letrec-values"
" phase_138))"
"(build-clauses"
" accum-idss_0"
" accum-rhss_0"
" accum-track-stxs_0)"
" exp-body_1)))"
"(rebuild5.1"
" track?148_0"
" s149_0"
" temp150_1)))))"
"(begin"
"(let-values(((obs_82)"
"(expand-context-observer ctx_78)))"
"(if obs_82"
"(let-values()"
"(if(if can-log?_0"
"(log-tag? had-stxes?_0 ctx_78)"
" #f)"
"(let-values()"
"(call-expand-observe"
" obs_82"
" 'tag"
" result-s_9))"
"(void)))"
"(void)))"
"(if get-list?_0(list result-s_9) result-s_9)))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_83)"
"(expand-context-observer"
" ctx_78)))"
"(if obs_83"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_83 'next)))"
"(void)))"
"(values))))"
"(let-values(((ids_32)(car idss_2)))"
"(let-values(((expanded-rhs_0)"
"(let-values(((temp151_1)(car rhss_2))"
"((temp152_1)"
"(as-named-context"
" ctx_78"
" ids_32)))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp151_1"
" temp152_1))))"
"(let-values(((track-stx_0)(car track-stxs_3)))"
"(let-values(((local-or-forward-references?_0)"
"(reference-record-forward-references?"
" frame-id_14)))"
"(let-values((()"
"(begin"
"(reference-record-bound!"
" frame-id_14"
"(car keyss_1))"
"(values))))"
"(let-values(((forward-references?_0)"
"(reference-record-forward-references?"
" frame-id_14)))"
"(if(if(not local-or-forward-references?_0)"
" split?_0"
" #f)"
"(let-values()"
"(let-values((()"
"(begin"
"(if(null? accum-idss_0)"
"(void)"
"(let-values()"
"(error"
"                                                                                                 \"internal error: accumulated ids not empty\")))"
"(values))))"
"(let-values(((exp-rest_0)"
"(loop_27"
"(cdr idss_2)"
"(cdr keyss_1)"
"(cdr rhss_2)"
"(cdr track-stxs_3)"
" null"
" null"
" null"
" null"
" #f"
" #t"
" #f)))"
"(let-values(((result-s_10)"
"(if(expand-context-to-parsed?"
" ctx_78)"
"(parsed-let-values17.1"
"(keep-properties-only"
" s_366)"
"(list ids_32)"
"(list"
"(list"
"(car keyss_1)"
" expanded-rhs_0))"
" exp-rest_0)"
"(let-values(((track?153_0)"
" track?_2)"
"((s154_1)"
" s_366)"
"((temp155_2)"
"(list*"
"(core-id"
" 'let-values"
" phase_138)"
"(list"
"(build-clause"
" ids_32"
" expanded-rhs_0"
" track-stx_0))"
" exp-rest_0)))"
"(rebuild5.1"
" track?153_0"
" s154_1"
" temp155_2)))))"
"(begin"
"(let-values(((obs_84)"
"(expand-context-observer"
" ctx_78)))"
"(if obs_84"
"(let-values()"
"(if(if can-log?_0"
"(log-tag?"
" had-stxes?_0"
" ctx_78)"
" #f)"
"(let-values()"
"(call-expand-observe"
" obs_84"
" 'tag"
" result-s_10))"
"(void)))"
"(void)))"
"(if get-list?_0"
"(list result-s_10)"
" result-s_10))))))"
"(if(if(not forward-references?_0)"
"(let-values(((or-part_378) split?_0))"
"(if or-part_378"
" or-part_378"
"(null?(cdr idss_2))))"
" #f)"
"(let-values()"
"(let-values(((exp-rest_1)"
"(loop_27"
"(cdr idss_2)"
"(cdr keyss_1)"
"(cdr rhss_2)"
"(cdr track-stxs_3)"
" null"
" null"
" null"
" null"
" #f"
" #t"
" #f)))"
"(let-values(((result-s_11)"
"(if(expand-context-to-parsed?"
" ctx_78)"
"(parsed-letrec-values18.1"
"(keep-properties-only"
" s_366)"
"(reverse$1"
"(cons"
" ids_32"
" accum-idss_0))"
"(reverse$1"
"(cons"
"(list"
"(car keyss_1)"
" expanded-rhs_0)"
"(map2"
" list"
" accum-keyss_0"
" accum-rhss_0)))"
" exp-rest_1)"
"(let-values(((track?156_0)"
" track?_2)"
"((s157_1)"
" s_366)"
"((temp158_1)"
"(list*"
"(core-id"
" 'letrec-values"
" phase_138)"
"(build-clauses"
"(cons"
" ids_32"
" accum-idss_0)"
"(cons"
" expanded-rhs_0"
" accum-rhss_0)"
"(cons"
" track-stx_0"
" accum-track-stxs_0))"
" exp-rest_1)))"
"(rebuild5.1"
" track?156_0"
" s157_1"
" temp158_1)))))"
"(begin"
"(let-values(((obs_85)"
"(expand-context-observer"
" ctx_78)))"
"(if obs_85"
"(let-values()"
"(if(if can-log?_0"
"(log-tag?"
" had-stxes?_0"
" ctx_78)"
" #f)"
"(let-values()"
"(call-expand-observe"
" obs_85"
" 'tag"
" result-s_11))"
"(void)))"
"(void)))"
"(if get-list?_0"
"(list result-s_11)"
" result-s_11)))))"
"(let-values()"
"(loop_27"
"(cdr idss_2)"
"(cdr keyss_1)"
"(cdr rhss_2)"
"(cdr track-stxs_3)"
"(cons ids_32 accum-idss_0)"
"(cons(car keyss_1) accum-keyss_0)"
"(cons expanded-rhs_0 accum-rhss_0)"
"(cons track-stx_0 accum-track-stxs_0)"
" track?_2"
" get-list?_0"
" can-log?_0)))))))))))))))))"
" loop_27)"
" idss_1"
" keyss_0"
" rhss_1"
" track-stxs_2"
" null"
" null"
" null"
" null"
" track?_1"
" #f"
" #t)))))))))))))))))"
"(define-values"
"(build-clauses)"
"(lambda(accum-idss_1 accum-rhss_1 accum-track-stxs_1)"
"(begin(map2 build-clause(reverse$1 accum-idss_1)(reverse$1 accum-rhss_1)(reverse$1 accum-track-stxs_1)))))"
"(define-values"
"(build-clause)"
"(lambda(ids_33 rhs_19 track-stx_1)"
"(begin"
"(let-values(((clause_2)(datum->syntax$1 #f(list ids_33 rhs_19))))"
"(if track-stx_1(syntax-track-origin$1 clause_2 track-stx_1) clause_2)))))"
"(define-values"
"(no-binds)"
"(lambda(expr_10 s_517 phase_139)"
"(begin"
"(let-values(((s-runtime-stx_0)(syntax-shift-phase-level$1 runtime-stx phase_139)))"
"(datum->syntax$1"
"(core-id '#%app phase_139)"
"(list(core-id 'begin phase_139) expr_10(list(datum->syntax$1 s-runtime-stx_0 'values)))"
" s_517)))))"
"(define-values"
"(log-tag?)"
"(lambda(had-stxes?_1 ctx_79)(begin(if had-stxes?_1(not(expand-context-only-immediate? ctx_79)) #f))))"
"(define-values"
"(log-letrec-values$1)"
"(lambda(obs_86 ctx_80 s_396 val-idss_2 val-rhss_2 track-stxs_4 stx-clauses_2 done-bodys_2)"
"(begin"
" 'log-letrec-values"
"(let-values(((phase_140)(expand-context-phase ctx_80)))"
"(let-values(((clauses_0)"
"(reverse$1"
"(let-values(((lst_327) val-idss_2)((lst_328) val-rhss_2)((lst_329) track-stxs_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_327)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_328)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_329)))"
"((letrec-values(((for-loop_289)"
"(lambda(fold-var_309 lst_330 lst_331 lst_332)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_330)(if(pair? lst_331)(pair? lst_332) #f) #f)"
"(let-values(((val-ids_0)(unsafe-car lst_330))"
"((rest_193)(unsafe-cdr lst_330))"
"((val-rhs_0)(unsafe-car lst_331))"
"((rest_194)(unsafe-cdr lst_331))"
"((track-stx_2)(unsafe-car lst_332))"
"((rest_195)(unsafe-cdr lst_332)))"
"(let-values(((fold-var_310)"
"(let-values(((fold-var_311) fold-var_309))"
"(let-values(((fold-var_312)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list val-ids_0 val-rhs_0)"
" track-stx_2))"
" fold-var_311))))"
"(values fold-var_312)))))"
"(if(not #f)"
"(for-loop_289 fold-var_310 rest_193 rest_194 rest_195)"
" fold-var_310)))"
" fold-var_309)))))"
" for-loop_289)"
" null"
" lst_327"
" lst_328"
" lst_329))))))"
"(let-values(((had-stxes?_2)(not(null? stx-clauses_2))))"
"(let-values(((lv-id_0)(core-id(if had-stxes?_2 'letrec-syntaxes+values 'letrec-values) phase_140)))"
"(let-values(((lv-s_0)"
"(datum->syntax$1"
" #f"
"(if had-stxes?_2"
"(list* lv-id_0 stx-clauses_2 clauses_0 done-bodys_2)"
"(list* lv-id_0 clauses_0 done-bodys_2))"
" s_396)))"
"(begin"
"(call-expand-observe obs_86 'block->letrec(list lv-s_0))"
"(call-expand-observe obs_86 'visit lv-s_0)"
"(call-expand-observe obs_86 'resolve lv-id_0)"
"(call-expand-observe obs_86 'enter-prim lv-s_0)"
"(if had-stxes?_2"
"(let-values()"
"(begin"
"(call-expand-observe obs_86 'prim-letrec-syntaxes+values)"
"(call-expand-observe"
" obs_86"
" 'letrec-syntaxes-renames"
" stx-clauses_2"
" clauses_0"
"(datum->syntax$1 #f done-bodys_2 s_396))"
"(call-expand-observe obs_86 'prepare-env)"
"(call-expand-observe obs_86 'next-group)"
"(if(null? val-idss_2)"
"(void)"
"(let-values()"
"(begin"
"(call-expand-observe obs_86 'prim-letrec-values)"
"(call-expand-observe"
" obs_86"
" 'let-renames"
" clauses_0"
"(datum->syntax$1 #f done-bodys_2 s_396)))))))"
"(let-values()"
"(begin"
"(call-expand-observe obs_86 'prim-letrec-values)"
"(call-expand-observe"
" obs_86"
" 'let-renames"
" clauses_0"
"(datum->syntax$1 #f done-bodys_2 s_396))))))))))))))"
"(define-values"
"(lambda-clause-expander)"
"(lambda(s_74 disarmed-s_5 formals_1 bodys_9 ctx_81 log-renames-tag_0)"
"(begin"
"(let-values(((sc_37)(new-scope 'local)))"
"(let-values(((phase_84)(expand-context-phase ctx_81)))"
"(let-values(((ids_34)(parse-and-flatten-formals formals_1 sc_37 disarmed-s_5)))"
"(let-values((()"
"(begin"
"(let-values(((ids33_0) ids_34)"
"((phase34_1) phase_84)"
"((s35_1) s_74)"
"                                         ((temp36_8) \"argument name\"))"
"(check-no-duplicate-ids7.1 temp36_8 ids33_0 phase34_1 s35_1 unsafe-undefined))"
"(values))))"
"(let-values(((counter_7)(root-expand-context-counter ctx_81)))"
"(let-values(((keys_7)"
"(reverse$1"
"(let-values(((lst_88) ids_34))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_88)))"
"((letrec-values(((for-loop_191)"
"(lambda(fold-var_157 lst_163)"
"(begin"
" 'for-loop"
"(if(pair? lst_163)"
"(let-values(((id_114)(unsafe-car lst_163))"
"((rest_84)(unsafe-cdr lst_163)))"
"(let-values(((fold-var_33)"
"(let-values(((fold-var_34) fold-var_157))"
"(let-values(((fold-var_158)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id37_0)"
" id_114)"
"((phase38_1)"
" phase_84)"
"((counter39_0)"
" counter_7)"
"((s40_0)"
" s_74))"
"(add-local-binding!37.1"
" #f"
" s40_0"
" id37_0"
" phase38_1"
" counter39_0)))"
" fold-var_34))))"
"(values fold-var_158)))))"
"(if(not #f)"
"(for-loop_191 fold-var_33 rest_84)"
" fold-var_33)))"
" fold-var_157)))))"
" for-loop_191)"
" null"
" lst_88))))))"
"(let-values(((body-env_0)"
"(let-values(((lst_80) keys_7)((lst_91) ids_34))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_80)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_91)))"
"((letrec-values(((for-loop_49)"
"(lambda(env_25 lst_82 lst_58)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_82)(pair? lst_58) #f)"
"(let-values(((key_90)(unsafe-car lst_82))"
"((rest_196)(unsafe-cdr lst_82))"
"((id_115)(unsafe-car lst_58))"
"((rest_197)(unsafe-cdr lst_58)))"
"(let-values(((env_26)"
"(let-values(((env_27) env_25))"
"(let-values(((env_28)"
"(let-values()"
"(env-extend"
" env_27"
" key_90"
"(local-variable1.1"
" id_115)))))"
"(values env_28)))))"
"(if(not #f)"
"(for-loop_49 env_26 rest_196 rest_197)"
" env_26)))"
" env_25)))))"
" for-loop_49)"
"(expand-context-env ctx_81)"
" lst_80"
" lst_91)))))"
"(let-values(((sc-formals_0)(add-scope formals_1 sc_37)))"
"(let-values(((sc-bodys_0)"
"(reverse$1"
"(let-values(((lst_17) bodys_9))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_17)))"
"((letrec-values(((for-loop_10)"
"(lambda(fold-var_217 lst_18)"
"(begin"
" 'for-loop"
"(if(pair? lst_18)"
"(let-values(((body_10)(unsafe-car lst_18))"
"((rest_5)(unsafe-cdr lst_18)))"
"(let-values(((fold-var_218)"
"(let-values(((fold-var_75)"
" fold-var_217))"
"(let-values(((fold-var_65)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_10"
" sc_37))"
" fold-var_75))))"
"(values fold-var_65)))))"
"(if(not #f)"
"(for-loop_10 fold-var_218 rest_5)"
" fold-var_218)))"
" fold-var_217)))))"
" for-loop_10)"
" null"
" lst_17))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_87)(expand-context-observer ctx_81)))"
"(if obs_87"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_87"
" log-renames-tag_0"
" sc-formals_0"
"(datum->syntax$1 #f sc-bodys_0))))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_4)"
"(let-values(((v_264) ctx_81))"
"(let-values(((the-struct_96) v_264))"
"(if(expand-context/outer? the-struct_96)"
"(let-values(((env41_0) body-env_0)"
"((scopes42_0)(cons sc_37(expand-context-scopes ctx_81)))"
"((binding-layer43_0)"
"(increment-binding-layer ids_34 ctx_81 sc_37))"
"((frame-id44_0) #f)"
"((inner45_0)(root-expand-context/outer-inner v_264)))"
"(expand-context/outer1.1"
" inner45_0"
"(root-expand-context/outer-post-expansion the-struct_96)"
"(root-expand-context/outer-use-site-scopes the-struct_96)"
" frame-id44_0"
"(expand-context/outer-context the-struct_96)"
" env41_0"
" scopes42_0"
"(expand-context/outer-def-ctx-scopes the-struct_96)"
" binding-layer43_0"
"(expand-context/outer-reference-records the-struct_96)"
"(expand-context/outer-only-immediate? the-struct_96)"
"(expand-context/outer-need-eventually-defined the-struct_96)"
"(expand-context/outer-current-introduction-scopes the-struct_96)"
"(expand-context/outer-current-use-scopes the-struct_96)"
"(expand-context/outer-name the-struct_96)))"
"(raise-argument-error"
" 'struct-copy"
"                                               \"expand-context/outer?\""
" the-struct_96))))))"
"(let-values(((exp-body_2)"
"(let-values(((sc-bodys46_0) sc-bodys_0)"
"((body-ctx47_0) body-ctx_4)"
"((temp48_3)"
"(let-values(((ctx49_0) ctx_81)((s50_0) s_74)((temp51_2) #t))"
"(keep-as-needed119.1 #f temp51_2 #f ctx49_0 s50_0))))"
"(expand-body7.1 temp48_3 #f sc-bodys46_0 body-ctx47_0))))"
"(values"
"(if(expand-context-to-parsed? ctx_81)"
"(unflatten-like-formals keys_7 formals_1)"
" sc-formals_0)"
" exp-body_2))))))))))))))))"
"(void"
"(add-core-form!*"
" 'lambda"
"(lambda(s_13 ctx_82)"
"(let-values((()"
"(begin"
"(let-values(((obs_88)(expand-context-observer ctx_82)))"
"(if obs_88(let-values()(let-values()(call-expand-observe obs_88 'prim-lambda)))(void)))"
"(values))))"
"(let-values(((disarmed-s_6)(syntax-disarm$1 s_13)))"
"(let-values(((ok?_37 lambda52_0 formals53_0 body54_0)"
"(let-values(((s_495) disarmed-s_6))"
"(let-values(((orig-s_40) s_495))"
"(let-values(((lambda52_1 formals53_1 body54_1)"
"(let-values(((s_172)(if(syntax?$1 s_495)(syntax-e$1 s_495) s_495)))"
"(if(pair? s_172)"
"(let-values(((lambda55_0)(let-values(((s_45)(car s_172))) s_45))"
"((formals56_0 body57_0)"
"(let-values(((s_84)(cdr s_172)))"
"(let-values(((s_174)"
"(if(syntax?$1 s_84)"
"(syntax-e$1 s_84)"
" s_84)))"
"(if(pair? s_174)"
"(let-values(((formals58_0)"
"(let-values(((s_175)(car s_174)))"
" s_175))"
"((body59_0)"
"(let-values(((s_176)(cdr s_174)))"
"(let-values(((s_451)"
"(if(syntax?$1 s_176)"
"(syntax-e$1 s_176)"
" s_176)))"
"(let-values(((flat-s_28)"
"(to-syntax-list.1"
" s_451)))"
"(if(not flat-s_28)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_40))"
"(if(null? flat-s_28)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_40))"
"(let-values()"
" flat-s_28))))))))"
"(values formals58_0 body59_0))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_40))))))"
"(values lambda55_0 formals56_0 body57_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_40)))))"
"(values #t lambda52_1 formals53_1 body54_1))))))"
"(let-values(((rebuild-s_4)"
"(let-values(((ctx60_1) ctx_82)((s61_0) s_13)((temp62_3) #t))"
"(keep-as-needed119.1 #f #f temp62_3 ctx60_1 s61_0))))"
"(let-values(((formals_2 body_11)"
"(lambda-clause-expander s_13 disarmed-s_6 formals53_0 body54_0 ctx_82 'lambda-renames)))"
"(if(expand-context-to-parsed? ctx_82)"
"(parsed-lambda5.1 rebuild-s_4 formals_2 body_11)"
"(let-values(((rebuild-s63_0) rebuild-s_4)((temp64_6)(list* lambda52_0 formals_2 body_11)))"
"(rebuild5.1 #t rebuild-s63_0 temp64_6)))))))))))"
"(void"
"(add-core-form!*"
" 'λ"
"(lambda(s_26)"
"(let-values(((ok?_38 lam-id65_0 formals66_0 _67_0)"
"(let-values(((s_518) s_26))"
"(let-values(((orig-s_41) s_518))"
"(let-values(((lam-id65_1 formals66_1 _67_1)"
"(let-values(((s_501)(if(syntax?$1 s_518)(syntax-e$1 s_518) s_518)))"
"(if(pair? s_501)"
"(let-values(((lam-id68_0)(let-values(((s_506)(car s_501))) s_506))"
"((formals69_0 _70_0)"
"(let-values(((s_507)(cdr s_501)))"
"(let-values(((s_52)"
"(if(syntax?$1 s_507)(syntax-e$1 s_507) s_507)))"
"(if(pair? s_52)"
"(let-values(((formals71_0)"
"(let-values(((s_53)(car s_52))) s_53))"
"((_72_0)"
"(let-values(((s_54)(cdr s_52)))"
"(let-values(((s_312)"
"(if(syntax?$1 s_54)"
"(syntax-e$1 s_54)"
" s_54)))"
"(let-values(((flat-s_29)"
"(to-syntax-list.1 s_312)))"
"(if(not flat-s_29)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_41))"
"(if(null? flat-s_29)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_41))"
"(let-values() flat-s_29))))))))"
"(values formals71_0 _72_0))"
"                                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_41))))))"
"(values lam-id68_0 formals69_0 _70_0))"
"                                         (raise-syntax-error$1 #f \"bad syntax\" orig-s_41)))))"
"(values #t lam-id65_1 formals66_1 _67_1))))))"
"(let-values(((ids_35)(parse-and-flatten-formals formals66_0 #f s_26)))"
"(let-values(((ctx_75)(let-values(((temp77_4) #t))(get-current-expand-context16.1 temp77_4 'unexpected))))"
"(let-values(((phase_93)(if ctx_75(expand-context-phase ctx_75) 0)))"
"(begin"
"               (let-values (((ids73_0) ids_35) ((phase74_2) phase_93) ((s75_0) s_26) ((temp76_4) \"argument name\"))"
"(check-no-duplicate-ids7.1 temp76_4 ids73_0 phase74_2 s75_0 unsafe-undefined))"
"(datum->syntax$1"
" s_26"
"(cons"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_93) 'lambda lam-id65_0 lam-id65_0)"
"(cdr(syntax-e$1 s_26)))"
" s_26"
" s_26)))))))))"
"(void"
"(add-core-form!*"
" 'case-lambda"
"(lambda(s_454 ctx_83)"
"(let-values((()"
"(begin"
"(let-values(((obs_89)(expand-context-observer ctx_83)))"
"(if obs_89"
"(let-values()(let-values()(call-expand-observe obs_89 'prim-case-lambda)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_7)(syntax-disarm$1 s_454)))"
"(let-values(((ok?_39 case-lambda78_0 formals79_0 body80_0)"
"(let-values(((s_519) disarmed-s_7))"
"(let-values(((orig-s_42) s_519))"
"(let-values(((case-lambda78_1 formals79_1 body80_1)"
"(let-values(((s_415)(if(syntax?$1 s_519)(syntax-e$1 s_519) s_519)))"
"(if(pair? s_415)"
"(let-values(((case-lambda81_0)(let-values(((s_520)(car s_415))) s_520))"
"((formals82_0 body83_0)"
"(let-values(((s_407)(cdr s_415)))"
"(let-values(((s_521)"
"(if(syntax?$1 s_407)"
"(syntax-e$1 s_407)"
" s_407)))"
"(let-values(((flat-s_30)(to-syntax-list.1 s_521)))"
"(if(not flat-s_30)"
"(let-values()"
"                                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_42))"
"(let-values()"
"(let-values(((formals_3 body_12)"
"(let-values(((lst_333) flat-s_30))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_333)))"
"((letrec-values(((for-loop_290)"
"(lambda(formals_4"
" body_13"
" lst_334)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_334)"
"(let-values(((s_209)"
"(unsafe-car"
" lst_334))"
"((rest_198)"
"(unsafe-cdr"
" lst_334)))"
"(let-values(((formals_5"
" body_14)"
"(let-values(((formals_6)"
" formals_4)"
"((body_15)"
" body_13))"
"(let-values(((formals_7"
" body_16)"
"(let-values()"
"(let-values(((formals90_0"
" body91_0)"
"(let-values()"
"(let-values(((s_522)"
"(if(syntax?$1"
" s_209)"
"(syntax-e$1"
" s_209)"
" s_209)))"
"(if(pair?"
" s_522)"
"(let-values(((formals84_0)"
"(let-values(((s_523)"
"(car"
" s_522)))"
" s_523))"
"((body85_0)"
"(let-values(((s_524)"
"(cdr"
" s_522)))"
"(let-values(((s_525)"
"(if(syntax?$1"
" s_524)"
"(syntax-e$1"
" s_524)"
" s_524)))"
"(let-values(((flat-s_31)"
"(to-syntax-list.1"
" s_525)))"
"(if(not"
" flat-s_31)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                              \"bad syntax\""
" orig-s_42))"
"(if(null?"
" flat-s_31)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                \"bad syntax\""
" orig-s_42))"
"(let-values()"
" flat-s_31))))))))"
"(values"
" formals84_0"
" body85_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                      \"bad syntax\""
" orig-s_42))))))"
"(values"
"(cons"
" formals90_0"
" formals_6)"
"(cons"
" body91_0"
" body_15))))))"
"(values"
" formals_7"
" body_16)))))"
"(if(not"
" #f)"
"(for-loop_290"
" formals_5"
" body_14"
" rest_198)"
"(values"
" formals_5"
" body_14))))"
"(values"
" formals_4"
" body_13))))))"
" for-loop_290)"
" null"
" null"
" lst_333)))))"
"(values"
"(reverse$1 formals_3)"
"(reverse$1 body_12))))))))))"
"(values case-lambda81_0 formals82_0 body83_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_42)))))"
"(values #t case-lambda78_1 formals79_1 body80_1))))))"
"(let-values(((ok?_40 case-lambda86_0 clause87_0)"
"(let-values(((s_526) disarmed-s_7))"
"(let-values(((orig-s_43) s_526))"
"(let-values(((case-lambda86_1 clause87_1)"
"(let-values(((s_458)(if(syntax?$1 s_526)(syntax-e$1 s_526) s_526)))"
"(if(pair? s_458)"
"(let-values(((case-lambda88_0)"
"(let-values(((s_211)(car s_458))) s_211))"
"((clause89_0)"
"(let-values(((s_527)(cdr s_458)))"
"(let-values(((s_528)"
"(if(syntax?$1 s_527)"
"(syntax-e$1 s_527)"
" s_527)))"
"(let-values(((flat-s_32)(to-syntax-list.1 s_528)))"
"(if(not flat-s_32)"
"(let-values()"
"                                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_43))"
"(let-values() flat-s_32)))))))"
"(values case-lambda88_0 clause89_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_43)))))"
"(values #t case-lambda86_1 clause87_1))))))"
"(let-values(((rebuild-s_5)"
"(let-values(((ctx92_0) ctx_83)((s93_0) s_454)((temp94_0) #t))"
"(keep-as-needed119.1 #f #f temp94_0 ctx92_0 s93_0))))"
"(let-values(((clauses_1)"
"(reverse$1"
"(let-values(((lst_111) formals79_0)((lst_204) body80_0)((lst_112) clause87_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_111)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_204)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_112)))"
"((letrec-values(((for-loop_31)"
"(lambda(fold-var_197 lst_335 lst_336 lst_337)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_335)"
"(if(pair? lst_336)(pair? lst_337) #f)"
" #f)"
"(let-values(((formals_8)(unsafe-car lst_335))"
"((rest_199)(unsafe-cdr lst_335))"
"((body_17)(unsafe-car lst_336))"
"((rest_200)(unsafe-cdr lst_336))"
"((clause_3)(unsafe-car lst_337))"
"((rest_201)(unsafe-cdr lst_337)))"
"(let-values(((fold-var_313)"
"(let-values(((fold-var_314) fold-var_197))"
"(let-values(((fold-var_315)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_90)"
"(expand-context-observer"
" ctx_83)))"
"(if obs_90"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_90"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((rebuild-clause_0)"
"(let-values(((ctx95_0)"
" ctx_83)"
"((clause96_0)"
" clause_3))"
"(keep-as-needed119.1"
" #f"
" #f"
" #f"
" ctx95_0"
" clause96_0))))"
"(let-values(((exp-formals_0"
" exp-body_3)"
"(lambda-clause-expander"
" s_454"
" disarmed-s_7"
" formals_8"
" body_17"
" ctx_83"
" 'lambda-renames)))"
"(if(expand-context-to-parsed?"
" ctx_83)"
"(list"
" exp-formals_0"
" exp-body_3)"
"(let-values(((rebuild-clause97_0)"
" rebuild-clause_0)"
"((temp98_4)"
"(list*"
" exp-formals_0"
" exp-body_3)))"
"(rebuild5.1"
" #t"
" rebuild-clause97_0"
" temp98_4)))))))"
" fold-var_314))))"
"(values fold-var_315)))))"
"(if(not #f)"
"(for-loop_31 fold-var_313 rest_199 rest_200 rest_201)"
" fold-var_313)))"
" fold-var_197)))))"
" for-loop_31)"
" null"
" lst_111"
" lst_204"
" lst_112))))))"
"(if(expand-context-to-parsed? ctx_83)"
"(parsed-case-lambda6.1 rebuild-s_5 clauses_1)"
"(let-values(((rebuild-s99_0) rebuild-s_5)((temp100_2)(list* case-lambda78_0 clauses_1)))"
"(rebuild5.1 #t rebuild-s99_0 temp100_2))))))))))))"
"(define-values"
"(parse-and-flatten-formals)"
"(lambda(all-formals_0 sc_38 s_529)"
"(begin"
"((letrec-values(((loop_121)"
"(lambda(formals_9)"
"(begin"
" 'loop"
"(if(identifier? formals_9)"
"(let-values()(list(add-scope formals_9 sc_38)))"
"(if(syntax?$1 formals_9)"
"(let-values()"
"(let-values(((p_86)(syntax-e$1 formals_9)))"
"(if(pair? p_86)"
"(let-values()(loop_121 p_86))"
"(if(null? p_86)"
"(let-values() null)"
"                                        (let-values () (raise-syntax-error$1 #f \"not an identifier\" s_529 p_86))))))"
"(if(pair? formals_9)"
"(let-values()"
"(begin"
"(if(identifier?(car formals_9))"
"(void)"
"(let-values()"
"                                          (raise-syntax-error$1 #f \"not an identifier\" s_529 (car formals_9))))"
"(cons"
"(if sc_38(add-scope(car formals_9) sc_38)(car formals_9))"
"(loop_121(cdr formals_9)))))"
"(if(null? formals_9)"
"(let-values() null)"
"(let-values()"
"                                      (raise-syntax-error$1 \"bad argument sequence\" s_529 all-formals_0))))))))))"
" loop_121)"
" all-formals_0))))"
"(define-values"
"(unflatten-like-formals)"
"(lambda(keys_8 formals_10)"
"(begin"
"((letrec-values(((loop_122)"
"(lambda(keys_9 formals_11)"
"(begin"
" 'loop"
"(if(null? formals_11)"
"(let-values() null)"
"(if(pair? formals_11)"
"(let-values()(cons(car keys_9)(loop_122(cdr keys_9)(cdr formals_11))))"
"(if(syntax?$1 formals_11)"
"(let-values()(loop_122 keys_9(syntax-e$1 formals_11)))"
"(let-values()(car keys_9)))))))))"
" loop_122)"
" keys_8"
" formals_10))))"
"(define-values"
"(make-let-values-form11.1)"
"(lambda(log-tag1_0 rec?3_0 renames-log-tag5_0 split-by-reference?4_0 syntaxes?2_0)"
"(begin"
" 'make-let-values-form11"
"(let-values(((log-tag_0) log-tag1_0))"
"(let-values(((syntaxes?_0) syntaxes?2_0))"
"(let-values(((rec?_1) rec?3_0))"
"(let-values(((split-by-reference?_0) split-by-reference?4_0))"
"(let-values(((renames-log-tag_0) renames-log-tag5_0))"
"(let-values()"
"(lambda(s_105 ctx_84)"
"(let-values((()"
"(begin"
"(let-values(((obs_53)(expand-context-observer ctx_84)))"
"(if obs_53"
"(let-values()(let-values()(call-expand-observe obs_53 log-tag_0)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_8)(syntax-disarm$1 s_105)))"
"(let-values(((ok?_41"
" letrec-syntaxes+values101_0"
" id:trans102_0"
" trans-rhs103_0"
" id:val104_0"
" val-rhs105_0"
" body106_0)"
"(let-values(((s_128) disarmed-s_8))"
"(if(if syntaxes?_0 #t #f)"
"(let-values(((orig-s_44) s_128))"
"(let-values(((letrec-syntaxes+values101_1"
" id:trans102_1"
" trans-rhs103_1"
" id:val104_1"
" val-rhs105_1"
" body106_1)"
"(let-values(((s_530)"
"(if(syntax?$1 s_128)"
"(syntax-e$1 s_128)"
" s_128)))"
"(if(pair? s_530)"
"(let-values(((letrec-syntaxes+values107_0)"
"(let-values(((s_531)(car s_530))) s_531))"
"((id:trans108_0"
" trans-rhs109_0"
" id:val110_0"
" val-rhs111_0"
" body112_0)"
"(let-values(((s_230)(cdr s_530)))"
"(let-values(((s_231)"
"(if(syntax?$1 s_230)"
"(syntax-e$1 s_230)"
" s_230)))"
"(if(pair? s_231)"
"(let-values(((id:trans113_0"
" trans-rhs114_0)"
"(let-values(((s_234)"
"(car"
" s_231)))"
"(let-values(((s_235)"
"(if(syntax?$1"
" s_234)"
"(syntax-e$1"
" s_234)"
" s_234)))"
"(let-values(((flat-s_33)"
"(to-syntax-list.1"
" s_235)))"
"(if(not"
" flat-s_33)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"bad syntax\""
" orig-s_44))"
"(let-values()"
"(let-values(((id:trans_0"
" trans-rhs_0)"
"(let-values(((lst_338)"
" flat-s_33))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_338)))"
"((letrec-values(((for-loop_291)"
"(lambda(id:trans_1"
" trans-rhs_1"
" lst_339)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_339)"
"(let-values(((s_334)"
"(unsafe-car"
" lst_339))"
"((rest_202)"
"(unsafe-cdr"
" lst_339)))"
"(let-values(((id:trans_2"
" trans-rhs_2)"
"(let-values(((id:trans_3)"
" id:trans_1)"
"((trans-rhs_3)"
" trans-rhs_1))"
"(let-values(((id:trans_4"
" trans-rhs_4)"
"(let-values()"
"(let-values(((id:trans144_0"
" trans-rhs145_0)"
"(let-values()"
"(let-values(((s_532)"
"(if(syntax?$1"
" s_334)"
"(syntax-e$1"
" s_334)"
" s_334)))"
"(if(pair?"
" s_532)"
"(let-values(((id:trans118_0)"
"(let-values(((s_340)"
"(car"
" s_532)))"
"(let-values(((s_341)"
"(if(syntax?$1"
" s_340)"
"(syntax-e$1"
" s_340)"
" s_340)))"
"(let-values(((flat-s_34)"
"(to-syntax-list.1"
" s_341)))"
"(if(not"
" flat-s_34)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_44))"
"(let-values()"
"(let-values(((id:trans_5)"
"(let-values(((lst_340)"
" flat-s_34))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_340)))"
"((letrec-values(((for-loop_292)"
"(lambda(id:trans_6"
" lst_216)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_216)"
"(let-values(((s_533)"
"(unsafe-car"
" lst_216))"
"((rest_203)"
"(unsafe-cdr"
" lst_216)))"
"(let-values(((id:trans_7)"
"(let-values(((id:trans_8)"
" id:trans_6))"
"(let-values(((id:trans_9)"
"(let-values()"
"(let-values(((id:trans146_0)"
"(let-values()"
"(if(let-values(((or-part_341)"
"(if(syntax?$1"
" s_533)"
"(symbol?"
"(syntax-e$1"
" s_533))"
" #f)))"
"(if or-part_341"
" or-part_341"
"(symbol?"
" s_533)))"
" s_533"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                 \"not an identifier\""
" orig-s_44"
" s_533)))))"
"(cons"
" id:trans146_0"
" id:trans_8)))))"
"(values"
" id:trans_9)))))"
"(if(not"
" #f)"
"(for-loop_292"
" id:trans_7"
" rest_203)"
" id:trans_7)))"
" id:trans_6)))))"
" for-loop_292)"
" null"
" lst_340)))))"
"(reverse$1"
" id:trans_5))))))))"
"((trans-rhs119_0)"
"(let-values(((s_242)"
"(cdr"
" s_532)))"
"(let-values(((s_534)"
"(if(syntax?$1"
" s_242)"
"(syntax-e$1"
" s_242)"
" s_242)))"
"(if(pair?"
" s_534)"
"(let-values(((trans-rhs120_0)"
"(let-values(((s_243)"
"(car"
" s_534)))"
" s_243))"
"(()"
"(let-values(((s_244)"
"(cdr"
" s_534)))"
"(let-values(((s_245)"
"(if(syntax?$1"
" s_244)"
"(syntax-e$1"
" s_244)"
" s_244)))"
"(if(null?"
" s_245)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_44))))))"
"(values"
" trans-rhs120_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_44))))))"
"(values"
" id:trans118_0"
" trans-rhs119_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_44))))))"
"(values"
"(cons"
" id:trans144_0"
" id:trans_3)"
"(cons"
" trans-rhs145_0"
" trans-rhs_3))))))"
"(values"
" id:trans_4"
" trans-rhs_4)))))"
"(if(not"
" #f)"
"(for-loop_291"
" id:trans_2"
" trans-rhs_2"
" rest_202)"
"(values"
" id:trans_2"
" trans-rhs_2))))"
"(values"
" id:trans_1"
" trans-rhs_1))))))"
" for-loop_291)"
" null"
" null"
" lst_338)))))"
"(values"
"(reverse$1"
" id:trans_0)"
"(reverse$1"
" trans-rhs_0)))))))))"
"((id:val115_0"
" val-rhs116_0"
" body117_0)"
"(let-values(((s_535)"
"(cdr"
" s_231)))"
"(let-values(((s_347)"
"(if(syntax?$1"
" s_535)"
"(syntax-e$1"
" s_535)"
" s_535)))"
"(if(pair? s_347)"
"(let-values(((id:val121_0"
" val-rhs122_0)"
"(let-values(((s_536)"
"(car"
" s_347)))"
"(let-values(((s_246)"
"(if(syntax?$1"
" s_536)"
"(syntax-e$1"
" s_536)"
" s_536)))"
"(let-values(((flat-s_35)"
"(to-syntax-list.1"
" s_246)))"
"(if(not"
" flat-s_35)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_44))"
"(let-values()"
"(let-values(((id:val_0"
" val-rhs_1)"
"(let-values(((lst_341)"
" flat-s_35))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_341)))"
"((letrec-values(((for-loop_293)"
"(lambda(id:val_1"
" val-rhs_2"
" lst_342)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_342)"
"(let-values(((s_537)"
"(unsafe-car"
" lst_342))"
"((rest_204)"
"(unsafe-cdr"
" lst_342)))"
"(let-values(((id:val_2"
" val-rhs_3)"
"(let-values(((id:val_3)"
" id:val_1)"
"((val-rhs_4)"
" val-rhs_2))"
"(let-values(((id:val_4"
" val-rhs_5)"
"(let-values()"
"(let-values(((id:val147_0"
" val-rhs148_0)"
"(let-values()"
"(let-values(((s_538)"
"(if(syntax?$1"
" s_537)"
"(syntax-e$1"
" s_537)"
" s_537)))"
"(if(pair?"
" s_538)"
"(let-values(((id:val124_0)"
"(let-values(((s_473)"
"(car"
" s_538)))"
"(let-values(((s_539)"
"(if(syntax?$1"
" s_473)"
"(syntax-e$1"
" s_473)"
" s_473)))"
"(let-values(((flat-s_36)"
"(to-syntax-list.1"
" s_539)))"
"(if(not"
" flat-s_36)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_44))"
"(let-values()"
"(let-values(((id:val_5)"
"(let-values(((lst_343)"
" flat-s_36))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_343)))"
"((letrec-values(((for-loop_294)"
"(lambda(id:val_6"
" lst_123)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_123)"
"(let-values(((s_540)"
"(unsafe-car"
" lst_123))"
"((rest_62)"
"(unsafe-cdr"
" lst_123)))"
"(let-values(((id:val_7)"
"(let-values(((id:val_8)"
" id:val_6))"
"(let-values(((id:val_9)"
"(let-values()"
"(let-values(((id:val149_0)"
"(let-values()"
"(if(let-values(((or-part_379)"
"(if(syntax?$1"
" s_540)"
"(symbol?"
"(syntax-e$1"
" s_540))"
" #f)))"
"(if or-part_379"
" or-part_379"
"(symbol?"
" s_540)))"
" s_540"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                     \"not an identifier\""
" orig-s_44"
" s_540)))))"
"(cons"
" id:val149_0"
" id:val_8)))))"
"(values"
" id:val_9)))))"
"(if(not"
" #f)"
"(for-loop_294"
" id:val_7"
" rest_62)"
" id:val_7)))"
" id:val_6)))))"
" for-loop_294)"
" null"
" lst_343)))))"
"(reverse$1"
" id:val_5))))))))"
"((val-rhs125_0)"
"(let-values(((s_353)"
"(cdr"
" s_538)))"
"(let-values(((s_248)"
"(if(syntax?$1"
" s_353)"
"(syntax-e$1"
" s_353)"
" s_353)))"
"(if(pair?"
" s_248)"
"(let-values(((val-rhs126_0)"
"(let-values(((s_355)"
"(car"
" s_248)))"
" s_355))"
"(()"
"(let-values(((s_541)"
"(cdr"
" s_248)))"
"(let-values(((s_356)"
"(if(syntax?$1"
" s_541)"
"(syntax-e$1"
" s_541)"
" s_541)))"
"(if(null?"
" s_356)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_44))))))"
"(values"
" val-rhs126_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_44))))))"
"(values"
" id:val124_0"
" val-rhs125_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_44))))))"
"(values"
"(cons"
" id:val147_0"
" id:val_3)"
"(cons"
" val-rhs148_0"
" val-rhs_4))))))"
"(values"
" id:val_4"
" val-rhs_5)))))"
"(if(not"
" #f)"
"(for-loop_293"
" id:val_2"
" val-rhs_3"
" rest_204)"
"(values"
" id:val_2"
" val-rhs_3))))"
"(values"
" id:val_1"
" val-rhs_2))))))"
" for-loop_293)"
" null"
" null"
" lst_341)))))"
"(values"
"(reverse$1"
" id:val_0)"
"(reverse$1"
" val-rhs_1)))))))))"
"((body123_0)"
"(let-values(((s_249)"
"(cdr"
" s_347)))"
"(let-values(((s_250)"
"(if(syntax?$1"
" s_249)"
"(syntax-e$1"
" s_249)"
" s_249)))"
"(let-values(((flat-s_37)"
"(to-syntax-list.1"
" s_250)))"
"(if(not"
" flat-s_37)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                               \"bad syntax\""
" orig-s_44))"
"(if(null?"
" flat-s_37)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_44))"
"(let-values()"
" flat-s_37))))))))"
"(values"
" id:val121_0"
" val-rhs122_0"
" body123_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                       \"bad syntax\""
" orig-s_44))))))"
"(values"
" id:trans113_0"
" trans-rhs114_0"
" id:val115_0"
" val-rhs116_0"
" body117_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_44))))))"
"(values"
" letrec-syntaxes+values107_0"
" id:trans108_0"
" trans-rhs109_0"
" id:val110_0"
" val-rhs111_0"
" body112_0))"
"                                                              (raise-syntax-error$1 #f \"bad syntax\" orig-s_44)))))"
"(values"
" #t"
" letrec-syntaxes+values101_1"
" id:trans102_1"
" trans-rhs103_1"
" id:val104_1"
" val-rhs105_1"
" body106_1)))"
"(values #f #f #f #f #f #f #f)))))"
"(let-values(((ok?_42 let-values127_0 id:val128_0 val-rhs129_0 body130_0)"
"(let-values(((s_357) disarmed-s_8))"
"(if(if(not syntaxes?_0) #t #f)"
"(let-values(((orig-s_45) s_357))"
"(let-values(((let-values127_1 id:val128_1 val-rhs129_1 body130_1)"
"(let-values(((s_254)"
"(if(syntax?$1 s_357)"
"(syntax-e$1 s_357)"
" s_357)))"
"(if(pair? s_254)"
"(let-values(((let-values131_0)"
"(let-values(((s_257)(car s_254)))"
" s_257))"
"((id:val132_0 val-rhs133_0 body134_0)"
"(let-values(((s_542)(cdr s_254)))"
"(let-values(((s_543)"
"(if(syntax?$1 s_542)"
"(syntax-e$1 s_542)"
" s_542)))"
"(if(pair? s_543)"
"(let-values(((id:val135_0"
" val-rhs136_0)"
"(let-values(((s_544)"
"(car"
" s_543)))"
"(let-values(((s_258)"
"(if(syntax?$1"
" s_544)"
"(syntax-e$1"
" s_544)"
" s_544)))"
"(let-values(((flat-s_38)"
"(to-syntax-list.1"
" s_258)))"
"(if(not"
" flat-s_38)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_45))"
"(let-values()"
"(let-values(((id:val_10"
" val-rhs_6)"
"(let-values(((lst_305)"
" flat-s_38))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_305)))"
"((letrec-values(((for-loop_295)"
"(lambda(id:val_11"
" val-rhs_7"
" lst_344)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_344)"
"(let-values(((s_545)"
"(unsafe-car"
" lst_344))"
"((rest_205)"
"(unsafe-cdr"
" lst_344)))"
"(let-values(((id:val_12"
" val-rhs_8)"
"(let-values(((id:val_13)"
" id:val_11)"
"((val-rhs_9)"
" val-rhs_7))"
"(let-values(((id:val_14"
" val-rhs_10)"
"(let-values()"
"(let-values(((id:val150_0"
" val-rhs151_0)"
"(let-values()"
"(let-values(((s_372)"
"(if(syntax?$1"
" s_545)"
"(syntax-e$1"
" s_545)"
" s_545)))"
"(if(pair?"
" s_372)"
"(let-values(((id:val138_0)"
"(let-values(((s_546)"
"(car"
" s_372)))"
"(let-values(((s_547)"
"(if(syntax?$1"
" s_546)"
"(syntax-e$1"
" s_546)"
" s_546)))"
"(let-values(((flat-s_39)"
"(to-syntax-list.1"
" s_547)))"
"(if(not"
" flat-s_39)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_45))"
"(let-values()"
"(let-values(((id:val_15)"
"(let-values(((lst_345)"
" flat-s_39))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_345)))"
"((letrec-values(((for-loop_296)"
"(lambda(id:val_16"
" lst_346)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_346)"
"(let-values(((s_548)"
"(unsafe-car"
" lst_346))"
"((rest_206)"
"(unsafe-cdr"
" lst_346)))"
"(let-values(((id:val_17)"
"(let-values(((id:val_18)"
" id:val_16))"
"(let-values(((id:val_19)"
"(let-values()"
"(let-values(((id:val152_0)"
"(let-values()"
"(if(let-values(((or-part_380)"
"(if(syntax?$1"
" s_548)"
"(symbol?"
"(syntax-e$1"
" s_548))"
" #f)))"
"(if or-part_380"
" or-part_380"
"(symbol?"
" s_548)))"
" s_548"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_45"
" s_548)))))"
"(cons"
" id:val152_0"
" id:val_18)))))"
"(values"
" id:val_19)))))"
"(if(not"
" #f)"
"(for-loop_296"
" id:val_17"
" rest_206)"
" id:val_17)))"
" id:val_16)))))"
" for-loop_296)"
" null"
" lst_345)))))"
"(reverse$1"
" id:val_15))))))))"
"((val-rhs139_0)"
"(let-values(((s_380)"
"(cdr"
" s_372)))"
"(let-values(((s_260)"
"(if(syntax?$1"
" s_380)"
"(syntax-e$1"
" s_380)"
" s_380)))"
"(if(pair?"
" s_260)"
"(let-values(((val-rhs140_0)"
"(let-values(((s_549)"
"(car"
" s_260)))"
" s_549))"
"(()"
"(let-values(((s_550)"
"(cdr"
" s_260)))"
"(let-values(((s_551)"
"(if(syntax?$1"
" s_550)"
"(syntax-e$1"
" s_550)"
" s_550)))"
"(if(null?"
" s_551)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_45))))))"
"(values"
" val-rhs140_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_45))))))"
"(values"
" id:val138_0"
" val-rhs139_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                             \"bad syntax\""
" orig-s_45))))))"
"(values"
"(cons"
" id:val150_0"
" id:val_13)"
"(cons"
" val-rhs151_0"
" val-rhs_9))))))"
"(values"
" id:val_14"
" val-rhs_10)))))"
"(if(not"
" #f)"
"(for-loop_295"
" id:val_12"
" val-rhs_8"
" rest_205)"
"(values"
" id:val_12"
" val-rhs_8))))"
"(values"
" id:val_11"
" val-rhs_7))))))"
" for-loop_295)"
" null"
" null"
" lst_305)))))"
"(values"
"(reverse$1"
" id:val_10)"
"(reverse$1"
" val-rhs_6)))))))))"
"((body137_0)"
"(let-values(((s_261)"
"(cdr"
" s_543)))"
"(let-values(((s_262)"
"(if(syntax?$1"
" s_261)"
"(syntax-e$1"
" s_261)"
" s_261)))"
"(let-values(((flat-s_40)"
"(to-syntax-list.1"
" s_262)))"
"(if(not"
" flat-s_40)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_45))"
"(if(null?"
" flat-s_40)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                               \"bad syntax\""
" orig-s_45))"
"(let-values()"
" flat-s_40))))))))"
"(values"
" id:val135_0"
" val-rhs136_0"
" body137_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_45))))))"
"(values"
" let-values131_0"
" id:val132_0"
" val-rhs133_0"
" body134_0))"
"                                                                (raise-syntax-error$1 #f \"bad syntax\" orig-s_45)))))"
"(values #t let-values127_1 id:val128_1 val-rhs129_1 body130_1)))"
"(values #f #f #f #f #f)))))"
"(let-values(((sc_39)(new-scope 'local)))"
"(let-values(((phase_83)(expand-context-phase ctx_84)))"
"(let-values(((frame-id_15)(if syntaxes?_0(make-reference-record) #f)))"
"(let-values(((trans-idss_2)"
"(reverse$1"
"(let-values(((lst_347)(if syntaxes?_0 id:trans102_0 null)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_347)))"
"((letrec-values(((for-loop_297)"
"(lambda(fold-var_316 lst_348)"
"(begin"
" 'for-loop"
"(if(pair? lst_348)"
"(let-values(((ids_36)"
"(unsafe-car lst_348))"
"((rest_207)"
"(unsafe-cdr lst_348)))"
"(let-values(((fold-var_113)"
"(let-values(((fold-var_114)"
" fold-var_316))"
"(let-values(((fold-var_115)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_349)"
" ids_36))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_349)))"
"((letrec-values(((for-loop_298)"
"(lambda(fold-var_317"
" lst_350)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_350)"
"(let-values(((id_116)"
"(unsafe-car"
" lst_350))"
"((rest_208)"
"(unsafe-cdr"
" lst_350)))"
"(let-values(((fold-var_318)"
"(let-values(((fold-var_319)"
" fold-var_317))"
"(let-values(((fold-var_320)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_116"
" sc_39))"
" fold-var_319))))"
"(values"
" fold-var_320)))))"
"(if(not"
" #f)"
"(for-loop_298"
" fold-var_318"
" rest_208)"
" fold-var_318)))"
" fold-var_317)))))"
" for-loop_298)"
" null"
" lst_349)))))"
" fold-var_114))))"
"(values"
" fold-var_115)))))"
"(if(not #f)"
"(for-loop_297 fold-var_113 rest_207)"
" fold-var_113)))"
" fold-var_316)))))"
" for-loop_297)"
" null"
" lst_347))))))"
"(let-values(((val-idss_3)"
"(reverse$1"
"(let-values(((lst_351)(if syntaxes?_0 id:val104_0 id:val128_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_351)))"
"((letrec-values(((for-loop_299)"
"(lambda(fold-var_321 lst_352)"
"(begin"
" 'for-loop"
"(if(pair? lst_352)"
"(let-values(((ids_37)"
"(unsafe-car lst_352))"
"((rest_209)"
"(unsafe-cdr lst_352)))"
"(let-values(((fold-var_322)"
"(let-values(((fold-var_323)"
" fold-var_321))"
"(let-values(((fold-var_324)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_353)"
" ids_37))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_353)))"
"((letrec-values(((for-loop_300)"
"(lambda(fold-var_325"
" lst_354)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_354)"
"(let-values(((id_117)"
"(unsafe-car"
" lst_354))"
"((rest_210)"
"(unsafe-cdr"
" lst_354)))"
"(let-values(((fold-var_326)"
"(let-values(((fold-var_327)"
" fold-var_325))"
"(let-values(((fold-var_328)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_117"
" sc_39))"
" fold-var_327))))"
"(values"
" fold-var_328)))))"
"(if(not"
" #f)"
"(for-loop_300"
" fold-var_326"
" rest_210)"
" fold-var_326)))"
" fold-var_325)))))"
" for-loop_300)"
" null"
" lst_353)))))"
" fold-var_323))))"
"(values"
" fold-var_324)))))"
"(if(not #f)"
"(for-loop_299"
" fold-var_322"
" rest_209)"
" fold-var_322)))"
" fold-var_321)))))"
" for-loop_299)"
" null"
" lst_351))))))"
"(let-values(((val-rhss_3)"
"(if rec?_1"
"(reverse$1"
"(let-values(((lst_355)"
"(if syntaxes?_0 val-rhs105_0 val-rhs129_0)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_355)))"
"((letrec-values(((for-loop_301)"
"(lambda(fold-var_329 lst_356)"
"(begin"
" 'for-loop"
"(if(pair? lst_356)"
"(let-values(((rhs_20)"
"(unsafe-car lst_356))"
"((rest_211)"
"(unsafe-cdr lst_356)))"
"(let-values(((fold-var_330)"
"(let-values(((fold-var_331)"
" fold-var_329))"
"(let-values(((fold-var_332)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" rhs_20"
" sc_39))"
" fold-var_331))))"
"(values"
" fold-var_332)))))"
"(if(not #f)"
"(for-loop_301"
" fold-var_330"
" rest_211)"
" fold-var_330)))"
" fold-var_329)))))"
" for-loop_301)"
" null"
" lst_355))))"
"(if syntaxes?_0 val-rhs105_0 val-rhs129_0))))"
"(let-values(((val-clauses_0)"
"(if syntaxes?_0"
"(let-values()"
"(let-values(((ok?_43 _153_0 _154_0 clause155_0 _156_0)"
"(let-values(((s_142) disarmed-s_8))"
"(let-values(((orig-s_46) s_142))"
"(let-values(((_153_1"
" _154_1"
" clause155_1"
" _156_1)"
"(let-values(((s_552)"
"(if(syntax?$1"
" s_142)"
"(syntax-e$1"
" s_142)"
" s_142)))"
"(if(pair? s_552)"
"(let-values(((_157_0)"
"(let-values(((s_553)"
"(car"
" s_552)))"
" s_553))"
"((_158_0"
" clause159_0"
" _160_0)"
"(let-values(((s_554)"
"(cdr"
" s_552)))"
"(let-values(((s_555)"
"(if(syntax?$1"
" s_554)"
"(syntax-e$1"
" s_554)"
" s_554)))"
"(if(pair?"
" s_555)"
"(let-values(((_161_0)"
"(let-values(((s_556)"
"(car"
" s_555)))"
" s_556))"
"((clause162_0"
" _163_0)"
"(let-values(((s_557)"
"(cdr"
" s_555)))"
"(let-values(((s_558)"
"(if(syntax?$1"
" s_557)"
"(syntax-e$1"
" s_557)"
" s_557)))"
"(if(pair?"
" s_558)"
"(let-values(((clause164_0)"
"(let-values(((s_559)"
"(car"
" s_558)))"
"(let-values(((s_560)"
"(if(syntax?$1"
" s_559)"
"(syntax-e$1"
" s_559)"
" s_559)))"
"(let-values(((flat-s_41)"
"(to-syntax-list.1"
" s_560)))"
"(if(not"
" flat-s_41)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                               \"bad syntax\""
" orig-s_46))"
"(let-values()"
" flat-s_41))))))"
"((_165_0)"
"(let-values(((s_561)"
"(cdr"
" s_558)))"
" s_561)))"
"(values"
" clause164_0"
" _165_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                       \"bad syntax\""
" orig-s_46))))))"
"(values"
" _161_0"
" clause162_0"
" _163_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_46))))))"
"(values"
" _157_0"
" _158_0"
" clause159_0"
" _160_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_46)))))"
"(values"
" #t"
" _153_1"
" _154_1"
" clause155_1"
" _156_1))))))"
" clause155_0))"
"(let-values()"
"(let-values(((ok?_44 _166_0 clause167_0 _168_0)"
"(let-values(((s_145) disarmed-s_8))"
"(let-values(((orig-s_47) s_145))"
"(let-values(((_166_1 clause167_1 _168_1)"
"(let-values(((s_562)"
"(if(syntax?$1"
" s_145)"
"(syntax-e$1"
" s_145)"
" s_145)))"
"(if(pair? s_562)"
"(let-values(((_169_0)"
"(let-values(((s_563)"
"(car"
" s_562)))"
" s_563))"
"((clause170_0"
" _171_0)"
"(let-values(((s_564)"
"(cdr"
" s_562)))"
"(let-values(((s_565)"
"(if(syntax?$1"
" s_564)"
"(syntax-e$1"
" s_564)"
" s_564)))"
"(if(pair?"
" s_565)"
"(let-values(((clause172_0)"
"(let-values(((s_566)"
"(car"
" s_565)))"
"(let-values(((s_567)"
"(if(syntax?$1"
" s_566)"
"(syntax-e$1"
" s_566)"
" s_566)))"
"(let-values(((flat-s_42)"
"(to-syntax-list.1"
" s_567)))"
"(if(not"
" flat-s_42)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                           \"bad syntax\""
" orig-s_47))"
"(let-values()"
" flat-s_42))))))"
"((_173_0)"
"(let-values(((s_568)"
"(cdr"
" s_565)))"
" s_568)))"
"(values"
" clause172_0"
" _173_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                   \"bad syntax\""
" orig-s_47))))))"
"(values"
" _169_0"
" clause170_0"
" _171_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_47)))))"
"(values #t _166_1 clause167_1 _168_1))))))"
" clause167_0)))))"
"(let-values((()"
"(begin"
"(let-values(((temp141_3)(list trans-idss_2 val-idss_3))"
"((phase142_0) phase_83)"
"((s143_0) s_105))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" temp141_3"
" phase142_0"
" s143_0"
" unsafe-undefined))"
"(values))))"
"(let-values(((counter_8)(root-expand-context-counter ctx_84)))"
"(let-values(((trans-keyss_0)"
"(reverse$1"
"(let-values(((lst_357) trans-idss_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_357)))"
"((letrec-values(((for-loop_302)"
"(lambda(fold-var_333 lst_358)"
"(begin"
" 'for-loop"
"(if(pair? lst_358)"
"(let-values(((ids_38)"
"(unsafe-car"
" lst_358))"
"((rest_212)"
"(unsafe-cdr"
" lst_358)))"
"(let-values(((fold-var_334)"
"(let-values(((fold-var_335)"
" fold-var_333))"
"(let-values(((fold-var_336)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_359)"
" ids_38))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_359)))"
"((letrec-values(((for-loop_303)"
"(lambda(fold-var_337"
" lst_360)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_360)"
"(let-values(((id_118)"
"(unsafe-car"
" lst_360))"
"((rest_213)"
"(unsafe-cdr"
" lst_360)))"
"(let-values(((fold-var_338)"
"(let-values(((fold-var_339)"
" fold-var_337))"
"(let-values(((fold-var_340)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id174_0)"
" id_118)"
"((phase175_0)"
" phase_83)"
"((counter176_0)"
" counter_8)"
"((frame-id177_0)"
" frame-id_15)"
"((s178_0)"
" s_105))"
"(add-local-binding!37.1"
" frame-id177_0"
" s178_0"
" id174_0"
" phase175_0"
" counter176_0)))"
" fold-var_339))))"
"(values"
" fold-var_340)))))"
"(if(not"
" #f)"
"(for-loop_303"
" fold-var_338"
" rest_213)"
" fold-var_338)))"
" fold-var_337)))))"
" for-loop_303)"
" null"
" lst_359)))))"
" fold-var_335))))"
"(values"
" fold-var_336)))))"
"(if(not #f)"
"(for-loop_302"
" fold-var_334"
" rest_212)"
" fold-var_334)))"
" fold-var_333)))))"
" for-loop_302)"
" null"
" lst_357))))))"
"(let-values(((val-keyss_2)"
"(reverse$1"
"(let-values(((lst_361) val-idss_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_361)))"
"((letrec-values(((for-loop_304)"
"(lambda(fold-var_341 lst_362)"
"(begin"
" 'for-loop"
"(if(pair? lst_362)"
"(let-values(((ids_39)"
"(unsafe-car"
" lst_362))"
"((rest_214)"
"(unsafe-cdr"
" lst_362)))"
"(let-values(((fold-var_342)"
"(let-values(((fold-var_343)"
" fold-var_341))"
"(let-values(((fold-var_118)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_131)"
" ids_39))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_131)))"
"((letrec-values(((for-loop_305)"
"(lambda(fold-var_344"
" lst_363)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_363)"
"(let-values(((id_119)"
"(unsafe-car"
" lst_363))"
"((rest_215)"
"(unsafe-cdr"
" lst_363)))"
"(let-values(((fold-var_345)"
"(let-values(((fold-var_346)"
" fold-var_344))"
"(let-values(((fold-var_347)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((id179_0)"
" id_119)"
"((phase180_0)"
" phase_83)"
"((counter181_0)"
" counter_8)"
"((frame-id182_0)"
" frame-id_15)"
"((s183_0)"
" s_105))"
"(add-local-binding!37.1"
" frame-id182_0"
" s183_0"
" id179_0"
" phase180_0"
" counter181_0)))"
" fold-var_346))))"
"(values"
" fold-var_347)))))"
"(if(not"
" #f)"
"(for-loop_305"
" fold-var_345"
" rest_215)"
" fold-var_345)))"
" fold-var_344)))))"
" for-loop_305)"
" null"
" lst_131)))))"
" fold-var_343))))"
"(values"
" fold-var_118)))))"
"(if(not #f)"
"(for-loop_304"
" fold-var_342"
" rest_214)"
" fold-var_342)))"
" fold-var_341)))))"
" for-loop_304)"
" null"
" lst_361))))))"
"(let-values(((bodys_10)"
"(reverse$1"
"(let-values(((lst_364)"
"(if syntaxes?_0 body106_0 body130_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_364)))"
"((letrec-values(((for-loop_306)"
"(lambda(fold-var_348 lst_365)"
"(begin"
" 'for-loop"
"(if(pair? lst_365)"
"(let-values(((body_18)"
"(unsafe-car"
" lst_365))"
"((rest_216)"
"(unsafe-cdr"
" lst_365)))"
"(let-values(((fold-var_123)"
"(let-values(((fold-var_349)"
" fold-var_348))"
"(let-values(((fold-var_48)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" body_18"
" sc_39))"
" fold-var_349))))"
"(values"
" fold-var_48)))))"
"(if(not #f)"
"(for-loop_306"
" fold-var_123"
" rest_216)"
" fold-var_123)))"
" fold-var_348)))))"
" for-loop_306)"
" null"
" lst_364))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_91)"
"(expand-context-observer ctx_84)))"
"(if obs_91"
"(let-values()"
"(log-let-renames"
" obs_91"
" renames-log-tag_0"
" val-idss_3"
" val-rhss_3"
" bodys_10"
" trans-idss_2"
"(if syntaxes?_0 trans-rhs103_0 #f)"
" sc_39))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if syntaxes?_0"
"(let-values()"
"(begin"
"(let-values(((obs_92)"
"(expand-context-observer"
" ctx_84)))"
"(if obs_92"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_92"
" 'prepare-env)))"
"(void)))"
"(prepare-next-phase-namespace ctx_84)))"
"(void))"
"(values))))"
"(let-values(((trans-valss_0)"
"(reverse$1"
"(let-values(((lst_63)"
"(if syntaxes?_0"
" trans-rhs103_0"
" '()))"
"((lst_366) trans-idss_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_63)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_366)))"
"((letrec-values(((for-loop_307)"
"(lambda(fold-var_350"
" lst_367"
" lst_368)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_367)"
"(pair? lst_368)"
" #f)"
"(let-values(((rhs_21)"
"(unsafe-car"
" lst_367))"
"((rest_217)"
"(unsafe-cdr"
" lst_367))"
"((ids_40)"
"(unsafe-car"
" lst_368))"
"((rest_218)"
"(unsafe-cdr"
" lst_368)))"
"(let-values(((fold-var_351)"
"(let-values(((fold-var_352)"
" fold-var_350))"
"(let-values(((fold-var_353)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_93)"
"(expand-context-observer"
" ctx_84)))"
"(if obs_93"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_93"
" 'next)"
"(call-expand-observe"
" obs_93"
" 'enter-bind))))"
"(void)))"
"(values))))"
"(let-values(((trans-val_1)"
"(eval-for-syntaxes-binding"
" 'letrec-syntaxes+values"
"(add-scope"
" rhs_21"
" sc_39)"
" ids_40"
" ctx_84)))"
"(begin"
"(let-values(((obs_94)"
"(expand-context-observer"
" ctx_84)))"
"(if obs_94"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_94"
" 'exit-bind)))"
"(void)))"
" trans-val_1))))"
" fold-var_352))))"
"(values"
" fold-var_353)))))"
"(if(not #f)"
"(for-loop_307"
" fold-var_351"
" rest_217"
" rest_218)"
" fold-var_351)))"
" fold-var_350)))))"
" for-loop_307)"
" null"
" lst_63"
" lst_366))))))"
"(let-values(((rec-val-env_0)"
"(let-values(((lst_369) val-keyss_2)"
"((lst_135) val-idss_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_369)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_135)))"
"((letrec-values(((for-loop_308)"
"(lambda(env_29"
" lst_370"
" lst_371)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_370)"
"(pair? lst_371)"
" #f)"
"(let-values(((keys_10)"
"(unsafe-car"
" lst_370))"
"((rest_219)"
"(unsafe-cdr"
" lst_370))"
"((ids_41)"
"(unsafe-car"
" lst_371))"
"((rest_220)"
"(unsafe-cdr"
" lst_371)))"
"(let-values(((env_30)"
"(let-values(((env_31)"
" env_29))"
"(let-values(((lst_372)"
" keys_10)"
"((lst_373)"
" ids_41))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_372)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_373)))"
"((letrec-values(((for-loop_309)"
"(lambda(env_32"
" lst_374"
" lst_375)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_374)"
"(pair?"
" lst_375)"
" #f)"
"(let-values(((key_91)"
"(unsafe-car"
" lst_374))"
"((rest_221)"
"(unsafe-cdr"
" lst_374))"
"((id_120)"
"(unsafe-car"
" lst_375))"
"((rest_222)"
"(unsafe-cdr"
" lst_375)))"
"(let-values(((env_33)"
"(let-values(((env_34)"
" env_32))"
"(let-values(((env_35)"
"(let-values()"
"(env-extend"
" env_34"
" key_91"
"(local-variable1.1"
" id_120)))))"
"(values"
" env_35)))))"
"(if(not"
" #f)"
"(for-loop_309"
" env_33"
" rest_221"
" rest_222)"
" env_33)))"
" env_32)))))"
" for-loop_309)"
" env_31"
" lst_372"
" lst_373))))))"
"(if(not #f)"
"(for-loop_308"
" env_30"
" rest_219"
" rest_220)"
" env_30)))"
" env_29)))))"
" for-loop_308)"
"(expand-context-env ctx_84)"
" lst_369"
" lst_135)))))"
"(let-values(((rec-env_0)"
"(let-values(((lst_376) trans-keyss_0)"
"((lst_377) trans-valss_0)"
"((lst_378) trans-idss_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_376)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_377)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_378)))"
"((letrec-values(((for-loop_310)"
"(lambda(env_36"
" lst_379"
" lst_380"
" lst_381)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_379)"
"(if(pair?"
" lst_380)"
"(pair?"
" lst_381)"
" #f)"
" #f)"
"(let-values(((keys_11)"
"(unsafe-car"
" lst_379))"
"((rest_223)"
"(unsafe-cdr"
" lst_379))"
"((vals_9)"
"(unsafe-car"
" lst_380))"
"((rest_224)"
"(unsafe-cdr"
" lst_380))"
"((ids_42)"
"(unsafe-car"
" lst_381))"
"((rest_225)"
"(unsafe-cdr"
" lst_381)))"
"(let-values(((env_37)"
"(let-values(((env_38)"
" env_36))"
"(let-values(((env_39)"
"(let-values()"
"(let-values(((lst_382)"
" keys_11)"
"((lst_383)"
" vals_9)"
"((lst_384)"
" ids_42))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_382)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_383)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_384)))"
"((letrec-values(((for-loop_311)"
"(lambda(env_40"
" lst_385"
" lst_386"
" lst_387)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_385)"
"(if(pair?"
" lst_386)"
"(pair?"
" lst_387)"
" #f)"
" #f)"
"(let-values(((key_92)"
"(unsafe-car"
" lst_385))"
"((rest_226)"
"(unsafe-cdr"
" lst_385))"
"((val_86)"
"(unsafe-car"
" lst_386))"
"((rest_227)"
"(unsafe-cdr"
" lst_386))"
"((id_121)"
"(unsafe-car"
" lst_387))"
"((rest_228)"
"(unsafe-cdr"
" lst_387)))"
"(let-values(((env_41)"
"(let-values(((env_42)"
" env_40))"
"(let-values(((env_43)"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_86"
" id_121"
" phase_83"
" ctx_84)"
"(env-extend"
" env_42"
" key_92"
" val_86)))))"
"(values"
" env_43)))))"
"(if(not"
" #f)"
"(for-loop_311"
" env_41"
" rest_226"
" rest_227"
" rest_228)"
" env_41)))"
" env_40)))))"
" for-loop_311)"
" env_38"
" lst_382"
" lst_383"
" lst_384))))))"
"(values"
" env_39)))))"
"(if(not #f)"
"(for-loop_310"
" env_37"
" rest_223"
" rest_224"
" rest_225)"
" env_37)))"
" env_36)))))"
" for-loop_310)"
" rec-val-env_0"
" lst_376"
" lst_377"
" lst_378)))))"
"(let-values(((expr-ctx_0)"
"(as-expression-context ctx_84)))"
"(let-values(((orig-rrs_0)"
"(expand-context-reference-records"
" expr-ctx_0)))"
"(let-values(((rec-ctx_0)"
"(let-values(((v_182) expr-ctx_0))"
"(let-values(((the-struct_97) v_182))"
"(if(expand-context/outer?"
" the-struct_97)"
"(let-values(((env184_0)"
" rec-env_0)"
"((scopes185_0)"
"(cons"
" sc_39"
"(expand-context-scopes"
" ctx_84)))"
"((reference-records186_0)"
"(if split-by-reference?_0"
"(cons"
" frame-id_15"
" orig-rrs_0)"
" orig-rrs_0))"
"((binding-layer187_0)"
"(increment-binding-layer"
"(cons"
" trans-idss_2"
" val-idss_3)"
" ctx_84"
" sc_39))"
"((inner188_0)"
"(root-expand-context/outer-inner"
" v_182)))"
"(expand-context/outer1.1"
" inner188_0"
"(root-expand-context/outer-post-expansion"
" the-struct_97)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_97)"
"(root-expand-context/outer-frame-id"
" the-struct_97)"
"(expand-context/outer-context"
" the-struct_97)"
" env184_0"
" scopes185_0"
"(expand-context/outer-def-ctx-scopes"
" the-struct_97)"
" binding-layer187_0"
" reference-records186_0"
"(expand-context/outer-only-immediate?"
" the-struct_97)"
"(expand-context/outer-need-eventually-defined"
" the-struct_97)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_97)"
"(expand-context/outer-current-use-scopes"
" the-struct_97)"
"(expand-context/outer-name"
" the-struct_97)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                       \"expand-context/outer?\""
" the-struct_97))))))"
"(let-values(((letrec-values-id_0)"
"(if(not"
"(expand-context-to-parsed?"
" ctx_84))"
"(if syntaxes?_0"
"(core-id 'letrec-values phase_83)"
" let-values127_0)"
" #f)))"
"(let-values(((rebuild-s_6)"
"(let-values(((ctx189_0) ctx_84)"
"((s190_1) s_105)"
"((temp191_1) #t))"
"(keep-as-needed119.1"
" #f"
" temp191_1"
" #f"
" ctx189_0"
" s190_1))))"
"(let-values(((val-name-idss_0)"
"(if(expand-context-to-parsed?"
" ctx_84)"
"(reverse$1"
"(let-values(((lst_254)"
" val-idss_3))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_254)))"
"((letrec-values(((for-loop_231)"
"(lambda(fold-var_354"
" lst_255)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_255)"
"(let-values(((val-ids_1)"
"(unsafe-car"
" lst_255))"
"((rest_139)"
"(unsafe-cdr"
" lst_255)))"
"(let-values(((fold-var_355)"
"(let-values(((fold-var_356)"
" fold-var_354))"
"(let-values(((fold-var_357)"
"(let-values()"
"(cons"
"(let-values()"
"(reverse$1"
"(let-values(((lst_388)"
" val-ids_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_388)))"
"((letrec-values(((for-loop_312)"
"(lambda(fold-var_358"
" lst_389)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_389)"
"(let-values(((val-id_0)"
"(unsafe-car"
" lst_389))"
"((rest_229)"
"(unsafe-cdr"
" lst_389)))"
"(let-values(((fold-var_359)"
"(let-values(((fold-var_132)"
" fold-var_358))"
"(let-values(((fold-var_360)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(syntax-e$1"
" val-id_0)"
" val-id_0"
" val-id_0))"
" fold-var_132))))"
"(values"
" fold-var_360)))))"
"(if(not"
" #f)"
"(for-loop_312"
" fold-var_359"
" rest_229)"
" fold-var_359)))"
" fold-var_358)))))"
" for-loop_312)"
" null"
" lst_388)))))"
" fold-var_356))))"
"(values"
" fold-var_357)))))"
"(if(not"
" #f)"
"(for-loop_231"
" fold-var_355"
" rest_139)"
" fold-var_355)))"
" fold-var_354)))))"
" for-loop_231)"
" null"
" lst_254))))"
" val-idss_3)))"
"(let-values((()"
"(begin"
"(if syntaxes?_0"
"(let-values()"
"(let-values(((obs_95)"
"(expand-context-observer"
" ctx_84)))"
"(if obs_95"
"(let-values()"
"(log-letrec-values"
" obs_95"
" val-idss_3"
" val-rhss_3"
" bodys_10))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((get-body_1)"
"(lambda()"
"(begin"
" 'get-body"
"(let-values((()"
"(begin"
"(let-values(((obs_96)"
"(expand-context-observer"
" ctx_84)))"
"(if obs_96"
"(let-values()"
"(if(not"
"(if syntaxes?_0"
"(null?"
" val-idss_3)"
" #f))"
"(let-values()"
"(call-expand-observe"
" obs_96"
" 'next-group))"
"(void)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_5)"
"(let-values(((v_265)"
" rec-ctx_0))"
"(let-values(((the-struct_98)"
" v_265))"
"(if(expand-context/outer?"
" the-struct_98)"
"(let-values(((reference-records195_0)"
" orig-rrs_0)"
"((inner196_0)"
"(root-expand-context/outer-inner"
" v_265)))"
"(expand-context/outer1.1"
" inner196_0"
"(root-expand-context/outer-post-expansion"
" the-struct_98)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_98)"
"(root-expand-context/outer-frame-id"
" the-struct_98)"
"(expand-context/outer-context"
" the-struct_98)"
"(expand-context/outer-env"
" the-struct_98)"
"(expand-context/outer-scopes"
" the-struct_98)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_98)"
"(expand-context/outer-binding-layer"
" the-struct_98)"
" reference-records195_0"
"(expand-context/outer-only-immediate?"
" the-struct_98)"
"(expand-context/outer-need-eventually-defined"
" the-struct_98)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_98)"
"(expand-context/outer-current-use-scopes"
" the-struct_98)"
"(expand-context/outer-name"
" the-struct_98)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                     \"expand-context/outer?\""
" the-struct_98))))))"
"(let-values(((bodys192_0)"
" bodys_10)"
"((temp193_0)"
"(let-values(((body-ctx197_0)"
" body-ctx_5)"
"((ctx198_0)"
" ctx_84))"
"(as-tail-context22.1"
" ctx198_0"
" body-ctx197_0)))"
"((rebuild-s194_0)"
" rebuild-s_6))"
"(expand-body7.1"
" rebuild-s194_0"
" #f"
" bodys192_0"
" temp193_0))))))))"
"(let-values(((result-s_12)"
"(if(not"
" split-by-reference?_0)"
"(let-values()"
"(let-values(((clauses_2)"
"(reverse$1"
"(let-values(((lst_150)"
" val-name-idss_0)"
"((lst_390)"
" val-keyss_2)"
"((lst_151)"
" val-rhss_3)"
"((lst_391)"
" val-clauses_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_150)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_390)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_151)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_391)))"
"((letrec-values(((for-loop_313)"
"(lambda(fold-var_361"
" lst_392"
" lst_393"
" lst_394"
" lst_395)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_392)"
"(if(pair?"
" lst_393)"
"(if(pair?"
" lst_394)"
"(pair?"
" lst_395)"
" #f)"
" #f)"
" #f)"
"(let-values(((ids_43)"
"(unsafe-car"
" lst_392))"
"((rest_230)"
"(unsafe-cdr"
" lst_392))"
"((keys_12)"
"(unsafe-car"
" lst_393))"
"((rest_231)"
"(unsafe-cdr"
" lst_393))"
"((rhs_22)"
"(unsafe-car"
" lst_394))"
"((rest_232)"
"(unsafe-cdr"
" lst_394))"
"((clause_4)"
"(unsafe-car"
" lst_395))"
"((rest_233)"
"(unsafe-cdr"
" lst_395)))"
"(let-values(((fold-var_51)"
"(let-values(((fold-var_362)"
" fold-var_361))"
"(let-values(((fold-var_363)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_97)"
"(expand-context-observer"
" ctx_84)))"
"(if obs_97"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_97"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-rhs_4)"
"(let-values(((rhs199_0)"
" rhs_22)"
"((temp200_0)"
"(if rec?_1"
"(as-named-context"
" rec-ctx_0"
" ids_43)"
"(as-named-context"
" expr-ctx_0"
" ids_43))))"
"(expand9.1"
" #f"
" #f"
" #f"
" rhs199_0"
" temp200_0))))"
"(if(expand-context-to-parsed?"
" ctx_84)"
"(list"
" keys_12"
" exp-rhs_4)"
"(datum->syntax$1"
" #f"
"(list"
" ids_43"
" exp-rhs_4)"
" clause_4"
" clause_4)))))"
" fold-var_362))))"
"(values"
" fold-var_363)))))"
"(if(not"
" #f)"
"(for-loop_313"
" fold-var_51"
" rest_230"
" rest_231"
" rest_232"
" rest_233)"
" fold-var_51)))"
" fold-var_361)))))"
" for-loop_313)"
" null"
" lst_150"
" lst_390"
" lst_151"
" lst_391))))))"
"(let-values(((exp-body_4)"
"(get-body_1)))"
"(begin"
"(if frame-id_15"
"(let-values()"
"(reference-record-clear!"
" frame-id_15))"
"(void))"
"(if(expand-context-to-parsed?"
" ctx_84)"
"(if rec?_1"
"(parsed-letrec-values18.1"
" rebuild-s_6"
" val-name-idss_0"
" clauses_2"
" exp-body_4)"
"(parsed-let-values17.1"
" rebuild-s_6"
" val-name-idss_0"
" clauses_2"
" exp-body_4))"
"(let-values(((rebuild-s201_0)"
" rebuild-s_6)"
"((temp202_1)"
"(list*"
" letrec-values-id_0"
" clauses_2"
" exp-body_4)))"
"(rebuild5.1"
" #t"
" rebuild-s201_0"
" temp202_1)))))))"
"(let-values()"
"(let-values(((val-idss203_0)"
" val-idss_3)"
"((val-keyss204_0)"
" val-keyss_2)"
"((val-rhss205_0)"
" val-rhss_3)"
"((val-clauses206_0)"
" val-clauses_0)"
"((temp207_0)"
" #t)"
"((frame-id208_0)"
" frame-id_15)"
"((rec-ctx209_0)"
" rec-ctx_0)"
"((rebuild-s210_0)"
" rebuild-s_6)"
"((syntaxes?211_0)"
" syntaxes?_0)"
"((get-body212_0)"
" get-body_1)"
"((temp213_2)"
" #t))"
"(expand-and-split-bindings-by-reference48.1"
" rec-ctx209_0"
" frame-id208_0"
" get-body212_0"
" syntaxes?211_0"
" rebuild-s210_0"
" temp207_0"
" temp213_2"
" val-idss203_0"
" val-keyss204_0"
" val-rhss205_0"
" val-clauses206_0))))))"
"(if(expand-context-to-parsed? ctx_84)"
" result-s_12"
"(attach-disappeared-transformer-bindings"
" result-s_12"
" trans-idss_2))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(log-let-renames)"
"(lambda(obs_98 renames-log-tag_1 val-idss_4 val-rhss_4 bodys_11 trans-idss_3 trans-rhss_0 sc_40)"
"(begin"
"(let-values(((vals+body_0)"
"(cons"
"(reverse$1"
"(let-values(((lst_396) val-idss_4)((lst_397) val-rhss_4))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_396)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_397)))"
"((letrec-values(((for-loop_314)"
"(lambda(fold-var_364 lst_398 lst_399)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_398)(pair? lst_399) #f)"
"(let-values(((val-ids_2)(unsafe-car lst_398))"
"((rest_234)(unsafe-cdr lst_398))"
"((val-rhs_11)(unsafe-car lst_399))"
"((rest_235)(unsafe-cdr lst_399)))"
"(let-values(((fold-var_365)"
"(let-values(((fold-var_366) fold-var_364))"
"(let-values(((fold-var_367)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list val-ids_2 val-rhs_11)))"
" fold-var_366))))"
"(values fold-var_367)))))"
"(if(not #f)"
"(for-loop_314 fold-var_365 rest_234 rest_235)"
" fold-var_365)))"
" fold-var_364)))))"
" for-loop_314)"
" null"
" lst_396"
" lst_397))))"
"(datum->syntax$1 #f bodys_11))))"
"(call-expand-observe"
" obs_98"
" renames-log-tag_1"
"(if(not trans-rhss_0)"
" vals+body_0"
"(cons"
"(reverse$1"
"(let-values(((lst_400) trans-idss_3)((lst_401) trans-rhss_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_400)))"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_401)))"
"((letrec-values(((for-loop_315)"
"(lambda(fold-var_368 lst_402 lst_403)"
"(begin"
" 'for-loop"
"(if(if(pair? lst_402)(pair? lst_403) #f)"
"(let-values(((trans-ids_0)(unsafe-car lst_402))"
"((rest_236)(unsafe-cdr lst_402))"
"((trans-rhs_5)(unsafe-car lst_403))"
"((rest_237)(unsafe-cdr lst_403)))"
"(let-values(((fold-var_369)"
"(let-values(((fold-var_370) fold-var_368))"
"(let-values(((fold-var_371)"
"(let-values()"
"(cons"
"(let-values()"
"(datum->syntax$1"
" #f"
"(list"
" trans-ids_0"
"(add-scope trans-rhs_5 sc_40))))"
" fold-var_370))))"
"(values fold-var_371)))))"
"(if(not #f)(for-loop_315 fold-var_369 rest_236 rest_237) fold-var_369)))"
" fold-var_368)))))"
" for-loop_315)"
" null"
" lst_400"
" lst_401))))"
" vals+body_0)))))))"
"(define-values"
"(log-letrec-values)"
"(lambda(obs_99 val-idss_5 val-rhss_5 bodys_12)"
"(begin"
"(begin"
"(call-expand-observe obs_99 'next-group)"
"(if(null? val-idss_5)"
"(void)"
"(let-values()"
"(begin"
"(call-expand-observe obs_99 'prim-letrec-values)"
"(log-let-renames obs_99 'let-renames val-idss_5 val-rhss_5 bodys_12 #f #f #f))))))))"
"(void"
"(add-core-form!*"
" 'let-values"
"(let-values(((temp214_2) 'prim-let-values))(make-let-values-form11.1 temp214_2 #f 'let-renames #f #f))))"
"(void"
"(add-core-form!*"
" 'letrec-values"
"(let-values(((temp215_0) #t)((temp216_1) 'prim-letrec-values))"
"(make-let-values-form11.1 temp216_1 temp215_0 'let-renames #f #f))))"
"(void"
"(add-core-form!*"
" 'letrec-syntaxes+values"
"(let-values(((temp217_3) #t)"
"((temp218_1) #t)"
"((temp219_0) #t)"
"((temp220_0) 'prim-letrec-syntaxes+values)"
"((temp221_3) 'letrec-syntaxes-renames))"
"(make-let-values-form11.1 temp220_0 temp218_1 temp221_3 temp219_0 temp217_3))))"
"(void"
"(add-core-form!*"
" '#%stratified-body"
"(lambda(s_569 ctx_85)"
"(let-values((()"
"(begin"
"(let-values(((obs_100)(expand-context-observer ctx_85)))"
"(if obs_100"
"(let-values()(let-values()(call-expand-observe obs_100 'prim-#%stratified)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_9)(syntax-disarm$1 s_569)))"
"(let-values(((ok?_45 #%stratified-body222_0 body223_0)"
"(let-values(((s_570) disarmed-s_9))"
"(let-values(((orig-s_48) s_570))"
"(let-values(((#%stratified-body222_1 body223_1)"
"(let-values(((s_571)(if(syntax?$1 s_570)(syntax-e$1 s_570) s_570)))"
"(if(pair? s_571)"
"(let-values(((#%stratified-body224_0)"
"(let-values(((s_572)(car s_571))) s_572))"
"((body225_0)"
"(let-values(((s_573)(cdr s_571)))"
"(let-values(((s_574)"
"(if(syntax?$1 s_573)"
"(syntax-e$1 s_573)"
" s_573)))"
"(let-values(((flat-s_43)(to-syntax-list.1 s_574)))"
"(if(not flat-s_43)"
"(let-values()"
"                                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_48))"
"(if(null? flat-s_43)"
"(let-values()"
"                                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_48))"
"(let-values() flat-s_43))))))))"
"(values #%stratified-body224_0 body225_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_48)))))"
"(values #t #%stratified-body222_1 body223_1))))))"
"(let-values(((rebuild-s_7)"
"(let-values(((ctx226_0) ctx_85)((s227_0) s_569)((temp228_0) #t))"
"(keep-as-needed119.1 #f temp228_0 #f ctx226_0 s227_0))))"
"(let-values(((exp-body_5)"
"(let-values(((temp229_3) body223_0)"
"((ctx230_0) ctx_85)"
"((temp231_1) #t)"
"((rebuild-s232_0) rebuild-s_7))"
"(expand-body7.1 rebuild-s232_0 temp231_1 temp229_3 ctx230_0))))"
"(if(expand-context-to-parsed? ctx_85)"
"(parsed-begin12.1 rebuild-s_7 exp-body_5)"
"(let-values(((rebuild-s233_0) rebuild-s_7)"
"((temp234_1)"
"(if(null?(cdr exp-body_5))"
"(car exp-body_5)"
"(list*(core-id 'begin(expand-context-phase ctx_85)) exp-body_5))))"
"(rebuild5.1 #t rebuild-s233_0 temp234_1)))))))))))"
"(void"
"(add-core-form!*"
" '#%datum"
"(lambda(s_575 ctx_86)"
"(let-values((()"
"(begin"
"(let-values(((obs_101)(expand-context-observer ctx_86)))"
"(if obs_101(let-values()(let-values()(call-expand-observe obs_101 'prim-#%datum)))(void)))"
"(values))))"
"(let-values(((disarmed-s_10)(syntax-disarm$1 s_575)))"
"(let-values(((ok?_46 #%datum235_0 datum236_0)"
"(let-values(((s_576) disarmed-s_10))"
"(let-values(((orig-s_49) s_576))"
"(let-values(((#%datum235_1 datum236_1)"
"(let-values(((s_577)(if(syntax?$1 s_576)(syntax-e$1 s_576) s_576)))"
"(if(pair? s_577)"
"(let-values(((#%datum237_0)(let-values(((s_578)(car s_577))) s_578))"
"((datum238_0)(let-values(((s_579)(cdr s_577))) s_579)))"
"(values #%datum237_0 datum238_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_49)))))"
"(values #t #%datum235_1 datum236_1))))))"
"(let-values(((datum_2) datum236_0))"
"(let-values((()"
"(begin"
"(if(if(syntax?$1 datum_2)(keyword?(syntax-e$1 datum_2)) #f)"
"(let-values()"
"                                 (raise-syntax-error$1 '#%datum \"keyword misused as an expression\" #f datum_2))"
"(void))"
"(values))))"
"(let-values(((phase_141)(expand-context-phase ctx_86)))"
"(if(if(expand-context-to-parsed? ctx_86)(free-id-set-empty?(expand-context-stops ctx_86)) #f)"
"(parsed-quote14.1(keep-properties-only~ s_575)(syntax->datum$1 datum_2))"
"(let-values(((s239_0) s_575)((temp240_0)(list(core-id 'quote phase_141) datum_2)))"
"(rebuild5.1 #t s239_0 temp240_0))))))))))))"
"(void"
"(add-core-form!*"
" '#%app"
"(lambda(s_580 ctx_87)"
"(let-values((()"
"(begin"
"(let-values(((obs_102)(expand-context-observer ctx_87)))"
"(if obs_102(let-values()(let-values()(call-expand-observe obs_102 'prim-#%app)))(void)))"
"(values))))"
"(let-values(((disarmed-s_11)(syntax-disarm$1 s_580)))"
"(let-values(((ok?_47 #%app241_0 e242_0)"
"(let-values(((s_581) disarmed-s_11))"
"(let-values(((orig-s_50) s_581))"
"(let-values(((#%app241_1 e242_1)"
"(let-values(((s_582)(if(syntax?$1 s_581)(syntax-e$1 s_581) s_581)))"
"(if(pair? s_582)"
"(let-values(((#%app243_0)(let-values(((s_583)(car s_582))) s_583))"
"((e244_0)"
"(let-values(((s_584)(cdr s_582)))"
"(let-values(((s_585)"
"(if(syntax?$1 s_584)"
"(syntax-e$1 s_584)"
" s_584)))"
"(let-values(((flat-s_44)(to-syntax-list.1 s_585)))"
"(if(not flat-s_44)"
"(let-values()"
"                                                                     (raise-syntax-error$1 #f \"bad syntax\" orig-s_50))"
"(let-values() flat-s_44)))))))"
"(values #%app243_0 e244_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_50)))))"
"(values #t #%app241_1 e242_1))))))"
"(let-values(((es_3) e242_0))"
"(if(null? es_3)"
"(let-values()"
"(let-values(((phase_142)(expand-context-phase ctx_87)))"
"(if(expand-context-to-parsed? ctx_87)"
"(parsed-quote14.1(keep-properties-only~ s_580) null)"
"(let-values(((s245_0) s_580)((temp246_1)(list(core-id 'quote phase_142) null)))"
"(rebuild5.1 #t s245_0 temp246_1)))))"
"(let-values()"
"(let-values(((keep-for-parsed?_1)(eq?(system-type 'vm) 'chez-scheme)))"
"(let-values(((rebuild-s_8)"
"(let-values(((ctx247_0) ctx_87)"
"((s248_0) s_580)"
"((keep-for-parsed?249_0) keep-for-parsed?_1))"
"(keep-as-needed119.1 #f #f keep-for-parsed?249_0 ctx247_0 s248_0))))"
"(let-values(((prefixless_0)(cdr(syntax-e$1 disarmed-s_11))))"
"(let-values(((rebuild-prefixless_0)"
"(if(syntax?$1 prefixless_0)"
"(let-values(((ctx250_0) ctx_87)"
"((prefixless251_0) prefixless_0)"
"((keep-for-parsed?252_0) keep-for-parsed?_1))"
"(keep-as-needed119.1 #f #f keep-for-parsed?252_0 ctx250_0 prefixless251_0))"
" #f)))"
"(let-values(((expr-ctx_1)(as-expression-context ctx_87)))"
"(let-values((()"
"(begin"
"(let-values(((obs_103)(expand-context-observer expr-ctx_1)))"
"(if obs_103"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_103"
" 'enter-list"
"(datum->syntax$1 #f es_3 s_580))"
"(call-expand-observe obs_103 'next))))"
"(void)))"
"(values))))"
"(let-values(((rest-es_0)(cdr es_3)))"
"(let-values(((exp-rator_0)"
"(let-values(((temp253_1)(car es_3))((expr-ctx254_0) expr-ctx_1))"
"(expand9.1 #f #f #f temp253_1 expr-ctx254_0))))"
"(let-values(((exp-es_0)"
"(reverse$1"
"(let-values(((lst_404) rest-es_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_404)))"
"((letrec-values(((for-loop_316)"
"(lambda(fold-var_372 lst_405)"
"(begin"
" 'for-loop"
"(if(pair? lst_405)"
"(let-values(((e_90)(unsafe-car lst_405))"
"((rest_238)"
"(unsafe-cdr lst_405)))"
"(let-values(((fold-var_373)"
"(let-values(((fold-var_374)"
" fold-var_372))"
"(let-values(((fold-var_375)"
"(let-values()"
"(cons"
"(let-values()"
"(begin"
"(let-values(((obs_104)"
"(expand-context-observer"
" expr-ctx_1)))"
"(if obs_104"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_104"
" 'next)))"
"(void)))"
"(let-values(((e255_0)"
" e_90)"
"((expr-ctx256_0)"
" expr-ctx_1))"
"(expand9.1"
" #f"
" #f"
" #f"
" e255_0"
" expr-ctx256_0))))"
" fold-var_374))))"
"(values"
" fold-var_375)))))"
"(if(not #f)"
"(for-loop_316 fold-var_373 rest_238)"
" fold-var_373)))"
" fold-var_372)))))"
" for-loop_316)"
" null"
" lst_404))))))"
"(if(expand-context-to-parsed? ctx_87)"
"(let-values()"
"(parsed-app7.1"
"(let-values(((or-part_381) rebuild-prefixless_0))"
"(if or-part_381 or-part_381 rebuild-s_8))"
" exp-rator_0"
" exp-es_0))"
"(let-values()"
"(let-values(((es_4)"
"(let-values(((exp-es_1)(cons exp-rator_0 exp-es_0)))"
"(if rebuild-prefixless_0"
"(let-values(((rebuild-prefixless259_0) rebuild-prefixless_0)"
"((exp-es260_0) exp-es_1))"
"(rebuild5.1 #t rebuild-prefixless259_0 exp-es260_0))"
" exp-es_1))))"
"(begin"
"(let-values(((obs_105)(expand-context-observer expr-ctx_1)))"
"(if obs_105"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_105"
" 'exit-list"
"(datum->syntax$1 #f es_4 rebuild-s_8))))"
"(void)))"
"(let-values(((rebuild-s257_0) rebuild-s_8)"
"((temp258_0)(cons #%app241_0 es_4)))"
"(rebuild5.1 #t rebuild-s257_0 temp258_0))))))))))))))))))))))))"
"(void"
"(add-core-form!*"
" 'quote"
"(lambda(s_586 ctx_88)"
"(let-values((()"
"(begin"
"(let-values(((obs_106)(expand-context-observer ctx_88)))"
"(if obs_106(let-values()(let-values()(call-expand-observe obs_106 'prim-quote)))(void)))"
"(values))))"
"(let-values(((ok?_48 quote261_0 datum262_0)"
"(let-values(((s_282)(syntax-disarm$1 s_586)))"
"(let-values(((orig-s_51) s_282))"
"(let-values(((quote261_1 datum262_1)"
"(let-values(((s_284)(if(syntax?$1 s_282)(syntax-e$1 s_282) s_282)))"
"(if(pair? s_284)"
"(let-values(((quote263_0)(let-values(((s_587)(car s_284))) s_587))"
"((datum264_0)"
"(let-values(((s_588)(cdr s_284)))"
"(let-values(((s_589)"
"(if(syntax?$1 s_588)"
"(syntax-e$1 s_588)"
" s_588)))"
"(if(pair? s_589)"
"(let-values(((datum265_0)"
"(let-values(((s_590)(car s_589))) s_590))"
"(()"
"(let-values(((s_591)(cdr s_589)))"
"(let-values(((s_592)"
"(if(syntax?$1 s_591)"
"(syntax-e$1 s_591)"
" s_591)))"
"(if(null? s_592)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                    \"bad syntax\""
" orig-s_51))))))"
"(values datum265_0))"
"                                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_51))))))"
"(values quote263_0 datum264_0))"
"                                           (raise-syntax-error$1 #f \"bad syntax\" orig-s_51)))))"
"(values #t quote261_1 datum262_1))))))"
"(if(expand-context-to-parsed? ctx_88)"
"(parsed-quote14.1(keep-properties-only~ s_586)(syntax->datum$1 datum262_0))"
" s_586))))))"
"(void"
"(add-core-form!*"
" 'quote-syntax"
"(lambda(s_593 ctx_89)"
"(let-values((()"
"(begin"
"(let-values(((obs_107)(expand-context-observer ctx_89)))"
"(if obs_107"
"(let-values()(let-values()(call-expand-observe obs_107 'prim-quote-syntax)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_12)(syntax-disarm$1 s_593)))"
"(let-values(((ok?_49 quote-syntax266_0 datum267_0)"
"(let-values(((s_291) disarmed-s_12))"
"(if(let-values(((s_594)(if(syntax?$1 s_291)(syntax-e$1 s_291) s_291)))"
"(if(pair? s_594)"
"(if(let-values(((s_595)(car s_594))) #t)"
"(let-values(((s_596)(cdr s_594)))"
"(let-values(((s_292)(if(syntax?$1 s_596)(syntax-e$1 s_596) s_596)))"
"(if(pair? s_292)"
"(if(let-values(((s_597)(car s_292))) #t)"
"(let-values(((s_598)(cdr s_292)))"
"(let-values(((s_293)(if(syntax?$1 s_598)(syntax-e$1 s_598) s_598)))"
"(if(pair? s_293)"
"(if(let-values(((s_294)(car s_293)))"
"(let-values(((s_295)"
"(if(syntax?$1 s_294)(syntax-e$1 s_294) s_294)))"
"(eq? '#:local s_295)))"
"(let-values(((s_599)(cdr s_293)))"
"(let-values(((s_600)"
"(if(syntax?$1 s_599)(syntax-e$1 s_599) s_599)))"
"(null? s_600)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((quote-syntax266_1 datum267_1)"
"(let-values(((s_601)(if(syntax?$1 s_291)(syntax-e$1 s_291) s_291)))"
"(let-values(((quote-syntax268_0)"
"(let-values(((s_602)(car s_601))) s_602))"
"((datum269_0)"
"(let-values(((s_603)(cdr s_601)))"
"(let-values(((s_604)"
"(if(syntax?$1 s_603)"
"(syntax-e$1 s_603)"
" s_603)))"
"(let-values(((datum270_0)"
"(let-values(((s_605)(car s_604))) s_605))"
"(()"
"(let-values(((s_606)(cdr s_604)))"
"(let-values(((s_607)"
"(if(syntax?$1 s_606)"
"(syntax-e$1 s_606)"
" s_606)))"
"(let-values((()"
"(let-values(((s_608)"
"(car"
" s_607)))"
"(let-values(((s_609)"
"(if(syntax?$1"
" s_608)"
"(syntax-e$1"
" s_608)"
" s_608)))"
"(values))))"
"(()"
"(let-values(((s_610)"
"(cdr"
" s_607)))"
"(let-values(((s_611)"
"(if(syntax?$1"
" s_610)"
"(syntax-e$1"
" s_610)"
" s_610)))"
"(values)))))"
"(values))))))"
"(values datum270_0))))))"
"(values quote-syntax268_0 datum269_0)))))"
"(values #t quote-syntax266_1 datum267_1)))"
"(values #f #f #f)))))"
"(let-values(((ok?_50 quote-syntax271_0 datum272_0)"
"(let-values(((s_612) disarmed-s_12))"
"(if(if(not ok?_49) #t #f)"
"(let-values(((orig-s_52) s_612))"
"(let-values(((quote-syntax271_1 datum272_1)"
"(let-values(((s_613)(if(syntax?$1 s_612)(syntax-e$1 s_612) s_612)))"
"(if(pair? s_613)"
"(let-values(((quote-syntax273_0)"
"(let-values(((s_297)(car s_613))) s_297))"
"((datum274_0)"
"(let-values(((s_614)(cdr s_613)))"
"(let-values(((s_615)"
"(if(syntax?$1 s_614)"
"(syntax-e$1 s_614)"
" s_614)))"
"(if(pair? s_615)"
"(let-values(((datum275_0)"
"(let-values(((s_298)(car s_615)))"
" s_298))"
"(()"
"(let-values(((s_299)(cdr s_615)))"
"(let-values(((s_300)"
"(if(syntax?$1 s_299)"
"(syntax-e$1 s_299)"
" s_299)))"
"(if(null? s_300)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_52))))))"
"(values datum275_0))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_52))))))"
"(values quote-syntax273_0 datum274_0))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_52)))))"
"(values #t quote-syntax271_1 datum272_1)))"
"(values #f #f #f)))))"
"(if ok?_49"
"(let-values()"
"(let-values((()"
"(begin"
"(reference-records-all-used!(expand-context-reference-records ctx_89))"
"(values))))"
"(let-values(((ok?_51 _276_0 _277_0 kw278_0)"
"(let-values(((s_616) disarmed-s_12))"
"(let-values(((orig-s_53) s_616))"
"(let-values(((_276_1 _277_1 kw278_1)"
"(let-values(((s_617)"
"(if(syntax?$1 s_616)(syntax-e$1 s_616) s_616)))"
"(if(pair? s_617)"
"(let-values(((_279_0)"
"(let-values(((s_618)(car s_617))) s_618))"
"((_280_0 kw281_0)"
"(let-values(((s_619)(cdr s_617)))"
"(let-values(((s_620)"
"(if(syntax?$1 s_619)"
"(syntax-e$1 s_619)"
" s_619)))"
"(if(pair? s_620)"
"(let-values(((_282_0)"
"(let-values(((s_621)"
"(car s_620)))"
" s_621))"
"((kw283_0)"
"(let-values(((s_622)"
"(cdr s_620)))"
"(let-values(((s_623)"
"(if(syntax?$1"
" s_622)"
"(syntax-e$1"
" s_622)"
" s_622)))"
"(if(pair? s_623)"
"(let-values(((kw284_0)"
"(let-values(((s_624)"
"(car"
" s_623)))"
" s_624))"
"(()"
"(let-values(((s_625)"
"(cdr"
" s_623)))"
"(let-values(((s_626)"
"(if(syntax?$1"
" s_625)"
"(syntax-e$1"
" s_625)"
" s_625)))"
"(if(null?"
" s_626)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                    \"bad syntax\""
" orig-s_53))))))"
"(values kw284_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                \"bad syntax\""
" orig-s_53))))))"
"(values _282_0 kw283_0))"
"(raise-syntax-error$1"
" #f"
"                                                                            \"bad syntax\""
" orig-s_53))))))"
"(values _279_0 _280_0 kw281_0))"
"                                                       (raise-syntax-error$1 #f \"bad syntax\" orig-s_53)))))"
"(values #t _276_1 _277_1 kw278_1))))))"
"(if(expand-context-to-parsed? ctx_89)"
"(parsed-quote-syntax15.1(keep-properties-only~ s_593) datum267_0)"
"(let-values(((s285_0) s_593)((temp286_0)(list quote-syntax266_0 datum267_0 kw278_0)))"
"(rebuild5.1 #t s285_0 temp286_0))))))"
"(let-values()"
"(let-values(((use-site-scopes_2)(root-expand-context-use-site-scopes ctx_89)))"
"(let-values(((datum-s_0)"
"(remove-scopes"
"(remove-scopes datum272_0(expand-context-scopes ctx_89))"
"(if use-site-scopes_2(unbox use-site-scopes_2) '()))))"
"(if(if(expand-context-to-parsed? ctx_89)(free-id-set-empty?(expand-context-stops ctx_89)) #f)"
"(parsed-quote-syntax15.1(keep-properties-only~ s_593) datum-s_0)"
"(let-values(((s287_0) s_593)((temp288_0)(list quote-syntax271_0 datum-s_0)))"
"(rebuild5.1 #t s287_0 temp288_0))))))))))))))"
"(void"
"(add-core-form!*"
" 'if"
"(lambda(s_627 ctx_90)"
"(let-values((()"
"(begin"
"(let-values(((obs_108)(expand-context-observer ctx_90)))"
"(if obs_108(let-values()(let-values()(call-expand-observe obs_108 'prim-if)))(void)))"
"(values))))"
"(let-values(((disarmed-s_13)(syntax-disarm$1 s_627)))"
"(let-values(((ok?_52 _289_0 _290_0 _291_0)"
"(let-values(((s_628) disarmed-s_13))"
"(if(let-values(((s_629)(if(syntax?$1 s_628)(syntax-e$1 s_628) s_628)))"
"(if(pair? s_629)"
"(if(let-values(((s_630)(car s_629))) #t)"
"(let-values(((s_631)(cdr s_629)))"
"(let-values(((s_632)(if(syntax?$1 s_631)(syntax-e$1 s_631) s_631)))"
"(if(pair? s_632)"
"(if(let-values(((s_633)(car s_632))) #t)"
"(let-values(((s_634)(cdr s_632)))"
"(let-values(((s_635)(if(syntax?$1 s_634)(syntax-e$1 s_634) s_634)))"
"(if(pair? s_635)"
"(if(let-values(((s_636)(car s_635))) #t)"
"(let-values(((s_637)(cdr s_635)))"
"(let-values(((s_638)"
"(if(syntax?$1 s_637)(syntax-e$1 s_637) s_637)))"
"(null? s_638)))"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((_289_1 _290_1 _291_1)"
"(let-values(((s_639)(if(syntax?$1 s_628)(syntax-e$1 s_628) s_628)))"
"(let-values(((_292_0)(let-values(((s_640)(car s_639))) s_640))"
"((_293_0 _294_0)"
"(let-values(((s_641)(cdr s_639)))"
"(let-values(((s_642)"
"(if(syntax?$1 s_641)"
"(syntax-e$1 s_641)"
" s_641)))"
"(let-values(((_295_0)"
"(let-values(((s_643)(car s_642))) s_643))"
"((_296_0)"
"(let-values(((s_644)(cdr s_642)))"
"(let-values(((s_645)"
"(if(syntax?$1 s_644)"
"(syntax-e$1 s_644)"
" s_644)))"
"(let-values(((_297_0)"
"(let-values(((s_646)"
"(car"
" s_645)))"
" s_646))"
"(()"
"(let-values(((s_647)"
"(cdr"
" s_645)))"
"(let-values(((s_648)"
"(if(syntax?$1"
" s_647)"
"(syntax-e$1"
" s_647)"
" s_647)))"
"(values)))))"
"(values _297_0))))))"
"(values _295_0 _296_0))))))"
"(values _292_0 _293_0 _294_0)))))"
"(values #t _289_1 _290_1 _291_1)))"
"(values #f #f #f #f)))))"
"(let-values((()"
"(begin"
"(if ok?_52"
"                             (let-values () (raise-syntax-error$1 #f \"missing an \\\"else\\\" expression\" s_627))"
"(void))"
"(values))))"
"(let-values(((ok?_53 if298_0 tst299_0 thn300_0 els301_0)"
"(let-values(((s_649) disarmed-s_13))"
"(let-values(((orig-s_54) s_649))"
"(let-values(((if298_1 tst299_1 thn300_1 els301_1)"
"(let-values(((s_650)(if(syntax?$1 s_649)(syntax-e$1 s_649) s_649)))"
"(if(pair? s_650)"
"(let-values(((if302_0)(let-values(((s_651)(car s_650))) s_651))"
"((tst303_0 thn304_0 els305_0)"
"(let-values(((s_652)(cdr s_650)))"
"(let-values(((s_653)"
"(if(syntax?$1 s_652)"
"(syntax-e$1 s_652)"
" s_652)))"
"(if(pair? s_653)"
"(let-values(((tst306_0)"
"(let-values(((s_654)(car s_653)))"
" s_654))"
"((thn307_0 els308_0)"
"(let-values(((s_655)(cdr s_653)))"
"(let-values(((s_656)"
"(if(syntax?$1 s_655)"
"(syntax-e$1 s_655)"
" s_655)))"
"(if(pair? s_656)"
"(let-values(((thn309_0)"
"(let-values(((s_657)"
"(car"
" s_656)))"
" s_657))"
"((els310_0)"
"(let-values(((s_658)"
"(cdr"
" s_656)))"
"(let-values(((s_659)"
"(if(syntax?$1"
" s_658)"
"(syntax-e$1"
" s_658)"
" s_658)))"
"(if(pair?"
" s_659)"
"(let-values(((els311_0)"
"(let-values(((s_660)"
"(car"
" s_659)))"
" s_660))"
"(()"
"(let-values(((s_661)"
"(cdr"
" s_659)))"
"(let-values(((s_662)"
"(if(syntax?$1"
" s_661)"
"(syntax-e$1"
" s_661)"
" s_661)))"
"(if(null?"
" s_662)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                  \"bad syntax\""
" orig-s_54))))))"
"(values"
" els311_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_54))))))"
"(values thn309_0 els310_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_54))))))"
"(values tst306_0 thn307_0 els308_0))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_54))))))"
"(values if302_0 tst303_0 thn304_0 els305_0))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_54)))))"
"(values #t if298_1 tst299_1 thn300_1 els301_1))))))"
"(let-values(((expr-ctx_2)(as-expression-context ctx_90)))"
"(let-values(((tail-ctx_0)"
"(let-values(((expr-ctx312_0) expr-ctx_2)((ctx313_0) ctx_90))"
"(as-tail-context22.1 ctx313_0 expr-ctx312_0))))"
"(let-values(((rebuild-s_9)"
"(let-values(((ctx314_0) ctx_90)((s315_0) s_627))"
"(keep-as-needed119.1 #f #f #f ctx314_0 s315_0))))"
"(let-values(((exp-tst_0)"
"(let-values(((temp316_0) tst299_0)((expr-ctx317_0) expr-ctx_2))"
"(expand9.1 #f #f #f temp316_0 expr-ctx317_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_109)(expand-context-observer ctx_90)))"
"(if obs_109"
"(let-values()(let-values()(call-expand-observe obs_109 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-thn_0)"
"(let-values(((temp318_0) thn300_0)((tail-ctx319_0) tail-ctx_0))"
"(expand9.1 #f #f #f temp318_0 tail-ctx319_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_110)(expand-context-observer ctx_90)))"
"(if obs_110"
"(let-values()(let-values()(call-expand-observe obs_110 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-els_0)"
"(let-values(((temp320_0) els301_0)((tail-ctx321_0) tail-ctx_0))"
"(expand9.1 #f #f #f temp320_0 tail-ctx321_0))))"
"(if(expand-context-to-parsed? ctx_90)"
"(parsed-if8.1 rebuild-s_9 exp-tst_0 exp-thn_0 exp-els_0)"
"(let-values(((rebuild-s322_0) rebuild-s_9)"
"((temp323_0)(list if298_0 exp-tst_0 exp-thn_0 exp-els_0)))"
"(rebuild5.1 #t rebuild-s322_0 temp323_0)))))))))))))))))))"
"(void"
"(add-core-form!*"
" 'with-continuation-mark"
"(lambda(s_663 ctx_91)"
"(let-values((()"
"(begin"
"(let-values(((obs_111)(expand-context-observer ctx_91)))"
"(if obs_111"
"(let-values()(let-values()(call-expand-observe obs_111 'prim-with-continuation-mark)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_14)(syntax-disarm$1 s_663)))"
"(let-values(((ok?_54 with-continuation-mark324_0 key325_0 val326_0 body327_0)"
"(let-values(((s_664) disarmed-s_14))"
"(let-values(((orig-s_55) s_664))"
"(let-values(((with-continuation-mark324_1 key325_1 val326_1 body327_1)"
"(let-values(((s_665)(if(syntax?$1 s_664)(syntax-e$1 s_664) s_664)))"
"(if(pair? s_665)"
"(let-values(((with-continuation-mark328_0)"
"(let-values(((s_666)(car s_665))) s_666))"
"((key329_0 val330_0 body331_0)"
"(let-values(((s_667)(cdr s_665)))"
"(let-values(((s_668)"
"(if(syntax?$1 s_667)"
"(syntax-e$1 s_667)"
" s_667)))"
"(if(pair? s_668)"
"(let-values(((key332_0)"
"(let-values(((s_669)(car s_668)))"
" s_669))"
"((val333_0 body334_0)"
"(let-values(((s_670)(cdr s_668)))"
"(let-values(((s_671)"
"(if(syntax?$1 s_670)"
"(syntax-e$1 s_670)"
" s_670)))"
"(if(pair? s_671)"
"(let-values(((val335_0)"
"(let-values(((s_672)"
"(car"
" s_671)))"
" s_672))"
"((body336_0)"
"(let-values(((s_673)"
"(cdr"
" s_671)))"
"(let-values(((s_674)"
"(if(syntax?$1"
" s_673)"
"(syntax-e$1"
" s_673)"
" s_673)))"
"(if(pair? s_674)"
"(let-values(((body337_0)"
"(let-values(((s_675)"
"(car"
" s_674)))"
" s_675))"
"(()"
"(let-values(((s_676)"
"(cdr"
" s_674)))"
"(let-values(((s_677)"
"(if(syntax?$1"
" s_676)"
"(syntax-e$1"
" s_676)"
" s_676)))"
"(if(null?"
" s_677)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                              \"bad syntax\""
" orig-s_55))))))"
"(values"
" body337_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_55))))))"
"(values val335_0 body336_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_55))))))"
"(values key332_0 val333_0 body334_0))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_55))))))"
"(values with-continuation-mark328_0 key329_0 val330_0 body331_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_55)))))"
"(values #t with-continuation-mark324_1 key325_1 val326_1 body327_1))))))"
"(let-values(((expr-ctx_3)(as-expression-context ctx_91)))"
"(let-values(((rebuild-s_10)"
"(let-values(((ctx338_0) ctx_91)((s339_0) s_663))"
"(keep-as-needed119.1 #f #f #f ctx338_0 s339_0))))"
"(let-values(((exp-key_0)"
"(let-values(((temp340_0) key325_0)((expr-ctx341_0) expr-ctx_3))"
"(expand9.1 #f #f #f temp340_0 expr-ctx341_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_112)(expand-context-observer ctx_91)))"
"(if obs_112"
"(let-values()(let-values()(call-expand-observe obs_112 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-val_0)"
"(let-values(((temp342_0) val326_0)((expr-ctx343_0) expr-ctx_3))"
"(expand9.1 #f #f #f temp342_0 expr-ctx343_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_113)(expand-context-observer ctx_91)))"
"(if obs_113"
"(let-values()(let-values()(call-expand-observe obs_113 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_6)"
"(let-values(((temp344_0) body327_0)"
"((temp345_0)"
"(let-values(((expr-ctx346_0) expr-ctx_3)((ctx347_0) ctx_91))"
"(as-tail-context22.1 ctx347_0 expr-ctx346_0))))"
"(expand9.1 #f #f #f temp344_0 temp345_0))))"
"(if(expand-context-to-parsed? ctx_91)"
"(parsed-with-continuation-mark10.1 rebuild-s_10 exp-key_0 exp-val_0 exp-body_6)"
"(let-values(((rebuild-s348_0) rebuild-s_10)"
"((temp349_0)(list with-continuation-mark324_0 exp-key_0 exp-val_0 exp-body_6)))"
"(rebuild5.1 #t rebuild-s348_0 temp349_0))))))))))))))))"
"(define-values"
"(make-begin20.1)"
"(lambda(last-is-tail?15_0 list-start-index14_0 log-tag18_0 parsed-begin19_0)"
"(begin"
" 'make-begin20"
"(let-values(((log-tag_1) log-tag18_0))"
"(let-values(((parsed-begin_0) parsed-begin19_0))"
"(let-values(((list-start-index_0) list-start-index14_0))"
"(let-values(((last-is-tail?_0) last-is-tail?15_0))"
"(let-values()"
"(lambda(s_678 ctx_92)"
"(let-values((()"
"(begin"
"(let-values(((obs_114)(expand-context-observer ctx_92)))"
"(if obs_114"
"(let-values()(let-values()(call-expand-observe obs_114 log-tag_1)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_15)(syntax-disarm$1 s_678)))"
"(let-values(((ok?_55 begin350_0 e351_0)"
"(let-values(((s_679) disarmed-s_15))"
"(let-values(((orig-s_56) s_679))"
"(let-values(((begin350_1 e351_1)"
"(let-values(((s_680)"
"(if(syntax?$1 s_679)(syntax-e$1 s_679) s_679)))"
"(if(pair? s_680)"
"(let-values(((begin352_0)"
"(let-values(((s_681)(car s_680))) s_681))"
"((e353_0)"
"(let-values(((s_682)(cdr s_680)))"
"(let-values(((s_683)"
"(if(syntax?$1 s_682)"
"(syntax-e$1 s_682)"
" s_682)))"
"(let-values(((flat-s_45)"
"(to-syntax-list.1 s_683)))"
"(if(not flat-s_45)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                   \"bad syntax\""
" orig-s_56))"
"(if(null? flat-s_45)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                     \"bad syntax\""
" orig-s_56))"
"(let-values() flat-s_45))))))))"
"(values begin352_0 e353_0))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_56)))))"
"(values #t begin350_1 e351_1))))))"
"(let-values(((expr-ctx_4)"
"(if last-is-tail?_0"
"(as-begin-expression-context ctx_92)"
"(as-expression-context ctx_92))))"
"(let-values(((rebuild-s_11)"
"(let-values(((ctx354_0) ctx_92)((s355_0) s_678))"
"(keep-as-needed119.1 #f #f #f ctx354_0 s355_0))))"
"(let-values(((exp-es_2)"
"((letrec-values(((loop_123)"
"(lambda(es_5 index_6)"
"(begin"
" 'loop"
"(begin"
"(if(zero? index_6)"
"(let-values()"
"(let-values(((obs_115)"
"(expand-context-observer ctx_92)))"
"(if obs_115"
"(let-values()"
"(begin"
"(if(zero? list-start-index_0)"
"(void)"
"(let-values()"
"(call-expand-observe obs_115 'next)))"
"(call-expand-observe"
" obs_115"
" 'enter-list"
"(datum->syntax$1 #f es_5 rebuild-s_11))))"
"(void))))"
"(void))"
"(if(null? es_5)"
"(let-values() null)"
"(let-values()"
"(let-values(((rest-es_1)(cdr es_5)))"
"(begin"
"(let-values(((obs_116)"
"(expand-context-observer"
" ctx_92)))"
"(if obs_116"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_116 'next)))"
"(void)))"
"(cons"
"(let-values(((temp356_0)(car es_5))"
"((temp357_0)"
"(if(if last-is-tail?_0"
"(null? rest-es_1)"
" #f)"
"(let-values(((expr-ctx358_0)"
" expr-ctx_4)"
"((ctx359_0)"
" ctx_92))"
"(as-tail-context22.1"
" ctx359_0"
" expr-ctx358_0))"
" expr-ctx_4)))"
"(expand9.1 #f #f #f temp356_0 temp357_0))"
"(loop_123 rest-es_1(sub1 index_6))))))))))))"
" loop_123)"
" e351_0"
" list-start-index_0)))"
"(begin"
"(let-values(((obs_117)(expand-context-observer ctx_92)))"
"(if obs_117"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_117"
" 'exit-list"
"(datum->syntax$1 #f(list-tail exp-es_2 list-start-index_0) rebuild-s_11))))"
"(void)))"
"(if(expand-context-to-parsed? ctx_92)"
"(parsed-begin_0 rebuild-s_11 exp-es_2)"
"(let-values(((rebuild-s360_0) rebuild-s_11)((temp361_0)(cons begin350_0 exp-es_2)))"
"(rebuild5.1 #t rebuild-s360_0 temp361_0)))))))))))))))))))"
"(void"
"(add-core-form!*"
" 'begin"
"(let-values(((nonempty-begin_0)"
"(let-values(((temp362_0) 'prim-begin)"
"((parsed-begin363_0) parsed-begin12.1)"
"((temp364_0) 0)"
"((temp365_0) #t))"
"(make-begin20.1 temp365_0 temp364_0 temp362_0 parsed-begin363_0))))"
"(lambda(s_684 ctx_93)"
"(let-values(((context_25)(expand-context-context ctx_93)))"
"(if(let-values(((or-part_382)(eq? context_25 'top-level)))"
"(if or-part_382 or-part_382(eq? context_25 'module)))"
"(let-values()"
"(let-values(((disarmed-s_16)(syntax-disarm$1 s_684)))"
"(let-values(((ok?_56 begin366_0)"
"(let-values(((s_685) disarmed-s_16))"
"(if(let-values(((s_686)(if(syntax?$1 s_685)(syntax-e$1 s_685) s_685)))"
"(if(pair? s_686)"
"(if(let-values(((s_687)(car s_686))) #t)"
"(let-values(((s_688)(cdr s_686)))"
"(let-values(((s_689)(if(syntax?$1 s_688)(syntax-e$1 s_688) s_688)))"
"(null? s_689)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((begin366_1)"
"(let-values(((s_690)(if(syntax?$1 s_685)(syntax-e$1 s_685) s_685)))"
"(let-values(((begin367_0)"
"(let-values(((s_691)(car s_690))) s_691))"
"(()"
"(let-values(((s_692)(cdr s_690)))"
"(let-values(((s_693)"
"(if(syntax?$1 s_692)"
"(syntax-e$1 s_692)"
" s_692)))"
"(values)))))"
"(values begin367_0)))))"
"(values #t begin366_1)))"
"(values #f #f)))))"
"(if ok?_56 s_684(nonempty-begin_0 s_684 ctx_93)))))"
"(let-values()(nonempty-begin_0 s_684 ctx_93))))))))"
"(void"
"(add-core-form!*"
" 'begin0"
"(let-values(((temp368_0) 'prim-begin0)((parsed-begin0369_0) parsed-begin013.1)((temp370_0) 1)((temp371_0) #f))"
"(make-begin20.1 temp371_0 temp370_0 temp368_0 parsed-begin0369_0))))"
"(define-values"
"(register-eventual-variable!?)"
"(lambda(id_122 ctx_94)"
"(begin"
"(if(if(expand-context-need-eventually-defined ctx_94)(>=(expand-context-phase ctx_94) 1) #f)"
"(let-values()"
"(begin"
"(hash-update!"
"(expand-context-need-eventually-defined ctx_94)"
"(expand-context-phase ctx_94)"
"(lambda(l_87)(cons id_122 l_87))"
" null)"
" #t))"
"(let-values() #f)))))"
"(void"
"(add-core-form!*"
" '#%top"
"(let-values(((core375_0)"
"(lambda(s373_0 ctx374_0 implicit-omitted?372_0)"
"(begin"
" 'core375"
"(let-values(((s_694) s373_0))"
"(let-values(((ctx_95) ctx374_0))"
"(let-values(((implicit-omitted?_0) implicit-omitted?372_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_118)(expand-context-observer ctx_95)))"
"(if obs_118"
"(let-values()"
"(let-values()(call-expand-observe obs_118 'prim-#%top)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_17)(syntax-disarm$1 s_694)))"
"(let-values(((id_123)"
"(if implicit-omitted?_0"
"(let-values() s_694)"
"(let-values()"
"(let-values(((ok?_57 #%top377_0 id378_0)"
"(let-values(((s_695) disarmed-s_17))"
"(let-values(((orig-s_57) s_695))"
"(let-values(((#%top377_1 id378_1)"
"(let-values(((s_696)"
"(if(syntax?$1 s_695)"
"(syntax-e$1 s_695)"
" s_695)))"
"(if(pair? s_696)"
"(let-values(((#%top379_0)"
"(let-values(((s_697)"
"(car"
" s_696)))"
" s_697))"
"((id380_0)"
"(let-values(((s_698)"
"(cdr"
" s_696)))"
"(if(let-values(((or-part_383)"
"(if(syntax?$1"
" s_698)"
"(symbol?"
"(syntax-e$1"
" s_698))"
" #f)))"
"(if or-part_383"
" or-part_383"
"(symbol?"
" s_698)))"
" s_698"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"not an identifier\""
" orig-s_57"
" s_698)))))"
"(values #%top379_0 id380_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_57)))))"
"(values #t #%top377_1 id378_1))))))"
" id378_0)))))"
"(let-values(((b_93)"
"(let-values(((id381_0) id_123)"
"((temp382_0)(expand-context-phase ctx_95))"
"((temp383_0) 'ambiguous))"
"(resolve+shift28.1"
" temp383_0"
" #f"
" null"
" unsafe-undefined"
" #f"
" id381_0"
" temp382_0))))"
"(if(eq? b_93 'ambiguous)"
"(let-values()(raise-ambiguous-error id_123 ctx_95))"
"(if(if b_93"
"(if(module-binding? b_93)"
"(eq?(module-binding-module b_93)(root-expand-context-self-mpi ctx_95))"
" #f)"
" #f)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_95)"
"(parsed-id2.1 id_123 b_93 #f)"
"(if(top-level-module-path-index?(module-binding-module b_93))"
"(let-values() s_694)"
"(let-values() id_123))))"
"(if(register-eventual-variable!? id_123 ctx_95)"
"(let-values()"
"(if(expand-context-to-parsed? ctx_95)"
"(parsed-id2.1 id_123 b_93 #f)"
" id_123))"
"(let-values()"
"(if(not(expand-context-allow-unbound? ctx_95))"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" id_123"
" #f"
" null"
"(syntax-debug-info-string id_123 ctx_95)))"
"(let-values()"
"(let-values(((tl-id_1)"
"(add-scope"
" id_123"
"(root-expand-context-top-level-bind-scope ctx_95))))"
"(let-values(((tl-b_1)"
"(let-values(((tl-id384_0) tl-id_1)"
"((temp385_0)"
"(expand-context-phase ctx_95)))"
"(resolve40.1 #f #f null #f tl-id384_0 temp385_0))))"
"(if tl-b_1"
"(let-values()"
"(if(expand-context-to-parsed? ctx_95)"
"(parsed-top-id4.1 tl-id_1 tl-b_1 #f)"
"(if implicit-omitted?_0"
"(let-values() id_123)"
"(let-values()"
"(let-values(((ok?_58 #%top386_0 id387_0)"
"(let-values(((s_699) disarmed-s_17))"
"(let-values(((orig-s_58) s_699))"
"(let-values(((#%top386_1 id387_1)"
"(let-values(((s_700)"
"(if(syntax?$1"
" s_699)"
"(syntax-e$1"
" s_699)"
" s_699)))"
"(if(pair? s_700)"
"(let-values(((#%top388_0)"
"(let-values(((s_701)"
"(car"
" s_700)))"
" s_701))"
"((id389_0)"
"(let-values(((s_702)"
"(cdr"
" s_700)))"
"(if(let-values(((or-part_384)"
"(if(syntax?$1"
" s_702)"
"(symbol?"
"(syntax-e$1"
" s_702))"
" #f)))"
"(if or-part_384"
" or-part_384"
"(symbol?"
" s_702)))"
" s_702"
"(raise-syntax-error$1"
" #f"
"                                                                                                                      \"not an identifier\""
" orig-s_58"
" s_702)))))"
"(values"
" #%top388_0"
" id389_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                    \"bad syntax\""
" orig-s_58)))))"
"(values #t #%top386_1 id387_1))))))"
"(let-values(((s390_0) s_694)"
"((temp391_0)(cons #%top386_0 id_123)))"
"(rebuild5.1 #t s390_0 temp391_0)))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_95)"
"(parsed-top-id4.1 id_123 b_93 #f)"
" s_694)))))))))))))))))))))))"
"(case-lambda"
"((s_703 ctx_96)(core375_0 s_703 ctx_96 #f))"
"((s_704 ctx_97 implicit-omitted?372_1)(core375_0 s_704 ctx_97 implicit-omitted?372_1))))))"
"(void"
"(add-core-form!*"
" 'set!"
"(lambda(s_705 ctx_98)"
"(let-values((()"
"(begin"
"(let-values(((obs_119)(expand-context-observer ctx_98)))"
"(if obs_119(let-values()(let-values()(call-expand-observe obs_119 'prim-set!)))(void)))"
"(values))))"
"(let-values(((disarmed-s_18)(syntax-disarm$1 s_705)))"
"(let-values(((ok?_59 set!392_0 id393_0 rhs394_0)"
"(let-values(((s_706) disarmed-s_18))"
"(let-values(((orig-s_59) s_706))"
"(let-values(((set!392_1 id393_1 rhs394_1)"
"(let-values(((s_707)(if(syntax?$1 s_706)(syntax-e$1 s_706) s_706)))"
"(if(pair? s_707)"
"(let-values(((set!395_0)(let-values(((s_708)(car s_707))) s_708))"
"((id396_0 rhs397_0)"
"(let-values(((s_709)(cdr s_707)))"
"(let-values(((s_710)"
"(if(syntax?$1 s_709)"
"(syntax-e$1 s_709)"
" s_709)))"
"(if(pair? s_710)"
"(let-values(((id398_0)"
"(let-values(((s_711)(car s_710)))"
"(if(let-values(((or-part_385)"
"(if(syntax?$1 s_711)"
"(symbol?"
"(syntax-e$1"
" s_711))"
" #f)))"
"(if or-part_385"
" or-part_385"
"(symbol? s_711)))"
" s_711"
"(raise-syntax-error$1"
" #f"
"                                                                                    \"not an identifier\""
" orig-s_59"
" s_711))))"
"((rhs399_0)"
"(let-values(((s_712)(cdr s_710)))"
"(let-values(((s_713)"
"(if(syntax?$1 s_712)"
"(syntax-e$1 s_712)"
" s_712)))"
"(if(pair? s_713)"
"(let-values(((rhs400_0)"
"(let-values(((s_714)"
"(car"
" s_713)))"
" s_714))"
"(()"
"(let-values(((s_715)"
"(cdr"
" s_713)))"
"(let-values(((s_716)"
"(if(syntax?$1"
" s_715)"
"(syntax-e$1"
" s_715)"
" s_715)))"
"(if(null? s_716)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                          \"bad syntax\""
" orig-s_59))))))"
"(values rhs400_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_59))))))"
"(values id398_0 rhs399_0))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_59))))))"
"(values set!395_0 id396_0 rhs397_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_59)))))"
"(values #t set!392_1 id393_1 rhs394_1))))))"
"(let-values(((orig-id_1) id393_0))"
"((letrec-values(((rename-loop_0)"
"(lambda(id_124 from-rename?_0)"
"(begin"
" 'rename-loop"
"(let-values(((binding_29)"
"(let-values(((id401_0) id_124)"
"((temp402_0)(expand-context-phase ctx_98))"
"((temp403_0) 'ambiguous)"
"((temp404_0) #t))"
"(resolve+shift28.1"
" temp403_0"
" #f"
" null"
" temp404_0"
" #f"
" id401_0"
" temp402_0))))"
"(let-values((()"
"(begin"
"(if(eq? binding_29 'ambiguous)"
"(let-values()(raise-ambiguous-error id_124 ctx_98))"
"(void))"
"(values))))"
"(let-values(((t_62 primitive?_11 insp_24 protected?_12)"
"(if binding_29"
"(let-values(((binding405_0) binding_29)"
"((ctx406_0) ctx_98)"
"((s407_0) s_705))"
"(lookup62.1 #f #f binding405_0 ctx406_0 s407_0))"
"(values #f #f #f #f))))"
"(begin"
"(let-values(((obs_120)(expand-context-observer ctx_98)))"
"(if obs_120"
"(let-values()"
"(let-values()(call-expand-observe obs_120 'resolve id_124)))"
"(void)))"
"(if(let-values(((or-part_386)(variable? t_62)))"
"(if or-part_386"
" or-part_386"
"(if(not binding_29)"
"(let-values(((or-part_387)"
"(register-eventual-variable!? id_124 ctx_98)))"
"(if or-part_387"
" or-part_387"
"(expand-context-allow-unbound? ctx_98)))"
" #f)))"
"(let-values()"
"(let-values((()"
"(begin"
"(if(if(module-binding? binding_29)"
"(not"
"(eq?"
"(module-binding-module binding_29)"
"(root-expand-context-self-mpi ctx_98)))"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                    \"cannot mutate module-required identifier\""
" s_705"
" id_124))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_121)"
"(expand-context-observer ctx_98)))"
"(if obs_121"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_121 'next)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(register-variable-referenced-if-local! binding_29)"
"(values))))"
"(let-values(((rebuild-s_12)"
"(let-values(((ctx408_0) ctx_98)((s409_0) s_705))"
"(keep-as-needed119.1 #f #f #f ctx408_0 s409_0))))"
"(let-values(((exp-rhs_5)"
"(let-values(((temp410_0) rhs394_0)"
"((temp411_0)"
"(as-expression-context ctx_98)))"
"(expand9.1 #f #f #f temp410_0 temp411_0))))"
"(if(expand-context-to-parsed? ctx_98)"
"(parsed-set!9.1"
" rebuild-s_12"
"(parsed-id2.1 id_124 binding_29 #f)"
" exp-rhs_5)"
"(let-values(((rebuild-s412_0) rebuild-s_12)"
"((temp413_0)"
"(list"
" set!392_0"
"(let-values(((id414_0) id_124)"
"((t415_0) t_62)"
"((temp416_0)"
"(free-id-set-empty-or-just-module*?"
"(expand-context-stops"
" ctx_98))))"
"(substitute-variable6.1"
" temp416_0"
" id414_0"
" t415_0))"
" exp-rhs_5)))"
"(rebuild5.1 #t rebuild-s412_0 temp413_0)))))))))"
"(if(not binding_29)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                                  \"unbound identifier\""
" s_705"
" id_124"
" null"
"(syntax-debug-info-string id_124 ctx_98)))"
"(if(1/set!-transformer? t_62)"
"(let-values()"
"(if(not-in-this-expand-context? t_62 ctx_98)"
"(let-values()"
"(let-values(((temp417_0)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_705"
" disarmed-s_18"
" set!392_0"
" rhs394_0"
" id_124"
" from-rename?_0"
" ctx_98)"
" t_62"
" ctx_98))"
"((ctx418_0) ctx_98))"
"(expand9.1 #f #f #f temp417_0 ctx418_0)))"
"(let-values()"
"(let-values(((exp-s_13 re-ctx_1)"
"(let-values(((t419_0) t_62)"
"((insp420_0) insp_24)"
"((s421_0) s_705)"
"((orig-id422_0) orig-id_1)"
"((ctx423_0) ctx_98)"
"((binding424_0) binding_29)"
"((orig-id425_0) orig-id_1))"
"(apply-transformer52.1"
" orig-id425_0"
" t419_0"
" insp420_0"
" s421_0"
" orig-id422_0"
" ctx423_0"
" binding424_0))))"
"(if(expand-context-just-once? ctx_98)"
"(let-values() exp-s_13)"
"(let-values()"
"(let-values(((exp-s426_0) exp-s_13)"
"((re-ctx427_0) re-ctx_1))"
"(expand9.1 #f #f #f exp-s426_0 re-ctx427_0))))))))"
"(if(1/rename-transformer? t_62)"
"(let-values()"
"(if(not-in-this-expand-context? t_62 ctx_98)"
"(let-values()"
"(let-values(((temp428_0)"
"(avoid-current-expand-context"
"(substitute-set!-rename"
" s_705"
" disarmed-s_18"
" set!392_0"
" rhs394_0"
" id_124"
" from-rename?_0"
" ctx_98"
" t_62)"
" t_62"
" ctx_98))"
"((ctx429_0) ctx_98))"
"(expand9.1 #f #f #f temp428_0 ctx429_0)))"
"(let-values()"
"(rename-loop_0"
"(syntax-track-origin$1"
"(rename-transformer-target-in-context t_62 ctx_98)"
" id_124"
" id_124)"
" #t))))"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                      \"cannot mutate syntax identifier\""
" s_705"
" id_124))))))))))))))"
" rename-loop_0)"
" orig-id_1"
" #f))))))))"
"(define-values"
"(substitute-set!-rename)"
"(let-values(((substitute-set!-rename31_0)"
"(lambda(s24_3 disarmed-s25_0 set!-id26_0 id27_0 rhs-s28_0 from-rename?29_0 ctx30_0 t23_0)"
"(begin"
" 'substitute-set!-rename31"
"(let-values(((s_717) s24_3))"
"(let-values(((disarmed-s_19) disarmed-s25_0))"
"(let-values(((set!-id_0) set!-id26_0))"
"(let-values(((id_125) id27_0))"
"(let-values(((rhs-s_0) rhs-s28_0))"
"(let-values(((from-rename?_1) from-rename?29_0))"
"(let-values(((ctx_99) ctx30_0))"
"(let-values(((t_63) t23_0))"
"(let-values()"
"(if(let-values(((or-part_388) t_63))"
"(if or-part_388 or-part_388 from-rename?_1))"
"(let-values()"
"(let-values(((new-id_1)"
"(if t_63"
"(rename-transformer-target-in-context t_63 ctx_99)"
" id_125)))"
"(syntax-rearm$1"
"(datum->syntax$1"
" disarmed-s_19"
"(list set!-id_0 new-id_1 rhs-s_0)"
" disarmed-s_19"
" disarmed-s_19)"
" s_717)))"
"(let-values() s_717)))))))))))))))"
"(case-lambda"
"((s_718 disarmed-s_20 set!-id_1 id_126 rhs-s_1 from-rename?_2 ctx_100)"
"(begin(substitute-set!-rename31_0 s_718 disarmed-s_20 set!-id_1 id_126 rhs-s_1 from-rename?_2 ctx_100 #f)))"
"((s_719 disarmed-s_21 set!-id_2 id_127 rhs-s_2 from-rename?_3 ctx_101 t23_1)"
"(substitute-set!-rename31_0 s_719 disarmed-s_21 set!-id_2 id_127 rhs-s_2 from-rename?_3 ctx_101 t23_1)))))"
"(void"
"(add-core-form!*"
" '#%variable-reference"
"(lambda(s_720 ctx_102)"
"(let-values((()"
"(begin"
"(let-values(((obs_122)(expand-context-observer ctx_102)))"
"(if obs_122"
"(let-values()(let-values()(call-expand-observe obs_122 'prim-#%variable-reference)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_22)(syntax-disarm$1 s_720)))"
"(let-values(((ok?_60 #%variable-reference430_0 id431_0)"
"(let-values(((s_721) disarmed-s_22))"
"(if(let-values(((s_722)(if(syntax?$1 s_721)(syntax-e$1 s_721) s_721)))"
"(if(pair? s_722)"
"(if(let-values(((s_723)(car s_722))) #t)"
"(let-values(((s_724)(cdr s_722)))"
"(let-values(((s_725)(if(syntax?$1 s_724)(syntax-e$1 s_724) s_724)))"
"(if(pair? s_725)"
"(if(let-values(((s_726)(car s_725)))"
"(let-values(((or-part_389)"
"(if(syntax?$1 s_726)(symbol?(syntax-e$1 s_726)) #f)))"
"(if or-part_389 or-part_389(symbol? s_726))))"
"(let-values(((s_727)(cdr s_725)))"
"(let-values(((s_728)(if(syntax?$1 s_727)(syntax-e$1 s_727) s_727)))"
"(null? s_728)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((#%variable-reference430_1 id431_1)"
"(let-values(((s_729)(if(syntax?$1 s_721)(syntax-e$1 s_721) s_721)))"
"(let-values(((#%variable-reference432_0)"
"(let-values(((s_730)(car s_729))) s_730))"
"((id433_0)"
"(let-values(((s_731)(cdr s_729)))"
"(let-values(((s_732)"
"(if(syntax?$1 s_731)"
"(syntax-e$1 s_731)"
" s_731)))"
"(let-values(((id434_0)"
"(let-values(((s_733)(car s_732))) s_733))"
"(()"
"(let-values(((s_734)(cdr s_732)))"
"(let-values(((s_735)"
"(if(syntax?$1 s_734)"
"(syntax-e$1 s_734)"
" s_734)))"
"(values)))))"
"(values id434_0))))))"
"(values #%variable-reference432_0 id433_0)))))"
"(values #t #%variable-reference430_1 id431_1)))"
"(values #f #f #f)))))"
"(let-values(((ok?_61 #%variable-reference435_0 #%top436_0 id437_0)"
"(let-values(((s_736) disarmed-s_22))"
"(if(if(not ok?_60)"
"(let-values(((s_737)(if(syntax?$1 s_736)(syntax-e$1 s_736) s_736)))"
"(if(pair? s_737)"
"(if(let-values(((s_738)(car s_737))) #t)"
"(let-values(((s_739)(cdr s_737)))"
"(let-values(((s_740)(if(syntax?$1 s_739)(syntax-e$1 s_739) s_739)))"
"(if(pair? s_740)"
"(if(let-values(((s_741)(car s_740)))"
"(let-values(((s_742)"
"(if(syntax?$1 s_741)(syntax-e$1 s_741) s_741)))"
"(if(pair? s_742)"
"(if(let-values(((s_743)(car s_742))) #t)"
"(let-values(((s_744)(cdr s_742)))"
"(let-values(((or-part_390)"
"(if(syntax?$1 s_744)"
"(symbol?(syntax-e$1 s_744))"
" #f)))"
"(if or-part_390 or-part_390(symbol? s_744))))"
" #f)"
" #f)))"
"(let-values(((s_745)(cdr s_740)))"
"(let-values(((s_746)(if(syntax?$1 s_745)(syntax-e$1 s_745) s_745)))"
"(null? s_746)))"
" #f)"
" #f)))"
" #f)"
" #f))"
" #f)"
"(let-values()"
"(let-values(((#%variable-reference435_1 #%top436_1 id437_1)"
"(let-values(((s_747)(if(syntax?$1 s_736)(syntax-e$1 s_736) s_736)))"
"(let-values(((#%variable-reference438_0)"
"(let-values(((s_748)(car s_747))) s_748))"
"((#%top439_0 id440_0)"
"(let-values(((s_749)(cdr s_747)))"
"(let-values(((s_750)"
"(if(syntax?$1 s_749)"
"(syntax-e$1 s_749)"
" s_749)))"
"(let-values(((#%top441_0 id442_0)"
"(let-values(((s_751)(car s_750)))"
"(let-values(((s_752)"
"(if(syntax?$1 s_751)"
"(syntax-e$1 s_751)"
" s_751)))"
"(let-values(((#%top443_0)"
"(let-values(((s_753)"
"(car"
" s_752)))"
" s_753))"
"((id444_0)"
"(let-values(((s_754)"
"(cdr"
" s_752)))"
" s_754)))"
"(values #%top443_0 id444_0)))))"
"(()"
"(let-values(((s_755)(cdr s_750)))"
"(let-values(((s_756)"
"(if(syntax?$1 s_755)"
"(syntax-e$1 s_755)"
" s_755)))"
"(values)))))"
"(values #%top441_0 id442_0))))))"
"(values #%variable-reference438_0 #%top439_0 id440_0)))))"
"(values #t #%variable-reference435_1 #%top436_1 id437_1)))"
"(values #f #f #f #f)))))"
"(let-values(((ok?_62 #%variable-reference445_0)"
"(let-values(((s_757) disarmed-s_22))"
"(if(if(not(let-values(((or-part_391) ok?_60))(if or-part_391 or-part_391 ok?_61)))"
" #t"
" #f)"
"(let-values(((orig-s_60) s_757))"
"(let-values(((#%variable-reference445_1)"
"(let-values(((s_758)(if(syntax?$1 s_757)(syntax-e$1 s_757) s_757)))"
"(if(pair? s_758)"
"(let-values(((#%variable-reference446_0)"
"(let-values(((s_759)(car s_758))) s_759))"
"(()"
"(let-values(((s_760)(cdr s_758)))"
"(let-values(((s_761)"
"(if(syntax?$1 s_760)"
"(syntax-e$1 s_760)"
" s_760)))"
"(if(null? s_761)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_60))))))"
"(values #%variable-reference446_0))"
"                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_60)))))"
"(values #t #%variable-reference445_1)))"
"(values #f #f)))))"
"(if(let-values(((or-part_392) ok?_60))(if or-part_392 or-part_392 ok?_61))"
"(let-values()"
"(let-values(((var-id_0)(if ok?_60 id431_0 id437_0)))"
"(let-values(((binding_30)"
"(let-values(((var-id447_0) var-id_0)"
"((temp448_0)(expand-context-phase ctx_102))"
"((temp449_0) 'ambiguous))"
"(resolve+shift28.1 temp449_0 #f null unsafe-undefined #f var-id447_0 temp448_0))))"
"(let-values((()"
"(begin"
"(if(eq? binding_30 'ambiguous)"
"(let-values()(raise-ambiguous-error var-id_0 ctx_102))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_393) binding_30))"
"(if or-part_393 or-part_393(expand-context-allow-unbound? ctx_102)))"
"(void)"
"(let-values()"
"(raise-unbound-syntax-error"
" #f"
"                                              \"unbound identifier\""
" s_720"
" var-id_0"
" null"
"(syntax-debug-info-string var-id_0 ctx_102))))"
"(values))))"
"(let-values(((t_64 primitive?_12 insp-of-t_7 protected?_13)"
"(if binding_30"
"(let-values(((binding450_0) binding_30)"
"((ctx451_0) ctx_102)"
"((var-id452_0) var-id_0)"
"((s453_0) s_720)"
"((temp454_0)(expand-context-in-local-expand? ctx_102)))"
"(lookup62.1 s453_0 temp454_0 binding450_0 ctx451_0 var-id452_0))"
"(values #f #f #f #f))))"
"(begin"
"(if(if t_64(not(variable? t_64)) #f)"
"(let-values()"
"                                   (raise-syntax-error$1 #f \"identifier does not refer to a variable\" var-id_0 s_720))"
"(void))"
"(if(expand-context-to-parsed? ctx_102)"
"(parsed-#%variable-reference11.1"
"(keep-properties-only~ s_720)"
"(if ok?_61"
"(let-values()(parsed-top-id4.1 var-id_0 binding_30 #f))"
"(let-values()(parsed-id2.1 var-id_0 binding_30 #f))))"
" s_720))))))))"
"(let-values()"
"(if(expand-context-to-parsed? ctx_102)"
"(parsed-#%variable-reference11.1(keep-properties-only~ s_720) #f)"
" s_720)))))))))))"
"(void"
"(add-core-form!*"
" '#%expression"
"(lambda(s_762 ctx_103)"
"(let-values((()"
"(begin"
"(let-values(((obs_123)(expand-context-observer ctx_103)))"
"(if obs_123"
"(let-values()(let-values()(call-expand-observe obs_123 'prim-#%expression)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_23)(syntax-disarm$1 s_762)))"
"(let-values(((ok?_63 #%expression455_0 e456_0)"
"(let-values(((s_763) disarmed-s_23))"
"(let-values(((orig-s_61) s_763))"
"(let-values(((#%expression455_1 e456_1)"
"(let-values(((s_764)(if(syntax?$1 s_763)(syntax-e$1 s_763) s_763)))"
"(if(pair? s_764)"
"(let-values(((#%expression457_0)"
"(let-values(((s_765)(car s_764))) s_765))"
"((e458_0)"
"(let-values(((s_766)(cdr s_764)))"
"(let-values(((s_767)"
"(if(syntax?$1 s_766)"
"(syntax-e$1 s_766)"
" s_766)))"
"(if(pair? s_767)"
"(let-values(((e459_0)"
"(let-values(((s_768)(car s_767)))"
" s_768))"
"(()"
"(let-values(((s_769)(cdr s_767)))"
"(let-values(((s_770)"
"(if(syntax?$1 s_769)"
"(syntax-e$1 s_769)"
" s_769)))"
"(if(null? s_770)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                      \"bad syntax\""
" orig-s_61))))))"
"(values e459_0))"
"                                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_61))))))"
"(values #%expression457_0 e458_0))"
"                                             (raise-syntax-error$1 #f \"bad syntax\" orig-s_61)))))"
"(values #t #%expression455_1 e456_1))))))"
"(let-values(((rebuild-s_13)"
"(let-values(((ctx460_0) ctx_103)((s461_0) s_762)((temp462_0) #t))"
"(keep-as-needed119.1 temp462_0 #f #f ctx460_0 s461_0))))"
"(let-values(((exp-e_0)"
"(let-values(((temp463_0) e456_0)"
"((temp464_0)"
"(let-values(((temp465_0)(as-expression-context ctx_103))"
"((ctx466_0) ctx_103))"
"(as-tail-context22.1 ctx466_0 temp465_0))))"
"(expand9.1 #f #f #f temp463_0 temp464_0))))"
"(if(expand-context-to-parsed? ctx_103)"
" exp-e_0"
"(if(let-values(((or-part_394)"
"(if(expand-context-in-local-expand? ctx_103)"
"(expand-context-keep-#%expression? ctx_103)"
" #f)))"
"(if or-part_394 or-part_394(eq? 'top-level(expand-context-context ctx_103))))"
"(let-values()"
"(let-values(((rebuild-s467_0) rebuild-s_13)((temp468_0)(list #%expression455_0 exp-e_0)))"
"(rebuild5.1 #t rebuild-s467_0 temp468_0)))"
"(let-values()"
"(let-values(((result-s_13)(syntax-track-origin$1 exp-e_0 rebuild-s_13)))"
"(begin"
"(let-values(((obs_124)(expand-context-observer ctx_103)))"
"(if obs_124"
"(let-values()(let-values()(call-expand-observe obs_124 'tag result-s_13)))"
"(void)))"
" result-s_13)))))))))))))"
" (void (add-core-form!* 'unquote (lambda (s_771 ctx_104) (raise-syntax-error$1 #f \"not in quasiquote\" s_771))))"
" (void (add-core-form!* 'unquote-splicing (lambda (s_772 ctx_105) (raise-syntax-error$1 #f \"not in quasiquote\" s_772))))"
"(define-values"
"(binding-for-transformer?)"
"(lambda(b_42 id_128 at-phase_12 ns_112)"
"(begin"
"(if(not at-phase_12)"
"(let-values()"
"(let-values(((m_30)"
"(namespace->module ns_112(1/module-path-index-resolve(module-binding-nominal-module b_42)))))"
"(let-values(((b/p_4)"
"(hash-ref"
"(hash-ref(module-provides m_30)(module-binding-nominal-phase b_42) '#hasheq())"
"(module-binding-nominal-sym b_42)"
" #f)))"
"(provided-as-transformer? b/p_4))))"
"(let-values()"
"(let-values(((val_14 primitive?_13 insp_25 protected?_14)"
"(let-values(((b1_8) b_42)"
"((empty-env2_0) empty-env)"
"((null3_0) null)"
"((ns4_2) ns_112)"
"((at-phase5_0) at-phase_12)"
"((id6_0) id_128))"
"(binding-lookup50.1 #f #f b1_8 empty-env2_0 null3_0 ns4_2 at-phase5_0 id6_0))))"
"(not(variable? val_14))))))))"
"(define-values(layers) '(raw phaseless id))"
"(define-values(provide-form-name) 'provide)"
"(define-values"
"(parse-and-expand-provides!)"
"(lambda(specs_0 orig-s_62 rp_1 self_30 phase_45 ctx_106)"
"(begin"
"(let-values(((ns_125)(expand-context-namespace ctx_106)))"
"((letrec-values(((loop_116)"
"(lambda(specs_1 at-phase_13 protected?_15 layer_6)"
"(begin"
" 'loop"
"(let-values(((track-stxess_0 exp-specss_0)"
"(let-values(((track-stxes_0 exp-specs_0)"
"(let-values(((lst_77) specs_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_77)))"
"((letrec-values(((for-loop_98)"
"(lambda(track-stxes_1"
" exp-specs_1"
" lst_406)"
"(begin"
" 'for-loop"
"(if(pair? lst_406)"
"(let-values(((spec_0)"
"(unsafe-car"
" lst_406))"
"((rest_239)"
"(unsafe-cdr"
" lst_406)))"
"(let-values(((track-stxes_2"
" exp-specs_2)"
"(let-values(((track-stxes_3)"
" track-stxes_1)"
"((exp-specs_3)"
" exp-specs_1))"
"(let-values(((track-stxes_4"
" exp-specs_4)"
"(let-values()"
"(let-values(((track-stxes1_0"
" exp-specs2_0)"
"(let-values()"
"(let-values(((disarmed-spec_0)"
"(syntax-disarm$1"
" spec_0)))"
"(let-values(((fm_2)"
"(if(pair?"
"(syntax-e$1"
" disarmed-spec_0))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" disarmed-spec_0)))"
"(syntax-e$1"
"(car"
"(syntax-e$1"
" disarmed-spec_0)))"
" #f)"
" #f)))"
"(let-values(((check-nested_1)"
"(lambda(want-layer_3)"
"(begin"
" 'check-nested"
"(if(member"
" want-layer_3"
"(member"
" layer_6"
" layers))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"                                                                                                                                                                    \"nested `~a' not allowed\""
" fm_2)"
" orig-s_62"
" spec_0)))))))"
"(let-values(((tmp_42)"
" fm_2))"
"(let-values(((index_7)"
"(if(symbol?"
" tmp_42)"
"(hash-ref"
" '#hasheq((all-defined"
" ."
" 9)"
"(all-defined-except"
" ."
" 10)"
"(all-from"
" ."
" 7)"
"(all-from-except"
" ."
" 8)"
"(expand"
" ."
" 13)"
"(for-label"
" ."
" 3)"
"(for-meta"
" ."
" 1)"
"(for-syntax"
" ."
" 2)"
"(prefix-all-defined"
" ."
" 11)"
"(prefix-all-defined-except"
" ."
" 12)"
"(protect"
" ."
" 4)"
"(rename ."
" 5)"
"(struct"
" ."
" 6))"
" tmp_42"
"(lambda()"
" 0))"
" 0)))"
"(if(unsafe-fx<"
" index_7"
" 6)"
"(if(unsafe-fx<"
" index_7"
" 2)"
"(if(unsafe-fx<"
" index_7"
" 1)"
"(let-values()"
"(if(identifier?"
" spec_0)"
"(let-values()"
"(begin"
"(parse-identifier!"
" spec_0"
" orig-s_62"
"(syntax-e$1"
" spec_0)"
" at-phase_13"
" ns_125"
" rp_1"
" protected?_15)"
"(values"
" null"
"(list"
" spec_0))))"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                               \"bad syntax\""
" orig-s_62"
" spec_0))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'raw)"
"(values))))"
"(let-values(((ok?_64"
" for-meta3_0"
" phase-level4_0"
" spec5_0)"
"(let-values(((s_168)"
" disarmed-spec_0))"
"(let-values(((orig-s_63)"
" s_168))"
"(let-values(((for-meta3_1"
" phase-level4_1"
" spec5_1)"
"(let-values(((s_773)"
"(if(syntax?$1"
" s_168)"
"(syntax-e$1"
" s_168)"
" s_168)))"
"(if(pair?"
" s_773)"
"(let-values(((for-meta6_0)"
"(let-values(((s_488)"
"(car"
" s_773)))"
" s_488))"
"((phase-level7_0"
" spec8_0)"
"(let-values(((s_448)"
"(cdr"
" s_773)))"
"(let-values(((s_493)"
"(if(syntax?$1"
" s_448)"
"(syntax-e$1"
" s_448)"
" s_448)))"
"(if(pair?"
" s_493)"
"(let-values(((phase-level9_0)"
"(let-values(((s_774)"
"(car"
" s_493)))"
" s_774))"
"((spec10_0)"
"(let-values(((s_775)"
"(cdr"
" s_493)))"
"(let-values(((s_81)"
"(if(syntax?$1"
" s_775)"
"(syntax-e$1"
" s_775)"
" s_775)))"
"(let-values(((flat-s_46)"
"(to-syntax-list.1"
" s_81)))"
"(if(not"
" flat-s_46)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_63))"
"(let-values()"
" flat-s_46)))))))"
"(values"
" phase-level9_0"
" spec10_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_63))))))"
"(values"
" for-meta6_0"
" phase-level7_0"
" spec8_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_63)))))"
"(values"
" #t"
" for-meta3_1"
" phase-level4_1"
" spec5_1))))))"
"(let-values(((p_87)"
"(syntax-e$1"
" phase-level4_0)))"
"(let-values((()"
"(begin"
"(if(phase?"
" p_87)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                     \"bad `for-meta' phase\""
" orig-s_62"
" spec_0)))"
"(values))))"
"(let-values(((track-stxes_5"
" exp-specs_5)"
"(loop_116"
" spec5_0"
"(phase+"
" p_87"
" at-phase_13)"
" protected?_15"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_5"
"(let-values(((spec11_0)"
" spec_0)"
"((temp12_8)"
"(list*"
" for-meta3_0"
" phase-level4_0"
" exp-specs_5)))"
"(rebuild5.1"
" #t"
" spec11_0"
" temp12_8))))))))))))"
"(if(unsafe-fx<"
" index_7"
" 3)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'raw)"
"(values))))"
"(let-values(((ok?_65"
" for-syntax13_0"
" spec14_0)"
"(let-values(((s_450)"
" disarmed-spec_0))"
"(let-values(((orig-s_64)"
" s_450))"
"(let-values(((for-syntax13_1"
" spec14_1)"
"(let-values(((s_24)"
"(if(syntax?$1"
" s_450)"
"(syntax-e$1"
" s_450)"
" s_450)))"
"(if(pair?"
" s_24)"
"(let-values(((for-syntax15_0)"
"(let-values(((s_306)"
"(car"
" s_24)))"
" s_306))"
"((spec16_0)"
"(let-values(((s_157)"
"(cdr"
" s_24)))"
"(let-values(((s_776)"
"(if(syntax?$1"
" s_157)"
"(syntax-e$1"
" s_157)"
" s_157)))"
"(let-values(((flat-s_47)"
"(to-syntax-list.1"
" s_776)))"
"(if(not"
" flat-s_47)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_64))"
"(let-values()"
" flat-s_47)))))))"
"(values"
" for-syntax15_0"
" spec16_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_64)))))"
"(values"
" #t"
" for-syntax13_1"
" spec14_1))))))"
"(let-values(((track-stxes_6"
" exp-specs_6)"
"(loop_116"
" spec14_0"
"(phase+"
" 1"
" at-phase_13)"
" protected?_15"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_6"
"(let-values(((spec17_0)"
" spec_0)"
"((temp18_6)"
"(list*"
" for-syntax13_0"
" exp-specs_6)))"
"(rebuild5.1"
" #t"
" spec17_0"
" temp18_6)))))))))"
"(if(unsafe-fx<"
" index_7"
" 4)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'raw)"
"(values))))"
"(let-values(((ok?_66"
" for-label19_0"
" spec20_0)"
"(let-values(((s_500)"
" disarmed-spec_0))"
"(let-values(((orig-s_65)"
" s_500))"
"(let-values(((for-label19_1"
" spec20_1)"
"(let-values(((s_309)"
"(if(syntax?$1"
" s_500)"
"(syntax-e$1"
" s_500)"
" s_500)))"
"(if(pair?"
" s_309)"
"(let-values(((for-label21_0)"
"(let-values(((s_443)"
"(car"
" s_309)))"
" s_443))"
"((spec22_0)"
"(let-values(((s_27)"
"(cdr"
" s_309)))"
"(let-values(((s_28)"
"(if(syntax?$1"
" s_27)"
"(syntax-e$1"
" s_27)"
" s_27)))"
"(let-values(((flat-s_48)"
"(to-syntax-list.1"
" s_28)))"
"(if(not"
" flat-s_48)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_65))"
"(let-values()"
" flat-s_48)))))))"
"(values"
" for-label21_0"
" spec22_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_65)))))"
"(values"
" #t"
" for-label19_1"
" spec20_1))))))"
"(let-values(((track-stxes_7"
" exp-specs_7)"
"(loop_116"
" spec20_0"
" #f"
" protected?_15"
" 'phaseless)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_7"
"(let-values(((spec23_0)"
" spec_0)"
"((temp24_10)"
"(list*"
" for-label19_0"
" exp-specs_7)))"
"(rebuild5.1"
" #t"
" spec23_0"
" temp24_10)))))))))"
"(if(unsafe-fx<"
" index_7"
" 5)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values((()"
"(begin"
"(if protected?_15"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                     \"nested `protect' not allowed\""
" orig-s_62"
" spec_0))"
"(void))"
"(values))))"
"(let-values(((ok?_67"
" protect25_0"
" p-spec26_0)"
"(let-values(((s_49)"
" disarmed-spec_0))"
"(let-values(((orig-s_66)"
" s_49))"
"(let-values(((protect25_1"
" p-spec26_1)"
"(let-values(((s_777)"
"(if(syntax?$1"
" s_49)"
"(syntax-e$1"
" s_49)"
" s_49)))"
"(if(pair?"
" s_777)"
"(let-values(((protect27_0)"
"(let-values(((s_506)"
"(car"
" s_777)))"
" s_506))"
"((p-spec28_0)"
"(let-values(((s_507)"
"(cdr"
" s_777)))"
"(let-values(((s_52)"
"(if(syntax?$1"
" s_507)"
"(syntax-e$1"
" s_507)"
" s_507)))"
"(let-values(((flat-s_49)"
"(to-syntax-list.1"
" s_52)))"
"(if(not"
" flat-s_49)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_66))"
"(let-values()"
" flat-s_49)))))))"
"(values"
" protect27_0"
" p-spec28_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                       \"bad syntax\""
" orig-s_66)))))"
"(values"
" #t"
" protect25_1"
" p-spec26_1))))))"
"(let-values(((track-stxes_8"
" exp-specs_8)"
"(loop_116"
" p-spec26_0"
" at-phase_13"
" #t"
" layer_6)))"
"(values"
" null"
"(list"
"(syntax-track-origin*"
" track-stxes_8"
"(let-values(((spec29_0)"
" spec_0)"
"((temp30_7)"
"(list*"
" protect25_0"
" exp-specs_8)))"
"(rebuild5.1"
" #t"
" spec29_0"
" temp30_7))))))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_68"
" rename31_0"
" id:from32_0"
" id:to33_0)"
"(let-values(((s_315)"
" disarmed-spec_0))"
"(let-values(((orig-s_67)"
" s_315))"
"(let-values(((rename31_1"
" id:from32_1"
" id:to33_1)"
"(let-values(((s_778)"
"(if(syntax?$1"
" s_315)"
"(syntax-e$1"
" s_315)"
" s_315)))"
"(if(pair?"
" s_778)"
"(let-values(((rename34_0)"
"(let-values(((s_200)"
"(car"
" s_778)))"
" s_200))"
"((id:from35_0"
" id:to36_0)"
"(let-values(((s_59)"
"(cdr"
" s_778)))"
"(let-values(((s_404)"
"(if(syntax?$1"
" s_59)"
"(syntax-e$1"
" s_59)"
" s_59)))"
"(if(pair?"
" s_404)"
"(let-values(((id:from37_0)"
"(let-values(((s_201)"
"(car"
" s_404)))"
"(if(let-values(((or-part_215)"
"(if(syntax?$1"
" s_201)"
"(symbol?"
"(syntax-e$1"
" s_201))"
" #f)))"
"(if or-part_215"
" or-part_215"
"(symbol?"
" s_201)))"
" s_201"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_67"
" s_201))))"
"((id:to38_0)"
"(let-values(((s_60)"
"(cdr"
" s_404)))"
"(let-values(((s_61)"
"(if(syntax?$1"
" s_60)"
"(syntax-e$1"
" s_60)"
" s_60)))"
"(if(pair?"
" s_61)"
"(let-values(((id:to39_0)"
"(let-values(((s_203)"
"(car"
" s_61)))"
"(if(let-values(((or-part_395)"
"(if(syntax?$1"
" s_203)"
"(symbol?"
"(syntax-e$1"
" s_203))"
" #f)))"
"(if or-part_395"
" or-part_395"
"(symbol?"
" s_203)))"
" s_203"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_67"
" s_203))))"
"(()"
"(let-values(((s_424)"
"(cdr"
" s_61)))"
"(let-values(((s_414)"
"(if(syntax?$1"
" s_424)"
"(syntax-e$1"
" s_424)"
" s_424)))"
"(if(null?"
" s_414)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_67))))))"
"(values"
" id:to39_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_67))))))"
"(values"
" id:from37_0"
" id:to38_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_67))))))"
"(values"
" rename34_0"
" id:from35_0"
" id:to36_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_67)))))"
"(values"
" #t"
" rename31_1"
" id:from32_1"
" id:to33_1))))))"
"(begin"
"(parse-identifier!"
" id:from32_0"
" orig-s_62"
"(syntax-e$1"
" id:to33_0)"
" at-phase_13"
" ns_125"
" rp_1"
" protected?_15)"
"(values"
" null"
"(list"
" spec_0))))))))))"
"(if(unsafe-fx<"
" index_7"
" 9)"
"(if(unsafe-fx<"
" index_7"
" 7)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_69"
" struct40_0"
" id:struct41_0"
" id:field42_0)"
"(let-values(((s_521)"
" disarmed-spec_0))"
"(let-values(((orig-s_68)"
" s_521))"
"(let-values(((struct40_1"
" id:struct41_1"
" id:field42_1)"
"(let-values(((s_207)"
"(if(syntax?$1"
" s_521)"
"(syntax-e$1"
" s_521)"
" s_521)))"
"(if(pair?"
" s_207)"
"(let-values(((struct43_0)"
"(let-values(((s_209)"
"(car"
" s_207)))"
" s_209))"
"((id:struct44_0"
" id:field45_0)"
"(let-values(((s_38)"
"(cdr"
" s_207)))"
"(let-values(((s_319)"
"(if(syntax?$1"
" s_38)"
"(syntax-e$1"
" s_38)"
" s_38)))"
"(if(pair?"
" s_319)"
"(let-values(((id:struct46_0)"
"(let-values(((s_779)"
"(car"
" s_319)))"
"(if(let-values(((or-part_396)"
"(if(syntax?$1"
" s_779)"
"(symbol?"
"(syntax-e$1"
" s_779))"
" #f)))"
"(if or-part_396"
" or-part_396"
"(symbol?"
" s_779)))"
" s_779"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                       \"not an identifier\""
" orig-s_68"
" s_779))))"
"((id:field47_0)"
"(let-values(((s_780)"
"(cdr"
" s_319)))"
"(let-values(((s_432)"
"(if(syntax?$1"
" s_780)"
"(syntax-e$1"
" s_780)"
" s_780)))"
"(if(pair?"
" s_432)"
"(let-values(((id:field48_0)"
"(let-values(((s_522)"
"(car"
" s_432)))"
"(let-values(((s_781)"
"(if(syntax?$1"
" s_522)"
"(syntax-e$1"
" s_522)"
" s_522)))"
"(let-values(((flat-s_50)"
"(to-syntax-list.1"
" s_781)))"
"(if(not"
" flat-s_50)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_68))"
"(let-values()"
"(let-values(((id:field_0)"
"(let-values(((lst_53)"
" flat-s_50))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_53)))"
"((letrec-values(((for-loop_317)"
"(lambda(id:field_1"
" lst_272)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_272)"
"(let-values(((s_782)"
"(unsafe-car"
" lst_272))"
"((rest_240)"
"(unsafe-cdr"
" lst_272)))"
"(let-values(((id:field_2)"
"(let-values(((id:field_3)"
" id:field_1))"
"(let-values(((id:field_4)"
"(let-values()"
"(let-values(((id:field49_0)"
"(let-values()"
"(if(let-values(((or-part_397)"
"(if(syntax?$1"
" s_782)"
"(symbol?"
"(syntax-e$1"
" s_782))"
" #f)))"
"(if or-part_397"
" or-part_397"
"(symbol?"
" s_782)))"
" s_782"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_68"
" s_782)))))"
"(cons"
" id:field49_0"
" id:field_3)))))"
"(values"
" id:field_4)))))"
"(if(not"
" #f)"
"(for-loop_317"
" id:field_2"
" rest_240)"
" id:field_2)))"
" id:field_1)))))"
" for-loop_317)"
" null"
" lst_53)))))"
"(reverse$1"
" id:field_0))))))))"
"(()"
"(let-values(((s_527)"
"(cdr"
" s_432)))"
"(let-values(((s_528)"
"(if(syntax?$1"
" s_527)"
"(syntax-e$1"
" s_527)"
" s_527)))"
"(if(null?"
" s_528)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_68))))))"
"(values"
" id:field48_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_68))))))"
"(values"
" id:struct46_0"
" id:field47_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_68))))))"
"(values"
" struct43_0"
" id:struct44_0"
" id:field45_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_68)))))"
"(values"
" #t"
" struct40_1"
" id:struct41_1"
" id:field42_1))))))"
"(begin"
"(parse-struct!"
" id:struct41_0"
" orig-s_62"
" id:field42_0"
" at-phase_13"
" ns_125"
" rp_1"
" protected?_15)"
"(values"
" null"
"(list"
" spec_0))))))"
"(if(unsafe-fx<"
" index_7"
" 8)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_70"
" all-from50_0"
" mod-path51_0)"
"(let-values(((s_321)"
" disarmed-spec_0))"
"(let-values(((orig-s_69)"
" s_321))"
"(let-values(((all-from50_1"
" mod-path51_1)"
"(let-values(((s_323)"
"(if(syntax?$1"
" s_321)"
"(syntax-e$1"
" s_321)"
" s_321)))"
"(if(pair?"
" s_323)"
"(let-values(((all-from52_0)"
"(let-values(((s_783)"
"(car"
" s_323)))"
" s_783))"
"((mod-path53_0)"
"(let-values(((s_427)"
"(cdr"
" s_323)))"
"(let-values(((s_214)"
"(if(syntax?$1"
" s_427)"
"(syntax-e$1"
" s_427)"
" s_427)))"
"(if(pair?"
" s_214)"
"(let-values(((mod-path54_0)"
"(let-values(((s_428)"
"(car"
" s_214)))"
" s_428))"
"(()"
"(let-values(((s_215)"
"(cdr"
" s_214)))"
"(let-values(((s_169)"
"(if(syntax?$1"
" s_215)"
"(syntax-e$1"
" s_215)"
" s_215)))"
"(if(null?"
" s_169)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_69))))))"
"(values"
" mod-path54_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_69))))))"
"(values"
" all-from52_0"
" mod-path53_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_69)))))"
"(values"
" #t"
" all-from50_1"
" mod-path51_1))))))"
"(begin"
"(parse-all-from"
" mod-path51_0"
" orig-s_62"
" self_30"
" null"
" at-phase_13"
" ns_125"
" rp_1"
" protected?_15"
" ctx_106)"
"(values"
" null"
"(list"
" spec_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_71"
" all-from-except55_0"
" mod-path56_0"
" id57_1)"
"(let-values(((s_103)"
" disarmed-spec_0))"
"(let-values(((orig-s_70)"
" s_103))"
"(let-values(((all-from-except55_1"
" mod-path56_1"
" id57_2)"
"(let-values(((s_105)"
"(if(syntax?$1"
" s_103)"
"(syntax-e$1"
" s_103)"
" s_103)))"
"(if(pair?"
" s_105)"
"(let-values(((all-from-except58_0)"
"(let-values(((s_218)"
"(car"
" s_105)))"
" s_218))"
"((mod-path59_0"
" id60_1)"
"(let-values(((s_784)"
"(cdr"
" s_105)))"
"(let-values(((s_785)"
"(if(syntax?$1"
" s_784)"
"(syntax-e$1"
" s_784)"
" s_784)))"
"(if(pair?"
" s_785)"
"(let-values(((mod-path61_0)"
"(let-values(((s_220)"
"(car"
" s_785)))"
" s_220))"
"((id62_0)"
"(let-values(((s_221)"
"(cdr"
" s_785)))"
"(let-values(((s_326)"
"(if(syntax?$1"
" s_221)"
"(syntax-e$1"
" s_221)"
" s_221)))"
"(let-values(((flat-s_51)"
"(to-syntax-list.1"
" s_326)))"
"(if(not"
" flat-s_51)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                               \"bad syntax\""
" orig-s_70))"
"(let-values()"
"(let-values(((id_129)"
"(let-values(((lst_407)"
" flat-s_51))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_407)))"
"((letrec-values(((for-loop_318)"
"(lambda(id_130"
" lst_408)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_408)"
"(let-values(((s_786)"
"(unsafe-car"
" lst_408))"
"((rest_241)"
"(unsafe-cdr"
" lst_408)))"
"(let-values(((id_131)"
"(let-values(((id_132)"
" id_130))"
"(let-values(((id_133)"
"(let-values()"
"(let-values(((id63_0)"
"(let-values()"
"(if(let-values(((or-part_398)"
"(if(syntax?$1"
" s_786)"
"(symbol?"
"(syntax-e$1"
" s_786))"
" #f)))"
"(if or-part_398"
" or-part_398"
"(symbol?"
" s_786)))"
" s_786"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_70"
" s_786)))))"
"(cons"
" id63_0"
" id_132)))))"
"(values"
" id_133)))))"
"(if(not"
" #f)"
"(for-loop_318"
" id_131"
" rest_241)"
" id_131)))"
" id_130)))))"
" for-loop_318)"
" null"
" lst_407)))))"
"(reverse$1"
" id_129)))))))))"
"(values"
" mod-path61_0"
" id62_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_70))))))"
"(values"
" all-from-except58_0"
" mod-path59_0"
" id60_1))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_70)))))"
"(values"
" #t"
" all-from-except55_1"
" mod-path56_1"
" id57_2))))))"
"(begin"
"(parse-all-from"
" mod-path56_0"
" orig-s_62"
" self_30"
" id57_1"
" at-phase_13"
" ns_125"
" rp_1"
" protected?_15"
" ctx_106)"
"(values"
" null"
"(list"
" spec_0))))))))"
"(if(unsafe-fx<"
" index_7"
" 11)"
"(if(unsafe-fx<"
" index_7"
" 10)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_22"
" all-defined64_0)"
"(let-values(((s_114)"
" disarmed-spec_0))"
"(let-values(((orig-s_71)"
" s_114))"
"(let-values(((all-defined64_1)"
"(let-values(((s_787)"
"(if(syntax?$1"
" s_114)"
"(syntax-e$1"
" s_114)"
" s_114)))"
"(if(pair?"
" s_787)"
"(let-values(((all-defined65_0)"
"(let-values(((s_438)"
"(car"
" s_787)))"
" s_438))"
"(()"
"(let-values(((s_224)"
"(cdr"
" s_787)))"
"(let-values(((s_788)"
"(if(syntax?$1"
" s_224)"
"(syntax-e$1"
" s_224)"
" s_224)))"
"(if(null?"
" s_788)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_71))))))"
"(values"
" all-defined65_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_71)))))"
"(values"
" #t"
" all-defined64_1))))))"
"(begin"
"(parse-all-from-module"
" self_30"
" spec_0"
" orig-s_62"
" null"
" #f"
" at-phase_13"
" ns_125"
" rp_1"
" protected?_15)"
"(values"
" null"
"(list"
" spec_0))))))"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_72"
" all-defined-except66_0"
" id67_0)"
"(let-values(((s_228)"
" disarmed-spec_0))"
"(let-values(((orig-s_72)"
" s_228))"
"(let-values(((all-defined-except66_1"
" id67_1)"
"(let-values(((s_789)"
"(if(syntax?$1"
" s_228)"
"(syntax-e$1"
" s_228)"
" s_228)))"
"(if(pair?"
" s_789)"
"(let-values(((all-defined-except68_0)"
"(let-values(((s_790)"
"(car"
" s_789)))"
" s_790))"
"((id69_0)"
"(let-values(((s_791)"
"(cdr"
" s_789)))"
"(let-values(((s_463)"
"(if(syntax?$1"
" s_791)"
"(syntax-e$1"
" s_791)"
" s_791)))"
"(let-values(((flat-s_52)"
"(to-syntax-list.1"
" s_463)))"
"(if(not"
" flat-s_52)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_72))"
"(let-values()"
"(let-values(((id_134)"
"(let-values(((lst_39)"
" flat-s_52))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_39)))"
"((letrec-values(((for-loop_136)"
"(lambda(id_135"
" lst_409)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_409)"
"(let-values(((s_464)"
"(unsafe-car"
" lst_409))"
"((rest_242)"
"(unsafe-cdr"
" lst_409)))"
"(let-values(((id_136)"
"(let-values(((id_137)"
" id_135))"
"(let-values(((id_138)"
"(let-values()"
"(let-values(((id70_0)"
"(let-values()"
"(if(let-values(((or-part_289)"
"(if(syntax?$1"
" s_464)"
"(symbol?"
"(syntax-e$1"
" s_464))"
" #f)))"
"(if or-part_289"
" or-part_289"
"(symbol?"
" s_464)))"
" s_464"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_72"
" s_464)))))"
"(cons"
" id70_0"
" id_137)))))"
"(values"
" id_138)))))"
"(if(not"
" #f)"
"(for-loop_136"
" id_136"
" rest_242)"
" id_136)))"
" id_135)))))"
" for-loop_136)"
" null"
" lst_39)))))"
"(reverse$1"
" id_134)))))))))"
"(values"
" all-defined-except68_0"
" id69_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_72)))))"
"(values"
" #t"
" all-defined-except66_1"
" id67_1))))))"
"(begin"
"(parse-all-from-module"
" self_30"
" spec_0"
" orig-s_62"
" id67_0"
" #f"
" at-phase_13"
" ns_125"
" rp_1"
" protected?_15)"
"(values"
" null"
"(list"
" spec_0)))))))"
"(if(unsafe-fx<"
" index_7"
" 12)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_73"
" prefix-all-defined71_0"
" id:prefix72_0)"
"(let-values(((s_232)"
" disarmed-spec_0))"
"(let-values(((orig-s_73)"
" s_232))"
"(let-values(((prefix-all-defined71_1"
" id:prefix72_1)"
"(let-values(((s_132)"
"(if(syntax?$1"
" s_232)"
"(syntax-e$1"
" s_232)"
" s_232)))"
"(if(pair?"
" s_132)"
"(let-values(((prefix-all-defined73_0)"
"(let-values(((s_330)"
"(car"
" s_132)))"
" s_330))"
"((id:prefix74_0)"
"(let-values(((s_133)"
"(cdr"
" s_132)))"
"(let-values(((s_236)"
"(if(syntax?$1"
" s_133)"
"(syntax-e$1"
" s_133)"
" s_133)))"
"(if(pair?"
" s_236)"
"(let-values(((id:prefix75_0)"
"(let-values(((s_331)"
"(car"
" s_236)))"
"(if(let-values(((or-part_291)"
"(if(syntax?$1"
" s_331)"
"(symbol?"
"(syntax-e$1"
" s_331))"
" #f)))"
"(if or-part_291"
" or-part_291"
"(symbol?"
" s_331)))"
" s_331"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                         \"not an identifier\""
" orig-s_73"
" s_331))))"
"(()"
"(let-values(((s_134)"
"(cdr"
" s_236)))"
"(let-values(((s_333)"
"(if(syntax?$1"
" s_134)"
"(syntax-e$1"
" s_134)"
" s_134)))"
"(if(null?"
" s_333)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_73))))))"
"(values"
" id:prefix75_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_73))))))"
"(values"
" prefix-all-defined73_0"
" id:prefix74_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_73)))))"
"(values"
" #t"
" prefix-all-defined71_1"
" id:prefix72_1))))))"
"(begin"
"(parse-all-from-module"
" self_30"
" spec_0"
" orig-s_62"
" null"
"(syntax-e$1"
" id:prefix72_0)"
" at-phase_13"
" ns_125"
" rp_1"
" protected?_15)"
"(values"
" null"
"(list"
" spec_0))))))"
"(if(unsafe-fx<"
" index_7"
" 13)"
"(let-values()"
"(let-values((()"
"(begin"
"(check-nested_1"
" 'phaseless)"
"(values))))"
"(let-values(((ok?_74"
" prefix-all-defined-except76_0"
" id:prefix77_0"
" id78_0)"
"(let-values(((s_792)"
" disarmed-spec_0))"
"(let-values(((orig-s_74)"
" s_792))"
"(let-values(((prefix-all-defined-except76_1"
" id:prefix77_1"
" id78_1)"
"(let-values(((s_793)"
"(if(syntax?$1"
" s_792)"
"(syntax-e$1"
" s_792)"
" s_792)))"
"(if(pair?"
" s_793)"
"(let-values(((prefix-all-defined-except79_0)"
"(let-values(((s_534)"
"(car"
" s_793)))"
" s_534))"
"((id:prefix80_0"
" id81_0)"
"(let-values(((s_794)"
"(cdr"
" s_793)))"
"(let-values(((s_243)"
"(if(syntax?$1"
" s_794)"
"(syntax-e$1"
" s_794)"
" s_794)))"
"(if(pair?"
" s_243)"
"(let-values(((id:prefix82_0)"
"(let-values(((s_535)"
"(car"
" s_243)))"
"(if(let-values(((or-part_344)"
"(if(syntax?$1"
" s_535)"
"(symbol?"
"(syntax-e$1"
" s_535))"
" #f)))"
"(if or-part_344"
" or-part_344"
"(symbol?"
" s_535)))"
" s_535"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"not an identifier\""
" orig-s_74"
" s_535))))"
"((id83_2)"
"(let-values(((s_348)"
"(cdr"
" s_243)))"
"(let-values(((s_795)"
"(if(syntax?$1"
" s_348)"
"(syntax-e$1"
" s_348)"
" s_348)))"
"(let-values(((flat-s_53)"
"(to-syntax-list.1"
" s_795)))"
"(if(not"
" flat-s_53)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                 \"bad syntax\""
" orig-s_74))"
"(let-values()"
"(let-values(((id_88)"
"(let-values(((lst_410)"
" flat-s_53))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_410)))"
"((letrec-values(((for-loop_319)"
"(lambda(id_37"
" lst_411)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_411)"
"(let-values(((s_796)"
"(unsafe-car"
" lst_411))"
"((rest_243)"
"(unsafe-cdr"
" lst_411)))"
"(let-values(((id_139)"
"(let-values(((id_140)"
" id_37))"
"(let-values(((id_141)"
"(let-values()"
"(let-values(((id84_1)"
"(let-values()"
"(if(let-values(((or-part_399)"
"(if(syntax?$1"
" s_796)"
"(symbol?"
"(syntax-e$1"
" s_796))"
" #f)))"
"(if or-part_399"
" or-part_399"
"(symbol?"
" s_796)))"
" s_796"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                                                               \"not an identifier\""
" orig-s_74"
" s_796)))))"
"(cons"
" id84_1"
" id_140)))))"
"(values"
" id_141)))))"
"(if(not"
" #f)"
"(for-loop_319"
" id_139"
" rest_243)"
" id_139)))"
" id_37)))))"
" for-loop_319)"
" null"
" lst_410)))))"
"(reverse$1"
" id_88)))))))))"
"(values"
" id:prefix82_0"
" id83_2))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_74))))))"
"(values"
" prefix-all-defined-except79_0"
" id:prefix80_0"
" id81_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_74)))))"
"(values"
" #t"
" prefix-all-defined-except76_1"
" id:prefix77_1"
" id78_1))))))"
"(begin"
"(parse-all-from-module"
" self_30"
" spec_0"
" orig-s_62"
" id78_0"
"(syntax-e$1"
" id:prefix77_0)"
" at-phase_13"
" ns_125"
" rp_1"
" protected?_15)"
"(values"
" null"
"(list"
" spec_0))))))"
"(let-values()"
"(let-values(((ok?_75"
" expand85_0"
" id86_1"
" datum87_0)"
"(let-values(((s_797)"
" disarmed-spec_0))"
"(let-values(((orig-s_75)"
" s_797))"
"(let-values(((expand85_1"
" id86_2"
" datum87_1)"
"(let-values(((s_798)"
"(if(syntax?$1"
" s_797)"
"(syntax-e$1"
" s_797)"
" s_797)))"
"(if(pair?"
" s_798)"
"(let-values(((expand88_0)"
"(let-values(((s_367)"
"(car"
" s_798)))"
" s_367))"
"((id89_1"
" datum90_0)"
"(let-values(((s_368)"
"(cdr"
" s_798)))"
"(let-values(((s_799)"
"(if(syntax?$1"
" s_368)"
"(syntax-e$1"
" s_368)"
" s_368)))"
"(if(pair?"
" s_799)"
"(let-values(((id91_1"
" datum92_0)"
"(let-values(((s_370)"
"(car"
" s_799)))"
"(let-values(((s_371)"
"(if(syntax?$1"
" s_370)"
"(syntax-e$1"
" s_370)"
" s_370)))"
"(if(pair?"
" s_371)"
"(let-values(((id93_2)"
"(let-values(((s_373)"
"(car"
" s_371)))"
"(if(let-values(((or-part_400)"
"(if(syntax?$1"
" s_373)"
"(symbol?"
"(syntax-e$1"
" s_373))"
" #f)))"
"(if or-part_400"
" or-part_400"
"(symbol?"
" s_373)))"
" s_373"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_75"
" s_373))))"
"((datum94_0)"
"(let-values(((s_546)"
"(cdr"
" s_371)))"
" s_546)))"
"(values"
" id93_2"
" datum94_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_75)))))"
"(()"
"(let-values(((s_547)"
"(cdr"
" s_799)))"
"(let-values(((s_800)"
"(if(syntax?$1"
" s_547)"
"(syntax-e$1"
" s_547)"
" s_547)))"
"(if(null?"
" s_800)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                           \"bad syntax\""
" orig-s_75))))))"
"(values"
" id91_1"
" datum92_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                       \"bad syntax\""
" orig-s_75))))))"
"(values"
" expand88_0"
" id89_1"
" datum90_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                   \"bad syntax\""
" orig-s_75)))))"
"(values"
" #t"
" expand85_1"
" id86_2"
" datum87_1))))))"
"(let-values(((ok?_76"
" expand95_0"
" form96_0)"
"(let-values(((s_801)"
" disarmed-spec_0))"
"(let-values(((orig-s_76)"
" s_801))"
"(let-values(((expand95_1"
" form96_1)"
"(let-values(((s_376)"
"(if(syntax?$1"
" s_801)"
"(syntax-e$1"
" s_801)"
" s_801)))"
"(if(pair?"
" s_376)"
"(let-values(((expand97_0)"
"(let-values(((s_259)"
"(car"
" s_376)))"
" s_259))"
"((form98_0)"
"(let-values(((s_377)"
"(cdr"
" s_376)))"
"(let-values(((s_378)"
"(if(syntax?$1"
" s_377)"
"(syntax-e$1"
" s_377)"
" s_377)))"
"(if(pair?"
" s_378)"
"(let-values(((form99_0)"
"(let-values(((s_379)"
"(car"
" s_378)))"
" s_379))"
"(()"
"(let-values(((s_380)"
"(cdr"
" s_378)))"
"(let-values(((s_260)"
"(if(syntax?$1"
" s_380)"
"(syntax-e$1"
" s_380)"
" s_380)))"
"(if(null?"
" s_260)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                             \"bad syntax\""
" orig-s_76))))))"
"(values"
" form99_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                         \"bad syntax\""
" orig-s_76))))))"
"(values"
" expand97_0"
" form98_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_76)))))"
"(values"
" #t"
" expand95_1"
" form96_1))))))"
"(let-values(((exp-spec_0)"
"(let-values(((temp104_3)"
" form96_0)"
"((temp105_5)"
"(let-values(((v_266)"
" ctx_106))"
"(let-values(((the-struct_99)"
" v_266))"
"(if(expand-context/outer?"
" the-struct_99)"
"(let-values(((def-ctx-scopes106_0)"
" #f)"
"((inner107_0)"
"(let-values(((the-struct_100)"
"(root-expand-context/outer-inner"
" v_266)))"
"(if(expand-context/inner?"
" the-struct_100)"
"(let-values(((stops108_0)"
"(free-id-set"
" at-phase_13"
"(list"
"(core-id"
" 'begin"
" at-phase_13)))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_100)"
"(root-expand-context/inner-module-scopes"
" the-struct_100)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_100)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_100)"
"(root-expand-context/inner-defined-syms"
" the-struct_100)"
"(root-expand-context/inner-counter"
" the-struct_100)"
"(root-expand-context/inner-lift-key"
" the-struct_100)"
"(expand-context/inner-to-parsed?"
" the-struct_100)"
"(expand-context/inner-phase"
" the-struct_100)"
"(expand-context/inner-namespace"
" the-struct_100)"
"(expand-context/inner-just-once?"
" the-struct_100)"
"(expand-context/inner-module-begin-k"
" the-struct_100)"
"(expand-context/inner-allow-unbound?"
" the-struct_100)"
"(expand-context/inner-in-local-expand?"
" the-struct_100)"
"(expand-context/inner-keep-#%expression?"
" the-struct_100)"
" stops108_0"
"(expand-context/inner-declared-submodule-names"
" the-struct_100)"
"(expand-context/inner-lifts"
" the-struct_100)"
"(expand-context/inner-lift-envs"
" the-struct_100)"
"(expand-context/inner-module-lifts"
" the-struct_100)"
"(expand-context/inner-require-lifts"
" the-struct_100)"
"(expand-context/inner-to-module-lifts"
" the-struct_100)"
"(expand-context/inner-requires+provides"
" the-struct_100)"
"(expand-context/inner-observer"
" the-struct_100)"
"(expand-context/inner-for-serializable?"
" the-struct_100)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_100)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                       \"expand-context/inner?\""
" the-struct_100)))))"
"(expand-context/outer1.1"
" inner107_0"
"(root-expand-context/outer-post-expansion"
" the-struct_99)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_99)"
"(root-expand-context/outer-frame-id"
" the-struct_99)"
"(expand-context/outer-context"
" the-struct_99)"
"(expand-context/outer-env"
" the-struct_99)"
"(expand-context/outer-scopes"
" the-struct_99)"
" def-ctx-scopes106_0"
"(expand-context/outer-binding-layer"
" the-struct_99)"
"(expand-context/outer-reference-records"
" the-struct_99)"
"(expand-context/outer-only-immediate?"
" the-struct_99)"
"(expand-context/outer-need-eventually-defined"
" the-struct_99)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_99)"
"(expand-context/outer-current-use-scopes"
" the-struct_99)"
"(expand-context/outer-name"
" the-struct_99)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                     \"expand-context/outer?\""
" the-struct_99))))))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp104_3"
" temp105_5))))"
"(let-values((()"
"(begin"
"(if(if(pair?"
"(syntax-e$1"
" exp-spec_0))"
"(if(identifier?"
"(car"
"(syntax-e$1"
" exp-spec_0)))"
"(eq?"
" 'begin"
"(core-form-sym"
" exp-spec_0"
" at-phase_13))"
" #f)"
" #f)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                                                                                                                                                                                         \"expansion was not a `begin' sequence\""
" orig-s_62"
" spec_0)))"
"(values))))"
"(let-values(((ok?_77"
" begin100_0"
" spec101_0)"
"(let-values(((s_802)"
" exp-spec_0))"
"(let-values(((orig-s_77)"
" s_802))"
"(let-values(((begin100_1"
" spec101_1)"
"(let-values(((s_266)"
"(if(syntax?$1"
" s_802)"
"(syntax-e$1"
" s_802)"
" s_802)))"
"(if(pair?"
" s_266)"
"(let-values(((begin102_0)"
"(let-values(((s_267)"
"(car"
" s_266)))"
" s_267))"
"((spec103_0)"
"(let-values(((s_803)"
"(cdr"
" s_266)))"
"(let-values(((s_268)"
"(if(syntax?$1"
" s_803)"
"(syntax-e$1"
" s_803)"
" s_803)))"
"(let-values(((flat-s_54)"
"(to-syntax-list.1"
" s_268)))"
"(if(not"
" flat-s_54)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                   \"bad syntax\""
" orig-s_77))"
"(let-values()"
" flat-s_54)))))))"
"(values"
" begin102_0"
" spec103_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                           \"bad syntax\""
" orig-s_77)))))"
"(values"
" #t"
" begin100_1"
" spec101_1))))))"
"(let-values(((track-stxes_9"
" exp-specs_9)"
"(loop_116"
" spec101_0"
" at-phase_13"
" protected?_15"
" layer_6)))"
"(values"
"(list*"
" spec_0"
" exp-spec_0"
" track-stxes_9)"
" exp-specs_9)))))))))))))))))))))"
"(values"
"(cons"
" track-stxes1_0"
" track-stxes_3)"
"(cons"
" exp-specs2_0"
" exp-specs_3))))))"
"(values"
" track-stxes_4"
" exp-specs_4)))))"
"(if(not #f)"
"(for-loop_98"
" track-stxes_2"
" exp-specs_2"
" rest_239)"
"(values"
" track-stxes_2"
" exp-specs_2))))"
"(values"
" track-stxes_1"
" exp-specs_1))))))"
" for-loop_98)"
" null"
" null"
" lst_77)))))"
"(values(reverse$1 track-stxes_0)(reverse$1 exp-specs_0)))))"
"(values(apply append track-stxess_0)(apply append exp-specss_0)))))))"
" loop_116)"
" specs_0"
" phase_45"
" #f"
" 'raw)))))"
"(define-values"
"(parse-identifier!)"
"(lambda(spec_1 orig-s_78 sym_106 at-phase_14 ns_126 rp_2 protected?_16)"
"(begin"
"(let-values(((b_94)(resolve+shift/extra-inspector spec_1 at-phase_14 ns_126)))"
"(let-values((()"
"(begin"
"(if b_94"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                             \"provided identifier is not defined or required\""
" orig-s_78"
" spec_1)))"
"(values))))"
"(let-values(((as-transformer?_7)(binding-for-transformer? b_94 spec_1 at-phase_14 ns_126)))"
"(let-values(((immed-b_0)"
"(let-values(((spec118_0) spec_1)((at-phase119_0) at-phase_14)((temp120_4) #t))"
"(resolve+shift28.1 #f #f null temp120_4 #f spec118_0 at-phase119_0))))"
"(let-values(((rp109_0) rp_2)"
"((sym110_0) sym_106)"
"((at-phase111_0) at-phase_14)"
"((b112_0) b_94)"
"((immed-b113_0) immed-b_0)"
"((spec114_0) spec_1)"
"((orig-s115_0) orig-s_78)"
"((protected?116_0) protected?_16)"
"((as-transformer?117_0) as-transformer?_7))"
"(add-provide!117.1"
" protected?116_0"
" as-transformer?117_0"
" rp109_0"
" sym110_0"
" at-phase111_0"
" b112_0"
" immed-b113_0"
" spec114_0"
" orig-s115_0)))))))))"
"(define-values"
"(parse-struct!)"
"(lambda(id:struct_0 orig-s_79 fields_0 at-phase_15 ns_127 rp_3 protected?_17)"
"(begin"
"(let-values(((mk_0)"
"(lambda(fmt_1)"
"(begin"
" 'mk"
"(let-values(((sym_107)(string->symbol(format fmt_1(syntax-e$1 id:struct_0)))))"
"(datum->syntax$1 id:struct_0 sym_107 id:struct_0))))))"
"(let-values(((mk2_0)"
"(lambda(fmt_2 field-id_0)"
"(begin"
" 'mk2"
"(let-values(((sym_108)"
"(string->symbol"
"(format fmt_2(syntax-e$1 id:struct_0)(syntax-e$1 field-id_0)))))"
"(datum->syntax$1 id:struct_0 sym_108 id:struct_0))))))"
"(begin"
"            (let-values (((lst_412) (list \"~a\" \"make-~a\" \"struct:~a\" \"~a?\")))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_412)))"
"((letrec-values(((for-loop_320)"
"(lambda(lst_413)"
"(begin"
" 'for-loop"
"(if(pair? lst_413)"
"(let-values(((fmt_3)(unsafe-car lst_413))((rest_244)(unsafe-cdr lst_413)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_142)(mk_0 fmt_3)))"
"(parse-identifier!"
" id_142"
" orig-s_79"
"(syntax-e$1 id_142)"
" at-phase_15"
" ns_127"
" rp_3"
" protected?_17)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_320 rest_244)(values))))"
"(values))))))"
" for-loop_320)"
" lst_412)))"
"(void)"
"(let-values(((lst_414) fields_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_414)))"
"((letrec-values(((for-loop_321)"
"(lambda(lst_415)"
"(begin"
" 'for-loop"
"(if(pair? lst_415)"
"(let-values(((field_0)(unsafe-car lst_415))((rest_245)(unsafe-cdr lst_415)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((get-id_0)"
"                                                                                            (mk2_0 \"~a-~a\" field_0)))"
"(let-values(((set-id_0)"
"(mk2_0"
"                                                                                               \"set-~a-~a!\""
" field_0)))"
"(begin"
"(parse-identifier!"
" get-id_0"
" orig-s_79"
"(syntax-e$1 get-id_0)"
" at-phase_15"
" ns_127"
" rp_3"
" protected?_17)"
"(parse-identifier!"
" set-id_0"
" orig-s_79"
"(syntax-e$1 set-id_0)"
" at-phase_15"
" ns_127"
" rp_3"
" protected?_17)))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_321 rest_245)(values))))"
"(values))))))"
" for-loop_321)"
" lst_414)))"
"(void)))))))"
"(define-values"
"(parse-all-from)"
"(lambda(mod-path-stx_0 orig-s_80 self_31 except-ids_0 at-phase_16 ns_128 rp_4 protected?_18 ctx_107)"
"(begin"
"(let-values(((mod-path_33)(syntax->datum$1 mod-path-stx_0)))"
"(let-values((()"
"(begin"
"(if(1/module-path? mod-path_33)"
"(void)"
"(let-values()"
"                            (raise-syntax-error$1 provide-form-name \"not a module path\" orig-s_80 mod-path-stx_0)))"
"(values))))"
"(let-values(((mpi_53)(module-path->mpi/context mod-path_33 ctx_107)))"
"(parse-all-from-module mpi_53 #f orig-s_80 except-ids_0 #f at-phase_16 ns_128 rp_4 protected?_18)))))))"
"(define-values"
"(parse-all-from-module)"
"(lambda(mpi_54 matching-stx_0 orig-s_81 except-ids_1 prefix-sym_0 at-phase_17 ns_129 rp_5 protected?_19)"
"(begin"
"(let-values(((requireds_2)(extract-module-requires rp_5 mpi_54 at-phase_17)))"
"(let-values(((phase-desc_0)"
"(lambda()"
"(begin"
" 'phase-desc"
"(if(zero-phase? at-phase_17)"
"                            (let-values () \"\")"
"(if(label-phase? at-phase_17)"
"                              (let-values () \" for-label\")"
"                              (let-values () (format \" for phase ~a\" at-phase_17))))))))"
"(let-values((()"
"(begin"
"(if requireds_2"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"                               (format \"cannot provide from a module without a matching require~a\" (phase-desc_0))"
" orig-s_81"
" matching-stx_0)))"
"(values))))"
"(let-values(((add-prefix_1)"
"(lambda(sym_109)"
"(begin"
" 'add-prefix"
"                              (if prefix-sym_0 (string->symbol (format \"~a~a\" prefix-sym_0 sym_109)) sym_109)))))"
"(let-values(((found_0)(make-hasheq)))"
"(begin"
"(let-values(((lst_416) requireds_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_416)))"
"((letrec-values(((for-loop_322)"
"(lambda(lst_417)"
"(begin"
" 'for-loop"
"(if(pair? lst_417)"
"(let-values(((i_184)(unsafe-car lst_417))"
"((rest_246)(unsafe-cdr lst_417)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((id_143)"
"(required-id i_184)))"
"(let-values(((phase_143)"
"(required-phase"
" i_184)))"
"(if(let-values(((or-part_401)"
"(if matching-stx_0"
"(not"
"(if(eqv?"
" phase_143"
" at-phase_17)"
"(free-identifier=?$1"
" id_143"
"(datum->syntax$1"
" matching-stx_0"
"(syntax-e$1"
" id_143))"
" phase_143"
" phase_143)"
" #f))"
" #f)))"
"(if or-part_401"
" or-part_401"
"(let-values(((lst_418)"
" except-ids_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_418)))"
"((letrec-values(((for-loop_323)"
"(lambda(result_127"
" lst_419)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_419)"
"(let-values(((except-id_0)"
"(unsafe-car"
" lst_419))"
"((rest_247)"
"(unsafe-cdr"
" lst_419)))"
"(let-values(((result_128)"
"(let-values()"
"(let-values(((result_129)"
"(let-values()"
"(let-values()"
"(if(free-identifier=?$1"
" id_143"
" except-id_0"
" phase_143"
" phase_143)"
"(hash-set!"
" found_0"
" except-id_0"
" #t)"
" #f)))))"
"(values"
" result_129)))))"
"(if(if(not"
"((lambda x_99"
" result_128)"
" except-id_0))"
"(not"
" #f)"
" #f)"
"(for-loop_323"
" result_128"
" rest_247)"
" result_128)))"
" result_127)))))"
" for-loop_323)"
" #f"
" lst_418)))))"
"(void)"
"(let-values()"
"(let-values(((b_95)"
"(resolve+shift/extra-inspector"
" id_143"
" phase_143"
" ns_129)))"
"(let-values(((immed-b_1)"
"(let-values(((id130_0)"
" id_143)"
"((phase131_0)"
" phase_143)"
"((temp132_2)"
" #t))"
"(resolve+shift28.1"
" #f"
" #f"
" null"
" temp132_2"
" #f"
" id130_0"
" phase131_0))))"
"(let-values(((rp121_0)"
" rp_5)"
"((temp122_1)"
"(add-prefix_1"
"(syntax-e$1"
" id_143)))"
"((phase123_0)"
" phase_143)"
"((b124_0)"
" b_95)"
"((immed-b125_0)"
" immed-b_1)"
"((id126_1)"
" id_143)"
"((orig-s127_0)"
" orig-s_81)"
"((protected?128_0)"
" protected?_19)"
"((temp129_2)"
"(required-as-transformer?"
" i_184)))"
"(add-provide!117.1"
" protected?128_0"
" temp129_2"
" rp121_0"
" temp122_1"
" phase123_0"
" b124_0"
" immed-b125_0"
" id126_1"
" orig-s127_0)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_322 rest_246)(values))))"
"(values))))))"
" for-loop_322)"
" lst_416)))"
"(void)"
"(if(=(hash-count found_0)(length except-ids_1))"
"(void)"
"(let-values()"
"(begin"
"(let-values(((lst_420) except-ids_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_420)))"
"((letrec-values(((for-loop_324)"
"(lambda(lst_421)"
"(begin"
" 'for-loop"
"(if(pair? lst_421)"
"(let-values(((except-id_1)(unsafe-car lst_421))"
"((rest_248)(unsafe-cdr lst_421)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(if(let-values(((or-part_402)"
"(hash-ref"
" found_0"
" except-id_1"
" #f)))"
"(if or-part_402"
" or-part_402"
"(let-values(((lst_422)"
" requireds_2))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_422)))"
"((letrec-values(((for-loop_325)"
"(lambda(result_130"
" lst_423)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_423)"
"(let-values(((i_185)"
"(unsafe-car"
" lst_423))"
"((rest_249)"
"(unsafe-cdr"
" lst_423)))"
"(let-values(((result_131)"
"(let-values()"
"(let-values(((result_132)"
"(let-values()"
"(let-values()"
"(let-values(((id_144)"
"(required-id"
" i_185)))"
"(let-values(((phase_144)"
"(required-phase"
" i_185)))"
"(free-identifier=?$1"
" id_144"
" except-id_1"
" phase_144"
" phase_144)))))))"
"(values"
" result_132)))))"
"(if(if(not"
"((lambda x_100"
" result_131)"
" i_185))"
"(not"
" #f)"
" #f)"
"(for-loop_325"
" result_131"
" rest_249)"
" result_131)))"
" result_130)))))"
" for-loop_325)"
" #f"
" lst_422)))))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" provide-form-name"
"(format"
"(if matching-stx_0"
"                                                                                                  \"excluded identifier was not defined or required in the module~a\""
"                                                                                                  \"excluded identifier was not required from the specified module~a\")"
"(phase-desc_0))"
" orig-s_81"
" except-id_1))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_324 rest_248)(values))))"
"(values))))))"
" for-loop_324)"
" lst_420)))"
"(void)))))))))))))"
"(define-values"
"(check-cross-phase-persistent-form)"
"(lambda(bodys_13 self-mpi_6)"
"(begin"
"(letrec-values(((check-body_0)"
"(lambda(bodys_14)"
"(begin"
" 'check-body"
"(begin"
"(let-values(((lst_424) bodys_14))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_424)))"
"((letrec-values(((for-loop_326)"
"(lambda(lst_85)"
"(begin"
" 'for-loop"
"(if(pair? lst_85)"
"(let-values(((body_19)(unsafe-car lst_85))"
"((rest_40)(unsafe-cdr lst_85)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_46)"
"(if(expanded+parsed?"
" body_19)"
"(expanded+parsed-parsed"
" body_19)"
" body_19)))"
"(if(parsed-define-values?"
" p_46)"
"(let-values()"
"(check-expr_0"
"(parsed-define-values-rhs"
" p_46)"
"(length"
"(parsed-define-values-syms"
" p_46))"
" p_46))"
"(if(let-values(((or-part_217)"
"(parsed-#%declare?"
" p_46)))"
"(if or-part_217"
" or-part_217"
"(let-values(((or-part_3)"
"(parsed-module?"
" p_46)))"
"(if or-part_3"
" or-part_3"
"(syntax?$1"
" p_46)))))"
"(let-values()"
"(void))"
"(let-values()"
"(disallow"
" p_46))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_326 rest_40)(values))))"
"(values))))))"
" for-loop_326)"
" lst_424)))"
"(void)))))"
"((check-expr_0)"
"(lambda(e_91 num-results_0 enclosing_15)"
"(begin"
" 'check-expr"
"(if(parsed-lambda? e_91)"
"(let-values()"
"(begin(check-count 1 num-results_0 enclosing_15)(check-no-disallowed-expr_0 e_91)))"
"(if(parsed-case-lambda? e_91)"
"(let-values()"
"(begin(check-count 1 num-results_0 enclosing_15)(check-no-disallowed-expr_0 e_91)))"
"(if(parsed-quote? e_91)"
"(let-values()"
"(begin"
"(check-datum(parsed-quote-datum e_91) e_91)"
"(check-count 1 num-results_0 enclosing_15)))"
"(if(parsed-app? e_91)"
"(let-values()"
"(let-values(((rands_1)(parsed-app-rands e_91)))"
"(begin"
"(let-values(((lst_78) rands_1))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_78)))"
"((letrec-values(((for-loop_327)"
"(lambda(lst_86)"
"(begin"
" 'for-loop"
"(if(pair? lst_86)"
"(let-values(((rand_0)(unsafe-car lst_86))"
"((rest_250)(unsafe-cdr lst_86)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-expr_0"
" rand_0"
" 1"
" e_91))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_327 rest_250)"
"(values))))"
"(values))))))"
" for-loop_327)"
" lst_78)))"
"(void)"
"(let-values(((tmp_63)(cross-phase-primitive-name(parsed-app-rator e_91))))"
"(if(if(equal? tmp_63 'cons) #t(equal? tmp_63 'list))"
"(let-values()(check-count 1 num-results_0 enclosing_15))"
"(if(equal? tmp_63 'make-struct-type)"
"(let-values()(check-count 5 num-results_0 enclosing_15))"
"(if(equal? tmp_63 'make-struct-type-property)"
"(let-values()(check-count 3 num-results_0 enclosing_15))"
"(if(equal? tmp_63 'gensym)"
"(let-values()"
"(if(let-values(((or-part_91)(= 0(length rands_1))))"
"(if or-part_91"
" or-part_91"
"(if(= 1(length rands_1))"
"(quoted-string?(car rands_1))"
" #f)))"
"(void)"
"(let-values()(disallow e_91))))"
"(if(equal? tmp_63 'string->uninterned-symbol)"
"(let-values()"
"(if(if(= 1(length rands_1))(quoted-string?(car rands_1)) #f)"
"(void)"
"(let-values()(disallow e_91))))"
"(let-values()(disallow e_91)))))))))))"
"(let-values()(check-no-disallowed-expr_0 e_91)))))))))"
"((check-no-disallowed-expr_0)"
"(lambda(e_92)"
"(begin"
" 'check-no-disallowed-expr"
"(if(parsed-lambda? e_92)"
"(let-values()(check-body-no-disallowed-expr_0(parsed-lambda-body e_92)))"
"(if(parsed-case-lambda? e_92)"
"(let-values()"
"(begin"
"(let-values(((lst_269)(parsed-case-lambda-clauses e_92)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_269)))"
"((letrec-values(((for-loop_243)"
"(lambda(lst_425)"
"(begin"
" 'for-loop"
"(if(pair? lst_425)"
"(let-values(((clause_5)(unsafe-car lst_425))"
"((rest_251)(unsafe-cdr lst_425)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-body-no-disallowed-expr_0"
"(cadr clause_5)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_243 rest_251)(values))))"
"(values))))))"
" for-loop_243)"
" lst_269)))"
"(void)))"
"(if(parsed-app? e_92)"
"(let-values()"
"(begin"
"(check-no-disallowed-expr_0(parsed-app-rator e_92))"
"(let-values(((lst_220)(parsed-app-rands e_92)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_220)))"
"((letrec-values(((for-loop_109)"
"(lambda(lst_163)"
"(begin"
" 'for-loop"
"(if(pair? lst_163)"
"(let-values(((e_93)(unsafe-car lst_163))"
"((rest_84)(unsafe-cdr lst_163)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-no-disallowed-expr_0"
" e_93))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_109 rest_84)(values))))"
"(values))))))"
" for-loop_109)"
" lst_220)))"
"(void)))"
"(if(parsed-if? e_92)"
"(let-values()"
"(begin"
"(check-no-disallowed-expr_0(parsed-if-tst e_92))"
"(check-no-disallowed-expr_0(parsed-if-thn e_92))"
"(check-no-disallowed-expr_0(parsed-if-els e_92))))"
"(if(parsed-set!? e_92)"
"(let-values()"
"(let-values(((id_4)(parsed-set!-id e_92)))"
"(let-values(((normal-b_1)(parsed-id-binding id_4)))"
"(begin"
"(if(let-values(((or-part_83)(not normal-b_1)))"
"(if or-part_83"
" or-part_83"
"(let-values(((or-part_310)(parsed-top-id? id_4)))"
"(if or-part_310"
" or-part_310"
"(if(not(symbol? normal-b_1))"
"(eq?(module-binding-module normal-b_1) self-mpi_6)"
" #f)))))"
"(let-values()(disallow e_92))"
"(void))"
"(check-no-disallowed-expr_0(parsed-set!-rhs e_92))))))"
"(if(parsed-with-continuation-mark? e_92)"
"(let-values()"
"(begin"
"(check-no-disallowed-expr_0(parsed-with-continuation-mark-key e_92))"
"(check-no-disallowed-expr_0(parsed-with-continuation-mark-val e_92))"
"(check-no-disallowed-expr_0(parsed-with-continuation-mark-body e_92))))"
"(if(parsed-begin? e_92)"
"(let-values()(check-body-no-disallowed-expr_0(parsed-begin-body e_92)))"
"(if(parsed-begin0? e_92)"
"(let-values()(check-body-no-disallowed-expr_0(parsed-begin0-body e_92)))"
"(if(parsed-let_-values? e_92)"
"(let-values()"
"(begin"
"(let-values(((lst_23)(parsed-let_-values-clauses e_92)))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_23)))"
"((letrec-values(((for-loop_192)"
"(lambda(lst_90)"
"(begin"
" 'for-loop"
"(if(pair? lst_90)"
"(let-values(((clause_6)"
"(unsafe-car lst_90))"
"((rest_143)"
"(unsafe-cdr lst_90)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-no-disallowed-expr_0"
"(cadr"
" clause_6)))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_192 rest_143)"
"(values))))"
"(values))))))"
" for-loop_192)"
" lst_23)))"
"(void)"
"(check-body-no-disallowed-expr_0(parsed-let_-values-body e_92))))"
"(if(let-values(((or-part_357)(parsed-quote-syntax? e_92)))"
"(if or-part_357 or-part_357(parsed-#%variable-reference? e_92)))"
"(let-values()(disallow e_92))"
"(let-values()(void)))))))))))))))"
"((check-body-no-disallowed-expr_0)"
"(lambda(l_48)"
"(begin"
" 'check-body-no-disallowed-expr"
"(begin"
"(let-values(((lst_81) l_48))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_81)))"
"((letrec-values(((for-loop_328)"
"(lambda(lst_58)"
"(begin"
" 'for-loop"
"(if(pair? lst_58)"
"(let-values(((e_82)(unsafe-car lst_58))"
"((rest_196)(unsafe-cdr lst_58)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(check-no-disallowed-expr_0"
" e_82))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_328 rest_196)(values))))"
"(values))))))"
" for-loop_328)"
" lst_81)))"
"(void))))))"
"(check-body_0 bodys_13)))))"
"(define-values"
"(check-count)"
"(lambda(is-num_0 expected-num_0 enclosing_16)"
"(begin(if(= is-num_0 expected-num_0)(void)(let-values()(disallow enclosing_16))))))"
"(define-values"
"(check-datum)"
"(lambda(d_38 e_12)"
"(begin"
"(if(let-values(((or-part_159)(number? d_38)))"
"(if or-part_159"
" or-part_159"
"(let-values(((or-part_164)(boolean? d_38)))"
"(if or-part_164"
" or-part_164"
"(let-values(((or-part_21)(symbol? d_38)))"
"(if or-part_21"
" or-part_21"
"(let-values(((or-part_165)(string? d_38)))"
"(if or-part_165"
" or-part_165"
"(let-values(((or-part_259)(bytes? d_38)))(if or-part_259 or-part_259(null? d_38)))))))))))"
"(let-values()(void))"
"(let-values()(disallow e_12))))))"
"(define-values"
"(quoted-string?)"
"(lambda(e_94)(begin(if(parsed-quote? e_94)(string?(parsed-quote-datum e_94)) #f))))"
"(define-values"
"(cross-phase-primitive-name)"
"(lambda(id_145)"
"(begin"
"(if(parsed-id? id_145)"
"(let-values()"
"(let-values(((b_87)(parsed-id-binding id_145)))"
"(if(module-binding? b_87)"
"(if(eq? runtime-module-name(1/module-path-index-resolve(module-binding-module b_87)))"
"(module-binding-sym b_87)"
" #f)"
" #f)))"
"(let-values() #f)))))"
"(define-values"
"(disallow)"
"(lambda(body_20)"
"(begin"
"(raise-syntax-error$1"
" 'module"
"       \"not allowed in a cross-phase persistent module\""
"(if(parsed? body_20)(datum->syntax$1 #f body_20(parsed-s body_20)) body_20)))))"
"(void"
"(add-core-form!*"
" 'module"
"(lambda(s_43 ctx_108)"
"(begin"
"(if(eq?(expand-context-context ctx_108) 'top-level)"
"(void)"
"(let-values()"
"(begin"
"(let-values(((obs_125)(expand-context-observer ctx_108)))"
"(if obs_125(let-values()(let-values()(call-expand-observe obs_125 'prim-module)))(void)))"
"             (raise-syntax-error$1 #f \"allowed only at the top level\" s_43))))"
"(let-values()"
"(let-values(((s223_1) s_43)((ctx224_0) ctx_108)((temp225_2) #f))"
"(expand-module18.1 #f #f #f #f #f unsafe-undefined #f s223_1 ctx224_0 temp225_2)))))))"
"(void"
"(add-core-form!*"
" 'module*"
"(lambda(s_307 ctx_109)"
"(begin"
"(let-values(((obs_126)(expand-context-observer ctx_109)))"
"(if obs_126(let-values()(let-values()(call-expand-observe obs_126 'prim-module)))(void)))"
"       (raise-syntax-error$1 #f \"illegal use (not in a module top-level)\" s_307)))))"
"(void"
"(add-core-form!*"
" '#%module-begin"
"(lambda(s_91 ctx_110)"
"(begin"
"(let-values(((obs_127)(expand-context-observer ctx_110)))"
"(if obs_127(let-values()(let-values()(call-expand-observe obs_127 'prim-module-begin)))(void)))"
"(if(eq?(expand-context-context ctx_110) 'module-begin)"
"(void)"
"         (let-values () (raise-syntax-error$1 #f \"not in a module-definition context\" s_91)))"
"(if(expand-context-module-begin-k ctx_110)"
"(void)"
"         (let-values () (raise-syntax-error$1 #f \"not currently transforming a module\" s_91)))"
"((expand-context-module-begin-k ctx_110)"
" s_91"
"(let-values(((v_267) ctx_110))"
"(let-values(((the-struct_101) v_267))"
"(if(expand-context/outer? the-struct_101)"
"(let-values(((inner226_0)"
"(let-values(((the-struct_102)(root-expand-context/outer-inner v_267)))"
"(if(expand-context/inner? the-struct_102)"
"(let-values(((module-begin-k227_0) #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_102)"
"(root-expand-context/inner-module-scopes the-struct_102)"
"(root-expand-context/inner-top-level-bind-scope the-struct_102)"
"(root-expand-context/inner-all-scopes-stx the-struct_102)"
"(root-expand-context/inner-defined-syms the-struct_102)"
"(root-expand-context/inner-counter the-struct_102)"
"(root-expand-context/inner-lift-key the-struct_102)"
"(expand-context/inner-to-parsed? the-struct_102)"
"(expand-context/inner-phase the-struct_102)"
"(expand-context/inner-namespace the-struct_102)"
"(expand-context/inner-just-once? the-struct_102)"
" module-begin-k227_0"
"(expand-context/inner-allow-unbound? the-struct_102)"
"(expand-context/inner-in-local-expand? the-struct_102)"
"(expand-context/inner-keep-#%expression? the-struct_102)"
"(expand-context/inner-stops the-struct_102)"
"(expand-context/inner-declared-submodule-names the-struct_102)"
"(expand-context/inner-lifts the-struct_102)"
"(expand-context/inner-lift-envs the-struct_102)"
"(expand-context/inner-module-lifts the-struct_102)"
"(expand-context/inner-require-lifts the-struct_102)"
"(expand-context/inner-to-module-lifts the-struct_102)"
"(expand-context/inner-requires+provides the-struct_102)"
"(expand-context/inner-observer the-struct_102)"
"(expand-context/inner-for-serializable? the-struct_102)"
"(expand-context/inner-should-not-encounter-macros? the-struct_102)))"
"                                (raise-argument-error 'struct-copy \"expand-context/inner?\" the-struct_102)))))"
"(expand-context/outer1.1"
" inner226_0"
"(root-expand-context/outer-post-expansion the-struct_101)"
"(root-expand-context/outer-use-site-scopes the-struct_101)"
"(root-expand-context/outer-frame-id the-struct_101)"
"(expand-context/outer-context the-struct_101)"
"(expand-context/outer-env the-struct_101)"
"(expand-context/outer-scopes the-struct_101)"
"(expand-context/outer-def-ctx-scopes the-struct_101)"
"(expand-context/outer-binding-layer the-struct_101)"
"(expand-context/outer-reference-records the-struct_101)"
"(expand-context/outer-only-immediate? the-struct_101)"
"(expand-context/outer-need-eventually-defined the-struct_101)"
"(expand-context/outer-current-introduction-scopes the-struct_101)"
"(expand-context/outer-current-use-scopes the-struct_101)"
"(expand-context/outer-name the-struct_101)))"
"              (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_101)))))))))"
"(void"
"(add-core-form!*"
" '#%declare"
"(lambda(s_804 ctx_111)"
"(begin"
"(let-values(((obs_128)(expand-context-observer ctx_111)))"
"(if obs_128(let-values()(let-values()(call-expand-observe obs_128 'prim-declare)))(void)))"
"       (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_804)))))"
"(define-values"
"(expand-module18.1)"
"(lambda(always-produce-compiled?1_0"
" enclosing-all-scopes-stx3_0"
" enclosing-is-cross-phase-persistent?4_0"
" enclosing-requires+provides5_0"
" keep-enclosing-scope-at-phase2_0"
" modules-being-compiled7_0"
" mpis-for-enclosing-reset6_0"
" s15_2"
" init-ctx16_0"
" enclosing-self17_0)"
"(begin"
" 'expand-module18"
"(let-values(((s_805) s15_2))"
"(let-values(((init-ctx_0) init-ctx16_0))"
"(let-values(((enclosing-self_1) enclosing-self17_0))"
"(let-values(((always-produce-compiled?_0) always-produce-compiled?1_0))"
"(let-values(((keep-enclosing-scope-at-phase_0) keep-enclosing-scope-at-phase2_0))"
"(let-values(((enclosing-all-scopes-stx_0) enclosing-all-scopes-stx3_0))"
"(let-values(((enclosing-is-cross-phase-persistent?_0) enclosing-is-cross-phase-persistent?4_0))"
"(let-values(((enclosing-r+p_1) enclosing-requires+provides5_0))"
"(let-values(((mpis-for-enclosing-reset_0) mpis-for-enclosing-reset6_0))"
"(let-values(((modules-being-compiled_3)"
"(if(eq? modules-being-compiled7_0 unsafe-undefined)"
"(make-hasheq)"
" modules-being-compiled7_0)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_129)(expand-context-observer init-ctx_0)))"
"(if obs_129"
"(let-values()"
"(let-values()(call-expand-observe obs_129 'prim-module)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-s_24)(syntax-disarm$1 s_805)))"
"(let-values(((ok?_78 module228_0 id:module-name229_0 initial-require230_0 body231_0)"
"(let-values(((s_51) disarmed-s_24))"
"(let-values(((orig-s_82) s_51))"
"(let-values(((module228_1"
" id:module-name229_1"
" initial-require230_1"
" body231_1)"
"(let-values(((s_507)"
"(if(syntax?$1 s_51)"
"(syntax-e$1 s_51)"
" s_51)))"
"(if(pair? s_507)"
"(let-values(((module232_0)"
"(let-values(((s_54)(car s_507)))"
" s_54))"
"((id:module-name233_0"
" initial-require234_0"
" body235_0)"
"(let-values(((s_312)(cdr s_507)))"
"(let-values(((s_93)"
"(if(syntax?$1 s_312)"
"(syntax-e$1 s_312)"
" s_312)))"
"(if(pair? s_93)"
"(let-values(((id:module-name236_0)"
"(let-values(((s_314)"
"(car"
" s_93)))"
"(if(let-values(((or-part_48)"
"(if(syntax?$1"
" s_314)"
"(symbol?"
"(syntax-e$1"
" s_314))"
" #f)))"
"(if or-part_48"
" or-part_48"
"(symbol?"
" s_314)))"
" s_314"
"(raise-syntax-error$1"
" #f"
"                                                                                                           \"not an identifier\""
" orig-s_82"
" s_314))))"
"((initial-require237_0"
" body238_0)"
"(let-values(((s_55)"
"(cdr"
" s_93)))"
"(let-values(((s_453)"
"(if(syntax?$1"
" s_55)"
"(syntax-e$1"
" s_55)"
" s_55)))"
"(if(pair?"
" s_453)"
"(let-values(((initial-require239_0)"
"(let-values(((s_56)"
"(car"
" s_453)))"
" s_56))"
"((body240_0)"
"(let-values(((s_33)"
"(cdr"
" s_453)))"
"(let-values(((s_509)"
"(if(syntax?$1"
" s_33)"
"(syntax-e$1"
" s_33)"
" s_33)))"
"(let-values(((flat-s_55)"
"(to-syntax-list.1"
" s_509)))"
"(if(not"
" flat-s_55)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                     \"bad syntax\""
" orig-s_82))"
"(let-values()"
" flat-s_55)))))))"
"(values"
" initial-require239_0"
" body240_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                             \"bad syntax\""
" orig-s_82))))))"
"(values"
" id:module-name236_0"
" initial-require237_0"
" body238_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                         \"bad syntax\""
" orig-s_82))))))"
"(values"
" module232_0"
" id:module-name233_0"
" initial-require234_0"
" body235_0))"
"                                                                    (raise-syntax-error$1 #f \"bad syntax\" orig-s_82)))))"
"(values"
" #t"
" module228_1"
" id:module-name229_1"
" initial-require230_1"
" body231_1))))))"
"(let-values(((rebuild-s_14)"
"(let-values(((init-ctx253_0) init-ctx_0)"
"((s254_0) s_805)"
"((temp255_0) #t)"
"((temp256_0) #t))"
"(keep-as-needed119.1 #f temp256_0 temp255_0 init-ctx253_0 s254_0))))"
"(let-values(((initial-require_0)(syntax->datum$1 initial-require230_0)))"
"(let-values((()"
"(begin"
"(if(let-values(((or-part_56) keep-enclosing-scope-at-phase_0))"
"(if or-part_56"
" or-part_56"
"(1/module-path? initial-require_0)))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                           \"not a module path\""
" s_805"
" initial-require230_0)))"
"(values))))"
"(let-values(((phase_145) 0))"
"(let-values(((module-name-sym_0)(syntax-e$1 id:module-name229_0)))"
"(let-values(((outside-scope_1)(new-scope 'module)))"
"(let-values(((inside-scope_0)(new-multi-scope module-name-sym_0)))"
"(let-values(((self_32)"
"(make-self-module-path-index"
"(if enclosing-self_1"
" module-name-sym_0"
"(string->uninterned-symbol"
"(symbol->string module-name-sym_0)))"
" enclosing-self_1)))"
"(let-values(((enclosing-mod_1)"
"(if enclosing-self_1"
"                                                                  (1/module-path-index-join '(submod \"..\") self_32)"
" #f)))"
"(let-values((()"
"(begin"
"(if(if enclosing-mod_1"
" mpis-for-enclosing-reset_0"
" #f)"
"(let-values()"
"(set-box!"
" mpis-for-enclosing-reset_0"
"(cons"
" enclosing-mod_1"
"(unbox mpis-for-enclosing-reset_0))))"
"(void))"
"(values))))"
"(let-values(((apply-module-scopes_0)"
"(make-apply-module-scopes"
" outside-scope_1"
" inside-scope_0"
" init-ctx_0"
" keep-enclosing-scope-at-phase_0"
" self_32"
" enclosing-self_1"
" enclosing-mod_1)))"
"(let-values(((initial-require-s_0)"
"(apply-module-scopes_0 initial-require230_0)))"
"(let-values(((all-scopes-s_0)"
"(if enclosing-all-scopes-stx_0"
"(apply-module-scopes_0"
"(syntax-shift-phase-level$1"
" enclosing-all-scopes-stx_0"
" keep-enclosing-scope-at-phase_0))"
" initial-require-s_0)))"
"(let-values(((root-ctx_6)"
"(let-values(((self257_0) self_32)"
"((temp258_1)"
"(if keep-enclosing-scope-at-phase_0"
"(root-expand-context-module-scopes"
" init-ctx_0)"
" null))"
"((outside-scope259_0)"
" outside-scope_1)"
"((inside-scope260_0)"
" inside-scope_0)"
"((all-scopes-s261_0)"
" all-scopes-s_0))"
"(make-root-expand-context13.1"
" all-scopes-s261_0"
" temp258_1"
" outside-scope259_0"
" inside-scope260_0"
" self257_0))))"
"(let-values(((new-module-scopes_0)"
"(root-expand-context-module-scopes"
" root-ctx_6)))"
"(let-values(((frame-id_16)"
"(root-expand-context-frame-id"
" root-ctx_6)))"
"(let-values(((make-m-ns244_0)"
"(lambda(for-submodule?241_0 ns243_0)"
"(begin"
" 'make-m-ns244"
"(let-values(((ns_130) ns243_0))"
"(let-values(((for-submodule?_1)"
"(if(eq?"
" for-submodule?241_0"
" unsafe-undefined)"
"(if enclosing-self_1"
" #t"
" #f)"
" for-submodule?241_0)))"
"(let-values()"
"(let-values(((ns262_0)"
" ns_130)"
"((self263_0)"
" self_32)"
"((root-ctx264_0)"
" root-ctx_6)"
"((for-submodule?265_0)"
" for-submodule?_1))"
"(make-module-namespace50.1"
" for-submodule?265_0"
" self263_0"
" root-ctx264_0"
" ns262_0)))))))))"
"(let-values()"
"(let-values()"
"(let-values(((m-ns_19)"
"(let-values(((temp266_0)"
"(expand-context-namespace"
" init-ctx_0)))"
"(make-m-ns244_0"
" unsafe-undefined"
" temp266_0))))"
"(let-values(((ctx_112)"
"(let-values(((v_260)"
"(copy-root-expand-context"
" init-ctx_0"
" root-ctx_6)))"
"(let-values(((the-struct_92)"
" v_260))"
"(if(expand-context/outer?"
" the-struct_92)"
"(let-values(((post-expansion267_0)"
"(lambda(s_409)"
"(begin"
" 'post-expansion267"
"(add-scope"
" s_409"
" inside-scope_0))))"
"((inner268_0)"
"(let-values(((the-struct_103)"
"(root-expand-context/outer-inner"
" v_260)))"
"(if(expand-context/inner?"
" the-struct_103)"
"(let-values(((allow-unbound?269_0)"
" #f)"
"((namespace270_0)"
" m-ns_19)"
"((phase271_0)"
" phase_145)"
"((just-once?272_0)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_103)"
"(root-expand-context/inner-module-scopes"
" the-struct_103)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_103)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_103)"
"(root-expand-context/inner-defined-syms"
" the-struct_103)"
"(root-expand-context/inner-counter"
" the-struct_103)"
"(root-expand-context/inner-lift-key"
" the-struct_103)"
"(expand-context/inner-to-parsed?"
" the-struct_103)"
" phase271_0"
" namespace270_0"
" just-once?272_0"
"(expand-context/inner-module-begin-k"
" the-struct_103)"
" allow-unbound?269_0"
"(expand-context/inner-in-local-expand?"
" the-struct_103)"
"(expand-context/inner-keep-#%expression?"
" the-struct_103)"
"(expand-context/inner-stops"
" the-struct_103)"
"(expand-context/inner-declared-submodule-names"
" the-struct_103)"
"(expand-context/inner-lifts"
" the-struct_103)"
"(expand-context/inner-lift-envs"
" the-struct_103)"
"(expand-context/inner-module-lifts"
" the-struct_103)"
"(expand-context/inner-require-lifts"
" the-struct_103)"
"(expand-context/inner-to-module-lifts"
" the-struct_103)"
"(expand-context/inner-requires+provides"
" the-struct_103)"
"(expand-context/inner-observer"
" the-struct_103)"
"(expand-context/inner-for-serializable?"
" the-struct_103)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_103)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                 \"expand-context/inner?\""
" the-struct_103)))))"
"(expand-context/outer1.1"
" inner268_0"
" post-expansion267_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_92)"
"(root-expand-context/outer-frame-id"
" the-struct_92)"
"(expand-context/outer-context"
" the-struct_92)"
"(expand-context/outer-env"
" the-struct_92)"
"(expand-context/outer-scopes"
" the-struct_92)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_92)"
"(expand-context/outer-binding-layer"
" the-struct_92)"
"(expand-context/outer-reference-records"
" the-struct_92)"
"(expand-context/outer-only-immediate?"
" the-struct_92)"
"(expand-context/outer-need-eventually-defined"
" the-struct_92)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_92)"
"(expand-context/outer-current-use-scopes"
" the-struct_92)"
"(expand-context/outer-name"
" the-struct_92)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                               \"expand-context/outer?\""
" the-struct_92))))))"
"(let-values(((bodys_15)"
"(let-values(((scoped-s_0)"
"(apply-module-scopes_0"
" disarmed-s_24)))"
"(let-values(((ok?_79"
" _273_0"
" _274_0"
" _275_0"
" body276_0)"
"(let-values(((s_525)"
" scoped-s_0))"
"(let-values(((orig-s_83)"
" s_525))"
"(let-values(((_273_1"
" _274_1"
" _275_1"
" body276_1)"
"(let-values(((s_458)"
"(if(syntax?$1"
" s_525)"
"(syntax-e$1"
" s_525)"
" s_525)))"
"(if(pair?"
" s_458)"
"(let-values(((_277_2)"
"(let-values(((s_528)"
"(car"
" s_458)))"
" s_528))"
"((_278_0"
" _279_1"
" body280_0)"
"(let-values(((s_97)"
"(cdr"
" s_458)))"
"(let-values(((s_212)"
"(if(syntax?$1"
" s_97)"
"(syntax-e$1"
" s_97)"
" s_97)))"
"(if(pair?"
" s_212)"
"(let-values(((_281_0)"
"(let-values(((s_806)"
"(car"
" s_212)))"
" s_806))"
"((_282_1"
" body283_0)"
"(let-values(((s_807)"
"(cdr"
" s_212)))"
"(let-values(((s_808)"
"(if(syntax?$1"
" s_807)"
"(syntax-e$1"
" s_807)"
" s_807)))"
"(if(pair?"
" s_808)"
"(let-values(((_284_0)"
"(let-values(((s_39)"
"(car"
" s_808)))"
" s_39))"
"((body285_0)"
"(let-values(((s_98)"
"(cdr"
" s_808)))"
"(let-values(((s_320)"
"(if(syntax?$1"
" s_98)"
"(syntax-e$1"
" s_98)"
" s_98)))"
"(let-values(((flat-s_56)"
"(to-syntax-list.1"
" s_320)))"
"(if(not"
" flat-s_56)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_83))"
"(let-values()"
" flat-s_56)))))))"
"(values"
" _284_0"
" body285_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                         \"bad syntax\""
" orig-s_83))))))"
"(values"
" _281_0"
" _282_1"
" body283_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                     \"bad syntax\""
" orig-s_83))))))"
"(values"
" _277_2"
" _278_0"
" _279_1"
" body280_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_83)))))"
"(values"
" #t"
" _273_1"
" _274_1"
" _275_1"
" body276_1))))))"
" body276_0))))"
"(let-values(((requires+provides_6)"
"(let-values(((self286_0)"
" self_32))"
"(make-requires+provides8.1"
" #f"
" self286_0))))"
"(let-values(((defined-syms_11)"
"(root-expand-context-defined-syms"
" root-ctx_6)))"
"(let-values(((compiled-submodules_1)"
"(make-hasheq)))"
"(let-values(((compiled-module-box_0)"
"(box #f)))"
"(let-values(((mpis-to-reset_0)"
"(box null)))"
"(let-values(((initial-require!249_0)"
"(lambda(bind?247_0)"
"(begin"
" 'initial-require!249"
"(let-values(((bind?_3)"
" bind?247_0))"
"(let-values()"
"(if(not"
" keep-enclosing-scope-at-phase_0)"
"(let-values()"
"(let-values(((initial-require287_0)"
" initial-require_0)"
"((self288_0)"
" self_32)"
"((all-scopes-s289_0)"
" all-scopes-s_0)"
"((m-ns290_0)"
" m-ns_19)"
"((requires+provides291_0)"
" requires+provides_6)"
"((bind?292_0)"
" bind?_3)"
"((temp293_0)"
" 'module))"
"(perform-initial-require!42.1"
" bind?292_0"
" temp293_0"
" initial-require287_0"
" self288_0"
" all-scopes-s289_0"
" m-ns290_0"
" requires+provides291_0)))"
"(let-values()"
"(begin"
"(add-required-module!"
" requires+provides_6"
" enclosing-mod_1"
" keep-enclosing-scope-at-phase_0"
" enclosing-is-cross-phase-persistent?_0)"
"(let-values(((requires+provides294_0)"
" requires+provides_6)"
"((enclosing-r+p295_0)"
" enclosing-r+p_1)"
"((enclosing-mod296_0)"
" enclosing-mod_1)"
"((keep-enclosing-scope-at-phase297_0)"
" keep-enclosing-scope-at-phase_0))"
"(add-enclosing-module-defined-and-required!67.1"
" enclosing-r+p295_0"
" requires+provides294_0"
" enclosing-mod296_0"
" keep-enclosing-scope-at-phase297_0))"
"(let-values(((m-ns298_0)"
" m-ns_19)"
"((enclosing-mod299_0)"
" enclosing-mod_1)"
"((keep-enclosing-scope-at-phase300_0)"
" keep-enclosing-scope-at-phase_0))"
"(namespace-module-visit!104.1"
" unsafe-undefined"
" m-ns298_0"
" enclosing-mod299_0"
" keep-enclosing-scope-at-phase300_0)))))))))))"
"(let-values()"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_130)"
"(expand-context-observer"
" init-ctx_0)))"
"(if obs_130"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_130"
" 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((temp252_0)"
" #t))"
"(initial-require!249_0"
" temp252_0))"
"(values))))"
"(let-values(((again?_0)"
" #f))"
"(letrec-values(((module-begin-k_1)"
"(lambda(mb-s_0"
" mb-init-ctx_0)"
"(begin"
" 'module-begin-k"
"(let-values((()"
"(begin"
"(if again?_0"
"(let-values()"
"(begin"
"(requires+provides-reset!"
" requires+provides_6)"
"(let-values(((temp305_0)"
" #f))"
"(initial-require!249_0"
" temp305_0))"
"(hash-clear!"
" compiled-submodules_1)"
"(set-box!"
" compiled-module-box_0"
" #f)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(set! again?_0"
" #t)"
"(values))))"
"(let-values(((ctx_23)"
"(let-values(((v_268)"
" mb-init-ctx_0))"
"(let-values(((the-struct_104)"
" v_268))"
"(if(expand-context/outer?"
" the-struct_104)"
"(let-values(((post-expansion306_0)"
"(lambda(s_161)"
"(begin"
" 'post-expansion306"
"(add-scope"
" s_161"
" inside-scope_0))))"
"((inner307_0)"
"(let-values(((the-struct_18)"
"(root-expand-context/outer-inner"
" v_268)))"
"(if(expand-context/inner?"
" the-struct_18)"
"(let-values(((module-begin-k308_0)"
"(lambda(s_809"
" ctx_113)"
"(begin"
" 'module-begin-k308"
"(let-values(((new-requires+provides_0)"
"(let-values(((self317_0)"
" self_32)"
"((requires+provides318_0)"
" requires+provides_6))"
"(make-requires+provides8.1"
" requires+provides318_0"
" self317_0))))"
"(let-values(((requires+provides309_0)"
" requires+provides_6)"
"((compiled-submodules310_0)"
" compiled-submodules_1)"
"((compiled-module-box311_0)"
" compiled-module-box_0)"
"((defined-syms312_0)"
" defined-syms_11)"
"((requires+provides313_0)"
" new-requires+provides_0)"
"((compiled-submodules314_0)"
"(make-hasheq))"
"((compiled-module-box315_0)"
"(box"
" #f))"
"((defined-syms316_0)"
"(make-hasheq)))"
"(dynamic-wind"
"(lambda()"
"(begin"
"(set! requires+provides_6"
" requires+provides313_0)"
"(set! compiled-submodules_1"
" compiled-submodules314_0)"
"(set! compiled-module-box_0"
" compiled-module-box315_0)"
"(set! defined-syms_11"
" defined-syms316_0)))"
"(lambda()"
"(module-begin-k_1"
" s_809"
" ctx_113))"
"(lambda()"
"(begin"
"(set! requires+provides_6"
" requires+provides309_0)"
"(set! compiled-submodules_1"
" compiled-submodules310_0)"
"(set! compiled-module-box_0"
" compiled-module-box311_0)"
"(set! defined-syms_11"
" defined-syms312_0))))))))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_18)"
"(root-expand-context/inner-module-scopes"
" the-struct_18)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_18)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_18)"
"(root-expand-context/inner-defined-syms"
" the-struct_18)"
"(root-expand-context/inner-counter"
" the-struct_18)"
"(root-expand-context/inner-lift-key"
" the-struct_18)"
"(expand-context/inner-to-parsed?"
" the-struct_18)"
"(expand-context/inner-phase"
" the-struct_18)"
"(expand-context/inner-namespace"
" the-struct_18)"
"(expand-context/inner-just-once?"
" the-struct_18)"
" module-begin-k308_0"
"(expand-context/inner-allow-unbound?"
" the-struct_18)"
"(expand-context/inner-in-local-expand?"
" the-struct_18)"
"(expand-context/inner-keep-#%expression?"
" the-struct_18)"
"(expand-context/inner-stops"
" the-struct_18)"
"(expand-context/inner-declared-submodule-names"
" the-struct_18)"
"(expand-context/inner-lifts"
" the-struct_18)"
"(expand-context/inner-lift-envs"
" the-struct_18)"
"(expand-context/inner-module-lifts"
" the-struct_18)"
"(expand-context/inner-require-lifts"
" the-struct_18)"
"(expand-context/inner-to-module-lifts"
" the-struct_18)"
"(expand-context/inner-requires+provides"
" the-struct_18)"
"(expand-context/inner-observer"
" the-struct_18)"
"(expand-context/inner-for-serializable?"
" the-struct_18)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_18)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                    \"expand-context/inner?\""
" the-struct_18)))))"
"(expand-context/outer1.1"
" inner307_0"
" post-expansion306_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_104)"
"(root-expand-context/outer-frame-id"
" the-struct_104)"
"(expand-context/outer-context"
" the-struct_104)"
"(expand-context/outer-env"
" the-struct_104)"
"(expand-context/outer-scopes"
" the-struct_104)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_104)"
"(expand-context/outer-binding-layer"
" the-struct_104)"
"(expand-context/outer-reference-records"
" the-struct_104)"
"(expand-context/outer-only-immediate?"
" the-struct_104)"
"(expand-context/outer-need-eventually-defined"
" the-struct_104)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_104)"
"(expand-context/outer-current-use-scopes"
" the-struct_104)"
"(expand-context/outer-name"
" the-struct_104)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                  \"expand-context/outer?\""
" the-struct_104))))))"
"(let-values(((added-s_2)"
"(add-scope"
" mb-s_0"
" inside-scope_0)))"
"(let-values((()"
"(begin"
"(let-values(((obs_131)"
"(expand-context-observer"
" ctx_23)))"
"(if obs_131"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_131"
" 'rename-one"
" added-s_2)))"
"(void)))"
"(values))))"
"(let-values(((disarmed-mb-s_0)"
"(syntax-disarm$1"
" added-s_2)))"
"(let-values(((ok?_80"
" #%module-begin301_0"
" body302_0)"
"(let-values(((s_118)"
" disarmed-mb-s_0))"
"(let-values(((orig-s_84)"
" s_118))"
"(let-values(((#%module-begin301_1"
" body302_1)"
"(let-values(((s_810)"
"(if(syntax?$1"
" s_118)"
"(syntax-e$1"
" s_118)"
" s_118)))"
"(if(pair?"
" s_810)"
"(let-values(((#%module-begin303_0)"
"(let-values(((s_227)"
"(car"
" s_810)))"
" s_227))"
"((body304_0)"
"(let-values(((s_163)"
"(cdr"
" s_810)))"
"(let-values(((s_164)"
"(if(syntax?$1"
" s_163)"
"(syntax-e$1"
" s_163)"
" s_163)))"
"(let-values(((flat-s_57)"
"(to-syntax-list.1"
" s_164)))"
"(if(not"
" flat-s_57)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                  \"bad syntax\""
" orig-s_84))"
"(let-values()"
" flat-s_57)))))))"
"(values"
" #%module-begin303_0"
" body304_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                          \"bad syntax\""
" orig-s_84)))))"
"(values"
" #t"
" #%module-begin301_1"
" body302_1))))))"
"(let-values(((bodys_16)"
" body302_0))"
"(let-values(((rebuild-mb-s_0)"
"(let-values(((ctx319_0)"
" ctx_23)"
"((mb-s320_0)"
" mb-s_0))"
"(keep-as-needed119.1"
" #f"
" #f"
" #f"
" ctx319_0"
" mb-s320_0))))"
"(let-values(((need-eventually-defined_1)"
"(make-hasheqv)))"
"(let-values(((module-ends_0)"
"(make-shared-module-ends)))"
"(let-values(((declared-keywords_0)"
"(make-hasheq)))"
"(let-values(((declared-submodule-names_3)"
"(make-hasheq)))"
"(let-values(((expression-expanded-bodys_0)"
"((letrec-values(((pass-1-and-2-loop_0)"
"(lambda(bodys_17"
" phase_146)"
"(begin"
" 'pass-1-and-2-loop"
"(let-values(((def-ctx-scopes_8)"
"(box"
" null)))"
"(let-values(((to-parsed?_5)"
"(expand-context-to-parsed?"
" ctx_23)))"
"(let-values(((partial-body-ctx_0)"
"(let-values(((v_269)"
" ctx_23))"
"(let-values(((the-struct_105)"
" v_269))"
"(if(expand-context/outer?"
" the-struct_105)"
"(let-values(((context329_0)"
" 'module)"
"((def-ctx-scopes330_0)"
" def-ctx-scopes_8)"
"((need-eventually-defined331_0)"
" need-eventually-defined_1)"
"((inner332_0)"
"(let-values(((the-struct_106)"
"(root-expand-context/outer-inner"
" v_269)))"
"(if(expand-context/inner?"
" the-struct_106)"
"(let-values(((phase333_0)"
" phase_146)"
"((namespace334_0)"
"(namespace->namespace-at-phase"
" m-ns_19"
" phase_146))"
"((stops335_0)"
"(free-id-set"
" phase_146"
"(module-expand-stop-ids"
" phase_146)))"
"((declared-submodule-names336_0)"
" declared-submodule-names_3)"
"((lift-key337_0)"
"(generate-lift-key))"
"((lifts338_0)"
"(let-values(((temp342_1)"
"(make-wrap-as-definition"
" self_32"
" frame-id_16"
" inside-scope_0"
" all-scopes-s_0"
" defined-syms_11"
" requires+provides_6)))"
"(make-lift-context6.1"
" #f"
" temp342_1)))"
"((module-lifts339_0)"
"(make-module-lift-context"
" phase_146"
" #t))"
"((require-lifts340_0)"
"(make-require-lift-context"
" phase_146"
"(let-values(((m-ns343_0)"
" m-ns_19)"
"((self344_0)"
" self_32)"
"((requires+provides345_0)"
" requires+provides_6)"
"((declared-submodule-names346_0)"
" declared-submodule-names_3))"
"(make-parse-lifted-require220.1"
" declared-submodule-names346_0"
" m-ns343_0"
" self344_0"
" requires+provides345_0))))"
"((to-module-lifts341_0)"
"(let-values(((phase347_0)"
" phase_146)"
"((module-ends348_0)"
" module-ends_0)"
"((temp349_1)"
" #f))"
"(make-to-module-lift-context27.1"
" temp349_1"
" module-ends348_0"
" phase347_0))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_106)"
"(root-expand-context/inner-module-scopes"
" the-struct_106)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_106)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_106)"
"(root-expand-context/inner-defined-syms"
" the-struct_106)"
"(root-expand-context/inner-counter"
" the-struct_106)"
" lift-key337_0"
"(expand-context/inner-to-parsed?"
" the-struct_106)"
" phase333_0"
" namespace334_0"
"(expand-context/inner-just-once?"
" the-struct_106)"
"(expand-context/inner-module-begin-k"
" the-struct_106)"
"(expand-context/inner-allow-unbound?"
" the-struct_106)"
"(expand-context/inner-in-local-expand?"
" the-struct_106)"
"(expand-context/inner-keep-#%expression?"
" the-struct_106)"
" stops335_0"
" declared-submodule-names336_0"
" lifts338_0"
"(expand-context/inner-lift-envs"
" the-struct_106)"
" module-lifts339_0"
" require-lifts340_0"
" to-module-lifts341_0"
"(expand-context/inner-requires+provides"
" the-struct_106)"
"(expand-context/inner-observer"
" the-struct_106)"
"(expand-context/inner-for-serializable?"
" the-struct_106)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_106)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                                  \"expand-context/inner?\""
" the-struct_106)))))"
"(expand-context/outer1.1"
" inner332_0"
"(root-expand-context/outer-post-expansion"
" the-struct_105)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_105)"
"(root-expand-context/outer-frame-id"
" the-struct_105)"
" context329_0"
"(expand-context/outer-env"
" the-struct_105)"
"(expand-context/outer-scopes"
" the-struct_105)"
" def-ctx-scopes330_0"
"(expand-context/outer-binding-layer"
" the-struct_105)"
"(expand-context/outer-reference-records"
" the-struct_105)"
"(expand-context/outer-only-immediate?"
" the-struct_105)"
" need-eventually-defined331_0"
"(expand-context/outer-current-introduction-scopes"
" the-struct_105)"
"(expand-context/outer-current-use-scopes"
" the-struct_105)"
"(expand-context/outer-name"
" the-struct_105)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                \"expand-context/outer?\""
" the-struct_105))))))"
"(let-values(((partially-expanded-bodys_0)"
"(let-values(((bodys350_0)"
" bodys_17)"
"((phase351_0)"
" phase_146)"
"((partial-body-ctx352_0)"
" partial-body-ctx_0)"
"((m-ns353_0)"
" m-ns_19)"
"((self354_0)"
" self_32)"
"((frame-id355_0)"
" frame-id_16)"
"((requires+provides356_0)"
" requires+provides_6)"
"((need-eventually-defined357_0)"
" need-eventually-defined_1)"
"((all-scopes-s358_0)"
" all-scopes-s_0)"
"((defined-syms359_0)"
" defined-syms_11)"
"((declared-keywords360_0)"
" declared-keywords_0)"
"((declared-submodule-names361_0)"
" declared-submodule-names_3)"
"((compiled-submodules362_0)"
" compiled-submodules_1)"
"((modules-being-compiled363_0)"
" modules-being-compiled_3)"
"((mpis-to-reset364_0)"
" mpis-to-reset_0)"
"((pass-1-and-2-loop365_0)"
" pass-1-and-2-loop_0))"
"(partially-expand-bodys81.1"
" all-scopes-s358_0"
" compiled-submodules362_0"
" partial-body-ctx352_0"
" declared-keywords360_0"
" declared-submodule-names361_0"
" defined-syms359_0"
" frame-id355_0"
" pass-1-and-2-loop365_0"
" modules-being-compiled363_0"
" mpis-to-reset364_0"
" m-ns353_0"
" need-eventually-defined357_0"
" phase351_0"
" requires+provides356_0"
" self354_0"
" bodys350_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_132)"
"(expand-context-observer"
" partial-body-ctx_0)))"
"(if obs_132"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_132"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((body-ctx_6)"
"(let-values(((v_270)"
"(accumulate-def-ctx-scopes"
" partial-body-ctx_0"
" def-ctx-scopes_8)))"
"(let-values(((the-struct_107)"
" v_270))"
"(if(expand-context/outer?"
" the-struct_107)"
"(let-values(((def-ctx-scopes366_0)"
" #f)"
"((post-expansion367_0)"
" #f)"
"((inner368_0)"
"(let-values(((the-struct_108)"
"(root-expand-context/outer-inner"
" v_270)))"
"(if(expand-context/inner?"
" the-struct_108)"
"(let-values(((stops369_0)"
" empty-free-id-set)"
"((to-module-lifts370_0)"
"(let-values(((phase371_0)"
" phase_146)"
"((module-ends372_0)"
" module-ends_0)"
"((temp373_0)"
" #t))"
"(make-to-module-lift-context27.1"
" temp373_0"
" module-ends372_0"
" phase371_0))))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_108)"
"(root-expand-context/inner-module-scopes"
" the-struct_108)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_108)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_108)"
"(root-expand-context/inner-defined-syms"
" the-struct_108)"
"(root-expand-context/inner-counter"
" the-struct_108)"
"(root-expand-context/inner-lift-key"
" the-struct_108)"
"(expand-context/inner-to-parsed?"
" the-struct_108)"
"(expand-context/inner-phase"
" the-struct_108)"
"(expand-context/inner-namespace"
" the-struct_108)"
"(expand-context/inner-just-once?"
" the-struct_108)"
"(expand-context/inner-module-begin-k"
" the-struct_108)"
"(expand-context/inner-allow-unbound?"
" the-struct_108)"
"(expand-context/inner-in-local-expand?"
" the-struct_108)"
"(expand-context/inner-keep-#%expression?"
" the-struct_108)"
" stops369_0"
"(expand-context/inner-declared-submodule-names"
" the-struct_108)"
"(expand-context/inner-lifts"
" the-struct_108)"
"(expand-context/inner-lift-envs"
" the-struct_108)"
"(expand-context/inner-module-lifts"
" the-struct_108)"
"(expand-context/inner-require-lifts"
" the-struct_108)"
" to-module-lifts370_0"
"(expand-context/inner-requires+provides"
" the-struct_108)"
"(expand-context/inner-observer"
" the-struct_108)"
"(expand-context/inner-for-serializable?"
" the-struct_108)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_108)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                                        \"expand-context/inner?\""
" the-struct_108)))))"
"(expand-context/outer1.1"
" inner368_0"
" post-expansion367_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_107)"
"(root-expand-context/outer-frame-id"
" the-struct_107)"
"(expand-context/outer-context"
" the-struct_107)"
"(expand-context/outer-env"
" the-struct_107)"
"(expand-context/outer-scopes"
" the-struct_107)"
" def-ctx-scopes366_0"
"(expand-context/outer-binding-layer"
" the-struct_107)"
"(expand-context/outer-reference-records"
" the-struct_107)"
"(expand-context/outer-only-immediate?"
" the-struct_107)"
"(expand-context/outer-need-eventually-defined"
" the-struct_107)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_107)"
"(expand-context/outer-current-use-scopes"
" the-struct_107)"
"(expand-context/outer-name"
" the-struct_107)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                                      \"expand-context/outer?\""
" the-struct_107))))))"
"(let-values(((partially-expanded-bodys321_0)"
" partially-expanded-bodys_0)"
"((phase322_0)"
" phase_146)"
"((body-ctx323_0)"
" body-ctx_6)"
"((self324_0)"
" self_32)"
"((declared-submodule-names325_0)"
" declared-submodule-names_3)"
"((compiled-submodules326_0)"
" compiled-submodules_1)"
"((modules-being-compiled327_0)"
" modules-being-compiled_3)"
"((mpis-to-reset328_0)"
" mpis-to-reset_0))"
"(finish-expanding-body-expressons99.1"
" compiled-submodules326_0"
" body-ctx323_0"
" declared-submodule-names325_0"
" modules-being-compiled327_0"
" mpis-to-reset328_0"
" phase322_0"
" self324_0"
" partially-expanded-bodys321_0))))))))))))"
" pass-1-and-2-loop_0)"
" bodys_16"
" phase_145)))"
"(let-values((()"
"(begin"
"(check-defined-by-now"
" need-eventually-defined_1"
" self_32"
" ctx_23"
" requires+provides_6)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_26)"
"(expand-context-observer"
" ctx_23)))"
"(if obs_26"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_26"
" 'next-group)))"
"(void)))"
"(values))))"
"(let-values(((fully-expanded-bodys-except-post-submodules_0)"
"(let-values(((expression-expanded-bodys374_0)"
" expression-expanded-bodys_0)"
"((requires+provides375_0)"
" requires+provides_6)"
"((declared-submodule-names376_0)"
" declared-submodule-names_3)"
"((m-ns377_0)"
" m-ns_19)"
"((phase378_0)"
" phase_145)"
"((self379_0)"
" self_32)"
"((ctx380_0)"
" ctx_23))"
"(resolve-provides115.1"
" ctx380_0"
" declared-submodule-names376_0"
" m-ns377_0"
" phase378_0"
" requires+provides375_0"
" self379_0"
" expression-expanded-bodys374_0))))"
"(let-values(((is-cross-phase-persistent?_1)"
"(hash-ref"
" declared-keywords_0"
" '#:cross-phase-persistent"
" #f)))"
"(let-values((()"
"(begin"
"(if is-cross-phase-persistent?_1"
"(let-values()"
"(begin"
"(if(requires+provides-can-cross-phase-persistent?"
" requires+provides_6)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                        \"cannot be cross-phase persistent due to required modules\""
" rebuild-s_14"
"(hash-ref"
" declared-keywords_0"
" '#:cross-phase-persistent))))"
"(check-cross-phase-persistent-form"
" fully-expanded-bodys-except-post-submodules_0"
" self_32)))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_78)"
"(expand-context-observer"
" ctx_23)))"
"(if obs_78"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_78"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((submod-m-ns_0)"
"(let-values(((m-ns381_0)"
" m-ns_19)"
"((temp382_1)"
" #t))"
"(make-m-ns244_0"
" temp382_1"
" m-ns381_0))))"
"(let-values(((submod-ctx_0)"
"(let-values(((v_190)"
" ctx_23))"
"(let-values(((the-struct_58)"
" v_190))"
"(if(expand-context/outer?"
" the-struct_58)"
"(let-values(((frame-id383_0)"
" #f)"
"((post-expansion384_0)"
" #f)"
"((inner385_0)"
"(let-values(((the-struct_109)"
"(root-expand-context/outer-inner"
" v_190)))"
"(if(expand-context/inner?"
" the-struct_109)"
"(let-values(((namespace386_0)"
" submod-m-ns_0))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_109)"
"(root-expand-context/inner-module-scopes"
" the-struct_109)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_109)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_109)"
"(root-expand-context/inner-defined-syms"
" the-struct_109)"
"(root-expand-context/inner-counter"
" the-struct_109)"
"(root-expand-context/inner-lift-key"
" the-struct_109)"
"(expand-context/inner-to-parsed?"
" the-struct_109)"
"(expand-context/inner-phase"
" the-struct_109)"
" namespace386_0"
"(expand-context/inner-just-once?"
" the-struct_109)"
"(expand-context/inner-module-begin-k"
" the-struct_109)"
"(expand-context/inner-allow-unbound?"
" the-struct_109)"
"(expand-context/inner-in-local-expand?"
" the-struct_109)"
"(expand-context/inner-keep-#%expression?"
" the-struct_109)"
"(expand-context/inner-stops"
" the-struct_109)"
"(expand-context/inner-declared-submodule-names"
" the-struct_109)"
"(expand-context/inner-lifts"
" the-struct_109)"
"(expand-context/inner-lift-envs"
" the-struct_109)"
"(expand-context/inner-module-lifts"
" the-struct_109)"
"(expand-context/inner-require-lifts"
" the-struct_109)"
"(expand-context/inner-to-module-lifts"
" the-struct_109)"
"(expand-context/inner-requires+provides"
" the-struct_109)"
"(expand-context/inner-observer"
" the-struct_109)"
"(expand-context/inner-for-serializable?"
" the-struct_109)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_109)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                                          \"expand-context/inner?\""
" the-struct_109)))))"
"(expand-context/outer1.1"
" inner385_0"
" post-expansion384_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_58)"
" frame-id383_0"
"(expand-context/outer-context"
" the-struct_58)"
"(expand-context/outer-env"
" the-struct_58)"
"(expand-context/outer-scopes"
" the-struct_58)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_58)"
"(expand-context/outer-binding-layer"
" the-struct_58)"
"(expand-context/outer-reference-records"
" the-struct_58)"
"(expand-context/outer-only-immediate?"
" the-struct_58)"
"(expand-context/outer-need-eventually-defined"
" the-struct_58)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_58)"
"(expand-context/outer-current-use-scopes"
" the-struct_58)"
"(expand-context/outer-name"
" the-struct_58)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                        \"expand-context/outer?\""
" the-struct_58))))))"
"(let-values(((declare-enclosing-module_0)"
"(delay"
"(lambda()"
"(begin"
" 'declare-enclosing-module"
"(let-values(((fully-expanded-bodys-except-post-submodules387_0)"
" fully-expanded-bodys-except-post-submodules_0)"
"((temp388_0)"
" id:module-name229_0)"
"((rebuild-s389_0)"
" rebuild-s_14)"
"((requires+provides390_0)"
" requires+provides_6)"
"((submod-m-ns391_0)"
" submod-m-ns_0)"
"((self392_0)"
" self_32)"
"((enclosing-self393_0)"
" enclosing-self_1)"
"((root-ctx394_0)"
" root-ctx_6)"
"((submod-ctx395_0)"
" submod-ctx_0)"
"((modules-being-compiled396_0)"
" modules-being-compiled_3)"
"((compiled-module-box397_0)"
" compiled-module-box_0))"
"(declare-module-for-expansion139.1"
" submod-ctx395_0"
" enclosing-self393_0"
" compiled-module-box397_0"
" temp388_0"
" modules-being-compiled396_0"
" submod-m-ns391_0"
" rebuild-s389_0"
" requires+provides390_0"
" root-ctx394_0"
" self392_0"
" fully-expanded-bodys-except-post-submodules387_0)))))))"
"(let-values(((fully-expanded-bodys_0)"
"(if(stop-at-module*?"
" submod-ctx_0)"
"(let-values()"
" fully-expanded-bodys-except-post-submodules_0)"
"(let-values()"
"(let-values(((fully-expanded-bodys-except-post-submodules398_0)"
" fully-expanded-bodys-except-post-submodules_0)"
"((declare-enclosing-module399_0)"
" declare-enclosing-module_0)"
"((phase400_0)"
" phase_145)"
"((self401_0)"
" self_32)"
"((requires+provides402_0)"
" requires+provides_6)"
"((is-cross-phase-persistent?403_0)"
" is-cross-phase-persistent?_1)"
"((all-scopes-s404_0)"
" all-scopes-s_0)"
"((mpis-to-reset405_0)"
" mpis-to-reset_0)"
"((declared-submodule-names406_0)"
" declared-submodule-names_3)"
"((compiled-submodules407_0)"
" compiled-submodules_1)"
"((modules-being-compiled408_0)"
" modules-being-compiled_3)"
"((submod-ctx409_0)"
" submod-ctx_0))"
"(expand-post-submodules165.1"
" all-scopes-s404_0"
" compiled-submodules407_0"
" submod-ctx409_0"
" declare-enclosing-module399_0"
" declared-submodule-names406_0"
" is-cross-phase-persistent?403_0"
" modules-being-compiled408_0"
" mpis-to-reset405_0"
" phase400_0"
" requires+provides402_0"
" self401_0"
" fully-expanded-bodys-except-post-submodules398_0))))))"
"(if(expand-context-to-parsed?"
" submod-ctx_0)"
"(let-values()"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_0"
"(parsed-only"
" fully-expanded-bodys_0)))"
"(let-values()"
"(let-values(((mb-result-s_0)"
"(let-values(((rebuild-mb-s410_0)"
" rebuild-mb-s_0)"
"((temp411_1)"
"(list*"
" #%module-begin301_0"
"(syntax-only"
" fully-expanded-bodys_0))))"
"(rebuild5.1"
" #t"
" rebuild-mb-s410_0"
" temp411_1))))"
"(if(not"
"(expand-context-in-local-expand?"
" submod-ctx_0))"
"(let-values()"
"(expanded+parsed1.1"
" mb-result-s_0"
"(parsed-#%module-begin24.1"
" rebuild-mb-s_0"
"(parsed-only"
" fully-expanded-bodys_0))))"
"(let-values()"
" mb-result-s_0)))))))))))))))))))))))))))))))))"
"(let-values(((mb-ctx_0)"
"(let-values(((v_271)"
" ctx_112))"
"(let-values(((the-struct_110)"
" v_271))"
"(if(expand-context/outer?"
" the-struct_110)"
"(let-values(((context412_0)"
" 'module-begin)"
"((inner413_0)"
"(let-values(((the-struct_111)"
"(root-expand-context/outer-inner"
" v_271)))"
"(if(expand-context/inner?"
" the-struct_111)"
"(let-values(((module-begin-k414_0)"
" module-begin-k_1)"
"((in-local-expand?415_0)"
" #f)"
"((lifts416_0)"
" #f)"
"((module-lifts417_0)"
" #f)"
"((to-module-lifts418_0)"
" #f)"
"((require-lifts419_0)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_111)"
"(root-expand-context/inner-module-scopes"
" the-struct_111)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_111)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_111)"
"(root-expand-context/inner-defined-syms"
" the-struct_111)"
"(root-expand-context/inner-counter"
" the-struct_111)"
"(root-expand-context/inner-lift-key"
" the-struct_111)"
"(expand-context/inner-to-parsed?"
" the-struct_111)"
"(expand-context/inner-phase"
" the-struct_111)"
"(expand-context/inner-namespace"
" the-struct_111)"
"(expand-context/inner-just-once?"
" the-struct_111)"
" module-begin-k414_0"
"(expand-context/inner-allow-unbound?"
" the-struct_111)"
" in-local-expand?415_0"
"(expand-context/inner-keep-#%expression?"
" the-struct_111)"
"(expand-context/inner-stops"
" the-struct_111)"
"(expand-context/inner-declared-submodule-names"
" the-struct_111)"
" lifts416_0"
"(expand-context/inner-lift-envs"
" the-struct_111)"
" module-lifts417_0"
" require-lifts419_0"
" to-module-lifts418_0"
"(expand-context/inner-requires+provides"
" the-struct_111)"
"(expand-context/inner-observer"
" the-struct_111)"
"(expand-context/inner-for-serializable?"
" the-struct_111)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_111)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                             \"expand-context/inner?\""
" the-struct_111)))))"
"(expand-context/outer1.1"
" inner413_0"
"(root-expand-context/outer-post-expansion"
" the-struct_110)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_110)"
"(root-expand-context/outer-frame-id"
" the-struct_110)"
" context412_0"
"(expand-context/outer-env"
" the-struct_110)"
"(expand-context/outer-scopes"
" the-struct_110)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_110)"
"(expand-context/outer-binding-layer"
" the-struct_110)"
"(expand-context/outer-reference-records"
" the-struct_110)"
"(expand-context/outer-only-immediate?"
" the-struct_110)"
"(expand-context/outer-need-eventually-defined"
" the-struct_110)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_110)"
"(expand-context/outer-current-use-scopes"
" the-struct_110)"
"(expand-context/outer-name"
" the-struct_110)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                           \"expand-context/outer?\""
" the-struct_110))))))"
"(let-values(((mb-scopes-s_0)"
"(if keep-enclosing-scope-at-phase_0"
"(apply-module-scopes_0"
" disarmed-s_24)"
" all-scopes-s_0)))"
"(let-values(((mb-def-ctx-scopes_0)"
"(box"
" null)))"
"(let-values(((mb_0)"
"(let-values(((bodys420_0)"
" bodys_15)"
"((module-name-sym421_0)"
" module-name-sym_0)"
"((mb-scopes-s422_0)"
" mb-scopes-s_0)"
"((m-ns423_0)"
" m-ns_19)"
"((mb-ctx424_0)"
" mb-ctx_0)"
"((mb-def-ctx-scopes425_0)"
" mb-def-ctx-scopes_0)"
"((phase426_0)"
" phase_145)"
"((s427_0)"
" s_805))"
"(ensure-module-begin36.1"
" mb-ctx424_0"
" mb-def-ctx-scopes425_0"
" m-ns423_0"
" module-name-sym421_0"
" phase426_0"
" s427_0"
" mb-scopes-s422_0"
" bodys420_0))))"
"(let-values(((expanded-mb_0)"
"(let-values()"
"(let-values(((mb428_0)"
" mb_0)"
"((temp429_0)"
"(let-values(((v_272)"
"(accumulate-def-ctx-scopes"
" mb-ctx_0"
" mb-def-ctx-scopes_0)))"
"(let-values(((the-struct_112)"
" v_272))"
"(if(expand-context/outer?"
" the-struct_112)"
"(let-values(((def-ctx-scopes430_0)"
" #f)"
"((inner431_0)"
"(root-expand-context/outer-inner"
" v_272)))"
"(expand-context/outer1.1"
" inner431_0"
"(root-expand-context/outer-post-expansion"
" the-struct_112)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_112)"
"(root-expand-context/outer-frame-id"
" the-struct_112)"
"(expand-context/outer-context"
" the-struct_112)"
"(expand-context/outer-env"
" the-struct_112)"
"(expand-context/outer-scopes"
" the-struct_112)"
" def-ctx-scopes430_0"
"(expand-context/outer-binding-layer"
" the-struct_112)"
"(expand-context/outer-reference-records"
" the-struct_112)"
"(expand-context/outer-only-immediate?"
" the-struct_112)"
"(expand-context/outer-need-eventually-defined"
" the-struct_112)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_112)"
"(expand-context/outer-current-use-scopes"
" the-struct_112)"
"(expand-context/outer-name"
" the-struct_112)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                   \"expand-context/outer?\""
" the-struct_112))))))"
"(expand9.1"
" #f"
" #f"
" #f"
" mb428_0"
" temp429_0)))))"
"(let-values(((requires_6"
" provides_13)"
"(extract-requires-and-provides"
" requires+provides_6"
" self_32"
" self_32)))"
"(let-values(((result-form_0)"
"(if(let-values(((or-part_403)"
"(expand-context-to-parsed?"
" init-ctx_0)))"
"(if or-part_403"
" or-part_403"
" always-produce-compiled?_0))"
"(parsed-module25.1"
" rebuild-s_14"
" #f"
" id:module-name229_0"
" self_32"
" requires_6"
" provides_13"
"(requires+provides-all-bindings-simple?"
" requires+provides_6)"
"(root-expand-context-encode-for-module"
" root-ctx_6"
" self_32"
" self_32)"
"(parsed-#%module-begin-body"
"(if(expanded+parsed?"
" expanded-mb_0)"
"(expanded+parsed-parsed"
" expanded-mb_0)"
" expanded-mb_0))"
"(unbox"
" compiled-module-box_0)"
" compiled-submodules_1)"
" #f)))"
"(let-values(((result-s_14)"
"(if(not"
"(expand-context-to-parsed?"
" init-ctx_0))"
"(let-values()"
"(let-values(((generic-self_0)"
"(make-generic-self-module-path-index"
" self_32)))"
"(begin"
"(imitate-generic-module-path-index!"
" self_32)"
"(let-values(((lst_426)"
"(unbox"
" mpis-to-reset_0)))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_426)))"
"((letrec-values(((for-loop_329)"
"(lambda(lst_302)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_302)"
"(let-values(((mpi_55)"
"(unsafe-car"
" lst_302))"
"((rest_252)"
"(unsafe-cdr"
" lst_302)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(imitate-generic-module-path-index!"
" mpi_55))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_329"
" rest_252)"
"(values))))"
"(values))))))"
" for-loop_329)"
" lst_426)))"
"(void)"
"(let-values(((result-s_15)"
"(let-values(((rebuild-s432_0)"
" rebuild-s_14)"
"((temp433_0)"
"(list"
" module228_0"
" id:module-name229_0"
" initial-require-s_0"
"(expanded+parsed-s"
" expanded-mb_0))))"
"(rebuild5.1"
" #t"
" rebuild-s432_0"
" temp433_0))))"
"(let-values(((result-s_16)"
"(let-values(((result-s434_0)"
" result-s_15)"
"((self435_0)"
" self_32)"
"((generic-self436_0)"
" generic-self_0))"
"(syntax-module-path-index-shift13.1"
" #f"
" result-s434_0"
" self435_0"
" generic-self436_0"
" #f))))"
"(let-values(((result-s_17)"
"(attach-root-expand-context-properties"
" result-s_16"
" root-ctx_6"
" self_32"
" generic-self_0)))"
"(let-values(((result-s_18)"
"(if(requires+provides-all-bindings-simple?"
" requires+provides_6)"
"(syntax-property$1"
" result-s_17"
" 'module-body-context-simple?"
" #t)"
" result-s_17)))"
"(begin"
"(let-values(((obs_133)"
"(expand-context-observer"
" init-ctx_0)))"
"(if obs_133"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_133"
" 'rename-one"
" result-s_18)))"
"(void)))"
" result-s_18))))))))"
"(void))))"
"(if(expand-context-to-parsed?"
" init-ctx_0)"
"(let-values()"
" result-form_0)"
"(if always-produce-compiled?_0"
"(let-values()"
"(expanded+parsed1.1"
" result-s_14"
" result-form_0))"
"(let-values()"
" result-s_14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
"(define-values"
"(ensure-module-begin36.1)"
"(lambda(ctx24_0 def-ctx-scopes25_0 m-ns23_0 module-name-sym21_0 phase26_3 s27_2 scopes-s22_0 bodys35_0)"
"(begin"
" 'ensure-module-begin36"
"(let-values(((bodys_18) bodys35_0))"
"(let-values(((module-name-sym_1) module-name-sym21_0))"
"(let-values(((scopes-s_0) scopes-s22_0))"
"(let-values()"
"(let-values(((ctx_114) ctx24_0))"
"(let-values(((def-ctx-scopes_9) def-ctx-scopes25_0))"
"(let-values(((phase_147) phase26_3))"
"(let-values(((s_385) s27_2))"
"(let-values()"
"(let-values(((make-mb-ctx_0)"
"(lambda()"
"(begin"
" 'make-mb-ctx"
"(let-values(((v_273) ctx_114))"
"(let-values(((the-struct_113) v_273))"
"(if(expand-context/outer? the-struct_113)"
"(let-values(((context437_0) 'module-begin)"
"((only-immediate?438_0) #t)"
"((def-ctx-scopes439_0) def-ctx-scopes_9)"
"((inner440_0)(root-expand-context/outer-inner v_273)))"
"(expand-context/outer1.1"
" inner440_0"
"(root-expand-context/outer-post-expansion the-struct_113)"
"(root-expand-context/outer-use-site-scopes the-struct_113)"
"(root-expand-context/outer-frame-id the-struct_113)"
" context437_0"
"(expand-context/outer-env the-struct_113)"
"(expand-context/outer-scopes the-struct_113)"
" def-ctx-scopes439_0"
"(expand-context/outer-binding-layer the-struct_113)"
"(expand-context/outer-reference-records the-struct_113)"
" only-immediate?438_0"
"(expand-context/outer-need-eventually-defined the-struct_113)"
"(expand-context/outer-current-introduction-scopes the-struct_113)"
"(expand-context/outer-current-use-scopes the-struct_113)"
"(expand-context/outer-name the-struct_113)))"
"(raise-argument-error"
" 'struct-copy"
"                                                 \"expand-context/outer?\""
" the-struct_113))))))))"
"(let-values(((mb_1)"
"(if(= 1(length bodys_18))"
"(let-values()"
"(begin"
"(let-values(((obs_134)(expand-context-observer ctx_114)))"
"(if obs_134"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_134 'rename-one(car bodys_18))))"
"(void)))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1(car bodys_18)) phase_147))"
"(let-values()(car bodys_18))"
"(let-values()"
"(let-values(((partly-expanded-body_0)"
"(let-values()"
"(let-values(((temp441_0)"
"(add-enclosing-name-property"
"(car bodys_18)"
" module-name-sym_1))"
"((temp442_0)(make-mb-ctx_0)))"
"(expand9.1 #f #f #f temp441_0 temp442_0)))))"
"(if(eq?"
" '#%module-begin"
"(core-form-sym"
"(syntax-disarm$1 partly-expanded-body_0)"
" phase_147))"
"(let-values() partly-expanded-body_0)"
"(let-values()"
"(let-values(((temp443_0)(list partly-expanded-body_0))"
"((s444_0) s_385)"
"((scopes-s445_0) scopes-s_0)"
"((phase446_0) phase_147)"
"((module-name-sym447_0) module-name-sym_1)"
"((temp448_1)(make-mb-ctx_0))"
"((temp449_1) #f))"
"(add-module-begin47.1"
" temp449_1"
" temp443_0"
" s444_0"
" scopes-s445_0"
" phase446_0"
" module-name-sym447_0"
" temp448_1)))))))))"
"(let-values()"
"(let-values(((bodys450_0) bodys_18)"
"((s451_0) s_385)"
"((scopes-s452_0) scopes-s_0)"
"((phase453_0) phase_147)"
"((module-name-sym454_0) module-name-sym_1)"
"((temp455_0)(make-mb-ctx_0)))"
"(add-module-begin47.1"
" #t"
" bodys450_0"
" s451_0"
" scopes-s452_0"
" phase453_0"
" module-name-sym454_0"
" temp455_0))))))"
"(add-enclosing-name-property mb_1 module-name-sym_1)))))))))))))))"
"(define-values"
"(add-module-begin47.1)"
"(lambda(log-rename-one?39_0 bodys41_0 s42_0 scopes-s43_0 phase44_0 module-name-sym45_0 mb-ctx46_0)"
"(begin"
" 'add-module-begin47"
"(let-values(((bodys_19) bodys41_0))"
"(let-values(((s_193) s42_0))"
"(let-values(((scopes-s_1) scopes-s43_0))"
"(let-values(((phase_148) phase44_0))"
"(let-values(((module-name-sym_2) module-name-sym45_0))"
"(let-values(((mb-ctx_1) mb-ctx46_0))"
"(let-values(((log-rename-one?_0) log-rename-one?39_0))"
"(let-values()"
"(let-values(((disarmed-scopes-s_0)(syntax-disarm$1 scopes-s_1)))"
"(let-values(((mb-id_0)(datum->syntax$1 disarmed-scopes-s_0 '#%module-begin)))"
"(let-values((()"
"(begin"
"(if(let-values(((mb-id456_0) mb-id_0)((phase457_0) phase_148))"
"(resolve40.1 #f #f null #f mb-id456_0 phase457_0))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                               \"no #%module-begin binding in the module's language\""
" s_193)))"
"(values))))"
"(let-values(((mb_2)"
"(datum->syntax$1 disarmed-scopes-s_0(list* mb-id_0 bodys_19) s_193 s_193)))"
"(let-values((()"
"(begin"
"(let-values(((obs_135)(expand-context-observer mb-ctx_1)))"
"(if obs_135"
"(let-values()"
"(let-values()(call-expand-observe obs_135 'tag mb_2)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if log-rename-one?_0"
"(let-values()"
"(let-values(((obs_136)(expand-context-observer mb-ctx_1)))"
"(if obs_136"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_136 'rename-one mb_2)))"
"(void))))"
"(void))"
"(values))))"
"(let-values(((partly-expanded-mb_0)"
"(let-values()"
"(let-values(((temp458_0)"
"(add-enclosing-name-property mb_2 module-name-sym_2))"
"((mb-ctx459_0) mb-ctx_1))"
"(expand9.1 #f #f #f temp458_0 mb-ctx459_0)))))"
"(begin"
"(if(eq?"
" '#%module-begin"
"(core-form-sym(syntax-disarm$1 partly-expanded-mb_0) phase_148))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                           \"expansion of #%module-begin is not a #%plain-module-begin form\""
" s_193"
" partly-expanded-mb_0)))"
" partly-expanded-mb_0)))))))))))))))))))"
"(define-values"
"(add-enclosing-name-property)"
"(lambda(stx_21 module-name-sym_3)(begin(syntax-property$1 stx_21 'enclosing-module-name module-name-sym_3))))"
"(define-values"
"(make-apply-module-scopes)"
"(lambda(inside-scope_1"
" outside-scope_2"
" init-ctx_1"
" keep-enclosing-scope-at-phase_1"
" self_33"
" enclosing-self_2"
" enclosing-mod_2)"
"(begin"
"(lambda(s_811)"
"(let-values()"
"(let-values(((s-without-enclosing_0)"
"(if keep-enclosing-scope-at-phase_1"
" s_811"
"(remove-use-site-scopes"
"(remove-scopes s_811(root-expand-context-module-scopes init-ctx_1))"
" init-ctx_1))))"
"(let-values(((s-with-edges_0)"
"(add-scope(add-scope s-without-enclosing_0 outside-scope_2) inside-scope_1)))"
"(let-values(((s-with-suitable-enclosing_0)"
"(if keep-enclosing-scope-at-phase_1"
"(let-values()"
"(let-values(((s-with-edges464_0) s-with-edges_0)"
"((enclosing-self465_0) enclosing-self_2)"
"((enclosing-mod466_0) enclosing-mod_2))"
"(syntax-module-path-index-shift13.1"
" #f"
" s-with-edges464_0"
" enclosing-self465_0"
" enclosing-mod466_0"
" #f)))"
"(let-values() s-with-edges_0))))"
"(let-values(((s-with-suitable-enclosing460_0) s-with-suitable-enclosing_0)"
"((temp461_0)(make-generic-self-module-path-index self_33))"
"((self462_0) self_33)"
"((temp463_1)(current-code-inspector)))"
"(syntax-module-path-index-shift13.1"
" #f"
" s-with-suitable-enclosing460_0"
" temp461_0"
" self462_0"
" temp463_1))))))))))"
"(define-values"
"(partially-expand-bodys81.1)"
"(lambda(all-scopes-stx57_0"
" compiled-submodules61_0"
" ctx51_0"
" declared-keywords59_0"
" declared-submodule-names60_0"
" defined-syms58_0"
" frame-id54_0"
" loop64_0"
" modules-being-compiled62_0"
" mpis-to-reset63_0"
" namespace52_0"
" need-eventually-defined56_0"
" phase50_0"
" requires-and-provides55_0"
" self53_0"
" bodys80_0)"
"(begin"
" 'partially-expand-bodys81"
"(let-values(((bodys_20) bodys80_0))"
"(let-values(((phase_107) phase50_0))"
"(let-values(((partial-body-ctx_1) ctx51_0))"
"(let-values(((m-ns_20) namespace52_0))"
"(let-values(((self_34) self53_0))"
"(let-values(((frame-id_17) frame-id54_0))"
"(let-values(((requires+provides_7) requires-and-provides55_0))"
"(let-values(((need-eventually-defined_2) need-eventually-defined56_0))"
"(let-values(((all-scopes-stx_5) all-scopes-stx57_0))"
"(let-values(((defined-syms_12) defined-syms58_0))"
"(let-values(((declared-keywords_1) declared-keywords59_0))"
"(let-values(((declared-submodule-names_4) declared-submodule-names60_0))"
"(let-values(((compiled-submodules_2) compiled-submodules61_0))"
"(let-values(((modules-being-compiled_4) modules-being-compiled62_0))"
"(let-values(((mpis-to-reset_1) mpis-to-reset63_0))"
"(let-values(((pass-1-and-2-loop_1) loop64_0))"
"(let-values()"
"(begin"
"(namespace-visit-available-modules! m-ns_20 phase_107)"
"((letrec-values(((loop_124)"
"(lambda(tail?_53 bodys_21)"
"(begin"
" 'loop"
"(if(null? bodys_21)"
"(let-values()"
"(if(if tail?_53(not(zero? phase_107)) #f)"
"(let-values()"
"(begin"
"(let-values(((obs_93)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_93"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_93"
" 'module-lift-end-loop"
" '())))"
"(void)))"
" null))"
"(if tail?_53"
"(let-values()"
"(let-values(((bodys_22)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_1))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts"
" partial-body-ctx_1)))))"
"(begin"
"(let-values(((obs_137)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_137"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_137"
" 'module-lift-end-loop"
" bodys_22)))"
"(void)))"
"(if(null? bodys_22)"
"(let-values() null)"
"(let-values()"
"(loop_124"
" #t"
"(add-post-expansion-scope"
" bodys_22"
" partial-body-ctx_1)))))))"
"(let-values() null))))"
"(let-values()"
"(let-values(((rest-bodys_1)(cdr bodys_21)))"
"(let-values((()"
"(begin"
"(let-values(((obs_138)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_138"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_138"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-body_7)"
"(let-values()"
"(let-values(((temp467_0)"
"(car bodys_21))"
"((partial-body-ctx468_0)"
" partial-body-ctx_1))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp467_0"
" partial-body-ctx468_0)))))"
"(let-values(((disarmed-exp-body_1)"
"(syntax-disarm$1 exp-body_7)))"
"(let-values(((lifted-defns_0)"
"(get-and-clear-lifts!"
"(expand-context-lifts"
" partial-body-ctx_1))))"
"(begin"
"(if(pair? lifted-defns_0)"
"(let-values()"
"(log-lifted-defns"
" partial-body-ctx_1"
" lifted-defns_0"
" exp-body_7"
" rest-bodys_1))"
"(void))"
"(let-values(((obs_139)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_139"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_139"
" 'rename-one"
" exp-body_7)))"
"(void)))"
"(let-values(((finish_2)"
"(lambda()"
"(begin"
" 'finish"
"(let-values(((tmp_23)"
"(core-form-sym"
" disarmed-exp-body_1"
" phase_107)))"
"(if(equal?"
" tmp_23"
" 'begin)"
"(let-values()"
"(let-values(((ok?_81"
" begin469_0"
" e470_0)"
"(let-values(((s_812)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_85)"
" s_812))"
"(let-values(((begin469_1"
" e470_1)"
"(let-values(((s_813)"
"(if(syntax?$1"
" s_812)"
"(syntax-e$1"
" s_812)"
" s_812)))"
"(if(pair?"
" s_813)"
"(let-values(((begin471_0)"
"(let-values(((s_814)"
"(car"
" s_813)))"
" s_814))"
"((e472_0)"
"(let-values(((s_815)"
"(cdr"
" s_813)))"
"(let-values(((s_816)"
"(if(syntax?$1"
" s_815)"
"(syntax-e$1"
" s_815)"
" s_815)))"
"(let-values(((flat-s_58)"
"(to-syntax-list.1"
" s_816)))"
"(if(not"
" flat-s_58)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                     \"bad syntax\""
" orig-s_85))"
"(let-values()"
" flat-s_58)))))))"
"(values"
" begin471_0"
" e472_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                             \"bad syntax\""
" orig-s_85)))))"
"(values"
" #t"
" begin469_1"
" e470_1))))))"
"(let-values(((track_1)"
"(lambda(e_95)"
"(begin"
" 'track"
"(syntax-track-origin$1"
" e_95"
" exp-body_7)))))"
"(let-values(((spliced-bodys_0)"
"(append"
"(map2"
" track_1"
" e470_0)"
" rest-bodys_1)))"
"(begin"
"(let-values(((obs_140)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_140"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_140"
" 'splice"
" spliced-bodys_0)))"
"(void)))"
"(loop_124"
" tail?_53"
" spliced-bodys_0))))))"
"(if(equal?"
" tmp_23"
" 'begin-for-syntax)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_141)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_141"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_141"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_141"
" 'prim-begin-for-syntax)"
"(call-expand-observe"
" obs_141"
" 'prepare-env))))"
"(void)))"
"(values))))"
"(let-values(((ct-m-ns_0)"
"(namespace->namespace-at-phase"
" m-ns_20"
"(add1"
" phase_107))))"
"(let-values((()"
"(begin"
"(prepare-next-phase-namespace"
" partial-body-ctx_1)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_142)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_142"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_142"
" 'phase-up)))"
"(void)))"
"(values))))"
"(let-values(((ok?_82"
" begin-for-syntax473_0"
" e474_0)"
"(let-values(((s_817)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_86)"
" s_817))"
"(let-values(((begin-for-syntax473_1"
" e474_1)"
"(let-values(((s_818)"
"(if(syntax?$1"
" s_817)"
"(syntax-e$1"
" s_817)"
" s_817)))"
"(if(pair?"
" s_818)"
"(let-values(((begin-for-syntax475_0)"
"(let-values(((s_819)"
"(car"
" s_818)))"
" s_819))"
"((e476_0)"
"(let-values(((s_820)"
"(cdr"
" s_818)))"
"(let-values(((s_821)"
"(if(syntax?$1"
" s_820)"
"(syntax-e$1"
" s_820)"
" s_820)))"
"(let-values(((flat-s_59)"
"(to-syntax-list.1"
" s_821)))"
"(if(not"
" flat-s_59)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                               \"bad syntax\""
" orig-s_86))"
"(let-values()"
" flat-s_59)))))))"
"(values"
" begin-for-syntax475_0"
" e476_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                       \"bad syntax\""
" orig-s_86)))))"
"(values"
" #t"
" begin-for-syntax473_1"
" e474_1))))))"
"(let-values(((nested-bodys_1)"
"(pass-1-and-2-loop_1"
" e474_0"
"(add1"
" phase_107))))"
"(begin"
"(let-values(((obs_143)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_143"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_143"
" 'next-group)))"
"(void)))"
"(namespace-run-available-modules!"
" m-ns_20"
"(add1"
" phase_107))"
"(eval-nested-bodys"
" nested-bodys_1"
"(add1"
" phase_107)"
" ct-m-ns_0"
" self_34"
" partial-body-ctx_1)"
"(namespace-visit-available-modules!"
" m-ns_20"
" phase_107)"
"(let-values(((obs_144)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_144"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_144"
" 'exit-prim"
"(let-values(((s-nested-bodys_0)"
"(reverse$1"
"(let-values(((lst_427)"
" nested-bodys_1))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_427)))"
"((letrec-values(((for-loop_330)"
"(lambda(fold-var_357"
" lst_388)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_388)"
"(let-values(((nested-body_0)"
"(unsafe-car"
" lst_388))"
"((rest_253)"
"(unsafe-cdr"
" lst_388)))"
"(let-values(((fold-var_376)"
"(let-values(((fold-var_377)"
" fold-var_357))"
"(let-values(((fold-var_378)"
"(let-values()"
"(cons"
"(let-values()"
"(extract-syntax"
" nested-body_0))"
" fold-var_377))))"
"(values"
" fold-var_378)))))"
"(if(not"
" #f)"
"(for-loop_330"
" fold-var_376"
" rest_253)"
" fold-var_376)))"
" fold-var_357)))))"
" for-loop_330)"
" null"
" lst_427))))))"
"(datum->syntax$1"
" #f"
"(cons"
" begin-for-syntax473_0"
" s-nested-bodys_0)"
" exp-body_7)))))"
"(void)))"
"(cons"
"(semi-parsed-begin-for-syntax3.1"
" exp-body_7"
" nested-bodys_1)"
"(loop_124"
" tail?_53"
" rest-bodys_1))))))))))"
"(if(equal?"
" tmp_23"
" 'define-values)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_145)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_145"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_145"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_145"
" 'prim-define-values))))"
"(void)))"
"(values))))"
"(let-values(((ok?_83"
" define-values477_0"
" id478_0"
" rhs479_0)"
"(let-values(((s_822)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_87)"
" s_822))"
"(let-values(((define-values477_1"
" id478_1"
" rhs479_1)"
"(let-values(((s_823)"
"(if(syntax?$1"
" s_822)"
"(syntax-e$1"
" s_822)"
" s_822)))"
"(if(pair?"
" s_823)"
"(let-values(((define-values480_0)"
"(let-values(((s_824)"
"(car"
" s_823)))"
" s_824))"
"((id481_0"
" rhs482_0)"
"(let-values(((s_825)"
"(cdr"
" s_823)))"
"(let-values(((s_826)"
"(if(syntax?$1"
" s_825)"
"(syntax-e$1"
" s_825)"
" s_825)))"
"(if(pair?"
" s_826)"
"(let-values(((id483_0)"
"(let-values(((s_827)"
"(car"
" s_826)))"
"(let-values(((s_828)"
"(if(syntax?$1"
" s_827)"
"(syntax-e$1"
" s_827)"
" s_827)))"
"(let-values(((flat-s_60)"
"(to-syntax-list.1"
" s_828)))"
"(if(not"
" flat-s_60)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                               \"bad syntax\""
" orig-s_87))"
"(let-values()"
"(let-values(((id_146)"
"(let-values(((lst_428)"
" flat-s_60))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_428)))"
"((letrec-values(((for-loop_331)"
"(lambda(id_147"
" lst_71)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_71)"
"(let-values(((s_829)"
"(unsafe-car"
" lst_71))"
"((rest_254)"
"(unsafe-cdr"
" lst_71)))"
"(let-values(((id_148)"
"(let-values(((id_149)"
" id_147))"
"(let-values(((id_150)"
"(let-values()"
"(let-values(((id496_0)"
"(let-values()"
"(if(let-values(((or-part_404)"
"(if(syntax?$1"
" s_829)"
"(symbol?"
"(syntax-e$1"
" s_829))"
" #f)))"
"(if or-part_404"
" or-part_404"
"(symbol?"
" s_829)))"
" s_829"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                             \"not an identifier\""
" orig-s_87"
" s_829)))))"
"(cons"
" id496_0"
" id_149)))))"
"(values"
" id_150)))))"
"(if(not"
" #f)"
"(for-loop_331"
" id_148"
" rest_254)"
" id_148)))"
" id_147)))))"
" for-loop_331)"
" null"
" lst_428)))))"
"(reverse$1"
" id_146))))))))"
"((rhs484_0)"
"(let-values(((s_830)"
"(cdr"
" s_826)))"
"(let-values(((s_831)"
"(if(syntax?$1"
" s_830)"
"(syntax-e$1"
" s_830)"
" s_830)))"
"(if(pair?"
" s_831)"
"(let-values(((rhs485_0)"
"(let-values(((s_832)"
"(car"
" s_831)))"
" s_832))"
"(()"
"(let-values(((s_833)"
"(cdr"
" s_831)))"
"(let-values(((s_834)"
"(if(syntax?$1"
" s_833)"
"(syntax-e$1"
" s_833)"
" s_833)))"
"(if(null?"
" s_834)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                               \"bad syntax\""
" orig-s_87))))))"
"(values"
" rhs485_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                           \"bad syntax\""
" orig-s_87))))))"
"(values"
" id483_0"
" rhs484_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                       \"bad syntax\""
" orig-s_87))))))"
"(values"
" define-values480_0"
" id481_0"
" rhs482_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                   \"bad syntax\""
" orig-s_87)))))"
"(values"
" #t"
" define-values477_1"
" id478_1"
" rhs479_1))))))"
"(let-values(((ids_44)"
"(remove-use-site-scopes"
" id478_0"
" partial-body-ctx_1)))"
"(let-values((()"
"(begin"
"(let-values(((ids486_0)"
" ids_44)"
"((phase487_0)"
" phase_107)"
"((exp-body488_0)"
" exp-body_7))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" ids486_0"
" phase487_0"
" exp-body488_0"
" unsafe-undefined))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ids489_0)"
" ids_44)"
"((phase490_0)"
" phase_107)"
"((requires+provides491_0)"
" requires+provides_7)"
"((exp-body492_0)"
" exp-body_7))"
"(check-ids-unbound173.1"
" exp-body492_0"
" ids489_0"
" phase490_0"
" requires+provides491_0))"
"(values))))"
"(let-values(((syms_23)"
"(let-values(((ids497_0)"
" ids_44)"
"((defined-syms498_0)"
" defined-syms_12)"
"((self499_0)"
" self_34)"
"((phase500_0)"
" phase_107)"
"((all-scopes-stx501_0)"
" all-scopes-stx_5)"
"((frame-id502_0)"
" frame-id_17)"
"((requires+provides503_0)"
" requires+provides_7)"
"((exp-body504_0)"
" exp-body_7))"
"(select-defined-syms-and-bind!16.1"
" #f"
" frame-id502_0"
" exp-body504_0"
" requires+provides503_0"
" #f"
" ids497_0"
" defined-syms498_0"
" self499_0"
" phase500_0"
" all-scopes-stx501_0))))"
"(begin"
"(let-values(((lst_429)"
" syms_23))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_429)))"
"((letrec-values(((for-loop_332)"
"(lambda(lst_430)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_430)"
"(let-values(((sym_110)"
"(unsafe-car"
" lst_430))"
"((rest_255)"
"(unsafe-cdr"
" lst_430)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-unset-transformer!"
" m-ns_20"
" phase_107"
" sym_110))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_332"
" rest_255)"
"(values))))"
"(values))))))"
" for-loop_332)"
" lst_429)))"
"(void)"
"(let-values(((requires+provides493_0)"
" requires+provides_7)"
"((syms494_0)"
" syms_23)"
"((phase495_0)"
" phase_107))"
"(add-defined-syms!103.1"
" #f"
" requires+provides493_0"
" syms494_0"
" phase495_0))"
"(let-values(((obs_146)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_146"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_146"
" 'exit-prim"
"(datum->syntax$1"
" #f"
"(list"
" define-values477_0"
" ids_44"
" rhs479_0)"
" exp-body_7))))"
"(void)))"
"(cons"
"(semi-parsed-define-values2.1"
" exp-body_7"
" syms_23"
" ids_44"
" rhs479_0)"
"(loop_124"
" tail?_53"
" rest-bodys_1))))))))))"
"(if(equal?"
" tmp_23"
" 'define-syntaxes)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_147)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_147"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_147"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_147"
" 'prim-define-syntaxes)"
"(call-expand-observe"
" obs_147"
" 'prepare-env))))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(prepare-next-phase-namespace"
" partial-body-ctx_1)"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_148)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_148"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_148"
" 'phase-up)))"
"(void)))"
"(values))))"
"(let-values(((ok?_84"
" define-syntaxes505_0"
" id506_0"
" rhs507_0)"
"(let-values(((s_835)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_88)"
" s_835))"
"(let-values(((define-syntaxes505_1"
" id506_1"
" rhs507_1)"
"(let-values(((s_836)"
"(if(syntax?$1"
" s_835)"
"(syntax-e$1"
" s_835)"
" s_835)))"
"(if(pair?"
" s_836)"
"(let-values(((define-syntaxes508_0)"
"(let-values(((s_837)"
"(car"
" s_836)))"
" s_837))"
"((id509_0"
" rhs510_0)"
"(let-values(((s_838)"
"(cdr"
" s_836)))"
"(let-values(((s_839)"
"(if(syntax?$1"
" s_838)"
"(syntax-e$1"
" s_838)"
" s_838)))"
"(if(pair?"
" s_839)"
"(let-values(((id511_0)"
"(let-values(((s_840)"
"(car"
" s_839)))"
"(let-values(((s_841)"
"(if(syntax?$1"
" s_840)"
"(syntax-e$1"
" s_840)"
" s_840)))"
"(let-values(((flat-s_61)"
"(to-syntax-list.1"
" s_841)))"
"(if(not"
" flat-s_61)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                     \"bad syntax\""
" orig-s_88))"
"(let-values()"
"(let-values(((id_151)"
"(let-values(((lst_431)"
" flat-s_61))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_431)))"
"((letrec-values(((for-loop_333)"
"(lambda(id_152"
" lst_432)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_432)"
"(let-values(((s_842)"
"(unsafe-car"
" lst_432))"
"((rest_256)"
"(unsafe-cdr"
" lst_432)))"
"(let-values(((id_153)"
"(let-values(((id_154)"
" id_152))"
"(let-values(((id_155)"
"(let-values()"
"(let-values(((id525_0)"
"(let-values()"
"(if(let-values(((or-part_405)"
"(if(syntax?$1"
" s_842)"
"(symbol?"
"(syntax-e$1"
" s_842))"
" #f)))"
"(if or-part_405"
" or-part_405"
"(symbol?"
" s_842)))"
" s_842"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                                                                                                   \"not an identifier\""
" orig-s_88"
" s_842)))))"
"(cons"
" id525_0"
" id_154)))))"
"(values"
" id_155)))))"
"(if(not"
" #f)"
"(for-loop_333"
" id_153"
" rest_256)"
" id_153)))"
" id_152)))))"
" for-loop_333)"
" null"
" lst_431)))))"
"(reverse$1"
" id_151))))))))"
"((rhs512_0)"
"(let-values(((s_843)"
"(cdr"
" s_839)))"
"(let-values(((s_844)"
"(if(syntax?$1"
" s_843)"
"(syntax-e$1"
" s_843)"
" s_843)))"
"(if(pair?"
" s_844)"
"(let-values(((rhs513_0)"
"(let-values(((s_845)"
"(car"
" s_844)))"
" s_845))"
"(()"
"(let-values(((s_846)"
"(cdr"
" s_844)))"
"(let-values(((s_847)"
"(if(syntax?$1"
" s_846)"
"(syntax-e$1"
" s_846)"
" s_846)))"
"(if(null?"
" s_847)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                     \"bad syntax\""
" orig-s_88))))))"
"(values"
" rhs513_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                 \"bad syntax\""
" orig-s_88))))))"
"(values"
" id511_0"
" rhs512_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                             \"bad syntax\""
" orig-s_88))))))"
"(values"
" define-syntaxes508_0"
" id509_0"
" rhs510_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_88)))))"
"(values"
" #t"
" define-syntaxes505_1"
" id506_1"
" rhs507_1))))))"
"(let-values(((ids_45)"
"(remove-use-site-scopes"
" id506_0"
" partial-body-ctx_1)))"
"(let-values((()"
"(begin"
"(let-values(((ids514_0)"
" ids_45)"
"((phase515_0)"
" phase_107)"
"((exp-body516_0)"
" exp-body_7))"
"(check-no-duplicate-ids7.1"
" unsafe-undefined"
" ids514_0"
" phase515_0"
" exp-body516_0"
" unsafe-undefined))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((ids517_0)"
" ids_45)"
"((phase518_0)"
" phase_107)"
"((requires+provides519_0)"
" requires+provides_7)"
"((exp-body520_0)"
" exp-body_7))"
"(check-ids-unbound173.1"
" exp-body520_0"
" ids517_0"
" phase518_0"
" requires+provides519_0))"
"(values))))"
"(let-values(((syms_24)"
"(let-values(((ids526_0)"
" ids_45)"
"((defined-syms527_0)"
" defined-syms_12)"
"((self528_0)"
" self_34)"
"((phase529_0)"
" phase_107)"
"((all-scopes-stx530_0)"
" all-scopes-stx_5)"
"((frame-id531_0)"
" frame-id_17)"
"((requires+provides532_0)"
" requires+provides_7)"
"((exp-body533_0)"
" exp-body_7)"
"((temp534_0)"
" #t))"
"(select-defined-syms-and-bind!16.1"
" temp534_0"
" frame-id531_0"
" exp-body533_0"
" requires+provides532_0"
" #f"
" ids526_0"
" defined-syms527_0"
" self528_0"
" phase529_0"
" all-scopes-stx530_0))))"
"(let-values((()"
"(begin"
"(let-values(((requires+provides521_0)"
" requires+provides_7)"
"((syms522_0)"
" syms_24)"
"((phase523_0)"
" phase_107)"
"((temp524_0)"
" #t))"
"(add-defined-syms!103.1"
" temp524_0"
" requires+provides521_0"
" syms522_0"
" phase523_0))"
"(values))))"
"(let-values(((exp-rhs_6"
" parsed-rhs_2"
" vals_10)"
"(let-values(((temp535_0)"
" 'define-syntaxes)"
"((temp536_0)"
" rhs507_0)"
"((ids537_0)"
" ids_45)"
"((temp538_0)"
"(let-values(((v_274)"
" partial-body-ctx_1))"
"(let-values(((the-struct_114)"
" v_274))"
"(if(expand-context/outer?"
" the-struct_114)"
"(let-values(((need-eventually-defined540_0)"
" need-eventually-defined_2)"
"((inner541_0)"
"(let-values(((the-struct_115)"
"(root-expand-context/outer-inner"
" v_274)))"
"(if(expand-context/inner?"
" the-struct_115)"
"(let-values(((lifts542_0)"
" #f)"
"((module-lifts543_0)"
" #f)"
"((to-module-lifts544_0)"
" #f))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_115)"
"(root-expand-context/inner-module-scopes"
" the-struct_115)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_115)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_115)"
"(root-expand-context/inner-defined-syms"
" the-struct_115)"
"(root-expand-context/inner-counter"
" the-struct_115)"
"(root-expand-context/inner-lift-key"
" the-struct_115)"
"(expand-context/inner-to-parsed?"
" the-struct_115)"
"(expand-context/inner-phase"
" the-struct_115)"
"(expand-context/inner-namespace"
" the-struct_115)"
"(expand-context/inner-just-once?"
" the-struct_115)"
"(expand-context/inner-module-begin-k"
" the-struct_115)"
"(expand-context/inner-allow-unbound?"
" the-struct_115)"
"(expand-context/inner-in-local-expand?"
" the-struct_115)"
"(expand-context/inner-keep-#%expression?"
" the-struct_115)"
"(expand-context/inner-stops"
" the-struct_115)"
"(expand-context/inner-declared-submodule-names"
" the-struct_115)"
" lifts542_0"
"(expand-context/inner-lift-envs"
" the-struct_115)"
" module-lifts543_0"
"(expand-context/inner-require-lifts"
" the-struct_115)"
" to-module-lifts544_0"
"(expand-context/inner-requires+provides"
" the-struct_115)"
"(expand-context/inner-observer"
" the-struct_115)"
"(expand-context/inner-for-serializable?"
" the-struct_115)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_115)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                                     \"expand-context/inner?\""
" the-struct_115)))))"
"(expand-context/outer1.1"
" inner541_0"
"(root-expand-context/outer-post-expansion"
" the-struct_114)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_114)"
"(root-expand-context/outer-frame-id"
" the-struct_114)"
"(expand-context/outer-context"
" the-struct_114)"
"(expand-context/outer-env"
" the-struct_114)"
"(expand-context/outer-scopes"
" the-struct_114)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_114)"
"(expand-context/outer-binding-layer"
" the-struct_114)"
"(expand-context/outer-reference-records"
" the-struct_114)"
"(expand-context/outer-only-immediate?"
" the-struct_114)"
" need-eventually-defined540_0"
"(expand-context/outer-current-introduction-scopes"
" the-struct_114)"
"(expand-context/outer-current-use-scopes"
" the-struct_114)"
"(expand-context/outer-name"
" the-struct_114)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                                                                   \"expand-context/outer?\""
" the-struct_114)))))"
"((temp539_0)"
" #f))"
"(expand+eval-for-syntaxes-binding108.1"
" temp539_0"
" temp535_0"
" temp536_0"
" ids537_0"
" temp538_0))))"
"(let-values((()"
"(begin"
"(let-values(((lst_433)"
" syms_24)"
"((lst_434)"
" vals_10)"
"((lst_435)"
" ids_45))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_433)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_434)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_435)))"
"((letrec-values(((for-loop_334)"
"(lambda(lst_436"
" lst_437"
" lst_438)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_436)"
"(if(pair?"
" lst_437)"
"(pair?"
" lst_438)"
" #f)"
" #f)"
"(let-values(((sym_111)"
"(unsafe-car"
" lst_436))"
"((rest_257)"
"(unsafe-cdr"
" lst_436))"
"((val_87)"
"(unsafe-car"
" lst_437))"
"((rest_258)"
"(unsafe-cdr"
" lst_437))"
"((id_156)"
"(unsafe-car"
" lst_438))"
"((rest_259)"
"(unsafe-cdr"
" lst_438)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(maybe-install-free=id-in-context!"
" val_87"
" id_156"
" phase_107"
" partial-body-ctx_1)"
"(namespace-set-transformer!"
" m-ns_20"
" phase_107"
" sym_111"
" val_87)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_334"
" rest_257"
" rest_258"
" rest_259)"
"(values))))"
"(values))))))"
" for-loop_334)"
" lst_433"
" lst_434"
" lst_435)))"
"(values))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_149)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_149"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_149"
" 'exit-prim"
"(datum->syntax$1"
" #f"
"(list"
" define-syntaxes505_0"
" ids_45"
" exp-rhs_6)))))"
"(void)))"
"(values))))"
"(let-values(((parsed-body_0)"
"(parsed-define-syntaxes20.1"
"(keep-properties-only"
" exp-body_7)"
" ids_45"
" syms_24"
" parsed-rhs_2)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_1)"
" parsed-body_0"
"(expanded+parsed1.1"
"(let-values(((exp-body545_0)"
" exp-body_7)"
"((temp546_0)"
"(list"
" define-syntaxes505_0"
" ids_45"
" exp-rhs_6)))"
"(rebuild5.1"
" #t"
" exp-body545_0"
" temp546_0))"
" parsed-body_0))"
"(loop_124"
" tail?_53"
" rest-bodys_1)))))))))))))))))"
"(if(equal?"
" tmp_23"
" '#%require)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_150)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_150"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_150"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_150"
" 'prim-require))))"
"(void)))"
"(values))))"
"(let-values(((ready-body_0)"
"(remove-use-site-scopes"
" disarmed-exp-body_1"
" partial-body-ctx_1)))"
"(let-values(((ok?_85"
" #%require547_0"
" req548_0)"
"(let-values(((s_848)"
" ready-body_0))"
"(let-values(((orig-s_89)"
" s_848))"
"(let-values(((#%require547_1"
" req548_1)"
"(let-values(((s_849)"
"(if(syntax?$1"
" s_848)"
"(syntax-e$1"
" s_848)"
" s_848)))"
"(if(pair?"
" s_849)"
"(let-values(((#%require549_0)"
"(let-values(((s_850)"
"(car"
" s_849)))"
" s_850))"
"((req550_0)"
"(let-values(((s_851)"
"(cdr"
" s_849)))"
"(let-values(((s_852)"
"(if(syntax?$1"
" s_851)"
"(syntax-e$1"
" s_851)"
" s_851)))"
"(let-values(((flat-s_62)"
"(to-syntax-list.1"
" s_852)))"
"(if(not"
" flat-s_62)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                 \"bad syntax\""
" orig-s_89))"
"(let-values()"
" flat-s_62)))))))"
"(values"
" #%require549_0"
" req550_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                         \"bad syntax\""
" orig-s_89)))))"
"(values"
" #t"
" #%require547_1"
" req548_1))))))"
"(begin"
"(let-values(((temp551_0)"
" req548_0)"
"((exp-body552_0)"
" exp-body_7)"
"((self553_0)"
" self_34)"
"((m-ns554_0)"
" m-ns_20)"
"((phase555_0)"
" phase_107)"
"((phase556_0)"
" phase_107)"
"((requires+provides557_0)"
" requires+provides_7)"
"((declared-submodule-names558_0)"
" declared-submodule-names_4)"
"((temp559_0)"
" 'module))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" declared-submodule-names558_0"
" #f"
" phase556_0"
" #f"
" self553_0"
" #f"
" #t"
" temp559_0"
" temp551_0"
" exp-body552_0"
" m-ns554_0"
" phase555_0"
" requires+provides557_0))"
"(let-values(((obs_151)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_151"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_151"
" 'exit-prim"
" ready-body_0)))"
"(void)))"
"(cons"
" exp-body_7"
"(loop_124"
" tail?_53"
" rest-bodys_1)))))))"
"(if(equal?"
" tmp_23"
" '#%provide)"
"(let-values()"
"(cons"
" exp-body_7"
"(loop_124"
" tail?_53"
" rest-bodys_1)))"
"(if(equal?"
" tmp_23"
" 'module)"
"(let-values()"
"(let-values(((ready-body_1)"
"(remove-use-site-scopes"
" exp-body_7"
" partial-body-ctx_1)))"
"(let-values(((submod_2)"
"(let-values(((ready-body560_0)"
" ready-body_1)"
"((self561_0)"
" self_34)"
"((partial-body-ctx562_0)"
" partial-body-ctx_1)"
"((temp563_0)"
" #f)"
"((declared-submodule-names564_0)"
" declared-submodule-names_4)"
"((mpis-to-reset565_0)"
" mpis-to-reset_1)"
"((compiled-submodules566_0)"
" compiled-submodules_2)"
"((modules-being-compiled567_0)"
" modules-being-compiled_4))"
"(expand-submodule197.1"
" compiled-submodules566_0"
" declared-submodule-names564_0"
" #f"
" #f"
" #f"
" temp563_0"
" #f"
" modules-being-compiled567_0"
" mpis-to-reset565_0"
" ready-body560_0"
" self561_0"
" partial-body-ctx562_0))))"
"(cons"
" submod_2"
"(loop_124"
" tail?_53"
" rest-bodys_1)))))"
"(if(equal?"
" tmp_23"
" 'module*)"
"(let-values()"
"(begin"
"(let-values(((obs_152)"
"(expand-context-observer"
" partial-body-ctx_1)))"
"(if obs_152"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_152"
" 'enter-prim"
" exp-body_7)"
"(call-expand-observe"
" obs_152"
" 'prim-submodule*)"
"(call-expand-observe"
" obs_152"
" 'exit-prim"
" exp-body_7))))"
"(void)))"
"(cons"
" exp-body_7"
"(loop_124"
" tail?_53"
" rest-bodys_1))))"
"(if(equal?"
" tmp_23"
" '#%declare)"
"(let-values()"
"(let-values(((ok?_86"
" #%declare568_0"
" kw569_0)"
"(let-values(((s_853)"
" disarmed-exp-body_1))"
"(let-values(((orig-s_90)"
" s_853))"
"(let-values(((#%declare568_1"
" kw569_1)"
"(let-values(((s_276)"
"(if(syntax?$1"
" s_853)"
"(syntax-e$1"
" s_853)"
" s_853)))"
"(if(pair?"
" s_276)"
"(let-values(((#%declare570_0)"
"(let-values(((s_854)"
"(car"
" s_276)))"
" s_854))"
"((kw571_0)"
"(let-values(((s_278)"
"(cdr"
" s_276)))"
"(let-values(((s_279)"
"(if(syntax?$1"
" s_278)"
"(syntax-e$1"
" s_278)"
" s_278)))"
"(let-values(((flat-s_63)"
"(to-syntax-list.1"
" s_279)))"
"(if(not"
" flat-s_63)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                     \"bad syntax\""
" orig-s_90))"
"(let-values()"
" flat-s_63)))))))"
"(values"
" #%declare570_0"
" kw571_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                             \"bad syntax\""
" orig-s_90)))))"
"(values"
" #t"
" #%declare568_1"
" kw569_1))))))"
"(let-values((()"
"(begin"
"(let-values(((lst_439)"
" kw569_0))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_439)))"
"((letrec-values(((for-loop_335)"
"(lambda(lst_440)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_440)"
"(let-values(((kw_1)"
"(unsafe-car"
" lst_440))"
"((rest_260)"
"(unsafe-cdr"
" lst_440)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(if(keyword?"
"(syntax-e$1"
" kw_1))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"expected a keyword\""
" exp-body_7"
" kw_1)))"
"(if(memq"
"(syntax-e$1"
" kw_1)"
" '(#:cross-phase-persistent"
" #:empty-namespace))"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"not an allowed declaration keyword\""
" exp-body_7"
" kw_1)))"
"(if(hash-ref"
" declared-keywords_1"
"(syntax-e$1"
" kw_1)"
" #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                                                   \"keyword declared multiple times\""
" exp-body_7"
" kw_1))"
"(void))"
"(hash-set!"
" declared-keywords_1"
"(syntax-e$1"
" kw_1)"
" kw_1)))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_335"
" rest_260)"
"(values))))"
"(values))))))"
" for-loop_335)"
" lst_439)))"
"(values))))"
"(let-values()"
"(let-values(((parsed-body_1)"
"(parsed-#%declare22.1"
" exp-body_7)))"
"(cons"
"(if(expand-context-to-parsed?"
" partial-body-ctx_1)"
" parsed-body_1"
"(expanded+parsed1.1"
" exp-body_7"
" parsed-body_1))"
"(loop_124"
" tail?_53"
" rest-bodys_1)))))))"
"(let-values()"
"(cons"
" exp-body_7"
"(loop_124"
" tail?_53"
" rest-bodys_1)))))))))))))))))"
"(let-values(((l_88)"
"(append"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts"
" partial-body-ctx_1))"
" lifted-defns_0"
"(loop_124"
" #f"
"(add-post-expansion-scope"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts"
" partial-body-ctx_1))"
" partial-body-ctx_1)))))"
"(if(null? l_88)"
"(finish_2)"
"(append"
" l_88"
"(finish_2)))))))))))))))))"
" loop_124)"
" #t"
" bodys_20))))))))))))))))))))))"
"(define-values"
"(make-wrap-as-definition)"
"(lambda(self_35 frame-id_18 inside-scope_2 all-scopes-stx_6 defined-syms_13 requires+provides_8)"
"(begin"
"(lambda(ids_46 rhs_23 phase_149)"
"(let-values(((scoped-ids_0)"
"(reverse$1"
"(let-values(((lst_441) ids_46))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_441)))"
"((letrec-values(((for-loop_336)"
"(lambda(fold-var_379 lst_442)"
"(begin"
" 'for-loop"
"(if(pair? lst_442)"
"(let-values(((id_157)(unsafe-car lst_442))"
"((rest_261)(unsafe-cdr lst_442)))"
"(let-values(((fold-var_380)"
"(let-values(((fold-var_381) fold-var_379))"
"(let-values(((fold-var_382)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_157"
" inside-scope_2))"
" fold-var_381))))"
"(values fold-var_382)))))"
"(if(not #f)(for-loop_336 fold-var_380 rest_261) fold-var_380)))"
" fold-var_379)))))"
" for-loop_336)"
" null"
" lst_441))))))"
"(let-values(((syms_25)"
"(let-values(((scoped-ids572_0) scoped-ids_0)"
"((defined-syms573_0) defined-syms_13)"
"((self574_0) self_35)"
"((phase575_0) phase_149)"
"((all-scopes-stx576_0) all-scopes-stx_6)"
"((frame-id577_0) frame-id_18)"
"((requires+provides578_0) requires+provides_8))"
"(select-defined-syms-and-bind!16.1"
" #f"
" frame-id577_0"
" #f"
" requires+provides578_0"
" #f"
" scoped-ids572_0"
" defined-syms573_0"
" self574_0"
" phase575_0"
" all-scopes-stx576_0))))"
"(let-values(((s_855)"
"(add-scope"
"(datum->syntax$1"
" #f"
"(list"
"(datum->syntax$1(syntax-shift-phase-level$1 core-stx phase_149) 'define-values)"
" scoped-ids_0"
" rhs_23))"
" inside-scope_2)))"
"(values scoped-ids_0(semi-parsed-define-values2.1 s_855 syms_25 scoped-ids_0 rhs_23)))))))))"
"(define-values"
"(add-post-expansion-scope)"
"(lambda(bodys_23 ctx_115)"
"(begin"
"(let-values(((pe_3)(root-expand-context-post-expansion ctx_115)))"
"(if pe_3"
"(reverse$1"
"(let-values(((lst_443) bodys_23))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_443)))"
"((letrec-values(((for-loop_337)"
"(lambda(fold-var_383 lst_444)"
"(begin"
" 'for-loop"
"(if(pair? lst_444)"
"(let-values(((body_21)(unsafe-car lst_444))((rest_262)(unsafe-cdr lst_444)))"
"(let-values(((fold-var_384)"
"(let-values(((fold-var_385) fold-var_383))"
"(let-values(((fold-var_386)"
"(let-values()"
"(cons"
"(let-values()"
"(apply-post-expansion pe_3 body_21))"
" fold-var_385))))"
"(values fold-var_386)))))"
"(if(not #f)(for-loop_337 fold-var_384 rest_262) fold-var_384)))"
" fold-var_383)))))"
" for-loop_337)"
" null"
" lst_443))))"
" bodys_23)))))"
"(define-values"
"(finish-expanding-body-expressons99.1)"
"(lambda(compiled-submodules88_0"
" ctx85_0"
" declared-submodule-names87_0"
" modules-being-compiled89_0"
" mpis-to-reset90_0"
" phase84_0"
" self86_0"
" partially-expanded-bodys98_0)"
"(begin"
" 'finish-expanding-body-expressons99"
"(let-values(((partially-expanded-bodys_1) partially-expanded-bodys98_0))"
"(let-values(((phase_150) phase84_0))"
"(let-values(((body-ctx_7) ctx85_0))"
"(let-values(((self_36) self86_0))"
"(let-values(((declared-submodule-names_5) declared-submodule-names87_0))"
"(let-values(((compiled-submodules_3) compiled-submodules88_0))"
"(let-values(((modules-being-compiled_5) modules-being-compiled89_0))"
"(let-values(((mpis-to-reset_2) mpis-to-reset90_0))"
"(let-values()"
"((letrec-values(((loop_125)"
"(lambda(tail?_54 bodys_24)"
"(begin"
" 'loop"
"(if(null? bodys_24)"
"(let-values()"
"(if(if tail?_54(not(zero? phase_150)) #f)"
"(let-values()"
"(begin"
"(let-values(((obs_153)(expand-context-observer body-ctx_7)))"
"(if obs_153"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_153"
" 'module-lift-end-loop"
" '())))"
"(void)))"
" null))"
"(if tail?_54"
"(let-values()"
"(let-values(((bodys_25)"
"(append"
"(get-and-clear-end-lifts!"
"(expand-context-to-module-lifts body-ctx_7))"
"(get-and-clear-provide-lifts!"
"(expand-context-to-module-lifts body-ctx_7)))))"
"(if(null? bodys_25)"
"(let-values()"
"(begin"
"(let-values(((obs_154)"
"(expand-context-observer body-ctx_7)))"
"(if obs_154"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_154"
" 'module-lift-end-loop"
" '())))"
"(void)))"
" null))"
"(let-values()"
"(loop_125"
" #t"
"(add-post-expansion-scope bodys_25 body-ctx_7))))))"
"(let-values() null))))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_155)"
"(expand-context-observer body-ctx_7)))"
"(if obs_155"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_155 'next)))"
"(void)))"
"(values))))"
"(let-values(((body_22)(car bodys_24)))"
"(let-values(((rest-bodys_2)(cdr bodys_24)))"
"(let-values(((exp-body_8)"
"(if(let-values(((or-part_406)"
"(parsed? body_22)))"
"(if or-part_406"
" or-part_406"
"(let-values(((or-part_407)"
"(expanded+parsed? body_22)))"
"(if or-part_407"
" or-part_407"
"(semi-parsed-begin-for-syntax?"
" body_22)))))"
"(let-values() body_22)"
"(if(semi-parsed-define-values? body_22)"
"(let-values()"
"(let-values(((ids_47)"
"(semi-parsed-define-values-ids"
" body_22)))"
"(let-values(((rhs-ctx_2)"
"(as-named-context"
"(as-expression-context"
" body-ctx_7)"
" ids_47)))"
"(let-values(((syms_26)"
"(semi-parsed-define-values-syms"
" body_22)))"
"(let-values(((s_626)"
"(semi-parsed-define-values-s"
" body_22)))"
"(let-values(((ok?_87"
" define-values579_0"
" _580_0"
" _581_0)"
"(let-values(((s_856)"
"(syntax-disarm$1"
" s_626)))"
"(if(if(not"
"(expand-context-to-parsed?"
" rhs-ctx_2))"
" #t"
" #f)"
"(let-values(((orig-s_91)"
" s_856))"
"(let-values(((define-values579_1"
" _580_1"
" _581_1)"
"(let-values(((s_857)"
"(if(syntax?$1"
" s_856)"
"(syntax-e$1"
" s_856)"
" s_856)))"
"(if(pair?"
" s_857)"
"(let-values(((define-values582_0)"
"(let-values(((s_858)"
"(car"
" s_857)))"
" s_858))"
"((_583_0"
" _584_0)"
"(let-values(((s_859)"
"(cdr"
" s_857)))"
"(let-values(((s_860)"
"(if(syntax?$1"
" s_859)"
"(syntax-e$1"
" s_859)"
" s_859)))"
"(if(pair?"
" s_860)"
"(let-values(((_585_0)"
"(let-values(((s_861)"
"(car"
" s_860)))"
" s_861))"
"((_586_0)"
"(let-values(((s_862)"
"(cdr"
" s_860)))"
"(let-values(((s_863)"
"(if(syntax?$1"
" s_862)"
"(syntax-e$1"
" s_862)"
" s_862)))"
"(if(pair?"
" s_863)"
"(let-values(((_587_0)"
"(let-values(((s_864)"
"(car"
" s_863)))"
" s_864))"
"(()"
"(let-values(((s_865)"
"(cdr"
" s_863)))"
"(let-values(((s_866)"
"(if(syntax?$1"
" s_865)"
"(syntax-e$1"
" s_865)"
" s_865)))"
"(if(null?"
" s_866)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                       \"bad syntax\""
" orig-s_91))))))"
"(values"
" _587_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                   \"bad syntax\""
" orig-s_91))))))"
"(values"
" _585_0"
" _586_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                               \"bad syntax\""
" orig-s_91))))))"
"(values"
" define-values582_0"
" _583_0"
" _584_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                           \"bad syntax\""
" orig-s_91)))))"
"(values"
" #t"
" define-values579_1"
" _580_1"
" _581_1)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((rebuild-s_15)"
"(let-values(((rhs-ctx588_0)"
" rhs-ctx_2)"
"((s589_0)"
" s_626)"
"((temp590_0)"
" #t))"
"(keep-as-needed119.1"
" #f"
" #f"
" temp590_0"
" rhs-ctx588_0"
" s589_0))))"
"(let-values((()"
"(begin"
"(log-defn-enter"
" body-ctx_7"
" body_22)"
"(values))))"
"(let-values(((exp-rhs_7)"
"(let-values()"
"(let-values(((temp591_0)"
"(semi-parsed-define-values-rhs"
" body_22))"
"((rhs-ctx592_0)"
" rhs-ctx_2))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp591_0"
" rhs-ctx592_0)))))"
"(let-values((()"
"(begin"
"(log-defn-exit"
" body-ctx_7"
" body_22"
" exp-rhs_7)"
"(values))))"
"(let-values(((comp-form_0)"
"(parsed-define-values19.1"
" rebuild-s_15"
" ids_47"
" syms_26"
"(if(expand-context-to-parsed?"
" rhs-ctx_2)"
" exp-rhs_7"
"(let-values(((exp-rhs593_0)"
" exp-rhs_7)"
"((temp594_0)"
"(as-to-parsed-context"
" rhs-ctx_2)))"
"(expand9.1"
" #f"
" #f"
" #f"
" exp-rhs593_0"
" temp594_0))))))"
"(if(expand-context-to-parsed?"
" rhs-ctx_2)"
" comp-form_0"
"(expanded+parsed1.1"
"(let-values(((rebuild-s595_0)"
" rebuild-s_15)"
"((temp596_0)"
"(list"
" define-values579_0"
" ids_47"
" exp-rhs_7)))"
"(rebuild5.1"
" #t"
" rebuild-s595_0"
" temp596_0))"
" comp-form_0)))))))))))))"
"(let-values()"
"(let-values(((disarmed-body_0)"
"(syntax-disarm$1 body_22)))"
"(let-values(((tmp_64)"
"(core-form-sym"
" disarmed-body_0"
" phase_150)))"
"(if(if(equal? tmp_64 '#%require)"
" #t"
"(if(equal? tmp_64 '#%provide)"
" #t"
"(equal? tmp_64 'module*)))"
"(let-values() body_22)"
"(let-values()"
"(let-values()"
"(let-values(((exp-body_9)"
"(let-values(((body597_0)"
" body_22)"
"((temp598_0)"
"(as-expression-context"
" body-ctx_7)))"
"(expand9.1"
" #f"
" #f"
" #f"
" body597_0"
" temp598_0))))"
"(if(expand-context-to-parsed?"
" body-ctx_7)"
" exp-body_9"
"(expanded+parsed1.1"
" exp-body_9"
"(let-values(((exp-body599_0)"
" exp-body_9)"
"((temp600_0)"
"(as-to-parsed-context"
" body-ctx_7)))"
"(expand9.1"
" #f"
" #f"
" #f"
" exp-body599_0"
" temp600_0)))))))))))))))"
"(let-values(((lifted-defns_1)"
"(get-and-clear-lifts!"
"(expand-context-lifts body-ctx_7))))"
"(let-values(((lifted-requires_0)"
"(get-and-clear-require-lifts!"
"(expand-context-require-lifts body-ctx_7))))"
"(let-values(((lifted-modules_0)"
"(get-and-clear-module-lifts!"
"(expand-context-module-lifts body-ctx_7))))"
"(let-values(((no-lifts?_0)"
"(if(null? lifted-defns_1)"
"(if(null? lifted-modules_0)"
"(null? lifted-requires_0)"
" #f)"
" #f)))"
"(let-values((()"
"(begin"
"(if no-lifts?_0"
"(void)"
"(let-values()"
"(let-values(((obs_156)"
"(expand-context-observer"
" body-ctx_7)))"
"(if obs_156"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_156"
" 'module-lift-loop"
"(append"
" lifted-requires_0"
"(lifted-defns-extract-syntax"
" lifted-defns_1)"
"(add-post-expansion-scope"
" lifted-modules_0"
" body-ctx_7)))))"
"(void)))))"
"(values))))"
"(let-values(((exp-lifted-modules_0)"
"(let-values(((lifted-modules601_0)"
" lifted-modules_0)"
"((phase602_0) phase_150)"
"((self603_0) self_36)"
"((body-ctx604_0)"
" body-ctx_7)"
"((mpis-to-reset605_0)"
" mpis-to-reset_2)"
"((declared-submodule-names606_0)"
" declared-submodule-names_5)"
"((compiled-submodules607_0)"
" compiled-submodules_3)"
"((modules-being-compiled608_0)"
" modules-being-compiled_5))"
"(expand-non-module*-submodules212.1"
" compiled-submodules607_0"
" declared-submodule-names606_0"
" modules-being-compiled608_0"
" mpis-to-reset605_0"
" lifted-modules601_0"
" phase602_0"
" self603_0"
" body-ctx604_0))))"
"(let-values(((exp-lifted-defns_0)"
"(loop_125 #f lifted-defns_1)))"
"(begin"
"(if no-lifts?_0"
"(void)"
"(let-values()"
"(let-values(((obs_157)"
"(expand-context-observer"
" body-ctx_7)))"
"(if obs_157"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_157"
" 'next)))"
"(void)))))"
"(append"
" lifted-requires_0"
" exp-lifted-defns_0"
" exp-lifted-modules_0"
"(cons"
" exp-body_8"
"(loop_125"
" tail?_54"
" rest-bodys_2)))))))))))))))))))))"
" loop_125)"
" #t"
" partially-expanded-bodys_1)))))))))))))"
"(define-values"
"(check-defined-by-now)"
"(lambda(need-eventually-defined_3 self_37 ctx_116 requires+provides_9)"
"(begin"
"(begin"
"(let-values(((ht_166) need-eventually-defined_3))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-in-hash ht_166)))"
"((letrec-values(((for-loop_338)"
"(lambda(i_186)"
"(begin"
" 'for-loop"
"(if i_186"
"(let-values(((phase_151 l_89)(hash-iterate-key+value ht_166 i_186)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(begin"
"(let-values(((lst_445) l_89))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_445)))"
"((letrec-values(((for-loop_339)"
"(lambda(lst_446)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_446)"
"(let-values(((id_158)"
"(unsafe-car"
" lst_446))"
"((rest_263)"
"(unsafe-cdr"
" lst_446)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((b_96)"
"(let-values(((id609_0)"
" id_158)"
"((phase610_0)"
" phase_151))"
"(resolve+shift28.1"
" #f"
" #f"
" null"
" unsafe-undefined"
" #f"
" id609_0"
" phase610_0))))"
"(let-values(((bound-here?_0)"
"(if b_96"
"(if(module-binding?"
" b_96)"
"(if(eq?"
"(module-binding-sym"
" b_96)"
"(syntax-e$1"
" id_158))"
"(eq?"
"(module-binding-module"
" b_96)"
" self_37)"
" #f)"
" #f)"
" #f)))"
"(let-values(((bound-kind_0)"
"(if bound-here?_0"
"(defined-sym-kind"
" requires+provides_9"
"(module-binding-sym"
" b_96)"
" phase_151)"
" #f)))"
"(if(eq?"
" bound-kind_0"
" 'variable)"
"(void)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"(string-append"
"(if(not"
" b_96)"
"(let-values()"
"                                                                                                                                                              \"reference to an unbound identifier\")"
"(if(eq?"
" bound-kind_0"
" 'transformer)"
"(let-values()"
"                                                                                                                                                                \"identifier treated as a variable, but later defined as syntax\")"
"(let-values()"
"                                                                                                                                                                \"identifier treated as a variable, but later bound differently\")))"
"(format"
"                                                                                                                                                           \"\\n  at phase: ~a\""
"(let-values(((tmp_65)"
" phase_151))"
"(if(equal?"
" tmp_65"
" 1)"
"(let-values()"
"                                                                                                                                                                 \"1; the transformer environment\")"
"(let-values()"
" phase_151)))))"
" id_158"
" #f"
" null"
"(syntax-debug-info-string"
" id_158"
" ctx_116))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)"
"(for-loop_339"
" rest_263)"
"(values))))"
"(values))))))"
" for-loop_339)"
" lst_445)))"
"(void)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_338(hash-iterate-next ht_166 i_186))(values))))"
"(values))))))"
" for-loop_338)"
"(hash-iterate-first ht_166))))"
"(void)))))"
"(define-values"
"(resolve-provides115.1)"
"(lambda(ctx107_1"
" declared-submodule-names103_0"
" namespace104_0"
" phase105_0"
" requires-and-provides102_0"
" self106_0"
" expression-expanded-bodys114_0)"
"(begin"
" 'resolve-provides115"
"(let-values(((expression-expanded-bodys_1) expression-expanded-bodys114_0))"
"(let-values(((requires+provides_10) requires-and-provides102_0))"
"(let-values(((declared-submodule-names_6) declared-submodule-names103_0))"
"(let-values(((m-ns_21) namespace104_0))"
"(let-values(((phase_152) phase105_0))"
"(let-values(((self_38) self106_0))"
"(let-values(((ctx_117) ctx107_1))"
"(let-values()"
"(let-values()"
"((letrec-values(((loop_126)"
"(lambda(bodys_26 phase_153)"
"(begin"
" 'loop"
"(if(null? bodys_26)"
"(let-values() null)"
"(if(let-values(((or-part_408)(parsed?(car bodys_26))))"
"(if or-part_408 or-part_408(expanded+parsed?(car bodys_26))))"
"(let-values()"
"(cons(car bodys_26)(loop_126(cdr bodys_26) phase_153)))"
"(if(semi-parsed-begin-for-syntax?(car bodys_26))"
"(let-values()"
"(let-values(((nested-bodys_2)"
"(loop_126"
"(semi-parsed-begin-for-syntax-body(car bodys_26))"
"(add1 phase_153))))"
"(cons"
"(let-values(((the-struct_116)(car bodys_26)))"
"(if(semi-parsed-begin-for-syntax? the-struct_116)"
"(let-values(((body611_0) nested-bodys_2))"
"(semi-parsed-begin-for-syntax3.1"
"(semi-parsed-begin-for-syntax-s the-struct_116)"
" body611_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                              \"semi-parsed-begin-for-syntax?\""
" the-struct_116)))"
"(loop_126(cdr bodys_26) phase_153))))"
"(let-values()"
"(let-values(((disarmed-body_1)(syntax-disarm$1(car bodys_26))))"
"(let-values(((tmp_66)"
"(core-form-sym disarmed-body_1 phase_153)))"
"(if(equal? tmp_66 '#%provide)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_158)"
"(expand-context-observer"
" ctx_117)))"
"(if obs_158"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe"
" obs_158"
" 'enter-prim"
"(car bodys_26))"
"(call-expand-observe"
" obs_158"
" 'prim-provide))))"
"(void)))"
"(values))))"
"(let-values(((ok?_88 #%provide612_0 spec613_0)"
"(let-values(((s_867) disarmed-body_1))"
"(let-values(((orig-s_92) s_867))"
"(let-values(((#%provide612_1"
" spec613_1)"
"(let-values(((s_868)"
"(if(syntax?$1"
" s_867)"
"(syntax-e$1"
" s_867)"
" s_867)))"
"(if(pair? s_868)"
"(let-values(((#%provide614_0)"
"(let-values(((s_666)"
"(car"
" s_868)))"
" s_666))"
"((spec615_0)"
"(let-values(((s_667)"
"(cdr"
" s_868)))"
"(let-values(((s_668)"
"(if(syntax?$1"
" s_667)"
"(syntax-e$1"
" s_667)"
" s_667)))"
"(let-values(((flat-s_64)"
"(to-syntax-list.1"
" s_668)))"
"(if(not"
" flat-s_64)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                             \"bad syntax\""
" orig-s_92))"
"(let-values()"
" flat-s_64)))))))"
"(values"
" #%provide614_0"
" spec615_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                     \"bad syntax\""
" orig-s_92)))))"
"(values"
" #t"
" #%provide612_1"
" spec613_1))))))"
"(let-values(((track-stxes_10 specs_2)"
"(parse-and-expand-provides!"
" spec613_0"
"(car bodys_26)"
" requires+provides_10"
" self_38"
" phase_153"
"(let-values(((v_275) ctx_117))"
"(let-values(((the-struct_117)"
" v_275))"
"(if(expand-context/outer?"
" the-struct_117)"
"(let-values(((context616_0)"
" 'top-level)"
"((inner617_0)"
"(let-values(((the-struct_118)"
"(root-expand-context/outer-inner"
" v_275)))"
"(if(expand-context/inner?"
" the-struct_118)"
"(let-values(((phase618_0)"
" phase_153)"
"((namespace619_0)"
"(namespace->namespace-at-phase"
" m-ns_21"
" phase_153))"
"((requires+provides620_0)"
" requires+provides_10)"
"((declared-submodule-names621_0)"
" declared-submodule-names_6))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_118)"
"(root-expand-context/inner-module-scopes"
" the-struct_118)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_118)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_118)"
"(root-expand-context/inner-defined-syms"
" the-struct_118)"
"(root-expand-context/inner-counter"
" the-struct_118)"
"(root-expand-context/inner-lift-key"
" the-struct_118)"
"(expand-context/inner-to-parsed?"
" the-struct_118)"
" phase618_0"
" namespace619_0"
"(expand-context/inner-just-once?"
" the-struct_118)"
"(expand-context/inner-module-begin-k"
" the-struct_118)"
"(expand-context/inner-allow-unbound?"
" the-struct_118)"
"(expand-context/inner-in-local-expand?"
" the-struct_118)"
"(expand-context/inner-keep-#%expression?"
" the-struct_118)"
"(expand-context/inner-stops"
" the-struct_118)"
" declared-submodule-names621_0"
"(expand-context/inner-lifts"
" the-struct_118)"
"(expand-context/inner-lift-envs"
" the-struct_118)"
"(expand-context/inner-module-lifts"
" the-struct_118)"
"(expand-context/inner-require-lifts"
" the-struct_118)"
"(expand-context/inner-to-module-lifts"
" the-struct_118)"
" requires+provides620_0"
"(expand-context/inner-observer"
" the-struct_118)"
"(expand-context/inner-for-serializable?"
" the-struct_118)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_118)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                          \"expand-context/inner?\""
" the-struct_118)))))"
"(expand-context/outer1.1"
" inner617_0"
"(root-expand-context/outer-post-expansion"
" the-struct_117)"
"(root-expand-context/outer-use-site-scopes"
" the-struct_117)"
"(root-expand-context/outer-frame-id"
" the-struct_117)"
" context616_0"
"(expand-context/outer-env"
" the-struct_117)"
"(expand-context/outer-scopes"
" the-struct_117)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_117)"
"(expand-context/outer-binding-layer"
" the-struct_117)"
"(expand-context/outer-reference-records"
" the-struct_117)"
"(expand-context/outer-only-immediate?"
" the-struct_117)"
"(expand-context/outer-need-eventually-defined"
" the-struct_117)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_117)"
"(expand-context/outer-current-use-scopes"
" the-struct_117)"
"(expand-context/outer-name"
" the-struct_117)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                        \"expand-context/outer?\""
" the-struct_117)))))))"
"(if(expand-context-to-parsed? ctx_117)"
"(let-values()"
"(loop_126(cdr bodys_26) phase_153))"
"(let-values()"
"(let-values(((new-s_10)"
"(syntax-track-origin*"
" track-stxes_10"
"(let-values(((temp622_0)"
"(car bodys_26))"
"((temp623_0)"
"(list*"
" #%provide612_0"
" specs_2)))"
"(rebuild5.1"
" #t"
" temp622_0"
" temp623_0)))))"
"(begin"
"(let-values(((obs_159)"
"(expand-context-observer"
" ctx_117)))"
"(if obs_159"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_159"
" 'exit-prim"
" new-s_10)))"
"(void)))"
"(cons"
" new-s_10"
"(loop_126"
"(cdr bodys_26)"
" phase_153))))))))))"
"(let-values()"
"(cons"
"(car bodys_26)"
"(loop_126(cdr bodys_26) phase_153))))))))))))))"
" loop_126)"
" expression-expanded-bodys_1"
" phase_152)))))))))))))"
"(define-values"
"(declare-module-for-expansion139.1)"
"(lambda(ctx125_0"
" enclosing123_0"
" fill127_0"
" module-name-id118_0"
" modules-being-compiled126_0"
" namespace121_0"
" rebuild-s119_0"
" requires-and-provides120_0"
" root-ctx124_0"
" self122_0"
" fully-expanded-bodys-except-post-submodules138_0)"
"(begin"
" 'declare-module-for-expansion139"
"(let-values(((fully-expanded-bodys-except-post-submodules_1) fully-expanded-bodys-except-post-submodules138_0))"
"(let-values(((module-name-id_0) module-name-id118_0))"
"(let-values(((rebuild-s_16) rebuild-s119_0))"
"(let-values(((requires+provides_11) requires-and-provides120_0))"
"(let-values(((m-ns_22) namespace121_0))"
"(let-values(((self_39) self122_0))"
"(let-values(((enclosing-self_3) enclosing123_0))"
"(let-values(((root-ctx_7) root-ctx124_0))"
"(let-values(((ctx_118) ctx125_0))"
"(let-values(((modules-being-compiled_6) modules-being-compiled126_0))"
"(let-values(((compiled-module-box_1) fill127_0))"
"(let-values()"
"(let-values(((requires_7 provides_14)"
"(extract-requires-and-provides requires+provides_11 self_39 self_39)))"
"(let-values(((parsed-mod_0)"
"(parsed-module25.1"
" rebuild-s_16"
" #f"
" module-name-id_0"
" self_39"
" requires_7"
" provides_14"
"(requires+provides-all-bindings-simple? requires+provides_11)"
"(root-expand-context-encode-for-module root-ctx_7 self_39 self_39)"
"(parsed-only fully-expanded-bodys-except-post-submodules_1)"
" #f"
"(hasheq))))"
"(let-values(((module-name_2)"
"(1/module-path-index-resolve"
"(let-values(((or-part_409) enclosing-self_3))"
"(if or-part_409 or-part_409 self_39)))))"
"(let-values(((compiled-module_0)"
"(let-values(((parsed-mod624_0) parsed-mod_0)"
"((temp625_0)"
"(let-values(((m-ns629_0) m-ns_22)"
"((enclosing-self630_0) enclosing-self_3)"
"((temp631_0)"
"(if enclosing-self_3"
"(1/resolved-module-path-name"
" module-name_2)"
" #f)))"
"(make-compile-context14.1"
" temp631_0"
" unsafe-undefined"
" enclosing-self630_0"
" m-ns629_0"
" unsafe-undefined"
" unsafe-undefined)))"
"((temp626_0)(expand-context-for-serializable? ctx_118))"
"((modules-being-compiled627_0) modules-being-compiled_6)"
"((temp628_0) #f))"
"(compile-module13.1"
" #f"
" modules-being-compiled627_0"
" temp628_0"
" temp626_0"
" #f"
" parsed-mod624_0"
" temp625_0))))"
"(let-values((()"
"(begin"
"(set-box! compiled-module-box_1 compiled-module_0)"
"(values))))"
"(let-values(((root-module-name_0)"
"(resolved-module-path-root-name module-name_2)))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" m-ns_22"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_0))"
"(let-values()"
"(let-values(((compiled-module632_0) compiled-module_0)((temp633_0) #f))"
"(eval-module8.1"
" unsafe-undefined"
" #f"
" temp633_0"
" compiled-module632_0)))))))))))))))))))))))))"
"(define-values"
"(attach-root-expand-context-properties)"
"(lambda(s_688 root-ctx_8 orig-self_1 new-self_2)"
"(begin"
"(let-values(((s_690)"
"(syntax-property$1 s_688 'module-body-context(root-expand-context-all-scopes-stx root-ctx_8))))"
"(let-values(((s_869)"
"(syntax-property$1"
" s_690"
" 'module-body-inside-context"
"(apply-post-expansion(root-expand-context-post-expansion root-ctx_8) empty-syntax))))"
" s_869)))))"
"(define-values"
"(expand-post-submodules165.1)"
"(lambda(all-scopes-s147_0"
" compiled-submodules150_0"
" ctx152_0"
" declare-enclosing142_0"
" declared-submodule-names149_0"
" enclosing-is-cross-phase-persistent?146_0"
" modules-being-compiled151_0"
" mpis-to-reset148_0"
" phase143_0"
" requires-and-provides145_0"
" self144_0"
" fully-expanded-bodys-except-post-submodules164_0)"
"(begin"
" 'expand-post-submodules165"
"(let-values(((fully-expanded-bodys-except-post-submodules_2) fully-expanded-bodys-except-post-submodules164_0))"
"(let-values(((declare-enclosing-module_1) declare-enclosing142_0))"
"(let-values(((phase_154) phase143_0))"
"(let-values(((self_40) self144_0))"
"(let-values(((requires+provides_12) requires-and-provides145_0))"
"(let-values(((enclosing-is-cross-phase-persistent?_1) enclosing-is-cross-phase-persistent?146_0))"
"(let-values(((all-scopes-s_1) all-scopes-s147_0))"
"(let-values(((mpis-to-reset_3) mpis-to-reset148_0))"
"(let-values(((declared-submodule-names_7) declared-submodule-names149_0))"
"(let-values(((compiled-submodules_4) compiled-submodules150_0))"
"(let-values(((modules-being-compiled_7) modules-being-compiled151_0))"
"(let-values(((submod-ctx_1) ctx152_0))"
"(let-values()"
"((letrec-values(((loop_127)"
"(lambda(bodys_27 phase_155)"
"(begin"
" 'loop"
"(if(null? bodys_27)"
"(let-values() null)"
"(let-values()"
"(let-values(((body_23)(car bodys_27)))"
"(let-values(((rest-bodys_3)(cdr bodys_27)))"
"(if(semi-parsed-begin-for-syntax? body_23)"
"(let-values()"
"(let-values(((body-s_0)"
"(semi-parsed-begin-for-syntax-s"
" body_23)))"
"(let-values(((ok?_89 begin-for-syntax634_0 _635_0)"
"(let-values(((s_870)"
"(syntax-disarm$1"
" body-s_0)))"
"(let-values(((orig-s_93) s_870))"
"(let-values(((begin-for-syntax634_1"
" _635_1)"
"(let-values(((s_871)"
"(if(syntax?$1"
" s_870)"
"(syntax-e$1"
" s_870)"
" s_870)))"
"(if(pair? s_871)"
"(let-values(((begin-for-syntax636_0)"
"(let-values(((s_872)"
"(car"
" s_871)))"
" s_872))"
"((_637_0)"
"(let-values(((s_873)"
"(cdr"
" s_871)))"
"(let-values(((s_874)"
"(if(syntax?$1"
" s_873)"
"(syntax-e$1"
" s_873)"
" s_873)))"
"(let-values(((flat-s_65)"
"(to-syntax-list.1"
" s_874)))"
"(if(not"
" flat-s_65)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                 \"bad syntax\""
" orig-s_93))"
"(let-values()"
" flat-s_65)))))))"
"(values"
" begin-for-syntax636_0"
" _637_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                         \"bad syntax\""
" orig-s_93)))))"
"(values"
" #t"
" begin-for-syntax634_1"
" _635_1))))))"
"(let-values(((rebuild-body-s_0)"
"(let-values(((submod-ctx638_0)"
" submod-ctx_1)"
"((body-s639_0)"
" body-s_0))"
"(keep-as-needed119.1"
" #f"
" #f"
" #f"
" submod-ctx638_0"
" body-s639_0))))"
"(let-values(((nested-bodys_3)"
"(loop_127"
"(semi-parsed-begin-for-syntax-body"
" body_23)"
"(add1 phase_155))))"
"(let-values(((parsed-bfs_0)"
"(parsed-begin-for-syntax21.1"
" rebuild-body-s_0"
"(parsed-only nested-bodys_3))))"
"(cons"
"(if(expand-context-to-parsed?"
" submod-ctx_1)"
" parsed-bfs_0"
"(expanded+parsed1.1"
"(let-values(((rebuild-body-s640_0)"
" rebuild-body-s_0)"
"((temp641_0)"
"(list*"
" begin-for-syntax634_0"
"(syntax-only"
" nested-bodys_3))))"
"(rebuild5.1"
" #t"
" rebuild-body-s640_0"
" temp641_0))"
" parsed-bfs_0))"
"(loop_127 rest-bodys_3 phase_155))))))))"
"(if(let-values(((or-part_410)(parsed? body_23)))"
"(if or-part_410"
" or-part_410"
"(expanded+parsed? body_23)))"
"(let-values()"
"(cons body_23(loop_127 rest-bodys_3 phase_155)))"
"(let-values()"
"(let-values(((disarmed-body_2)"
"(syntax-disarm$1 body_23)))"
"(let-values(((tmp_67)"
"(core-form-sym"
" disarmed-body_2"
" phase_155)))"
"(if(equal? tmp_67 'module*)"
"(let-values()"
"(let-values((()"
"(begin"
"(force"
" declare-enclosing-module_1)"
"(values))))"
"(let-values(((ready-body_2)"
"(remove-use-site-scopes"
" body_23"
" submod-ctx_1)))"
"(let-values(((ok?_90"
" module*642_0"
" name643_0"
" _644_0)"
"(let-values(((s_875)"
" disarmed-body_2))"
"(if(let-values(((s_876)"
"(if(syntax?$1"
" s_875)"
"(syntax-e$1"
" s_875)"
" s_875)))"
"(if(pair? s_876)"
"(if(let-values(((s_877)"
"(car"
" s_876)))"
" #t)"
"(let-values(((s_878)"
"(cdr"
" s_876)))"
"(let-values(((s_879)"
"(if(syntax?$1"
" s_878)"
"(syntax-e$1"
" s_878)"
" s_878)))"
"(if(pair?"
" s_879)"
"(if(let-values(((s_880)"
"(car"
" s_879)))"
" #t)"
"(let-values(((s_881)"
"(cdr"
" s_879)))"
"(let-values(((s_882)"
"(if(syntax?$1"
" s_881)"
"(syntax-e$1"
" s_881)"
" s_881)))"
"(if(pair?"
" s_882)"
"(if(let-values(((s_883)"
"(car"
" s_882)))"
"(let-values(((s_884)"
"(if(syntax?$1"
" s_883)"
"(syntax-e$1"
" s_883)"
" s_883)))"
"(eq?"
" #f"
" s_884)))"
"(let-values(((s_885)"
"(cdr"
" s_882)))"
" #t)"
" #f)"
" #f)))"
" #f)"
" #f)))"
" #f)"
" #f))"
"(let-values()"
"(let-values(((module*642_1"
" name643_1"
" _644_1)"
"(let-values(((s_886)"
"(if(syntax?$1"
" s_875)"
"(syntax-e$1"
" s_875)"
" s_875)))"
"(let-values(((module*645_0)"
"(let-values(((s_887)"
"(car"
" s_886)))"
" s_887))"
"((name646_0"
" _647_0)"
"(let-values(((s_888)"
"(cdr"
" s_886)))"
"(let-values(((s_706)"
"(if(syntax?$1"
" s_888)"
"(syntax-e$1"
" s_888)"
" s_888)))"
"(let-values(((name648_0)"
"(let-values(((s_889)"
"(car"
" s_706)))"
" s_889))"
"((_649_0)"
"(let-values(((s_890)"
"(cdr"
" s_706)))"
"(let-values(((s_707)"
"(if(syntax?$1"
" s_890)"
"(syntax-e$1"
" s_890)"
" s_890)))"
"(let-values((()"
"(let-values(((s_891)"
"(car"
" s_707)))"
"(let-values(((s_892)"
"(if(syntax?$1"
" s_891)"
"(syntax-e$1"
" s_891)"
" s_891)))"
"(values))))"
"((_650_0)"
"(let-values(((s_708)"
"(cdr"
" s_707)))"
" s_708)))"
"(values"
" _650_0))))))"
"(values"
" name648_0"
" _649_0))))))"
"(values"
" module*645_0"
" name646_0"
" _647_0)))))"
"(values"
" #t"
" module*642_1"
" name643_1"
" _644_1)))"
"(values"
" #f"
" #f"
" #f"
" #f)))))"
"(let-values(((submod_3)"
"(if ok?_90"
"(let-values()"
"(let-values(((neg-phase_0)"
"(phase-"
" 0"
" phase_155)))"
"(let-values(((shifted-s_0)"
"(syntax-shift-phase-level$1"
" ready-body_2"
" neg-phase_0)))"
"(let-values(((submod_4)"
"(let-values(((shifted-s651_0)"
" shifted-s_0)"
"((self652_0)"
" self_40)"
"((submod-ctx653_0)"
" submod-ctx_1)"
"((temp654_0)"
" #t)"
"((neg-phase655_0)"
" neg-phase_0)"
"((all-scopes-s656_0)"
" all-scopes-s_1)"
"((requires+provides657_0)"
" requires+provides_12)"
"((enclosing-is-cross-phase-persistent?658_0)"
" enclosing-is-cross-phase-persistent?_1)"
"((mpis-to-reset659_0)"
" mpis-to-reset_3)"
"((declared-submodule-names660_0)"
" declared-submodule-names_7)"
"((compiled-submodules661_0)"
" compiled-submodules_4)"
"((modules-being-compiled662_0)"
" modules-being-compiled_7))"
"(expand-submodule197.1"
" compiled-submodules661_0"
" declared-submodule-names660_0"
" all-scopes-s656_0"
" enclosing-is-cross-phase-persistent?658_0"
" requires+provides657_0"
" temp654_0"
" neg-phase655_0"
" modules-being-compiled662_0"
" mpis-to-reset659_0"
" shifted-s651_0"
" self652_0"
" submod-ctx653_0))))"
"(if(parsed?"
" submod_4)"
"(let-values()"
" submod_4)"
"(if(expanded+parsed?"
" submod_4)"
"(let-values()"
"(let-values(((the-struct_119)"
" submod_4))"
"(if(expanded+parsed?"
" the-struct_119)"
"(let-values(((s663_0)"
"(syntax-shift-phase-level$1"
"(expanded+parsed-s"
" submod_4)"
" phase_155)))"
"(expanded+parsed1.1"
" s663_0"
"(expanded+parsed-parsed"
" the-struct_119)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                                     \"expanded+parsed?\""
" the-struct_119))))"
"(let-values()"
"(syntax-shift-phase-level$1"
" submod_4"
" phase_155))))))))"
"(let-values()"
"(let-values(((ready-body664_0)"
" ready-body_2)"
"((self665_0)"
" self_40)"
"((submod-ctx666_0)"
" submod-ctx_1)"
"((temp667_0)"
" #t)"
"((mpis-to-reset668_0)"
" mpis-to-reset_3)"
"((declared-submodule-names669_0)"
" declared-submodule-names_7)"
"((compiled-submodules670_0)"
" compiled-submodules_4)"
"((modules-being-compiled671_0)"
" modules-being-compiled_7))"
"(expand-submodule197.1"
" compiled-submodules670_0"
" declared-submodule-names669_0"
" #f"
" #f"
" #f"
" temp667_0"
" #f"
" modules-being-compiled671_0"
" mpis-to-reset668_0"
" ready-body664_0"
" self665_0"
" submod-ctx666_0))))))"
"(cons"
" submod_3"
"(loop_127"
" rest-bodys_3"
" phase_155)))))))"
"(let-values()"
"(cons"
" body_23"
"(loop_127"
" rest-bodys_3"
" phase_155)))))))))))))))))"
" loop_127)"
" fully-expanded-bodys-except-post-submodules_2"
" phase_154)))))))))))))))))"
"(define-values"
"(stop-at-module*?)"
"(lambda(ctx_119)"
"(begin"
"(free-id-set-member?"
"(expand-context-stops ctx_119)"
"(expand-context-phase ctx_119)"
"(syntax-shift-phase-level$1(datum->syntax$1 core-stx 'module*)(expand-context-phase ctx_119))))))"
"(define-values"
"(check-ids-unbound173.1)"
"(lambda(in168_0 ids170_0 phase171_0 requires+provides172_0)"
"(begin"
" 'check-ids-unbound173"
"(let-values(((ids_48) ids170_0))"
"(let-values(((phase_156) phase171_0))"
"(let-values(((requires+provides_13) requires+provides172_0))"
"(let-values(((s_893) in168_0))"
"(let-values()"
"(begin"
"(let-values(((lst_447) ids_48))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_447)))"
"((letrec-values(((for-loop_340)"
"(lambda(lst_448)"
"(begin"
" 'for-loop"
"(if(pair? lst_448)"
"(let-values(((id_159)(unsafe-car lst_448))"
"((rest_264)(unsafe-cdr lst_448)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((requires+provides672_0)"
" requires+provides_13)"
"((id673_0) id_159)"
"((phase674_0)"
" phase_156)"
"((s675_0) s_893)"
"((temp676_0) 'module))"
"(check-not-defined95.1"
" #f"
" #f"
" #f"
" s675_0"
" #f"
" #f"
" temp676_0"
" requires+provides672_0"
" id673_0"
" phase674_0)))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_340 rest_264)(values))))"
"(values))))))"
" for-loop_340)"
" lst_447)))"
"(void))))))))))"
"(define-values"
"(eval-nested-bodys)"
"(lambda(bodys_28 phase_157 m-ns_23 self_41 ctx_120)"
"(begin"
"(begin"
"(let-values(((lst_449) bodys_28))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_449)))"
"((letrec-values(((for-loop_341)"
"(lambda(lst_450)"
"(begin"
" 'for-loop"
"(if(pair? lst_450)"
"(let-values(((body_24)(unsafe-car lst_450))((rest_265)(unsafe-cdr lst_450)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((p_88)"
"(if(expanded+parsed? body_24)"
"(expanded+parsed-parsed"
" body_24)"
" body_24)))"
"(if(parsed-define-values? p_88)"
"(let-values()"
"(let-values(((ids_49)"
"(parsed-define-values-ids"
" p_88)))"
"(let-values(((vals_11)"
"(eval-for-bindings"
" 'define-values"
" ids_49"
"(parsed-define-values-rhs"
" p_88)"
" phase_157"
" m-ns_23"
" ctx_120)))"
"(begin"
"(let-values(((lst_451) ids_49)"
"((lst_452)"
"(parsed-define-values-syms"
" p_88))"
"((lst_453) vals_11))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_451)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_452)))"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list lst_453)))"
"((letrec-values(((for-loop_342)"
"(lambda(lst_454"
" lst_455"
" lst_456)"
"(begin"
" 'for-loop"
"(if(if(pair?"
" lst_454)"
"(if(pair?"
" lst_455)"
"(pair?"
" lst_456)"
" #f)"
" #f)"
"(let-values(((id_160)"
"(unsafe-car"
" lst_454))"
"((rest_266)"
"(unsafe-cdr"
" lst_454))"
"((sym_112)"
"(unsafe-car"
" lst_455))"
"((rest_267)"
"(unsafe-cdr"
" lst_455))"
"((val_88)"
"(unsafe-car"
" lst_456))"
"((rest_268)"
"(unsafe-cdr"
" lst_456)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(namespace-set-variable!"
" m-ns_23"
" phase_157"
" sym_112"
" val_88))"
"(values)))))"
"(values)))))"
"(if(not"
" #f)"
"(for-loop_342"
" rest_266"
" rest_267"
" rest_268)"
"(values))))"
"(values))))))"
" for-loop_342)"
" lst_451"
" lst_452"
" lst_453)))"
"(void)))))"
"(if(let-values(((or-part_411)"
"(parsed-define-syntaxes?"
" p_88)))"
"(if or-part_411"
" or-part_411"
"(semi-parsed-begin-for-syntax?"
" p_88)))"
"(let-values()(void))"
"(if(let-values(((or-part_412)"
"(parsed-#%declare?"
" p_88)))"
"(if or-part_412"
" or-part_412"
"(syntax?$1 p_88)))"
"(let-values()(void))"
"(let-values()"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first"
" #f"
" parameterization-key)"
" current-expand-context"
" ctx_120"
" 1/current-namespace"
" m-ns_23)"
"(let-values()"
"(eval-single-top"
"(compile-single"
" p_88"
"(let-values(((m-ns677_0)"
" m-ns_23)"
"((phase678_0)"
" phase_157))"
"(make-compile-context14.1"
" #f"
" unsafe-undefined"
" #f"
" m-ns677_0"
" phase678_0"
" unsafe-undefined)))"
" m-ns_23)))))))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_341 rest_265)(values))))"
"(values))))))"
" for-loop_341)"
" lst_449)))"
"(void)))))"
"(define-values"
"(expand-submodule197.1)"
"(lambda(compiled-submodules183_0"
" declared-submodule-names182_0"
" enclosing-all-scopes-stx180_0"
" enclosing-is-cross-phase-persistent?179_0"
" enclosing-requires+provides178_0"
" is-star?176_0"
" keep-enclosing-scope-at-phase177_0"
" modules-being-compiled184_0"
" mpis-to-reset181_0"
" s194_0"
" self195_0"
" ctx196_0)"
"(begin"
" 'expand-submodule197"
"(let-values(((s_738) s194_0))"
"(let-values(((self_42) self195_0))"
"(let-values(((ctx_121) ctx196_0))"
"(let-values(((is-star?_0) is-star?176_0))"
"(let-values(((keep-enclosing-scope-at-phase_2) keep-enclosing-scope-at-phase177_0))"
"(let-values(((enclosing-r+p_2) enclosing-requires+provides178_0))"
"(let-values(((enclosing-is-cross-phase-persistent?_2) enclosing-is-cross-phase-persistent?179_0))"
"(let-values(((enclosing-all-scopes-stx_1) enclosing-all-scopes-stx180_0))"
"(let-values(((mpis-to-reset_4) mpis-to-reset181_0))"
"(let-values(((declared-submodule-names_8) declared-submodule-names182_0))"
"(let-values(((compiled-submodules_5) compiled-submodules183_0))"
"(let-values(((modules-being-compiled_8) modules-being-compiled184_0))"
"(let-values()"
"(let-values((()"
"(begin"
"(if is-star?_0"
"(void)"
"(let-values()"
"(let-values(((obs_160)(expand-context-observer ctx_121)))"
"(if obs_160"
"(let-values()"
"(let-values()"
"(begin"
"(call-expand-observe obs_160 'enter-prim s_738)"
"(call-expand-observe"
" obs_160"
"(if is-star?_0 'prim-submodule* 'prim-submodule)))))"
"(void)))))"
"(values))))"
"(let-values(((ok?_91 module679_0 name680_0 _681_0)"
"(let-values(((s_761) s_738))"
"(let-values(((orig-s_94) s_761))"
"(let-values(((module679_1 name680_1 _681_1)"
"(let-values(((s_894)"
"(if(syntax?$1 s_761)"
"(syntax-e$1 s_761)"
" s_761)))"
"(if(pair? s_894)"
"(let-values(((module682_0)"
"(let-values(((s_895)(car s_894)))"
" s_895))"
"((name683_0 _684_0)"
"(let-values(((s_896)(cdr s_894)))"
"(let-values(((s_897)"
"(if(syntax?$1"
" s_896)"
"(syntax-e$1 s_896)"
" s_896)))"
"(if(pair? s_897)"
"(let-values(((name685_0)"
"(let-values(((s_898)"
"(car"
" s_897)))"
" s_898))"
"((_686_0)"
"(let-values(((s_899)"
"(cdr"
" s_897)))"
" s_899)))"
"(values name685_0 _686_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                           \"bad syntax\""
" orig-s_94))))))"
"(values module682_0 name683_0 _684_0))"
"(raise-syntax-error$1"
" #f"
"                                                                       \"bad syntax\""
" orig-s_94)))))"
"(values #t module679_1 name680_1 _681_1))))))"
"(let-values(((name_82)(syntax-e$1 name680_0)))"
"(let-values((()"
"(begin"
"(if(hash-ref declared-submodule-names_8 name_82 #f)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                           \"submodule already declared with the same name\""
" s_738"
" name_82))"
"(void))"
"(values))))"
"(let-values((()"
"(begin"
"(hash-set!"
" declared-submodule-names_8"
" name_82"
"(syntax-e$1 module679_0))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_161)(expand-context-observer ctx_121)))"
"(if obs_161"
"(let-values()"
"(let-values()"
"(call-expand-observe obs_161 'enter-prim s_738)))"
"(void)))"
"(values))))"
"(let-values(((submod_5)"
"(let-values(((s687_0) s_738)"
"((temp688_0)"
"(let-values(((v_276) ctx_121))"
"(let-values(((the-struct_120) v_276))"
"(if(expand-context/outer? the-struct_120)"
"(let-values(((context697_0) 'module)"
"((post-expansion698_0) #f)"
"((inner699_0)"
"(let-values(((the-struct_121)"
"(root-expand-context/outer-inner"
" v_276)))"
"(if(expand-context/inner?"
" the-struct_121)"
"(let-values(((stops700_0)"
" empty-free-id-set))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi"
" the-struct_121)"
"(root-expand-context/inner-module-scopes"
" the-struct_121)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_121)"
"(root-expand-context/inner-all-scopes-stx"
" the-struct_121)"
"(root-expand-context/inner-defined-syms"
" the-struct_121)"
"(root-expand-context/inner-counter"
" the-struct_121)"
"(root-expand-context/inner-lift-key"
" the-struct_121)"
"(expand-context/inner-to-parsed?"
" the-struct_121)"
"(expand-context/inner-phase"
" the-struct_121)"
"(expand-context/inner-namespace"
" the-struct_121)"
"(expand-context/inner-just-once?"
" the-struct_121)"
"(expand-context/inner-module-begin-k"
" the-struct_121)"
"(expand-context/inner-allow-unbound?"
" the-struct_121)"
"(expand-context/inner-in-local-expand?"
" the-struct_121)"
"(expand-context/inner-keep-#%expression?"
" the-struct_121)"
" stops700_0"
"(expand-context/inner-declared-submodule-names"
" the-struct_121)"
"(expand-context/inner-lifts"
" the-struct_121)"
"(expand-context/inner-lift-envs"
" the-struct_121)"
"(expand-context/inner-module-lifts"
" the-struct_121)"
"(expand-context/inner-require-lifts"
" the-struct_121)"
"(expand-context/inner-to-module-lifts"
" the-struct_121)"
"(expand-context/inner-requires+provides"
" the-struct_121)"
"(expand-context/inner-observer"
" the-struct_121)"
"(expand-context/inner-for-serializable?"
" the-struct_121)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_121)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                                 \"expand-context/inner?\""
" the-struct_121)))))"
"(expand-context/outer1.1"
" inner699_0"
" post-expansion698_0"
"(root-expand-context/outer-use-site-scopes"
" the-struct_120)"
"(root-expand-context/outer-frame-id"
" the-struct_120)"
" context697_0"
"(expand-context/outer-env"
" the-struct_120)"
"(expand-context/outer-scopes"
" the-struct_120)"
"(expand-context/outer-def-ctx-scopes"
" the-struct_120)"
"(expand-context/outer-binding-layer"
" the-struct_120)"
"(expand-context/outer-reference-records"
" the-struct_120)"
"(expand-context/outer-only-immediate?"
" the-struct_120)"
"(expand-context/outer-need-eventually-defined"
" the-struct_120)"
"(expand-context/outer-current-introduction-scopes"
" the-struct_120)"
"(expand-context/outer-current-use-scopes"
" the-struct_120)"
"(expand-context/outer-name"
" the-struct_120)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                               \"expand-context/outer?\""
" the-struct_120)))))"
"((self689_0) self_42)"
"((temp690_0) #t)"
"((keep-enclosing-scope-at-phase691_0)"
" keep-enclosing-scope-at-phase_2)"
"((enclosing-all-scopes-stx692_0)"
" enclosing-all-scopes-stx_1)"
"((enclosing-r+p693_0) enclosing-r+p_2)"
"((enclosing-is-cross-phase-persistent?694_0)"
" enclosing-is-cross-phase-persistent?_2)"
"((mpis-to-reset695_0) mpis-to-reset_4)"
"((modules-being-compiled696_0)"
" modules-being-compiled_8))"
"(expand-module18.1"
" temp690_0"
" enclosing-all-scopes-stx692_0"
" enclosing-is-cross-phase-persistent?694_0"
" enclosing-r+p693_0"
" keep-enclosing-scope-at-phase691_0"
" modules-being-compiled696_0"
" mpis-to-reset695_0"
" s687_0"
" temp688_0"
" self689_0))))"
"(let-values((()"
"(begin"
"(let-values(((obs_162)"
"(expand-context-observer ctx_121)))"
"(if obs_162"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_162"
" 'exit-prim"
"(extract-syntax submod_5))))"
"(void)))"
"(values))))"
"(let-values(((ns_131)(expand-context-namespace ctx_121)))"
"(let-values(((module-name_3)(1/module-path-index-resolve self_42)))"
"(let-values(((root-module-name_1)"
"(resolved-module-path-root-name module-name_3)))"
"(let-values(((compiled-submodule_0)"
"(let-values(((temp701_0)"
"(if(expanded+parsed? submod_5)"
"(expanded+parsed-parsed submod_5)"
" submod_5))"
"((temp702_0)"
"(let-values(((ns707_0) ns_131)"
"((self708_0) self_42)"
"((temp709_0)"
"(1/resolved-module-path-name"
" module-name_3)))"
"(make-compile-context14.1"
" temp709_0"
" unsafe-undefined"
" self708_0"
" ns707_0"
" unsafe-undefined"
" unsafe-undefined)))"
"((temp703_0) #t)"
"((temp704_0)"
"(expand-context-for-serializable?"
" ctx_121))"
"((modules-being-compiled705_0)"
" modules-being-compiled_8)"
"((temp706_0) #f))"
"(compile-module13.1"
" temp703_0"
" modules-being-compiled705_0"
" temp706_0"
" temp704_0"
" #f"
" temp701_0"
" temp702_0))))"
"(begin"
"(hash-set!"
" compiled-submodules_5"
" name_82"
"(cons is-star?_0 compiled-submodule_0))"
"(with-continuation-mark"
" parameterization-key"
"(extend-parameterization"
"(continuation-mark-set-first #f parameterization-key)"
" 1/current-namespace"
" ns_131"
" 1/current-module-declare-name"
"(1/make-resolved-module-path root-module-name_1))"
"(let-values()"
"(let-values(((compiled-submodule710_0)"
" compiled-submodule_0)"
"((temp711_0) #f))"
"(eval-module8.1"
" unsafe-undefined"
" #f"
" temp711_0"
" compiled-submodule710_0))))"
"(if is-star?_0"
"(void)"
"(let-values()"
"(let-values(((obs_163)"
"(expand-context-observer ctx_121)))"
"(if obs_163"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_163"
" 'exit-prim"
"(extract-syntax submod_5))))"
"(void)))))"
"(if(not is-star?_0)"
"(let-values() submod_5)"
"(if(expanded+parsed? submod_5)"
"(let-values()"
"(let-values(((the-struct_122) submod_5))"
"(if(expanded+parsed? the-struct_122)"
"(let-values(((parsed712_0)"
"(let-values(((the-struct_123)"
"(expanded+parsed-parsed"
" submod_5)))"
"(if(parsed-module? the-struct_123)"
"(let-values(((star?713_0) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_123)"
" star?713_0"
"(parsed-module-name-id"
" the-struct_123)"
"(parsed-module-self"
" the-struct_123)"
"(parsed-module-requires"
" the-struct_123)"
"(parsed-module-provides"
" the-struct_123)"
"(parsed-module-root-ctx-simple?"
" the-struct_123)"
"(parsed-module-encoded-root-ctx"
" the-struct_123)"
"(parsed-module-body"
" the-struct_123)"
"(parsed-module-compiled-module"
" the-struct_123)"
"(parsed-module-compiled-submodules"
" the-struct_123)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                                       \"parsed-module?\""
" the-struct_123)))))"
"(expanded+parsed1.1"
"(expanded+parsed-s the-struct_122)"
" parsed712_0))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"expanded+parsed?\""
" the-struct_122))))"
"(let-values()"
"(let-values(((the-struct_124) submod_5))"
"(if(parsed-module? the-struct_124)"
"(let-values(((star?714_0) #t))"
"(parsed-module25.1"
"(parsed-s the-struct_124)"
" star?714_0"
"(parsed-module-name-id the-struct_124)"
"(parsed-module-self the-struct_124)"
"(parsed-module-requires the-struct_124)"
"(parsed-module-provides the-struct_124)"
"(parsed-module-root-ctx-simple? the-struct_124)"
"(parsed-module-encoded-root-ctx the-struct_124)"
"(parsed-module-body the-struct_124)"
"(parsed-module-compiled-module the-struct_124)"
"(parsed-module-compiled-submodules"
" the-struct_124)))"
"(raise-argument-error"
" 'struct-copy"
"                                                                     \"parsed-module?\""
" the-struct_124)))))))))))))))))))))))))))))))))))"
"(define-values"
"(expand-non-module*-submodules212.1)"
"(lambda(compiled-submodules202_0"
" declared-submodule-names201_0"
" modules-being-compiled203_0"
" mpis-to-reset200_0"
" bodys208_0"
" phase209_0"
" self210_0"
" ctx211_0)"
"(begin"
" 'expand-non-module*-submodules212"
"(let-values(((bodys_29) bodys208_0))"
"(let-values(((phase_158) phase209_0))"
"(let-values(((self_43) self210_0))"
"(let-values(((ctx_122) ctx211_0))"
"(let-values(((mpis-to-reset_5) mpis-to-reset200_0))"
"(let-values(((declared-submodule-names_9) declared-submodule-names201_0))"
"(let-values(((compiled-submodules_6) compiled-submodules202_0))"
"(let-values(((modules-being-compiled_9) modules-being-compiled203_0))"
"(let-values()"
"(reverse$1"
"(let-values(((lst_457) bodys_29))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_457)))"
"((letrec-values(((for-loop_343)"
"(lambda(fold-var_387 lst_458)"
"(begin"
" 'for-loop"
"(if(pair? lst_458)"
"(let-values(((body_25)(unsafe-car lst_458))"
"((rest_269)(unsafe-cdr lst_458)))"
"(let-values(((fold-var_388)"
"(let-values(((fold-var_389) fold-var_387))"
"(let-values(((fold-var_390)"
"(let-values()"
"(cons"
"(let-values()"
"(let-values(((tmp_68)"
"(core-form-sym"
"(syntax-disarm$1"
" body_25)"
" phase_158)))"
"(if(equal? tmp_68 'module)"
"(let-values()"
"(let-values(((body715_0)"
" body_25)"
"((self716_0)"
" self_43)"
"((ctx717_0)"
" ctx_122)"
"((temp718_0)"
" #f)"
"((mpis-to-reset719_0)"
" mpis-to-reset_5)"
"((declared-submodule-names720_0)"
" declared-submodule-names_9)"
"((compiled-submodules721_0)"
" compiled-submodules_6)"
"((modules-being-compiled722_0)"
" modules-being-compiled_9))"
"(expand-submodule197.1"
" compiled-submodules721_0"
" declared-submodule-names720_0"
" #f"
" #f"
" #f"
" temp718_0"
" #f"
" modules-being-compiled722_0"
" mpis-to-reset719_0"
" body715_0"
" self716_0"
" ctx717_0)))"
"(let-values() body_25))))"
" fold-var_389))))"
"(values fold-var_390)))))"
"(if(not #f)"
"(for-loop_343 fold-var_388 rest_269)"
" fold-var_388)))"
" fold-var_387)))))"
" for-loop_343)"
" null"
" lst_457))))))))))))))))"
"(define-values"
"(make-parse-lifted-require220.1)"
"(lambda(declared-submodule-names215_0 m-ns217_0 self218_0 requires+provides219_0)"
"(begin"
" 'make-parse-lifted-require220"
"(let-values(((m-ns_24) m-ns217_0))"
"(let-values(((self_44) self218_0))"
"(let-values(((requires+provides_14) requires+provides219_0))"
"(let-values(((declared-submodule-names_10) declared-submodule-names215_0))"
"(let-values()"
"(lambda(s_900 phase_159)"
"(let-values(((ok?_92 #%require723_0 req724_0)"
"(let-values(((s_901)(syntax-disarm$1 s_900)))"
"(let-values(((orig-s_95) s_901))"
"(let-values(((#%require723_1 req724_1)"
"(let-values(((s_902)"
"(if(syntax?$1 s_901)(syntax-e$1 s_901) s_901)))"
"(if(pair? s_902)"
"(let-values(((#%require725_0)"
"(let-values(((s_903)(car s_902))) s_903))"
"((req726_0)"
"(let-values(((s_904)(cdr s_902)))"
"(let-values(((s_905)"
"(if(syntax?$1 s_904)"
"(syntax-e$1 s_904)"
" s_904)))"
"(if(pair? s_905)"
"(let-values(((req727_0)"
"(let-values(((s_906)"
"(car s_905)))"
" s_906))"
"(()"
"(let-values(((s_907)"
"(cdr s_905)))"
"(let-values(((s_908)"
"(if(syntax?$1"
" s_907)"
"(syntax-e$1"
" s_907)"
" s_907)))"
"(if(null? s_908)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                               \"bad syntax\""
" orig-s_95))))))"
"(values req727_0))"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_95))))))"
"(values #%require725_0 req726_0))"
"                                                      (raise-syntax-error$1 #f \"bad syntax\" orig-s_95)))))"
"(values #t #%require723_1 req724_1))))))"
"(let-values(((temp728_0)(list req724_0))"
"((s729_0) s_900)"
"((self730_0) self_44)"
"((m-ns731_0) m-ns_24)"
"((phase732_0) phase_159)"
"((phase733_0) phase_159)"
"((requires+provides734_0) requires+provides_14)"
"((declared-submodule-names735_0) declared-submodule-names_10)"
"((temp736_0) 'require))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" declared-submodule-names735_0"
" #f"
" phase733_0"
" #f"
" self730_0"
" #f"
" #t"
" temp736_0"
" temp728_0"
" s729_0"
" m-ns731_0"
" phase732_0"
" requires+provides734_0))))))))))))"
"(define-values"
"(defn-extract-syntax)"
"(lambda(defn_0)"
"(begin"
"(datum->syntax$1"
" #f"
"(list 'define-values(semi-parsed-define-values-ids defn_0)(semi-parsed-define-values-rhs defn_0))"
"(semi-parsed-define-values-s defn_0)))))"
"(define-values"
"(lifted-defns-extract-syntax)"
"(lambda(lifted-defns_2)"
"(begin"
"(reverse$1"
"(let-values(((lst_459) lifted-defns_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_459)))"
"((letrec-values(((for-loop_344)"
"(lambda(fold-var_391 lst_460)"
"(begin"
" 'for-loop"
"(if(pair? lst_460)"
"(let-values(((lifted-defn_0)(unsafe-car lst_460))"
"((rest_270)(unsafe-cdr lst_460)))"
"(let-values(((fold-var_392)"
"(let-values(((fold-var_393) fold-var_391))"
"(let-values(((fold-var_394)"
"(let-values()"
"(cons"
"(let-values()"
"(defn-extract-syntax lifted-defn_0))"
" fold-var_393))))"
"(values fold-var_394)))))"
"(if(not #f)(for-loop_344 fold-var_392 rest_270) fold-var_392)))"
" fold-var_391)))))"
" for-loop_344)"
" null"
" lst_459)))))))"
"(define-values"
"(log-lifted-defns)"
"(lambda(partial-body-ctx_2 lifted-defns_3 exp-body_10 rest-bodys_4)"
"(begin"
"(let-values(((obs_164)(expand-context-observer partial-body-ctx_2)))"
"(if obs_164"
"(let-values()"
"(let-values(((s-lifted-defns_0)(lifted-defns-extract-syntax lifted-defns_3)))"
"(let-values((()"
"(begin"
"(call-expand-observe obs_164 'rename-list(cons exp-body_10 rest-bodys_4))"
"(values))))"
"(let-values((()(begin(call-expand-observe obs_164 'module-lift-loop s-lifted-defns_0)(values))))"
"(let-values((()"
"(begin"
"(let-values(((lst_461) s-lifted-defns_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_461)))"
"((letrec-values(((for-loop_345)"
"(lambda(lst_462)"
"(begin"
" 'for-loop"
"(if(pair? lst_462)"
"(let-values(((s-lifted-defn_0)(unsafe-car lst_462))"
"((rest_271)(unsafe-cdr lst_462)))"
"(let-values((()"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((ok?_93"
" define-values741_0"
" _742_0)"
"(let-values(((s_909)"
" s-lifted-defn_0))"
"(let-values(((orig-s_96)"
" s_909))"
"(let-values(((define-values741_1"
" _742_1)"
"(let-values(((s_910)"
"(if(syntax?$1"
" s_909)"
"(syntax-e$1"
" s_909)"
" s_909)))"
"(if(pair?"
" s_910)"
"(let-values(((define-values743_0)"
"(let-values(((s_911)"
"(car"
" s_910)))"
" s_911))"
"((_744_0)"
"(let-values(((s_912)"
"(cdr"
" s_910)))"
"(let-values(((s_913)"
"(if(syntax?$1"
" s_912)"
"(syntax-e$1"
" s_912)"
" s_912)))"
"(let-values(((flat-s_66)"
"(to-syntax-list.1"
" s_913)))"
"(if(not"
" flat-s_66)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                 \"bad syntax\""
" orig-s_96))"
"(let-values()"
" flat-s_66)))))))"
"(values"
" define-values743_0"
" _744_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                         \"bad syntax\""
" orig-s_96)))))"
"(values"
" #t"
" define-values741_1"
" _742_1))))))"
"(begin"
"(call-expand-observe"
" obs_164"
" 'next)"
"(call-expand-observe"
" obs_164"
" 'visit"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_164"
" 'resolve"
" define-values741_0)"
"(call-expand-observe"
" obs_164"
" 'enter-prim"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_164"
" 'prim-stop)"
"(call-expand-observe"
" obs_164"
" 'exit-prim"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_164"
" 'return"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_164"
" 'rename-one"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_164"
" 'enter-prim"
" s-lifted-defn_0)"
"(call-expand-observe"
" obs_164"
" 'prim-define-values)"
"(call-expand-observe"
" obs_164"
" 'exit-prim"
" s-lifted-defn_0))))"
"(values)))))"
"(values)))))"
"(if(not #f)(for-loop_345 rest_271)(values))))"
"(values))))))"
" for-loop_345)"
" lst_461)))"
"(values))))"
"(let-values()"
"(let-values(((ok?_94 form-id737_0 _738_0)"
"(let-values(((s_914) exp-body_10))"
"(let-values(((orig-s_97) s_914))"
"(let-values(((form-id737_1 _738_1)"
"(let-values(((s_915)"
"(if(syntax?$1 s_914)(syntax-e$1 s_914) s_914)))"
"(if(pair? s_915)"
"(let-values(((form-id739_0)"
"(let-values(((s_916)(car s_915))) s_916))"
"((_740_0)"
"(let-values(((s_917)(cdr s_915))) s_917)))"
"(values form-id739_0 _740_0))"
"                                                          (raise-syntax-error$1 #f \"bad syntax\" orig-s_97)))))"
"(values #t form-id737_1 _738_1))))))"
"(begin"
"(call-expand-observe obs_164 'next)"
"(call-expand-observe obs_164 'visit exp-body_10)"
"(call-expand-observe obs_164 'resolve form-id737_0)"
"(call-expand-observe obs_164 'enter-prim exp-body_10)"
"(call-expand-observe obs_164 'prim-stop)"
"(call-expand-observe obs_164 'exit-prim exp-body_10)"
"(call-expand-observe obs_164 'return exp-body_10)))))))))"
"(void))))))"
"(define-values"
"(log-defn-enter)"
"(lambda(ctx_123 defn_1)"
"(begin"
"(let-values(((obs_165)(expand-context-observer ctx_123)))"
"(if obs_165"
"(let-values()"
"(let-values(((s-defn_0)(defn-extract-syntax defn_1)))"
"(let-values(((ok?_95 define-values745_0 _746_0)"
"(let-values(((s_918) s-defn_0))"
"(let-values(((orig-s_98) s_918))"
"(let-values(((define-values745_1 _746_1)"
"(let-values(((s_919)(if(syntax?$1 s_918)(syntax-e$1 s_918) s_918)))"
"(if(pair? s_919)"
"(let-values(((define-values747_0)"
"(let-values(((s_920)(car s_919))) s_920))"
"((_748_0)"
"(let-values(((s_921)(cdr s_919)))"
"(let-values(((s_922)"
"(if(syntax?$1 s_921)"
"(syntax-e$1 s_921)"
" s_921)))"
"(let-values(((flat-s_67)(to-syntax-list.1 s_922)))"
"(if(not flat-s_67)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                           \"bad syntax\""
" orig-s_98))"
"(let-values() flat-s_67)))))))"
"(values define-values747_0 _748_0))"
"                                                  (raise-syntax-error$1 #f \"bad syntax\" orig-s_98)))))"
"(values #t define-values745_1 _746_1))))))"
"(begin"
"(call-expand-observe obs_165 'visit s-defn_0)"
"(call-expand-observe obs_165 'resolve define-values745_0)"
"(call-expand-observe obs_165 'enter-prim s-defn_0)"
"(call-expand-observe obs_165 'prim-define-values)))))"
"(void))))))"
"(define-values"
"(log-defn-exit)"
"(lambda(ctx_124 defn_2 exp-rhs_8)"
"(begin"
"(let-values(((obs_166)(expand-context-observer ctx_124)))"
"(if obs_166"
"(let-values()"
"(let-values(((s-defn_1)"
"(datum->syntax$1"
" #f"
"(list 'define-values(semi-parsed-define-values-ids defn_2) exp-rhs_8)"
"(semi-parsed-define-values-s defn_2))))"
"(begin(call-expand-observe obs_166 'exit-prim s-defn_1)(call-expand-observe obs_166 'return s-defn_1))))"
"(void))))))"
"(define-values"
"(as-expand-time-top-level-bindings)"
"(lambda(ids_50 s_72 ctx_125)"
"(begin"
"(let-values(((top-level-bind-scope_6)(root-expand-context-top-level-bind-scope ctx_125)))"
"(let-values(((tl-ids_2)"
"(reverse$1"
"(let-values(((lst_84) ids_50))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_84)))"
"((letrec-values(((for-loop_107)"
"(lambda(fold-var_395 lst_85)"
"(begin"
" 'for-loop"
"(if(pair? lst_85)"
"(let-values(((id_51)(unsafe-car lst_85))"
"((rest_40)(unsafe-cdr lst_85)))"
"(let-values(((fold-var_61)"
"(let-values(((fold-var_62) fold-var_395))"
"(let-values(((fold-var_396)"
"(let-values()"
"(cons"
"(let-values()"
"(remove-use-site-scopes"
" id_51"
" ctx_125))"
" fold-var_62))))"
"(values fold-var_396)))))"
"(if(not #f)(for-loop_107 fold-var_61 rest_40) fold-var_61)))"
" fold-var_395)))))"
" for-loop_107)"
" null"
" lst_84))))))"
"(let-values((()"
"(begin"
"(let-values(((tl-ids1_0) tl-ids_2)((temp2_9)(expand-context-phase ctx_125))((s3_3) s_72))"
"(check-no-duplicate-ids7.1 unsafe-undefined tl-ids1_0 temp2_9 s3_3 unsafe-undefined))"
"(values))))"
"(let-values(((tmp-bind-ids_0)"
"(reverse$1"
"(let-values(((lst_463) tl-ids_2))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_463)))"
"((letrec-values(((for-loop_83)"
"(lambda(fold-var_221 lst_86)"
"(begin"
" 'for-loop"
"(if(pair? lst_86)"
"(let-values(((id_161)(unsafe-car lst_86))"
"((rest_250)(unsafe-cdr lst_86)))"
"(let-values(((fold-var_26)"
"(let-values(((fold-var_397) fold-var_221))"
"(let-values(((fold-var_224)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" id_161"
" top-level-bind-scope_6))"
" fold-var_397))))"
"(values fold-var_224)))))"
"(if(not #f)"
"(for-loop_83 fold-var_26 rest_250)"
" fold-var_26)))"
" fold-var_221)))))"
" for-loop_83)"
" null"
" lst_463))))))"
"(values tl-ids_2(select-defined-syms-and-bind!/ctx tmp-bind-ids_0 ctx_125)))))))))"
"(void"
"(add-core-form!*"
" 'define-values"
"(lambda(s_0 ctx_7)"
"(let-values((()"
"(begin"
"(let-values(((obs_167)(expand-context-observer ctx_7)))"
"(if obs_167"
"(let-values()(let-values()(call-expand-observe obs_167 'prim-define-values)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_7) 'top-level)"
"(void)"
"                         (let-values () (raise-syntax-error$1 #f \"not allowed in an expression position\" s_0)))"
"(values))))"
"(let-values(((disarmed-s_25)(syntax-disarm$1 s_0)))"
"(let-values(((ok?_26 define-values1_0 id2_1 rhs3_0)"
"(let-values(((s_492) s_0))"
"(let-values(((orig-s_99) s_492))"
"(let-values(((define-values1_1 id2_2 rhs3_1)"
"(let-values(((s_76)(if(syntax?$1 s_492)(syntax-e$1 s_492) s_492)))"
"(if(pair? s_76)"
"(let-values(((define-values4_0)"
"(let-values(((s_188)(car s_76))) s_188))"
"((id5_0 rhs6_0)"
"(let-values(((s_167)(cdr s_76)))"
"(let-values(((s_5)"
"(if(syntax?$1 s_167)"
"(syntax-e$1 s_167)"
" s_167)))"
"(if(pair? s_5)"
"(let-values(((id7_0)"
"(let-values(((s_80)(car s_5)))"
"(let-values(((s_6)"
"(if(syntax?$1 s_80)"
"(syntax-e$1 s_80)"
" s_80)))"
"(let-values(((flat-s_68)"
"(to-syntax-list.1"
" s_6)))"
"(if(not flat-s_68)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                            \"bad syntax\""
" orig-s_99))"
"(let-values()"
"(let-values(((id_54)"
"(let-values(((lst_80)"
" flat-s_68))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_80)))"
"((letrec-values(((for-loop_99)"
"(lambda(id_162"
" lst_81)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_81)"
"(let-values(((s_89)"
"(unsafe-car"
" lst_81))"
"((rest_121)"
"(unsafe-cdr"
" lst_81)))"
"(let-values(((id_163)"
"(let-values(((id_164)"
" id_162))"
"(let-values(((id_115)"
"(let-values()"
"(let-values(((id10_1)"
"(let-values()"
"(if(let-values(((or-part_30)"
"(if(syntax?$1"
" s_89)"
"(symbol?"
"(syntax-e$1"
" s_89))"
" #f)))"
"(if or-part_30"
" or-part_30"
"(symbol?"
" s_89)))"
" s_89"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                          \"not an identifier\""
" orig-s_99"
" s_89)))))"
"(cons"
" id10_1"
" id_164)))))"
"(values"
" id_115)))))"
"(if(not"
" #f)"
"(for-loop_99"
" id_163"
" rest_121)"
" id_163)))"
" id_162)))))"
" for-loop_99)"
" null"
" lst_80)))))"
"(reverse$1 id_54))))))))"
"((rhs8_0)"
"(let-values(((s_307)(cdr s_5)))"
"(let-values(((s_35)"
"(if(syntax?$1 s_307)"
"(syntax-e$1 s_307)"
" s_307)))"
"(if(pair? s_35)"
"(let-values(((rhs9_0)"
"(let-values(((s_91)"
"(car"
" s_35)))"
" s_91))"
"(()"
"(let-values(((s_168)"
"(cdr"
" s_35)))"
"(let-values(((s_308)"
"(if(syntax?$1"
" s_168)"
"(syntax-e$1"
" s_168)"
" s_168)))"
"(if(null?"
" s_308)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                            \"bad syntax\""
" orig-s_99))))))"
"(values rhs9_0))"
"(raise-syntax-error$1"
" #f"
"                                                                                        \"bad syntax\""
" orig-s_99))))))"
"(values id7_0 rhs8_0))"
"                                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_99))))))"
"(values define-values4_0 id5_0 rhs6_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_99)))))"
"(values #t define-values1_1 id2_2 rhs3_1))))))"
"(let-values(((ids_51 syms_27)(as-expand-time-top-level-bindings id2_1 s_0 ctx_7)))"
"(let-values(((exp-rhs_9)"
"(let-values(((temp11_7) rhs3_0)"
"((temp12_9)(as-named-context(as-expression-context ctx_7) ids_51)))"
"(expand9.1 #f #f #f temp11_7 temp12_9))))"
"(if(expand-context-to-parsed? ctx_7)"
"(parsed-define-values19.1 s_0 ids_51 syms_27 exp-rhs_9)"
"(let-values(((s13_0) s_0)((temp14_6)(list define-values1_0 ids_51 exp-rhs_9)))"
"(rebuild5.1 #t s13_0 temp14_6))))))))))))"
"(void"
"(add-core-form!*"
" 'define-syntaxes"
"(lambda(s_186 ctx_126)"
"(let-values((()"
"(begin"
"(let-values(((obs_168)(expand-context-observer ctx_126)))"
"(if obs_168"
"(let-values()(let-values()(call-expand-observe obs_168 'prim-define-syntaxes)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_169)(expand-context-observer ctx_126)))"
"(if obs_169(let-values()(let-values()(call-expand-observe obs_169 'prepare-env)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_126) 'top-level)"
"(void)"
"                           (let-values () (raise-syntax-error$1 #f \"not in a definition context\" s_186)))"
"(values))))"
"(let-values(((disarmed-s_26)(syntax-disarm$1 s_186)))"
"(let-values(((ok?_96 define-syntaxes15_0 id16_1 rhs17_0)"
"(let-values(((s_18) disarmed-s_26))"
"(let-values(((orig-s_100) s_18))"
"(let-values(((define-syntaxes15_1 id16_2 rhs17_1)"
"(let-values(((s_22)(if(syntax?$1 s_18)(syntax-e$1 s_18) s_18)))"
"(if(pair? s_22)"
"(let-values(((define-syntaxes18_0)"
"(let-values(((s_494)(car s_22))) s_494))"
"((id19_1 rhs20_0)"
"(let-values(((s_25)(cdr s_22)))"
"(let-values(((s_306)"
"(if(syntax?$1 s_25)"
"(syntax-e$1 s_25)"
" s_25)))"
"(if(pair? s_306)"
"(let-values(((id21_1)"
"(let-values(((s_923)(car s_306)))"
"(let-values(((s_924)"
"(if(syntax?$1 s_923)"
"(syntax-e$1 s_923)"
" s_923)))"
"(let-values(((flat-s_69)"
"(to-syntax-list.1"
" s_924)))"
"(if(not flat-s_69)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                                              \"bad syntax\""
" orig-s_100))"
"(let-values()"
"(let-values(((id_165)"
"(let-values(((lst_464)"
" flat-s_69))"
"(begin"
"(if(variable-reference-from-unsafe?"
"(#%variable-reference))"
"(void)"
"(let-values()"
"(check-list"
" lst_464)))"
"((letrec-values(((for-loop_2)"
"(lambda(id_166"
" lst_465)"
"(begin"
" 'for-loop"
"(if(pair?"
" lst_465)"
"(let-values(((s_925)"
"(unsafe-car"
" lst_465))"
"((rest_272)"
"(unsafe-cdr"
" lst_465)))"
"(let-values(((id_167)"
"(let-values(((id_168)"
" id_166))"
"(let-values(((id_169)"
"(let-values()"
"(let-values(((id24_0)"
"(let-values()"
"(if(let-values(((or-part_218)"
"(if(syntax?$1"
" s_925)"
"(symbol?"
"(syntax-e$1"
" s_925))"
" #f)))"
"(if or-part_218"
" or-part_218"
"(symbol?"
" s_925)))"
" s_925"
"(raise-syntax-error$1"
" #f"
"                                                                                                                                                                                            \"not an identifier\""
" orig-s_100"
" s_925)))))"
"(cons"
" id24_0"
" id_168)))))"
"(values"
" id_169)))))"
"(if(not"
" #f)"
"(for-loop_2"
" id_167"
" rest_272)"
" id_167)))"
" id_166)))))"
" for-loop_2)"
" null"
" lst_464)))))"
"(reverse$1 id_165))))))))"
"((rhs22_0)"
"(let-values(((s_926)(cdr s_306)))"
"(let-values(((s_175)"
"(if(syntax?$1 s_926)"
"(syntax-e$1 s_926)"
" s_926)))"
"(if(pair? s_175)"
"(let-values(((rhs23_2)"
"(let-values(((s_451)"
"(car"
" s_175)))"
" s_451))"
"(()"
"(let-values(((s_46)"
"(cdr"
" s_175)))"
"(let-values(((s_486)"
"(if(syntax?$1"
" s_46)"
"(syntax-e$1"
" s_46)"
" s_46)))"
"(if(null?"
" s_486)"
"(values)"
"(raise-syntax-error$1"
" #f"
"                                                                                                              \"bad syntax\""
" orig-s_100))))))"
"(values rhs23_2))"
"(raise-syntax-error$1"
" #f"
"                                                                                          \"bad syntax\""
" orig-s_100))))))"
"(values id21_1 rhs22_0))"
"(raise-syntax-error$1"
" #f"
"                                                                      \"bad syntax\""
" orig-s_100))))))"
"(values define-syntaxes18_0 id19_1 rhs20_0))"
"                                                 (raise-syntax-error$1 #f \"bad syntax\" orig-s_100)))))"
"(values #t define-syntaxes15_1 id16_2 rhs17_1))))))"
"(let-values(((ids_52 syms_28)(as-expand-time-top-level-bindings id16_1 s_186 ctx_126)))"
"(let-values(((exp-rhs_10)"
"(let-values(((temp25_8) rhs17_0)((temp26_6)(as-named-context ctx_126 ids_52)))"
"(expand-transformer92.1 #f #f 'expression #t #f unsafe-undefined temp25_8 temp26_6))))"
"(if(expand-context-to-parsed? ctx_126)"
"(parsed-define-syntaxes20.1 s_186 ids_52 syms_28 exp-rhs_10)"
"(let-values(((s27_3) s_186)((temp28_4)(list define-syntaxes15_0 ids_52 exp-rhs_10)))"
"(rebuild5.1 #t s27_3 temp28_4)))))))))))))"
"(void"
"(add-core-form!*"
" 'begin-for-syntax"
"(lambda(s_309 ctx_112)"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_112) 'top-level)"
"(void)"
"                       (let-values () (raise-syntax-error$1 #f \"not in a definition context\" s_309)))"
"(values))))"
"(let-values(((ok?_38 begin-for-syntax29_0 form30_0)"
"(let-values(((s_496) s_309))"
"(let-values(((orig-s_101) s_496))"
"(let-values(((begin-for-syntax29_1 form30_1)"
"(let-values(((s_48)(if(syntax?$1 s_496)(syntax-e$1 s_496) s_496)))"
"(if(pair? s_48)"
"(let-values(((begin-for-syntax31_0)(let-values(((s_51)(car s_48))) s_51))"
"((form32_0)"
"(let-values(((s_501)(cdr s_48)))"
"(let-values(((s_777)"
"(if(syntax?$1 s_501)"
"(syntax-e$1 s_501)"
" s_501)))"
"(let-values(((flat-s_70)(to-syntax-list.1 s_777)))"
"(if(not flat-s_70)"
"(let-values()"
"                                                                   (raise-syntax-error$1 #f \"bad syntax\" orig-s_101))"
"(let-values() flat-s_70)))))))"
"(values begin-for-syntax31_0 form32_0))"
"                                           (raise-syntax-error$1 #f \"bad syntax\" orig-s_101)))))"
"(values #t begin-for-syntax29_1 form30_1))))))"
"(let-values((()"
"(begin"
"(let-values(((obs_170)(expand-context-observer ctx_112)))"
"(if obs_170"
"(let-values()(let-values()(call-expand-observe obs_170 'prim-begin-for-syntax)))"
"(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(let-values(((obs_171)(expand-context-observer ctx_112)))"
"(if obs_171"
"(let-values()(let-values()(call-expand-observe obs_171 'prepare-env)))"
"(void)))"
"(values))))"
"(let-values(((trans-ctx_1)"
"(let-values(((ctx33_0) ctx_112)((temp34_7) 'top-level)((temp35_7) #t))"
"(context->transformer-context99.1 temp35_7 ctx33_0 temp34_7))))"
"(let-values(((lift-ctx_7)"
"(let-values(((temp36_9)(make-top-level-lift trans-ctx_1)))"
"(make-lift-context6.1 #f temp36_9))))"
"(let-values(((capture-ctx_1)"
"(let-values(((v_96) trans-ctx_1))"
"(let-values(((the-struct_125) v_96))"
"(if(expand-context/outer? the-struct_125)"
"(let-values(((inner37_0)"
"(let-values(((the-struct_126)"
"(root-expand-context/outer-inner v_96)))"
"(if(expand-context/inner? the-struct_126)"
"(let-values(((lift-key38_1)(generate-lift-key))"
"((lifts39_0) lift-ctx_7))"
"(expand-context/inner2.1"
"(root-expand-context/inner-self-mpi the-struct_126)"
"(root-expand-context/inner-module-scopes the-struct_126)"
"(root-expand-context/inner-top-level-bind-scope"
" the-struct_126)"
"(root-expand-context/inner-all-scopes-stx the-struct_126)"
"(root-expand-context/inner-defined-syms the-struct_126)"
"(root-expand-context/inner-counter the-struct_126)"
" lift-key38_1"
"(expand-context/inner-to-parsed? the-struct_126)"
"(expand-context/inner-phase the-struct_126)"
"(expand-context/inner-namespace the-struct_126)"
"(expand-context/inner-just-once? the-struct_126)"
"(expand-context/inner-module-begin-k the-struct_126)"
"(expand-context/inner-allow-unbound? the-struct_126)"
"(expand-context/inner-in-local-expand? the-struct_126)"
"(expand-context/inner-keep-#%expression? the-struct_126)"
"(expand-context/inner-stops the-struct_126)"
"(expand-context/inner-declared-submodule-names the-struct_126)"
" lifts39_0"
"(expand-context/inner-lift-envs the-struct_126)"
"(expand-context/inner-module-lifts the-struct_126)"
"(expand-context/inner-require-lifts the-struct_126)"
"(expand-context/inner-to-module-lifts the-struct_126)"
"(expand-context/inner-requires+provides the-struct_126)"
"(expand-context/inner-observer the-struct_126)"
"(expand-context/inner-for-serializable? the-struct_126)"
"(expand-context/inner-should-not-encounter-macros?"
" the-struct_126)))"
"(raise-argument-error"
" 'struct-copy"
"                                                        \"expand-context/inner?\""
" the-struct_126)))))"
"(expand-context/outer1.1"
" inner37_0"
"(root-expand-context/outer-post-expansion the-struct_125)"
"(root-expand-context/outer-use-site-scopes the-struct_125)"
"(root-expand-context/outer-frame-id the-struct_125)"
"(expand-context/outer-context the-struct_125)"
"(expand-context/outer-env the-struct_125)"
"(expand-context/outer-scopes the-struct_125)"
"(expand-context/outer-def-ctx-scopes the-struct_125)"
"(expand-context/outer-binding-layer the-struct_125)"
"(expand-context/outer-reference-records the-struct_125)"
"(expand-context/outer-only-immediate? the-struct_125)"
"(expand-context/outer-need-eventually-defined the-struct_125)"
"(expand-context/outer-current-introduction-scopes the-struct_125)"
"(expand-context/outer-current-use-scopes the-struct_125)"
"(expand-context/outer-name the-struct_125)))"
"                                     (raise-argument-error 'struct-copy \"expand-context/outer?\" the-struct_125))))))"
"(let-values(((all-exp-forms_0)"
"((letrec-values(((loop_67)"
"(lambda(forms_0)"
"(begin"
" 'loop"
"(let-values((()"
"(begin"
"(let-values(((obs_172)"
"(expand-context-observer ctx_112)))"
"(if obs_172"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_172"
" 'enter-list"
"(datum->syntax$1 #f form30_0 s_309))))"
"(void)))"
"(values))))"
"(let-values(((exp-forms_0)"
"((letrec-values(((loop_128)"
"(lambda(forms_1 accum_1)"
"(begin"
" 'loop"
"(if(null? forms_1)"
"(let-values()"
"(let-values(((forms_2)"
"(reverse$1"
" accum_1)))"
"(begin"
"(let-values(((obs_173)"
"(expand-context-observer"
" ctx_112)))"
"(if obs_173"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_173"
" 'exit-list"
"(datum->syntax$1"
" #f"
" forms_2"
" s_309))))"
"(void)))"
" forms_2)))"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_174)"
"(expand-context-observer"
" ctx_112)))"
"(if obs_174"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_174"
" 'next)))"
"(void)))"
"(values))))"
"(let-values(((exp-form_0)"
"(let-values(((temp40_3)"
"(car"
" forms_1))"
"((capture-ctx41_0)"
" capture-ctx_1))"
"(expand9.1"
" #f"
" #f"
" #f"
" temp40_3"
" capture-ctx41_0))))"
"(loop_128"
"(cdr forms_1)"
"(cons"
" exp-form_0"
" accum_1))))))))))"
" loop_128)"
" forms_0"
" null)))"
"(let-values(((lifts_15)(get-and-clear-lifts! lift-ctx_7)))"
"(if(null? lifts_15)"
"(let-values() exp-forms_0)"
"(let-values()"
"(let-values((()"
"(begin"
"(let-values(((obs_175)"
"(expand-context-observer"
" ctx_112)))"
"(if obs_175"
"(let-values()"
"(let-values()"
"(call-expand-observe"
" obs_175"
" 'module-lift-loop"
" lifts_15)))"
"(void)))"
"(values))))"
"(let-values(((beg_0)"
"(let-values(((lifts42_0) lifts_15)"
"((temp43_6) #f)"
"((temp44_6)"
"(expand-context-phase"
" trans-ctx_1)))"
"(wrap-lifts-as-begin16.1"
" unsafe-undefined"
" unsafe-undefined"
" lifts42_0"
" temp43_6"
" temp44_6))))"
"(let-values(((exprs_1)"
"(reverse$1"
"(cdr"
"(reverse$1"
"(cdr(syntax-e$1 beg_0)))))))"
"(append"
"(loop_67 exprs_1)"
" exp-forms_0)))))))))))))"
" loop_67)"
" form30_0)))"
"(if(expand-context-to-parsed? ctx_112)"
"(parsed-begin-for-syntax21.1 s_309 all-exp-forms_0)"
"(let-values(((s45_0) s_309)((temp46_2)(cons begin-for-syntax29_0 all-exp-forms_0)))"
"(rebuild5.1 #t s45_0 temp46_2))))))))))))))"
"(void"
"(add-core-form!*"
" '#%require"
"(lambda(s_927 ctx_127)"
"(let-values((()"
"(begin"
"(let-values(((obs_176)(expand-context-observer ctx_127)))"
"(if obs_176(let-values()(let-values()(call-expand-observe obs_176 'prim-require)))(void)))"
"(values))))"
"(let-values((()"
"(begin"
"(if(eq?(expand-context-context ctx_127) 'top-level)"
"(void)"
"                         (let-values () (raise-syntax-error$1 #f \"allowed only in a module or the top level\" s_927)))"
"(values))))"
"(let-values(((disarmed-s_27)(syntax-disarm$1 s_927)))"
"(let-values(((ok?_97 #%require47_0 req48_0)"
"(let-values(((s_63) disarmed-s_27))"
"(let-values(((orig-s_102) s_63))"
"(let-values(((#%require47_1 req48_1)"
"(let-values(((s_406)(if(syntax?$1 s_63)(syntax-e$1 s_63) s_63)))"
"(if(pair? s_406)"
"(let-values(((#%require49_0)(let-values(((s_409)(car s_406))) s_409))"
"((req50_0)"
"(let-values(((s_415)(cdr s_406)))"
"(let-values(((s_65)"
"(if(syntax?$1 s_415)"
"(syntax-e$1 s_415)"
" s_415)))"
"(let-values(((flat-s_71)(to-syntax-list.1 s_65)))"
"(if(not flat-s_71)"
"(let-values()"
"(raise-syntax-error$1"
" #f"
"                                                                        \"bad syntax\""
" orig-s_102))"
"(let-values() flat-s_71)))))))"
"(values #%require49_0 req50_0))"
"                                               (raise-syntax-error$1 #f \"bad syntax\" orig-s_102)))))"
"(values #t #%require47_1 req48_1))))))"
"(let-values(((sc_41)(new-scope 'macro)))"
"(begin"
"(let-values(((temp51_3)"
"(reverse$1"
"(let-values(((lst_32) req48_0))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-list lst_32)))"
"((letrec-values(((for-loop_25)"
"(lambda(fold-var_398 lst_33)"
"(begin"
" 'for-loop"
"(if(pair? lst_33)"
"(let-values(((req_20)(unsafe-car lst_33))"
"((rest_13)(unsafe-cdr lst_33)))"
"(let-values(((fold-var_399)"
"(let-values(((fold-var_400) fold-var_398))"
"(let-values(((fold-var_296)"
"(let-values()"
"(cons"
"(let-values()"
"(add-scope"
" req_20"
" sc_41))"
" fold-var_400))))"
"(values fold-var_296)))))"
"(if(not #f)"
"(for-loop_25 fold-var_399 rest_13)"
" fold-var_399)))"
" fold-var_398)))))"
" for-loop_25)"
" null"
" lst_32)))))"
"((s52_0) s_927)"
"((temp53_6) #f)"
"((temp54_5)(expand-context-namespace ctx_127))"
"((temp55_4)(expand-context-phase ctx_127))"
"((temp56_5)(let-values(((temp59_8) #f))(make-requires+provides8.1 #f temp59_8)))"
"((temp57_3) 'require)"
"((temp58_5) #t))"
"(parse-and-perform-requires!30.1"
" #f"
" #f"
" unsafe-undefined"
" temp58_5"
" unsafe-undefined"
" #f"
" #f"
" #f"
" temp53_6"
" temp57_3"
" temp51_3"
" s52_0"
" temp54_5"
" temp55_4"
" temp56_5))"
"(if(expand-context-to-parsed? ctx_127)(parsed-require23.1 s_927) s_927))))))))))"
"(void"
"(add-core-form!*"
" '#%provide"
"(lambda(s_780 ctx_128)"
"(begin"
"(let-values(((obs_177)(expand-context-observer ctx_128)))"
"(if obs_177(let-values()(let-values()(call-expand-observe obs_177 'prim-provide)))(void)))"
"       (raise-syntax-error$1 #f \"not allowed outside of a module body\" s_780)))))"
"(define-values(ns)(make-namespace))"
"(void"
"(begin"
"(declare-core-module! ns)"
"(let-values(((temp1_4) '#%read)((read-primitives2_0) read-primitives)((ns3_0) ns))"
"(declare-hash-based-module!41.1 ns3_0 #f null #f #f temp1_4 read-primitives2_0))"
"(let-values(((temp4_8) '#%main)((main-primitives5_0) main-primitives)((ns6_1) ns))"
"(declare-hash-based-module!41.1 ns6_1 #f null #f #f temp4_8 main-primitives5_0))"
"(let-values(((temp7_5) '#%utils)((utils-primitives8_0) utils-primitives)((ns9_1) ns))"
"(declare-hash-based-module!41.1 ns9_1 #f null #f #f temp7_5 utils-primitives8_0))"
"(let-values(((temp10_7) '#%place-struct)"
"((place-struct-primitives11_0) place-struct-primitives)"
"((ns12_2) ns)"
"((temp13_3) '(dynamic-place)))"
"(declare-hash-based-module!41.1 ns12_2 #f temp13_3 #f #f temp10_7 place-struct-primitives11_0))"
"(let-values(((temp14_7) '#%boot)((boot-primitives15_0) boot-primitives)((ns16_2) ns))"
"(declare-hash-based-module!41.1 ns16_2 #f null #f #f temp14_7 boot-primitives15_0))"
"(let-values(((linklet-primitives_0)"
"(hash-remove(hash-remove linklet-primitives 'variable-reference?) 'variable-reference-constant?)))"
"(let-values(((temp17_6) '#%linklet)"
"((linklet-primitives18_0) linklet-primitives_0)"
"((ns19_3) ns)"
"((temp20_7) #t)"
"((temp21_3) #t))"
"(declare-hash-based-module!41.1 ns19_3 temp20_7 null #f temp21_3 temp17_6 linklet-primitives18_0)))"
"(let-values(((temp22_6) '#%expobs)((expobs-primitives23_0) expobs-primitives)((ns24_2) ns)((temp25_9) #t))"
"(declare-hash-based-module!41.1 ns24_2 #f null temp25_9 #f temp22_6 expobs-primitives23_0))"
"(let-values(((ns26_1) ns)"
"((eval27_0) 1/eval)"
"((temp28_5)"
"(let-values(((ht_167) main-primitives))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_167)))"
"((letrec-values(((for-loop_20)"
"(lambda(table_221 i_3)"
"(begin"
" 'for-loop"
"(if i_3"
"(let-values(((name_83)(hash-iterate-key ht_167 i_3)))"
"(let-values(((table_210)"
"(let-values(((table_222) table_221))"
"(let-values(((table_181)"
"(let-values()"
"(let-values(((key_93 val_89)"
"(let-values()"
"(values"
"(let-values() name_83)"
" #t))))"
"(hash-set table_222 key_93 val_89)))))"
"(values table_181)))))"
"(if(not #f)"
"(for-loop_20 table_210(hash-iterate-next ht_167 i_3))"
" table_210)))"
" table_221)))))"
" for-loop_20)"
" '#hash()"
"(hash-iterate-first ht_167)))))"
"((temp29_7)"
"(let-values(((ht_127) read-primitives))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))"
"(void)"
"(let-values()(check-in-hash-keys ht_127)))"
"((letrec-values(((for-loop_328)"
"(lambda(table_223 i_182)"
"(begin"
" 'for-loop"
"(if i_182"
"(let-values(((name_84)(hash-iterate-key ht_127 i_182)))"
"(let-values(((table_119)"
"(let-values(((table_112) table_223))"
"(let-values(((table_113)"
"(let-values()"
"(let-values(((key_94 val_90)"
"(let-values()"
"(values"
"(let-values() name_84)"
" #t))))"
"(hash-set table_112 key_94 val_90)))))"
"(values table_113)))))"
"(if(not #f)"
"(for-loop_328 table_119(hash-iterate-next ht_127 i_182))"
" table_119)))"
" table_223)))))"
" for-loop_328)"
" '#hash()"
"(hash-iterate-first ht_127))))))"
"(declare-kernel-module!8.1 eval27_0 temp28_5 temp29_7 ns26_1))"
"(begin"
"(let-values(((lst_17) runtime-instances))"
"(begin"
"(if(variable-reference-from-unsafe?(#%variable-reference))(void)(let-values()(check-list lst_17)))"
"((letrec-values(((for-loop_10)"
"(lambda(lst_20)"
"(begin"
" 'for-loop"
"(if(pair? lst_20)"
"(let-values(((name_85)(unsafe-car lst_20))((rest_6)(unsafe-cdr lst_20)))"
"(let-values((()"
"(let-values()"
"(if(eq? name_85 '#%kernel)"
"(values)"
"(let-values()"
"(let-values((()"
"(let-values()"
"(begin"
"(let-values()"
"(let-values(((name30_0) name_85)"
"((ns31_0) ns)"
"((temp32_3)"
"(let-values(((or-part_166)"
"(eq?"
" name_85"
" '#%foreign)))"
"(if or-part_166"
" or-part_166"
"(let-values(((or-part_287)"
"(eq?"
" name_85"
" '#%futures)))"
"(if or-part_287"
" or-part_287"
"(eq?"
" name_85"
" '#%unsafe)))))))"
"(copy-runtime-module!26.1"
" unsafe-undefined"
" unsafe-undefined"
" ns31_0"
" #t"
" temp32_3"
" unsafe-undefined"
" unsafe-undefined"
" name30_0)))"
"(values)))))"
"(values)))))))"
"(if(not #f)(for-loop_10 rest_6)(values))))"
"(values))))))"
" for-loop_10)"
" lst_17)))"
"(void))"
"(let-values(((temp33_5) '#%builtin)"
"((temp34_8)(list* '#%place-struct '#%utils '#%boot '#%expobs '#%linklet runtime-instances))"
"((ns35_1) ns)"
"((temp36_5) #f))"
"(declare-reexporting-module!50.1 ns35_1 temp36_5 temp33_5 temp34_8))"
"(1/current-namespace ns)"
"(1/dynamic-require ''#%kernel 0)))"
"(define-values(datum->kernel-syntax)(lambda(s_774)(begin(1/datum->syntax core-stx s_774)))))"
;
