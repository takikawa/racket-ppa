/* >>>> Generated by mkmark.rkt from mzmarksrc.c <<<< */

static int mark_letrec_check_frame_SIZE(void *p, struct NewGC *gc) {
  return
  gcBYTES_TO_WORDS(sizeof(Letrec_Check_Frame));
}

static int mark_letrec_check_frame_MARK(void *p, struct NewGC *gc) {
  Letrec_Check_Frame *frame = (Letrec_Check_Frame *)p;
  
  gcMARK2(frame->def, gc);
  gcMARK2(frame->next, gc);
  gcMARK2(frame->ref, gc);
  gcMARK2(frame->head, gc);
  gcMARK2(frame->deferred_chain, gc);

  return
  gcBYTES_TO_WORDS(sizeof(Letrec_Check_Frame));
}

static int mark_letrec_check_frame_FIXUP(void *p, struct NewGC *gc) {
  Letrec_Check_Frame *frame = (Letrec_Check_Frame *)p;
  
  gcFIXUP2(frame->def, gc);
  gcFIXUP2(frame->next, gc);
  gcFIXUP2(frame->ref, gc);
  gcFIXUP2(frame->head, gc);
  gcFIXUP2(frame->deferred_chain, gc);

  return
  gcBYTES_TO_WORDS(sizeof(Letrec_Check_Frame));
}

#define mark_letrec_check_frame_IS_ATOMIC 0
#define mark_letrec_check_frame_IS_CONST_SIZE 1


static int mark_scheme_deferred_expr_SIZE(void *p, struct NewGC *gc) {
  return
  gcBYTES_TO_WORDS(sizeof(Scheme_Deferred_Expr));
}

static int mark_scheme_deferred_expr_MARK(void *p, struct NewGC *gc) {
  Scheme_Deferred_Expr *clos = (Scheme_Deferred_Expr *)p;
  
  gcMARK2(clos->expr, gc);
  gcMARK2(clos->frame, gc);
  gcMARK2(clos->chain_next, gc);

  return
  gcBYTES_TO_WORDS(sizeof(Scheme_Deferred_Expr));
}

static int mark_scheme_deferred_expr_FIXUP(void *p, struct NewGC *gc) {
  Scheme_Deferred_Expr *clos = (Scheme_Deferred_Expr *)p;
  
  gcFIXUP2(clos->expr, gc);
  gcFIXUP2(clos->frame, gc);
  gcFIXUP2(clos->chain_next, gc);

  return
  gcBYTES_TO_WORDS(sizeof(Scheme_Deferred_Expr));
}

#define mark_scheme_deferred_expr_IS_ATOMIC 0
#define mark_scheme_deferred_expr_IS_CONST_SIZE 1


