/* >>>> Generated by mkmark.rkt from mzmarksrc.c <<<< */

static int mark_ir_lambda_info_SIZE(void *p, struct NewGC *gc) {
#ifndef GC_NO_SIZE_NEEDED_FROM_PROCS
  gcBYTES_TO_WORDS(sizeof(Scheme_IR_Lambda_Info));
#else
  return 0;
#endif
}

static int mark_ir_lambda_info_MARK(void *p, struct NewGC *gc) {
#ifndef GC_NO_MARK_PROCEDURE_NEEDED
  Scheme_IR_Lambda_Info *i = (Scheme_IR_Lambda_Info *)p;
  
  gcMARK2(i->base_closure, gc);
  gcMARK2(i->vars, gc);
  gcMARK2(i->arg_types, gc);
  gcMARK2(i->arg_type_contributors, gc);

# ifdef GC_NO_SIZE_NEEDED_FROM_PROCS
  return 0;
# else
  return
  gcBYTES_TO_WORDS(sizeof(Scheme_IR_Lambda_Info));
# endif
#endif
}

static int mark_ir_lambda_info_FIXUP(void *p, struct NewGC *gc) {
#ifndef GC_NO_FIXUP_PROCEDURE_NEEDED
  Scheme_IR_Lambda_Info *i = (Scheme_IR_Lambda_Info *)p;
  
  gcFIXUP2(i->base_closure, gc);
  gcFIXUP2(i->vars, gc);
  gcFIXUP2(i->arg_types, gc);
  gcFIXUP2(i->arg_type_contributors, gc);

# ifdef GC_NO_SIZE_NEEDED_FROM_PROCS
  return 0;
# else
  return
  gcBYTES_TO_WORDS(sizeof(Scheme_IR_Lambda_Info));
# endif
#endif
}

#define mark_ir_lambda_info_IS_ATOMIC 0
#define mark_ir_lambda_info_IS_CONST_SIZE 1


