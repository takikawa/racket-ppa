#! /bin/sh

# workarea
# Copyright 1984-2017 Cisco Systems, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

srcdir=`dirname "$0"`

if [ $# != 1 -a $# != 2  -a $# != 3 ]
then
    echo "Usage: workarea <machine-type> { <workarea name> <pb host machine-type> }"
    exit 1
fi

# set M to machine type and W to workarea name
M=$1
if [ "$2" = "" ]
then
    W=$M
else
    W=$2
fi
if [ "$3" != "" ]
then
   Mpbhost=$3
else
   Mpbhost=""
fi

Muni=""

case "$M" in
  pb) Mhost=$Mpbhost ;;
  *) Mhost=$M ;;
esac

case "$Mhost" in
  a6fb) ;;
  a6le) ;;
  a6nb) ;;
  a6nt) ;;
  a6ob) ;;
  a6osx) ;;
  a6s2) ;;
  arm32le) ;;
  arm64le) ;;
  i3fb) ;;
  i3le) ;;
  i3nb) ;;
  i3nt) ;;
  i3ob) ;;
  i3osx) ;;
  i3qnx) ;;
  i3s2) ;;
  ppc32le) ;;
  ta6fb) Muni=a6fb ;;
  ta6le) Muni=a6le ;;
  ta6nb) Muni=a6nb ;;
  ta6nt) Muni=a6nt ;;
  ta6ob) Muni=a6ob ;;
  ta6osx) Muni=a6osx ;;
  ta6s2) Muni=a6s2 ;;
  tarm32le) Muni=arm32le ;;
  tarm64le) Muni=arm64le ;;
  ti3fb) Muni=i3fb ;;
  ti3le) Muni=i3le ;;
  ti3nb) Muni=i3nb ;;
  ti3nt) Muni=i3nt ;;
  ti3ob) Muni=i3ob ;;
  ti3osx) Muni=i3osx ;;
  ti3qnx) Muni=i3qnx ;;
  ti3s2) Muni=i3s2 ;;
  tppc32le) Muni=ppc32le ;;
  *) echo "Unrecognized machine name $Mhost"; exit 1 ;;
esac

if [ "$Muni" != "" ] ; then
    Muniarch=$Muni
else
    Muniarch=$Mhost
fi    

case "$Muniarch" in
  a6fb) March=a6 ;;
  a6le) March=a6 ;;
  a6nb) March=a6 ;;
  a6nt) March=a6 ;;
  a6ob) March=a6 ;;
  a6osx) March=a6 ;;
  a6s2) March=a6 ;;
  arm32le) March=arm32 ;;
  arm64le) March=arm64 ;;
  i3fb) March=i3 ;;
  i3le) March=i3 ;;
  i3nb) March=i3 ;;
  i3nt) March=i3 ;;
  i3ob) March=i3 ;;
  i3osx) March=i3 ;;
  i3qnx) March=i3 ;;
  i3s2) March=i3 ;;
  ppc32le) March=ppc32 ;;
  *) March="" ;;
esac
  
case "$Muniarch" in
  a6nt) Mos=nt ;;
  i3nt) Mos=nt ;;
  *) Mos="" ;;
esac

if [ "$OS" = "Windows_NT" ]
then
    ln="/bin/cp -R"
else
    ln="/bin/ln -s"
fi

# This shell script creates a workarea for local modifications to the
# Chez Scheme source code.  Invoke with the name of a machine type:
# i3le, i3nt, ti3osx, etc., plus an optional workarea name.  The script
# creates a subdirectory in the current working (release) directory.
# If the workarea name argument is not given, this subdirectory is
# named by the machine type.  The workarea contains subdirectories
# that correspond to various subdirectories of the release directory.
# Initially, all of the files in the workarea are links back into the
# source directories.  Furthermore, many of the files are simply make
# files that are used to rebuild the system, and in most cases, the
# make files themselves create links for the source files as needed.
# To make local modifications, convert the links into local copies.

case "$srcdir" in
    /*)
        upsrcdir=$srcdir
        upupsrcdir=$srcdir
        upupupsrcdir=$srcdir
        ;;
    *)
        upsrcdir=../$srcdir
        upupsrcdir=../../$srcdir
        upupupsrcdir=../../../$srcdir
        ;;
esac

if [ -f boot/$M/scheme.boot ] ; then
    upbootdir=..
    upupupbootdir=../../..
else
    upbootdir=$upsrcdir
    upupupbootdir=$upupupsrcdir
fi

# workln source dest
# creates link if dest does not exist and source does
workln()
{
    if [ ! -e $2 -a -e "$1" ] ; then
        $ln "$1" $2 2> /dev/null
    fi
}

# forceworkln source dest
# attempts to create link even if source does not exist
forceworkln()
{
    if [ ! -e $2 ] ; then
        /bin/ln -s "$1" $2 2> /dev/null
    fi
}

forceworkln2()
{
    if [ ! -e $2 ] ; then
        $ln "$1" $2 2> /dev/null
    fi
}

# workdir directory-name
workdir()
{
    if [ ! -e $1 ] ; then
        mkdir $1
    fi
}

workdir $W

workdir $W/c
(cd $W/c; workln "$upupsrcdir"/c/Mf-$M Mf-$M)
(cd $W/c; forceworkln Mf-$M Makefile)
if [ "$Muni" != "" ] ; then
  (cd $W/c; workln "$upupsrcdir"/c/Mf-$Muni Mf-$Muni)
fi
if [ "$Mpbhost" != "" ] ; then
  (cd $W/c; workln "$upupsrcdir"/c/Mf-$Mpbhost Mf-$Mpbhost)
  (cd $W/c; forceworkln Mf-$Mpbhost Mf-pbhost)
fi
(cd $W/c; workln "$upupsrcdir"/c/Mf-base Mf-base)
if [ ! -e $W/c/config.h ] ; then
  touch $W/c/config.h
fi
if [ ! -e $W/c/Mf-config ] ; then
  touch $W/c/Mf-config
fi
case $M in
  *nt)
    (cd $W/c; workln "$upupsrcdir"/c/vs.bat vs.bat)
    ;;
esac

workdir $W/s
(cd $W/s; workln ${upupsrcdir}/s/Mf-$M Mf-$M)
(cd $W/s; forceworkln Mf-$M Makefile)
if [ "$Muni" != "" ] ; then
  (cd $W/s; workln ${upupsrcdir}/s/Mf-$Muni Mf-$Muni)
fi
(cd $W/s; workln "$upupsrcdir"/s/Mf-base Mf-base)
(cd $W/s; workln "$upupsrcdir"/s/Mf-cross Mf-cross)
(cd $W/s; workln "$upupsrcdir"/s/$M.def $M.def)
(cd $W/s; forceworkln2 $M.def machine.def)
if [ "$March" != "" ] ; then
  (cd $W/s; workln "$upupsrcdir"/s/$March.def $March.def)
fi
if [ "$Mos" != "" ] ; then
  (cd $W/s; workln "$upupsrcdir"/s/$Mos.def $Mos.def)
fi
(cd $W/s; workln "$upupsrcdir"/s/default.def default.def)

workdir $W/mats
(cd $W/mats; workln "$upupsrcdir"/mats/Mf-$M Mf-$M)
(cd $W/mats; forceworkln Mf-$M Makefile)
if [ "$Muni" != "" ] ; then
  (cd $W/mats; workln "$upupsrcdir"/mats/Mf-$Muni Mf-$Muni)
fi
if [ "$Mpbhost" != "" ] ; then
  (cd $W/mats; workln "$upupsrcdir"/mats/Mf-$Mpbhost Mf-$Mpbhost)
  (cd $W/mats; forceworkln Mf-$Mpbhost Mf-pbhost)
fi
(cd $W/mats; workln "$upupsrcdir"/mats/Mf-base Mf-base)
(cd $W/mats; workln "$upupsrcdir"/mats/Mf-exobj Mf-exobj)
case $M in
  *nt)
    (cd $W/mats; workln "$upupsrcdir"/mats/vs.bat vs.bat)
    ;;
esac

linkeach()
{
    dir=$1
    workdir $W/$dir
    for file in `(cd "$srcdir"/$dir ; echo *)` ; do
        (cd $W/$dir ; workln "$upupsrcdir"/$dir/$file $file)
    done
}

linkeach examples
linkeach unicode

# deep copy submodules where builds occur so changes don't propagate through symlinks
for dir in `echo zlib` ; do
  if [ ! -e $W/$dir ] ; then
    /bin/cp -R "$srcdir"/$dir $W/$dir
  fi
done

for dir in `echo lz4` ; do
  if [ ! -e $W/$dir ] ; then
    /bin/cp -R "$srcdir"/$dir $W/$dir
  fi
done

workdir $W/boot
workdir $W/boot/$M
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/scheme.h scheme.h)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/equates.h equates.h)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/gc-ocd.inc gc-ocd.inc)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/gc-oce.inc gc-oce.inc)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/gc-par.inc gc-par.inc)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/vfasl.inc vfasl.inc)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/heapcheck.inc heapcheck.inc)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/petite.boot petite.boot)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/scheme.boot scheme.boot)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/def.so def.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/edit.so edit.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/fact.so fact.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/fatfib.so fatfib.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/fib.so fib.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/freq.so freq.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/m4.so m4.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/macro.so macro.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/matrix.so matrix.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/object.so object.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/power.so power.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/rabbit.so rabbit.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/rsa.so rsa.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/scons.so scons.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/setof.so setof.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/unify.so unify.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/fft.so fft.so)
(cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/compat.so compat.so)
case $M in
  *nt)
    (cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/mainmd.obj mainmd.obj)
    (cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/mainmt.obj mainmt.obj)
    (cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/csv953md.lib csv953md.lib)
    (cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/csv953mt.lib csv953mt.lib)
    (cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/scheme.res scheme.res)
    ;;
  *)
    (cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/main.o main.o)
    (cd $W/boot/$M; workln "$upupupbootdir"/boot/$M/kernel.o kernel.o)
    ;;
esac

workdir $W/bin
workdir $W/bin/$M
case $M in
  *nt)
    (cd $W/bin/$M; workln "$upupupsrcdir"/bin/$M/scheme.exe scheme.exe)
    (cd $W/bin/$M; forceworkln2 scheme.exe petite.exe)
    (cd $W/bin/$M; workln "$upupupsrcdir"/bin/$M/csv953.dll csv953.dll)
    (cd $W/bin/$M; workln "$upupupsrcdir"/bin/$M/csv953.lib csv953.lib)
    ;;
  *)
    (cd $W/bin/$M; workln "$upupupsrcdir"/bin/$M/scheme scheme)
    (cd $W/bin/$M; forceworkln scheme petite)
    ;;
esac

# crutch links for fingers that remember old release structure
case $M in
  *nt)
    (cd $W/bin; forceworkln $M/scheme.exe scheme)
    (cd $W/bin; forceworkln $M/petite.exe petite)
    ;;
  *)
    (cd $W/bin; forceworkln $M/scheme scheme)
    (cd $W/bin; forceworkln $M/petite petite)
    ;;
esac

workdir $W/bintar
(cd $W/bintar; workln "$upupsrcdir"/bintar/Makefile Makefile)

workdir $W/rpm
(cd $W/rpm; workln "$upupsrcdir"/rpm/Makefile Makefile)

workdir $W/pkg
(cd $W/pkg; workln "$upupsrcdir"/pkg/Makefile Makefile)
(cd $W/pkg; workln "$upupsrcdir"/pkg/rmpkg rmpkg)

(cd $W; workln ../LOG LOG)
(cd $W; forceworkln2 "$upsrcdir"/nanopass nanopass)
(cd $W; workln "$upsrcdir"/makefiles/installsh installsh)
(cd $W; workln "$upsrcdir"/scheme.1.in scheme.1.in)

case $M in
  *nt)
    (cd $W/c; make source > /dev/null 2>&1)
    (cd $W/s; make source > /dev/null 2>&1)
    (cd $W/mats; make source > /dev/null 2>&1)
    ;;
esac


cat > $W/s/Mf-config << END
upupsrcdir=$upupsrcdir
upupupbootdir=$upupupbootdir
END

cat > $W/Mf-config << END
srcdir=$srcdir
END

cat > $W/mats/Mf-config << END
upupsrcdir=$upupsrcdir
END

exit 0
