(
#(index-entry "./grammar.html#./grammar:s23" ("bytevector syntax") ("bytevector syntax") "461" "" "")
#(index-entry "./grammar.html#./grammar:s22" ("vector syntax") ("vector syntax") "461" "" "")
#(index-entry "./grammar.html#./grammar:s21" ("dot (~.~)") ("dot (~\\scheme{{\\schdot}}~)") "460" "" "")
#(index-entry "./grammar.html#./grammar:s20" (". (dot)") ("\\scheme{{\\schdot}} (dot)") "460" "" "")
#(index-entry "./grammar.html#./grammar:s19" ("list syntax") ("list syntax") "460" "" "")
#(index-entry "./grammar.html#./grammar:s18" ("number syntax") ("number syntax") "459" "" "")
#(index-entry "./grammar.html#./grammar:s17" ("symbol syntax") ("symbol syntax") "458" "" "")
#(index-entry "./grammar.html#./grammar:s16" ("string syntax") ("string syntax") "458" "" "")
#(index-entry "./grammar.html#./grammar:s15" ("character syntax") ("character syntax") "457" "" "")
#(index-entry "./grammar.html#./grammar:s14" ("boolean syntax") ("boolean syntax") "457" "" "")
#(index-entry "./grammar.html#./grammar:s13" ("datum syntax") ("datum syntax") "456" "" "")
#(index-entry "./grammar.html#./grammar:s12" ("#!r6rs") ("\\scheme{\\#!r6rs}") "456" "" "")
#(index-entry "./grammar.html#./grammar:s11" ("block comment (~#|\\dots|#~)") ("block comment (~\\scheme{\\#|{\\dots}|\\#}~)") "455" "" "")
#(index-entry "./grammar.html#./grammar:s10" ("#|\\dots|# (block comment)") ("\\scheme{\\#|{\\dots}|\\#} (block comment)") "455" "" "")
#(index-entry "./grammar.html#./grammar:s9" ("datum comment (~#;~)") ("datum comment (~\\scheme{\\#;}~)") "455" "" "")
#(index-entry "./grammar.html#./grammar:s8" ("#; (datum comment)") ("\\scheme{\\#;} (datum comment)") "455" "" "")
#(index-entry "./grammar.html#./grammar:s7" ("semicolon (~;~)") ("semicolon (~\\scheme{;}~)") "455" "" "")
#(index-entry "./grammar.html#./grammar:s6" ("; (comment)") ("\\scheme{;} (comment)") "455" "" "")
#(index-entry "./grammar.html#./grammar:s5" ("comments") ("comments") "455" "" "")
#(index-entry "./grammar.html#./grammar:s4" ("intraline whitespace") ("intraline whitespace") "455" "" "")
#(index-entry "./grammar.html#./grammar:s3" ("line ending") ("line ending") "455" "" "")
#(index-entry "./grammar.html#./grammar:s2" ("whitespace") ("whitespace") "455" "" "")
#(index-entry "./grammar.html#./grammar:s1" ("tokens") ("tokens") "455" "" "")
#(index-entry "./grammar.html#./grammar:s0" ("datum syntax") ("datum syntax") "455" "" "")
#(index-entry "./examples.html#./examples:s109" ("nested engines") ("nested engines") "429" "" "")
#(index-entry "./examples.html#./examples:s106" ("operating system") ("operating system") "429" "" "")
#(index-entry "./examples.html#./examples:s100" ("call/cc") ("\\scheme{call/cc}") "426" "" "")
#(index-entry "./examples.html#./examples:s99" ("call-with-current-continuation") ("\\scheme{call-with-current-continuation}") "426" "" "")
#(index-entry "./examples.html#./examples:s98" ("call/cc") ("\\scheme{call/cc}") "425" "" "")
#(index-entry "./examples.html#./examples:s97" ("timer interrupts") ("timer interrupts") "425" "" "")
#(index-entry "./examples.html#./examples:s96" ("por (parallel-or)") ("\\scheme{por} (parallel-or)") "424" "" "")
#(index-entry "./examples.html#./examples:s95" ("nondeterministic computations") ("nondeterministic computations") "424" "" "")
#(index-entry "./examples.html#./examples:s94" ("operating system") ("operating system") "423" "" "")
#(index-entry "./examples.html#./examples:s93" ("round-robin") ("\\scheme{round-robin}") "423" "" "")
#(index-entry "./examples.html#./examples:s92" ("fibonacci") ("\\scheme{fibonacci}") "422" "" "")
#(index-entry "./examples.html#./examples:s91" ("expire") ("\\var{expire}") "421" "see{engines}" "")
#(index-entry "./examples.html#./examples:s90" ("complete") ("\\var{complete}") "421" "see{engines}" "")
#(index-entry "./examples.html#./examples:s89" ("ticks") ("\\var{ticks}") "421" "see{engines}" "")
#(index-entry "./examples.html#./examples:s88" ("continuations") ("continuations") "421" "" "")
#(index-entry "./examples.html#./examples:s87" ("nondeterministic computations") ("nondeterministic computations") "421" "" "")
#(index-entry "./examples.html#./examples:s86" ("threads") ("threads") "421" "" "")
#(index-entry "./examples.html#./examples:s85" ("light-weight threads") ("light-weight threads") "421" "" "")
#(index-entry "./examples.html#./examples:s84" ("multiprocessing") ("multiprocessing") "421" "" "")
#(index-entry "./examples.html#./examples:s83" ("timed preemption") ("timed preemption") "421" "" "")
#(index-entry "./examples.html#./examples:s82" ("engines") ("engines") "421" "" "")
#(index-entry "./examples.html#./examples:s78" ("unify") ("\\scheme{unify}") "418" "" "")
#(index-entry "./examples.html#./examples:s77" ("continuation-passing style") ("continuation-passing style") "418" "" "")
#(index-entry "./examples.html#./examples:s76" ("unification") ("unification") "417" "" "")
#(index-entry "./examples.html#./examples:s70" ("fast Fourier transform (FFT)") ("fast Fourier transform (FFT)") "412" "" "")
#(index-entry "./examples.html#./examples:s69" ("complex numbers") ("complex numbers") "412" "" "")
#(index-entry "./examples.html#./examples:s67" ("inheritance") ("inheritance") "412" "" "")
#(index-entry "./examples.html#./examples:s63" ("define-object") ("\\scheme{define-object}") "408" "" "")
#(index-entry "./examples.html#./examples:s62" ("messages") ("messages") "408" "" "")
#(index-entry "./examples.html#./examples:s61" ("object-oriented programming") ("object-oriented programming") "408" "" "")
#(index-entry "./examples.html#./examples:s60" ("abstract objects") ("abstract objects") "408" "" "")
#(index-entry "./examples.html#./examples:s59" ("delayed evaluation") ("delayed evaluation") "408" "" "")
#(index-entry "./examples.html#./examples:s58" ("call-by-name") ("call-by-name") "408" "" "")
#(index-entry "./examples.html#./examples:s57" ("call-by-value") ("call-by-value") "407" "" "")
#(index-entry "./examples.html#./examples:s51" ("core syntactic forms") ("core syntactic forms") "404" "" "")
#(index-entry "./examples.html#./examples:s50" ("association list") ("association list") "404" "" "")
#(index-entry "./examples.html#./examples:s49" ("environment") ("environment") "404" "" "")
#(index-entry "./examples.html#./examples:s48" ("interpreter") ("interpreter") "404" "" "")
#(index-entry "./examples.html#./examples:s47" ("meta-circular interpreter") ("meta-circular interpreter") "404" "" "")
#(index-entry "./examples.html#./examples:s46" ("interpret") ("\\scheme{interpret}") "404" "" "")
#(index-entry "./examples.html#./examples:s39" ("printf") ("\\scheme{printf}") "401" "" "")
#(index-entry "./examples.html#./examples:s38" ("fprintf") ("\\scheme{fprintf}") "401" "" "")
#(index-entry "./examples.html#./examples:s37" ("formatted output") ("formatted output") "401" "" "")
#(index-entry "./examples.html#./examples:s33" ("display") ("\\scheme{display}") "397" "" "")
#(index-entry "./examples.html#./examples:s32" ("write") ("\\scheme{write}") "397" "" "")
#(index-entry "./examples.html#./examples:s31" ("put-datum") ("\\scheme{put-datum}") "397" "" "")
#(index-entry "./examples.html#./examples:s24" ("frequency") ("\\scheme{frequency}") "393" "" "")
#(index-entry "./examples.html#./examples:s23" ("C") ("C") "393" "" "")
#(index-entry "./examples.html#./examples:s21" ("map") ("\\scheme{map}") "392" "" "")
#(index-entry "./examples.html#./examples:s18" ("syntax-rules") ("\\scheme{syntax-rules}") "389" "" "")
#(index-entry "./examples.html#./examples:s17" ("define-syntax") ("\\scheme{define-syntax}") "389" "" "")
#(index-entry "./examples.html#./examples:s16" ("sets") ("sets") "389" "" "")
#(index-entry "./examples.html#./examples:s15" ("set-of") ("\\scheme{set-of}") "389" "" "")
#(index-entry "./examples.html#./examples:s11" ("merge") ("\\scheme{merge}") "387" "" "")
#(index-entry "./examples.html#./examples:s10" ("sort") ("\\scheme{sort}") "387" "" "")
#(index-entry "./examples.html#./examples:s9" ("list-sort") ("\\scheme{list-sort}") "387" "" "")
#(index-entry "./examples.html#./examples:s3" ("vectors") ("vectors") "383" "" "")
#(index-entry "./examples.html#./examples:s2" ("mul") ("\\scheme{mul}") "382" "" "")
#(index-entry "./examples.html#./examples:s1" ("matrix multiplication") ("matrix multiplication") "381" "" "")
#(index-entry "./examples.html#./examples:s0" ("extended examples") ("extended examples") "381" "" "")
#(index-entry "./exceptions.html#./exceptions:s45" ("no-nans-violation?") ("\\scheme{no-nans-violation?}") "377" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s45" ("make-no-nans-violation") ("\\scheme{make-no-nans-violation}") "377" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s45" ("&no-nans") ("\\scheme{\\&no-nans}") "377" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s44" ("no-infinities-violation?") ("\\scheme{no-infinities-violation?}") "376" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s44" ("make-no-infinities-violation") ("\\scheme{make-no-infinities-violation}") "376" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s44" ("&no-infinities") ("\\scheme{\\&no-infinities}") "376" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s43" ("i/o-encoding-error-char") ("\\scheme{i/o-encoding-error-char}") "376" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s43" ("i/o-encoding-error?") ("\\scheme{i/o-encoding-error?}") "376" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s43" ("make-i/o-encoding-error") ("\\scheme{make-i/o-encoding-error}") "376" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s43" ("&i/o-encoding") ("\\scheme{\\&i/o-encoding}") "376" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s42" ("i/o-decoding-error?") ("\\scheme{i/o-decoding-error?}") "375" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s42" ("make-i/o-decoding-error") ("\\scheme{make-i/o-decoding-error}") "375" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s42" ("&i/o-decoding") ("\\scheme{\\&i/o-decoding}") "375" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s41" ("i/o-error-port") ("\\scheme{i/o-error-port}") "375" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s41" ("i/o-port-error?") ("\\scheme{i/o-port-error?}") "375" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s41" ("make-i/o-port-error") ("\\scheme{make-i/o-port-error}") "375" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s41" ("&i/o-port") ("\\scheme{\\&i/o-port}") "375" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s40" ("i/o-file-does-not-exist-error?") ("\\scheme{i/o-file-does-not-exist-error?}") "374" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s40" ("make-i/o-file-does-not-exist-error") ("\\scheme{make-i/o-file-does-not-exist-error}") "374" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s40" ("&i/o-file-does-not-exist") ("\\scheme{\\&i/o-file-does-not-exist}") "374" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s39" ("i/o-file-already-exists-error?") ("\\scheme{i/o-file-already-exists-error?}") "374" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s39" ("make-i/o-file-already-exists-error") ("\\scheme{make-i/o-file-already-exists-error}") "374" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s39" ("&i/o-file-already-exists") ("\\scheme{\\&i/o-file-already-exists}") "374" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s38" ("i/o-file-is-read-only-error?") ("\\scheme{i/o-file-is-read-only-error?}") "374" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s38" ("make-i/o-file-is-read-only-error") ("\\scheme{make-i/o-file-is-read-only-error}") "374" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s38" ("&i/o-file-is-read-only") ("\\scheme{\\&i/o-file-is-read-only}") "374" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s37" ("i/o-file-protection-error?") ("\\scheme{i/o-file-protection-error?}") "373" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s37" ("make-i/o-file-protection-error") ("\\scheme{make-i/o-file-protection-error}") "373" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s37" ("&i/o-file-protection") ("\\scheme{\\&i/o-file-protection}") "373" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s36" ("i/o-error-filename") ("\\scheme{i/o-error-filename}") "373" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s36" ("i/o-filename-error?") ("\\scheme{i/o-filename-error?}") "373" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s36" ("make-i/o-filename-error") ("\\scheme{make-i/o-filename-error}") "373" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s36" ("&i/o-filename") ("\\scheme{\\&i/o-filename}") "373" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s35" ("i/o-error-position") ("\\scheme{i/o-error-position}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s35" ("i/o-invalid-position-error?") ("\\scheme{i/o-invalid-position-error?}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s35" ("make-i/o-invalid-position-error") ("\\scheme{make-i/o-invalid-position-error}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s35" ("&i/o-invalid-position") ("\\scheme{\\&i/o-invalid-position}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s34" ("i/o-write-error?") ("\\scheme{i/o-write-error?}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s34" ("make-i/o-write-error") ("\\scheme{make-i/o-write-error}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s34" ("&i/o-write") ("\\scheme{\\&i/o-write}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s33" ("i/o-read-error?") ("\\scheme{i/o-read-error?}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s33" ("make-i/o-read-error") ("\\scheme{make-i/o-read-error}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s33" ("&i/o-read") ("\\scheme{\\&i/o-read}") "372" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s32" ("i/o-error?") ("\\scheme{i/o-error?}") "371" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s32" ("make-i/o-error") ("\\scheme{make-i/o-error}") "371" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s32" ("&i/o") ("\\scheme{\\&i/o}") "371" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s31" ("undefined-violation?") ("\\scheme{undefined-violation?}") "371" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s31" ("make-undefined-violation") ("\\scheme{make-undefined-violation}") "371" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s31" ("&undefined") ("\\scheme{\\&undefined}") "371" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s30" ("syntax-violation-subform") ("\\scheme{syntax-violation-subform}") "370" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s30" ("syntax-violation-form") ("\\scheme{syntax-violation-form}") "370" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s30" ("syntax-violation?") ("\\scheme{syntax-violation?}") "370" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s30" ("make-syntax-violation") ("\\scheme{make-syntax-violation}") "370" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s30" ("&syntax") ("\\scheme{\\&syntax}") "370" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s29" ("lexical-violation?") ("\\scheme{lexical-violation?}") "370" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s29" ("make-lexical-violation") ("\\scheme{make-lexical-violation}") "370" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s29" ("&lexical") ("\\scheme{\\&lexical}") "370" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s28" ("implementation-restriction-violation?") ("\\scheme{implementation-restriction-violation?}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s28" ("make-implementation-restriction-violation") ("\\scheme{make-implementation-restriction-violation}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s28" ("&implementation-restriction") ("\\scheme{\\&implementation-restriction}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s27" ("non-continuable-violation?") ("\\scheme{non-continuable-violation?}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s27" ("make-non-continuable-violation") ("\\scheme{make-non-continuable-violation}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s27" ("&non-continuable") ("\\scheme{\\&non-continuable}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s26" ("condition-who") ("\\scheme{condition-who}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s26" ("who-condition?") ("\\scheme{who-condition?}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s26" ("make-who-condition") ("\\scheme{make-who-condition}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s26" ("&who") ("\\scheme{\\&who}") "369" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s25" ("condition-irritants") ("\\scheme{condition-irritants}") "368" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s25" ("irritants-condition?") ("\\scheme{irritants-condition?}") "368" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s25" ("make-irritants-condition") ("\\scheme{make-irritants-condition}") "368" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s25" ("&irritants") ("\\scheme{\\&irritants}") "368" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s24" ("condition-message") ("\\scheme{condition-message}") "368" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s24" ("message-condition?") ("\\scheme{message-condition?}") "368" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s24" ("make-message-condition") ("\\scheme{make-message-condition}") "368" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s24" ("&message") ("\\scheme{\\&message}") "368" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s23" ("warning?") ("\\scheme{warning?}") "367" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s23" ("make-warning") ("\\scheme{make-warning}") "367" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s23" ("&warning") ("\\scheme{\\&warning}") "367" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s22" ("error?") ("\\scheme{error?}") "367" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s22" ("make-error") ("\\scheme{make-error}") "367" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s22" ("&error") ("\\scheme{\\&error}") "367" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s21" ("assertion-violation?") ("\\scheme{assertion-violation?}") "366" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s21" ("make-assertion-violation") ("\\scheme{make-assertion-violation}") "366" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s21" ("&assertion") ("\\scheme{\\&assertion}") "366" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s20" ("violation?") ("\\scheme{violation?}") "366" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s20" ("make-violation") ("\\scheme{make-violation}") "366" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s20" ("&violation") ("\\scheme{\\&violation}") "366" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s19" ("serious-condition?") ("\\scheme{serious-condition?}") "366" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s19" ("make-serious-condition") ("\\scheme{make-serious-condition}") "366" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s19" ("&serious") ("\\scheme{\\&serious}") "366" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s18" ("condition-accessor") ("\\scheme{condition-accessor}") "365" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s18" ("condition-predicate") ("\\scheme{condition-predicate}") "365" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s17" ("define-condition-type") ("\\scheme{define-condition-type}") "364" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s16" ("simple-conditions") ("\\scheme{simple-conditions}") "363" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s15" ("condition") ("\\scheme{condition}") "362" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s14" ("condition?") ("\\scheme{condition?}") "362" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s13" ("&condition") ("\\scheme{\\&condition}") "362" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s12" ("simple condition") ("simple condition") "362" "" "")
#(index-entry "./exceptions.html#./exceptions:s11" ("compound condition") ("compound condition") "362" "" "")
#(index-entry "./exceptions.html#./exceptions:s10" ("condition type") ("condition type") "361" "" "")
#(index-entry "./exceptions.html#./exceptions:s9" ("condition object") ("condition object") "361" "" "")
#(index-entry "./exceptions.html#./exceptions:s8" ("guard") ("\\scheme{guard}") "361" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s7" ("with-exception-handler") ("\\scheme{with-exception-handler}") "360" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s6" ("syntax-violation") ("\\scheme{syntax-violation}") "359" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s6" ("syntax-violation") ("\\scheme{syntax-violation}") "359" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s5" ("assert") ("\\scheme{assert}") "359" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s4" ("assertion-violation") ("\\scheme{assertion-violation}") "358" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s4" ("error") ("\\scheme{error}") "358" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s3" ("raise-continuable") ("\\scheme{raise-continuable}") "357" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s3" ("raise") ("\\scheme{raise}") "357" "emph" "")
#(index-entry "./exceptions.html#./exceptions:s2" ("current exception handler") ("current exception handler") "357" "" "")
#(index-entry "./exceptions.html#./exceptions:s1" ("conditions") ("conditions") "357" "" "")
#(index-entry "./exceptions.html#./exceptions:s0" ("exceptions") ("exceptions") "357" "" "")
#(index-entry "./libraries.html#./libraries:s18" ("exit") ("\\scheme{exit}") "350" "emph" "")
#(index-entry "./libraries.html#./libraries:s18" ("exit") ("\\scheme{exit}") "350" "emph" "")
#(index-entry "./libraries.html#./libraries:s17" ("command-line") ("\\scheme{command-line}") "350" "emph" "")
#(index-entry "./libraries.html#./libraries:s16" ("immutability of exports") ("immutability of exports") "349" "" "")
#(index-entry "./libraries.html#./libraries:s15" ("indirect exports") ("indirect exports") "349" "" "")
#(index-entry "./libraries.html#./libraries:s14" ("library body") ("library body") "348" "" "")
#(index-entry "./libraries.html#./libraries:s13" ("library version reference") ("library version reference") "347" "" "")
#(index-entry "./libraries.html#./libraries:s12" ("rename import set") ("\\scheme{rename} import set") "346" "" "")
#(index-entry "./libraries.html#./libraries:s11" ("prefix import set") ("\\scheme{prefix} import set") "346" "" "")
#(index-entry "./libraries.html#./libraries:s10" ("except import set") ("\\scheme{except} import set") "346" "" "")
#(index-entry "./libraries.html#./libraries:s9" ("only import set") ("\\scheme{only} import set") "346" "" "")
#(index-entry "./libraries.html#./libraries:s8" ("import spec") ("import spec") "346" "" "")
#(index-entry "./libraries.html#./libraries:s7" ("export level") ("export level") "345" "" "")
#(index-entry "./libraries.html#./libraries:s6" ("import level") ("import level") "345" "" "")
#(index-entry "./libraries.html#./libraries:s5" ("import spec") ("import spec") "345" "" "")
#(index-entry "./libraries.html#./libraries:s4" ("import") ("\\scheme{import}") "345" "" "")
#(index-entry "./libraries.html#./libraries:s3" ("export") ("\\scheme{export}") "345" "" "")
#(index-entry "./libraries.html#./libraries:s2" ("library version") ("library version") "344" "" "")
#(index-entry "./libraries.html#./libraries:s1" ("top-level programs") ("top-level programs") "343" "" "")
#(index-entry "./libraries.html#./libraries:s0" ("libraries") ("libraries") "343" "" "")
#(index-entry "./records.html#./records:s41" ("record-rtd") ("\\scheme{record-rtd}") "338" "emph" "")
#(index-entry "./records.html#./records:s40" ("record?") ("\\scheme{record?}") "338" "emph" "")
#(index-entry "./records.html#./records:s39" ("record-field-mutable?") ("\\scheme{record-field-mutable?}") "338" "emph" "")
#(index-entry "./records.html#./records:s38" ("record-type-field-names") ("\\scheme{record-type-field-names}") "337" "emph" "")
#(index-entry "./records.html#./records:s37" ("record-type-opaque?") ("\\scheme{record-type-opaque?}") "337" "emph" "")
#(index-entry "./records.html#./records:s37" ("record-type-sealed?") ("\\scheme{record-type-sealed?}") "337" "emph" "")
#(index-entry "./records.html#./records:s37" ("record-type-generative?") ("\\scheme{record-type-generative?}") "337" "emph" "")
#(index-entry "./records.html#./records:s36" ("record-type-uid") ("\\scheme{record-type-uid}") "336" "emph" "")
#(index-entry "./records.html#./records:s35" ("record-type-parent") ("\\scheme{record-type-parent}") "336" "emph" "")
#(index-entry "./records.html#./records:s34" ("record-type-name") ("\\scheme{record-type-name}") "336" "emph" "")
#(index-entry "./records.html#./records:s33" ("opaque record type") ("opaque record type") "336" "" "")
#(index-entry "./records.html#./records:s32" ("record-mutator") ("\\scheme{record-mutator}") "334" "emph" "")
#(index-entry "./records.html#./records:s31" ("record-accessor") ("\\scheme{record-accessor}") "334" "emph" "")
#(index-entry "./records.html#./records:s30" ("record-predicate") ("\\scheme{record-predicate}") "333" "emph" "")
#(index-entry "./records.html#./records:s29" ("record-constructor") ("\\scheme{record-constructor}") "333" "emph" "")
#(index-entry "./records.html#./records:s28" ("record-constructor-descriptor") ("\\scheme{record-constructor-descriptor}") "333" "emph" "")
#(index-entry "./records.html#./records:s28" ("record-type-descriptor") ("\\scheme{record-type-descriptor}") "333" "emph" "")
#(index-entry "./records.html#./records:s27" ("protocol for records") ("protocol for records") "332" "" "")
#(index-entry "./records.html#./records:s26" ("rcd") ("rcd") "332" "" "")
#(index-entry "./records.html#./records:s25" ("record-constructor descriptor") ("record-constructor descriptor") "332" "" "")
#(index-entry "./records.html#./records:s24" ("make-record-constructor-descriptor") ("\\scheme{make-record-constructor-descriptor}") "332" "emph" "")
#(index-entry "./records.html#./records:s23" ("record-type-descriptor?") ("\\scheme{record-type-descriptor?}") "332" "emph" "")
#(index-entry "./records.html#./records:s22" ("rtd") ("rtd") "331" "" "")
#(index-entry "./records.html#./records:s21" ("record-type descriptor") ("record-type descriptor") "331" "" "")
#(index-entry "./records.html#./records:s20" ("make-record-type-descriptor") ("\\scheme{make-record-type-descriptor}") "331" "emph" "")
#(index-entry "./records.html#./records:s19" ("make-record-type-descriptor") ("\\scheme{make-record-type-descriptor}") "331" "" "")
#(index-entry "./records.html#./records:s18" ("rtd") ("rtd") "331" "" "")
#(index-entry "./records.html#./records:s17" ("record-type descriptor") ("record-type descriptor") "331" "" "")
#(index-entry "./records.html#./records:s16" ("parent-rtd") ("\\scheme{parent-rtd}") "331" "emph" "")
#(index-entry "./records.html#./records:s16" ("nongenerative") ("\\scheme{nongenerative}") "331" "emph" "")
#(index-entry "./records.html#./records:s16" ("opaque") ("\\scheme{opaque}") "331" "emph" "")
#(index-entry "./records.html#./records:s16" ("sealed") ("\\scheme{sealed}") "331" "emph" "")
#(index-entry "./records.html#./records:s16" ("protocol") ("\\scheme{protocol}") "331" "emph" "")
#(index-entry "./records.html#./records:s16" ("parent") ("\\scheme{parent}") "331" "emph" "")
#(index-entry "./records.html#./records:s16" ("immutable") ("\\scheme{immutable}") "331" "emph" "")
#(index-entry "./records.html#./records:s16" ("mutable") ("\\scheme{mutable}") "331" "emph" "")
#(index-entry "./records.html#./records:s16" ("fields") ("\\scheme{fields}") "331" "emph" "")
#(index-entry "./records.html#./records:s15" ("opaque record type") ("opaque record type") "330" "" "")
#(index-entry "./records.html#./records:s14" ("sealed record type") ("sealed record type") "330" "" "")
#(index-entry "./records.html#./records:s13" ("define-record-type") ("\\scheme{define-record-type}") "328" "emph" "")
#(index-entry "./records.html#./records:s13" ("define-record-type") ("\\scheme{define-record-type}") "328" "emph" "")
#(index-entry "./records.html#./records:s12" ("default protocol") ("default protocol") "327" "" "")
#(index-entry "./records.html#./records:s11" ("protocol for records") ("protocol for records") "326" "" "")
#(index-entry "./records.html#./records:s10" ("child type") ("child type") "325" "" "")
#(index-entry "./records.html#./records:s9" ("parent type") ("parent type") "325" "" "")
#(index-entry "./records.html#./records:s8" ("inheritance in records") ("inheritance in records") "325" "" "")
#(index-entry "./records.html#./records:s7" ("record inheritance") ("record inheritance") "325" "" "")
#(index-entry "./records.html#./records:s6" ("record uid") ("record uid") "325" "" "")
#(index-entry "./records.html#./records:s5" ("nongenerative") ("nongenerative") "324" "" "")
#(index-entry "./records.html#./records:s4" ("generative") ("generative") "324" "" "")
#(index-entry "./records.html#./records:s3" ("record generativity") ("record generativity") "324" "" "")
#(index-entry "./records.html#./records:s2" ("make-record-type-descriptor") ("\\scheme{make-record-type-descriptor}") "323" "" "")
#(index-entry "./records.html#./records:s1" ("define-record-type") ("\\scheme{define-record-type}") "323" "" "")
#(index-entry "./records.html#./records:s0" ("records") ("records") "323" "" "")
#(index-entry "./syntax.html#./syntax:s71" ("datum->syntax") ("\\scheme{datum->syntax}") "320" "" "")
#(index-entry "./syntax.html#./syntax:s70" ("define-structure") ("\\scheme{define-structure}") "318" "" "")
#(index-entry "./syntax.html#./syntax:s69" ("structures") ("structures") "318" "" "")
#(index-entry "./syntax.html#./syntax:s68" ("identifier-syntax") ("\\scheme{identifier-syntax}") "317" "" "")
#(index-entry "./syntax.html#./syntax:s67" ("method") ("\\scheme{method}") "317" "" "")
#(index-entry "./syntax.html#./syntax:s66" ("object-oriented programming") ("object-oriented programming") "317" "" "")
#(index-entry "./syntax.html#./syntax:s65" ("datum->syntax") ("\\scheme{datum->syntax}") "317" "" "")
#(index-entry "./syntax.html#./syntax:s64" ("identifier-syntax") ("\\scheme{identifier-syntax}") "317" "" "")
#(index-entry "./syntax.html#./syntax:s63" ("x++") ("\\scheme{x++}") "316" "" "")
#(index-entry "./syntax.html#./syntax:s62" ("identifier-syntax") ("\\scheme{identifier-syntax}") "316" "" "")
#(index-entry "./syntax.html#./syntax:s61" ("define-integrable") ("\\scheme{define-integrable}") "315" "" "")
#(index-entry "./syntax.html#./syntax:s60" ("integrable procedures") ("integrable procedures") "315" "" "")
#(index-entry "./syntax.html#./syntax:s59" ("_ (underscore)") ("\\scheme{{\\schunderscore}} (underscore)") "315" "" "")
#(index-entry "./syntax.html#./syntax:s58" ("underscore (~_~)") ("underscore (~\\scheme{{\\schunderscore}}~)") "315" "" "")
#(index-entry "./syntax.html#./syntax:s57" ("let-syntax") ("\\scheme{let-syntax}") "314" "" "")
#(index-entry "./syntax.html#./syntax:s56" ("letrec-syntax") ("\\scheme{letrec-syntax}") "314" "" "")
#(index-entry "./syntax.html#./syntax:s55" ("sequence") ("\\scheme{sequence}") "313" "" "")
#(index-entry "./syntax.html#./syntax:s54" ("be-like-begin") ("\\scheme{be-like-begin}") "313" "" "")
#(index-entry "./syntax.html#./syntax:s53" ("do") ("\\scheme{do}") "312" "" "")
#(index-entry "./syntax.html#./syntax:s52" ("rec") ("\\scheme{rec}") "311" "" "")
#(index-entry "./syntax.html#./syntax:s51" ("let-values") ("\\scheme{let-values}") "310" "" "")
#(index-entry "./syntax.html#./syntax:s50" ("letrec") ("\\scheme{letrec}") "310" "" "")
#(index-entry "./syntax.html#./syntax:s49" ("generate-temporaries") ("\\scheme{generate-temporaries}") "310" "emph" "")
#(index-entry "./syntax.html#./syntax:s48" ("include") ("\\scheme{include}") "309" "" "")
#(index-entry "./syntax.html#./syntax:s47" ("break") ("\\scheme{break}") "308" "" "")
#(index-entry "./syntax.html#./syntax:s46" ("loop") ("\\scheme{loop}") "308" "" "")
#(index-entry "./syntax.html#./syntax:s45" ("datum->syntax") ("\\scheme{datum->syntax}") "308" "emph" "")
#(index-entry "./syntax.html#./syntax:s44" ("syntax->datum") ("\\scheme{syntax->datum}") "308" "emph" "")
#(index-entry "./syntax.html#./syntax:s43" ("identifier-syntax") ("\\scheme{identifier-syntax}") "307" "" "")
#(index-entry "./syntax.html#./syntax:s42" ("make-variable-transformer") ("\\scheme{make-variable-transformer}") "306" "emph" "")
#(index-entry "./syntax.html#./syntax:s41" ("case") ("\\scheme{case}") "306" "" "")
#(index-entry "./syntax.html#./syntax:s40" ("#,@ (unsyntax-splicing)") ("\\scheme{\\#,{\\schatsign}} (\\scheme{unsyntax-splicing})") "305" "emph" "")
#(index-entry "./syntax.html#./syntax:s40" ("unsyntax-splicing (~#,@~)") ("\\scheme{unsyntax-splicing} (~\\scheme{\\#,{\\schatsign}}~)") "305" "emph" "")
#(index-entry "./syntax.html#./syntax:s40" ("#, (unsyntax)") ("\\scheme{\\#,} (\\scheme{unsyntax})") "305" "emph" "")
#(index-entry "./syntax.html#./syntax:s40" ("unsyntax (~#,~)") ("\\scheme{unsyntax} (~\\scheme{\\#,}~)") "305" "emph" "")
#(index-entry "./syntax.html#./syntax:s40" ("#` (quasisyntax)") ("\\scheme{\\#`} (\\scheme{quasisyntax})") "305" "emph" "")
#(index-entry "./syntax.html#./syntax:s40" ("quasisyntax (~#`~)") ("\\scheme{quasisyntax} (~\\scheme{\\#`}~)") "305" "emph" "")
#(index-entry "./syntax.html#./syntax:s39" ("cond") ("\\scheme{cond}") "304" "" "")
#(index-entry "./syntax.html#./syntax:s38" ("with-syntax") ("\\scheme{with-syntax}") "304" "emph" "")
#(index-entry "./syntax.html#./syntax:s37" ("bound-identifier=?") ("\\scheme{bound-identifier=?}") "302" "emph" "")
#(index-entry "./syntax.html#./syntax:s37" ("free-identifier=?") ("\\scheme{free-identifier=?}") "302" "emph" "")
#(index-entry "./syntax.html#./syntax:s36" ("fenders") ("fenders") "301" "" "")
#(index-entry "./syntax.html#./syntax:s35" ("identifier?") ("\\scheme{identifier?}") "301" "emph" "")
#(index-entry "./syntax.html#./syntax:s34" ("syntax-rules") ("\\scheme{syntax-rules}") "300" "" "")
#(index-entry "./syntax.html#./syntax:s33" ("#' (syntax)") ("\\scheme{\\#'} (\\scheme{syntax})") "300" "emph" "")
#(index-entry "./syntax.html#./syntax:s33" ("syntax (~#'~)") ("\\scheme{syntax} (~\\scheme{\\#'}~)") "300" "emph" "")
#(index-entry "./syntax.html#./syntax:s32" ("pattern variables") ("pattern variables") "299" "" "")
#(index-entry "./syntax.html#./syntax:s31" ("fenders") ("fenders") "299" "" "")
#(index-entry "./syntax.html#./syntax:s30" ("syntax-case") ("\\scheme{syntax-case}") "299" "emph" "")
#(index-entry "./syntax.html#./syntax:s29" ("syntax object") ("syntax object") "298" "" "")
#(index-entry "./syntax.html#./syntax:s28" ("make-variable-transformer") ("\\scheme{make-variable-transformer}") "298" "" "")
#(index-entry "./syntax.html#./syntax:s27" ("identifier-syntax") ("\\scheme{identifier-syntax}") "297" "emph" "")
#(index-entry "./syntax.html#./syntax:s27" ("identifier-syntax") ("\\scheme{identifier-syntax}") "297" "emph" "")
#(index-entry "./syntax.html#./syntax:s26" ("...~(ellipsis)") ("\\scheme{{\\schdot}{\\schdot}{\\schdot}}~(ellipsis)") "297" "emph" "")
#(index-entry "./syntax.html#./syntax:s26" ("_~(underscore)") ("\\scheme{{\\schunderscore}}~(underscore)") "297" "emph" "")
#(index-entry "./syntax.html#./syntax:s25" ("_ (underscore)") ("\\scheme{{\\schunderscore}} (underscore)") "296" "" "")
#(index-entry "./syntax.html#./syntax:s24" ("underscore (~_~)") ("underscore (~\\scheme{{\\schunderscore}}~)") "296" "" "")
#(index-entry "./syntax.html#./syntax:s23" ("templates") ("templates") "295" "" "")
#(index-entry "./syntax.html#./syntax:s22" ("auxiliary keywords") ("auxiliary keywords") "294" "" "")
#(index-entry "./syntax.html#./syntax:s21" ("ellipsis (~...~)") ("ellipsis (~\\scheme{{\\schdot}{\\schdot}{\\schdot}}~)") "294" "" "")
#(index-entry "./syntax.html#./syntax:s20" ("...~(ellipsis)") ("\\scheme{{\\schdot}{\\schdot}{\\schdot}}~(ellipsis)") "294" "" "")
#(index-entry "./syntax.html#./syntax:s19" ("underscore~(_)") ("underscore~(\\scheme{{\\schunderscore}})") "294" "" "")
#(index-entry "./syntax.html#./syntax:s18" ("_~(underscore)") ("\\scheme{{\\schunderscore}}~(underscore)") "294" "" "")
#(index-entry "./syntax.html#./syntax:s17" ("pattern variable") ("pattern variable") "294" "" "")
#(index-entry "./syntax.html#./syntax:s16" ("patterns") ("patterns") "294" "" "")
#(index-entry "./syntax.html#./syntax:s15" ("literals") ("literals") "294" "" "")
#(index-entry "./syntax.html#./syntax:s14" ("syntax-rules") ("\\scheme{syntax-rules}") "294" "emph" "")
#(index-entry "./syntax.html#./syntax:s13" ("letrec-syntax") ("\\scheme{letrec-syntax}") "293" "emph" "")
#(index-entry "./syntax.html#./syntax:s13" ("let-syntax") ("\\scheme{let-syntax}") "293" "emph" "")
#(index-entry "./syntax.html#./syntax:s12" ("define-syntax") ("\\scheme{define-syntax}") "292" "emph" "")
#(index-entry "./syntax.html#./syntax:s11" ("keywords") ("keywords") "291" "" "")
#(index-entry "./syntax.html#./syntax:s10" ("make-variable-transformer") ("\\scheme{make-variable-transformer}") "291" "" "")
#(index-entry "./syntax.html#./syntax:s9" ("identifier-syntax") ("\\scheme{identifier-syntax}") "291" "" "")
#(index-entry "./syntax.html#./syntax:s8" ("syntax") ("\\scheme{syntax}") "291" "" "")
#(index-entry "./syntax.html#./syntax:s7" ("syntax-case") ("\\scheme{syntax-case}") "291" "" "")
#(index-entry "./syntax.html#./syntax:s6" ("syntax-rules") ("\\scheme{syntax-rules}") "291" "" "")
#(index-entry "./syntax.html#./syntax:s5" ("letrec-syntax") ("\\scheme{letrec-syntax}") "291" "" "")
#(index-entry "./syntax.html#./syntax:s4" ("let-syntax") ("\\scheme{let-syntax}") "291" "" "")
#(index-entry "./syntax.html#./syntax:s3" ("define-syntax") ("\\scheme{define-syntax}") "291" "" "")
#(index-entry "./syntax.html#./syntax:s2" ("macros") ("macros") "291" "" "")
#(index-entry "./syntax.html#./syntax:s1" ("syntactic forms") ("syntactic forms") "291" "" "")
#(index-entry "./syntax.html#./syntax:s0" ("syntactic extensions") ("syntactic extensions") "291" "" "")
#(index-entry "./io.html#./io:s96" ("utf32->string") ("\\scheme{utf32->string}") "288" "emph" "")
#(index-entry "./io.html#./io:s96" ("utf32->string") ("\\scheme{utf32->string}") "288" "emph" "")
#(index-entry "./io.html#./io:s96" ("utf16->string") ("\\scheme{utf16->string}") "288" "emph" "")
#(index-entry "./io.html#./io:s96" ("utf16->string") ("\\scheme{utf16->string}") "288" "emph" "")
#(index-entry "./io.html#./io:s95" ("utf8->string") ("\\scheme{utf8->string}") "287" "emph" "")
#(index-entry "./io.html#./io:s94" ("string->utf32") ("\\scheme{string->utf32}") "287" "emph" "")
#(index-entry "./io.html#./io:s94" ("string->utf32") ("\\scheme{string->utf32}") "287" "emph" "")
#(index-entry "./io.html#./io:s94" ("string->utf16") ("\\scheme{string->utf16}") "287" "emph" "")
#(index-entry "./io.html#./io:s94" ("string->utf16") ("\\scheme{string->utf16}") "287" "emph" "")
#(index-entry "./io.html#./io:s93" ("string->utf8") ("\\scheme{string->utf8}") "287" "emph" "")
#(index-entry "./io.html#./io:s92" ("string->bytevector") ("\\scheme{string->bytevector}") "287" "emph" "")
#(index-entry "./io.html#./io:s91" ("bytevector->string") ("\\scheme{bytevector->string}") "286" "emph" "")
#(index-entry "./io.html#./io:s90" ("delete-file") ("\\scheme{delete-file}") "286" "emph" "")
#(index-entry "./io.html#./io:s89" ("file-exists?") ("\\scheme{file-exists?}") "286" "emph" "")
#(index-entry "./io.html#./io:s88" ("close-output-port") ("\\scheme{close-output-port}") "285" "emph" "")
#(index-entry "./io.html#./io:s88" ("close-input-port") ("\\scheme{close-input-port}") "285" "emph" "")
#(index-entry "./io.html#./io:s87" ("newline") ("\\scheme{newline}") "285" "emph" "")
#(index-entry "./io.html#./io:s87" ("newline") ("\\scheme{newline}") "285" "emph" "")
#(index-entry "./io.html#./io:s86" ("write-char") ("\\scheme{write-char}") "285" "emph" "")
#(index-entry "./io.html#./io:s86" ("write-char") ("\\scheme{write-char}") "285" "emph" "")
#(index-entry "./io.html#./io:s85" ("display") ("\\scheme{display}") "285" "emph" "")
#(index-entry "./io.html#./io:s85" ("display") ("\\scheme{display}") "285" "emph" "")
#(index-entry "./io.html#./io:s84" ("write") ("\\scheme{write}") "284" "emph" "")
#(index-entry "./io.html#./io:s84" ("write") ("\\scheme{write}") "284" "emph" "")
#(index-entry "./io.html#./io:s83" ("peek-char") ("\\scheme{peek-char}") "284" "emph" "")
#(index-entry "./io.html#./io:s83" ("peek-char") ("\\scheme{peek-char}") "284" "emph" "")
#(index-entry "./io.html#./io:s82" ("read-char") ("\\scheme{read-char}") "284" "emph" "")
#(index-entry "./io.html#./io:s82" ("read-char") ("\\scheme{read-char}") "284" "emph" "")
#(index-entry "./io.html#./io:s81" ("read") ("\\scheme{read}") "284" "emph" "")
#(index-entry "./io.html#./io:s81" ("read") ("\\scheme{read}") "284" "emph" "")
#(index-entry "./io.html#./io:s80" ("with-output-to-file") ("\\scheme{with-output-to-file}") "283" "emph" "")
#(index-entry "./io.html#./io:s79" ("with-input-from-file") ("\\scheme{with-input-from-file}") "283" "emph" "")
#(index-entry "./io.html#./io:s78" ("call-with-output-file") ("\\scheme{call-with-output-file}") "282" "emph" "")
#(index-entry "./io.html#./io:s77" ("call-with-input-file") ("\\scheme{call-with-input-file}") "281" "emph" "")
#(index-entry "./io.html#./io:s76" ("open-output-file") ("\\scheme{open-output-file}") "281" "emph" "")
#(index-entry "./io.html#./io:s75" ("open-input-file") ("\\scheme{open-input-file}") "280" "emph" "")
#(index-entry "./io.html#./io:s74" ("flush-output-port") ("\\scheme{flush-output-port}") "280" "emph" "")
#(index-entry "./io.html#./io:s73" ("put-datum") ("\\scheme{put-datum}") "279" "emph" "")
#(index-entry "./io.html#./io:s72" ("put-string") ("\\scheme{put-string}") "279" "emph" "")
#(index-entry "./io.html#./io:s72" ("put-string") ("\\scheme{put-string}") "279" "emph" "")
#(index-entry "./io.html#./io:s72" ("put-string") ("\\scheme{put-string}") "279" "emph" "")
#(index-entry "./io.html#./io:s71" ("put-char") ("\\scheme{put-char}") "279" "emph" "")
#(index-entry "./io.html#./io:s70" ("put-bytevector") ("\\scheme{put-bytevector}") "279" "emph" "")
#(index-entry "./io.html#./io:s70" ("put-bytevector") ("\\scheme{put-bytevector}") "279" "emph" "")
#(index-entry "./io.html#./io:s70" ("put-bytevector") ("\\scheme{put-bytevector}") "279" "emph" "")
#(index-entry "./io.html#./io:s69" ("put-u8") ("\\scheme{put-u8}") "278" "emph" "")
#(index-entry "./io.html#./io:s68" ("port-eof?") ("\\scheme{port-eof?}") "278" "emph" "")
#(index-entry "./io.html#./io:s67" ("get-datum") ("\\scheme{get-datum}") "278" "emph" "")
#(index-entry "./io.html#./io:s66" ("get-line") ("\\scheme{get-line}") "277" "emph" "")
#(index-entry "./io.html#./io:s65" ("get-string-all") ("\\scheme{get-string-all}") "277" "emph" "")
#(index-entry "./io.html#./io:s64" ("get-string-n!") ("\\scheme{get-string-n!}") "276" "emph" "")
#(index-entry "./io.html#./io:s63" ("get-string-n") ("\\scheme{get-string-n}") "276" "emph" "")
#(index-entry "./io.html#./io:s62" ("lookahead-char") ("\\scheme{lookahead-char}") "275" "emph" "")
#(index-entry "./io.html#./io:s61" ("get-char") ("\\scheme{get-char}") "275" "emph" "")
#(index-entry "./io.html#./io:s60" ("get-bytevector-all") ("\\scheme{get-bytevector-all}") "275" "emph" "")
#(index-entry "./io.html#./io:s59" ("get-bytevector-some") ("\\scheme{get-bytevector-some}") "275" "emph" "")
#(index-entry "./io.html#./io:s58" ("get-bytevector-n!") ("\\scheme{get-bytevector-n!}") "274" "emph" "")
#(index-entry "./io.html#./io:s57" ("get-bytevector-n") ("\\scheme{get-bytevector-n}") "274" "emph" "")
#(index-entry "./io.html#./io:s56" ("lookahead-u8") ("\\scheme{lookahead-u8}") "274" "emph" "")
#(index-entry "./io.html#./io:s55" ("get-u8") ("\\scheme{get-u8}") "274" "emph" "")
#(index-entry "./io.html#./io:s54" ("eof-object") ("\\scheme{eof-object}") "273" "emph" "")
#(index-entry "./io.html#./io:s53" ("eof-object?") ("\\scheme{eof-object?}") "273" "emph" "")
#(index-entry "./io.html#./io:s52" ("output-port-buffer-mode") ("\\scheme{output-port-buffer-mode}") "273" "emph" "")
#(index-entry "./io.html#./io:s51" ("call-with-port") ("\\scheme{call-with-port}") "272" "emph" "")
#(index-entry "./io.html#./io:s50" ("port-has-set-port-position!?") ("\\scheme{port-has-set-port-position!?}") "272" "emph" "")
#(index-entry "./io.html#./io:s50" ("set-port-position!") ("\\scheme{set-port-position!}") "272" "emph" "")
#(index-entry "./io.html#./io:s49" ("port-has-port-position?") ("\\scheme{port-has-port-position?}") "271" "emph" "")
#(index-entry "./io.html#./io:s49" ("port-position") ("\\scheme{port-position}") "271" "emph" "")
#(index-entry "./io.html#./io:s48" ("port-transcoder") ("\\scheme{port-transcoder}") "271" "emph" "")
#(index-entry "./io.html#./io:s47" ("transcoded-port") ("\\scheme{transcoded-port}") "271" "emph" "")
#(index-entry "./io.html#./io:s46" ("close-port") ("\\scheme{close-port}") "270" "emph" "")
#(index-entry "./io.html#./io:s45" ("textual-port?") ("\\scheme{textual-port?}") "270" "emph" "")
#(index-entry "./io.html#./io:s45" ("binary-port?") ("\\scheme{binary-port?}") "270" "emph" "")
#(index-entry "./io.html#./io:s44" ("output-port?") ("\\scheme{output-port?}") "270" "emph" "")
#(index-entry "./io.html#./io:s44" ("input-port?") ("\\scheme{input-port?}") "270" "emph" "")
#(index-entry "./io.html#./io:s43" ("port?") ("\\scheme{port?}") "270" "emph" "")
#(index-entry "./io.html#./io:s42" ("make-custom-textual-input/output-port") ("\\scheme{make-custom-textual-input/output-port}") "268" "emph" "")
#(index-entry "./io.html#./io:s42" ("make-custom-textual-output-port") ("\\scheme{make-custom-textual-output-port}") "268" "emph" "")
#(index-entry "./io.html#./io:s42" ("make-custom-textual-input-port") ("\\scheme{make-custom-textual-input-port}") "268" "emph" "")
#(index-entry "./io.html#./io:s41" ("make-custom-binary-input/output-port") ("\\scheme{make-custom-binary-input/output-port}") "267" "emph" "")
#(index-entry "./io.html#./io:s41" ("make-custom-binary-output-port") ("\\scheme{make-custom-binary-output-port}") "267" "emph" "")
#(index-entry "./io.html#./io:s41" ("make-custom-binary-input-port") ("\\scheme{make-custom-binary-input-port}") "267" "emph" "")
#(index-entry "./io.html#./io:s40" ("object->string") ("\\scheme{object->string}") "267" "" "")
#(index-entry "./io.html#./io:s39" ("call-with-string-output-port") ("\\scheme{call-with-string-output-port}") "267" "emph" "")
#(index-entry "./io.html#./io:s38" ("call-with-bytevector-output-port") ("\\scheme{call-with-bytevector-output-port}") "266" "emph" "")
#(index-entry "./io.html#./io:s38" ("call-with-bytevector-output-port") ("\\scheme{call-with-bytevector-output-port}") "266" "emph" "")
#(index-entry "./io.html#./io:s37" ("open-string-output-port") ("\\scheme{open-string-output-port}") "266" "emph" "")
#(index-entry "./io.html#./io:s36" ("open-bytevector-output-port") ("\\scheme{open-bytevector-output-port}") "265" "emph" "")
#(index-entry "./io.html#./io:s36" ("open-bytevector-output-port") ("\\scheme{open-bytevector-output-port}") "265" "emph" "")
#(index-entry "./io.html#./io:s35" ("open-string-input-port") ("\\scheme{open-string-input-port}") "265" "emph" "")
#(index-entry "./io.html#./io:s34" ("open-bytevector-input-port") ("\\scheme{open-bytevector-input-port}") "264" "emph" "")
#(index-entry "./io.html#./io:s34" ("open-bytevector-input-port") ("\\scheme{open-bytevector-input-port}") "264" "emph" "")
#(index-entry "./io.html#./io:s33" ("standard-error-port") ("\\scheme{standard-error-port}") "264" "emph" "")
#(index-entry "./io.html#./io:s33" ("standard-output-port") ("\\scheme{standard-output-port}") "264" "emph" "")
#(index-entry "./io.html#./io:s33" ("standard-input-port") ("\\scheme{standard-input-port}") "264" "emph" "")
#(index-entry "./io.html#./io:s32" ("current-error-port") ("\\scheme{current-error-port}") "263" "emph" "")
#(index-entry "./io.html#./io:s32" ("current-output-port") ("\\scheme{current-output-port}") "263" "emph" "")
#(index-entry "./io.html#./io:s32" ("current-input-port") ("\\scheme{current-input-port}") "263" "emph" "")
#(index-entry "./io.html#./io:s31" ("open-file-input/output-port") ("\\scheme{open-file-input/output-port}") "263" "emph" "")
#(index-entry "./io.html#./io:s31" ("open-file-input/output-port") ("\\scheme{open-file-input/output-port}") "263" "emph" "")
#(index-entry "./io.html#./io:s31" ("open-file-input/output-port") ("\\scheme{open-file-input/output-port}") "263" "emph" "")
#(index-entry "./io.html#./io:s31" ("open-file-input/output-port") ("\\scheme{open-file-input/output-port}") "263" "emph" "")
#(index-entry "./io.html#./io:s30" ("open-file-output-port") ("\\scheme{open-file-output-port}") "262" "emph" "")
#(index-entry "./io.html#./io:s30" ("open-file-output-port") ("\\scheme{open-file-output-port}") "262" "emph" "")
#(index-entry "./io.html#./io:s30" ("open-file-output-port") ("\\scheme{open-file-output-port}") "262" "emph" "")
#(index-entry "./io.html#./io:s30" ("open-file-output-port") ("\\scheme{open-file-output-port}") "262" "emph" "")
#(index-entry "./io.html#./io:s29" ("open-file-input-port") ("\\scheme{open-file-input-port}") "262" "emph" "")
#(index-entry "./io.html#./io:s29" ("open-file-input-port") ("\\scheme{open-file-input-port}") "262" "emph" "")
#(index-entry "./io.html#./io:s29" ("open-file-input-port") ("\\scheme{open-file-input-port}") "262" "emph" "")
#(index-entry "./io.html#./io:s29" ("open-file-input-port") ("\\scheme{open-file-input-port}") "262" "emph" "")
#(index-entry "./io.html#./io:s28" ("buffer-mode?") ("\\scheme{buffer-mode?}") "262" "emph" "")
#(index-entry "./io.html#./io:s27" ("buffer-mode") ("\\scheme{buffer-mode}") "261" "emph" "")
#(index-entry "./io.html#./io:s26" ("file-options") ("\\scheme{file-options}") "261" "emph" "")
#(index-entry "./io.html#./io:s25" ("error-handling-mode") ("\\scheme{error-handling-mode}") "260" "emph" "")
#(index-entry "./io.html#./io:s24" ("native-eol-style") ("\\scheme{native-eol-style}") "260" "emph" "")
#(index-entry "./io.html#./io:s23" ("eol-style") ("\\scheme{eol-style}") "259" "emph" "")
#(index-entry "./io.html#./io:s22" ("utf-16-codec") ("\\scheme{utf-16-codec}") "259" "emph" "")
#(index-entry "./io.html#./io:s22" ("utf-8-codec") ("\\scheme{utf-8-codec}") "259" "emph" "")
#(index-entry "./io.html#./io:s22" ("latin-1-codec") ("\\scheme{latin-1-codec}") "259" "emph" "")
#(index-entry "./io.html#./io:s21" ("native-transcoder") ("\\scheme{native-transcoder}") "259" "emph" "")
#(index-entry "./io.html#./io:s20" ("transcoder-error-handling-mode") ("\\scheme{transcoder-error-handling-mode}") "259" "emph" "")
#(index-entry "./io.html#./io:s20" ("transcoder-eol-style") ("\\scheme{transcoder-eol-style}") "259" "emph" "")
#(index-entry "./io.html#./io:s20" ("transcoder-codec") ("\\scheme{transcoder-codec}") "259" "emph" "")
#(index-entry "./io.html#./io:s19" ("make-transcoder") ("\\scheme{make-transcoder}") "259" "emph" "")
#(index-entry "./io.html#./io:s19" ("make-transcoder") ("\\scheme{make-transcoder}") "259" "emph" "")
#(index-entry "./io.html#./io:s19" ("make-transcoder") ("\\scheme{make-transcoder}") "259" "emph" "")
#(index-entry "./io.html#./io:s18" ("line buffering") ("line buffering") "258" "" "")
#(index-entry "./io.html#./io:s17" ("block buffering") ("block buffering") "258" "" "")
#(index-entry "./io.html#./io:s16" ("buffer modes") ("buffer modes") "258" "" "")
#(index-entry "./io.html#./io:s15" ("error handling mode") ("error handling mode") "258" "" "")
#(index-entry "./io.html#./io:s14" ("eol style") ("eol style") "257" "" "")
#(index-entry "./io.html#./io:s13" ("utf-16") ("utf-16") "257" "" "")
#(index-entry "./io.html#./io:s12" ("utf-8") ("utf-8") "257" "" "")
#(index-entry "./io.html#./io:s11" ("latin-1") ("latin-1") "257" "" "")
#(index-entry "./io.html#./io:s10" ("codec") ("codec") "257" "" "")
#(index-entry "./io.html#./io:s9" ("transcoder") ("transcoder") "257" "" "")
#(index-entry "./io.html#./io:s8" ("octet") ("octet") "257" "" "")
#(index-entry "./io.html#./io:s7" ("textual port") ("textual port") "257" "" "")
#(index-entry "./io.html#./io:s6" ("binary port") ("binary port") "257" "" "")
#(index-entry "./io.html#./io:s5" ("eof-object?") ("\\scheme{eof-object?}") "257" "" "")
#(index-entry "./io.html#./io:s4" ("eof object") ("eof object") "257" "" "")
#(index-entry "./io.html#./io:s3" ("file") ("file") "257" "" "")
#(index-entry "./io.html#./io:s2" ("output port") ("output port") "257" "" "")
#(index-entry "./io.html#./io:s1" ("input port") ("input port") "257" "" "")
#(index-entry "./io.html#./io:s0" ("port") ("port") "257" "" "")
#(index-entry "./objects.html#./objects:s301" ("enum-set-indexer") ("\\scheme{enum-set-indexer}") "254" "emph" "")
#(index-entry "./objects.html#./objects:s300" ("enum-set-projection") ("\\scheme{enum-set-projection}") "254" "emph" "")
#(index-entry "./objects.html#./objects:s299" ("enum-set-complement") ("\\scheme{enum-set-complement}") "254" "emph" "")
#(index-entry "./objects.html#./objects:s298" ("enum-set-difference") ("\\scheme{enum-set-difference}") "253" "emph" "")
#(index-entry "./objects.html#./objects:s298" ("enum-set-intersection") ("\\scheme{enum-set-intersection}") "253" "emph" "")
#(index-entry "./objects.html#./objects:s298" ("enum-set-union") ("\\scheme{enum-set-union}") "253" "emph" "")
#(index-entry "./objects.html#./objects:s297" ("enum-set-member?") ("\\scheme{enum-set-member?}") "253" "emph" "")
#(index-entry "./objects.html#./objects:s296" ("enum-set=?") ("\\scheme{enum-set=?}") "252" "emph" "")
#(index-entry "./objects.html#./objects:s295" ("enum-set-subset?") ("\\scheme{enum-set-subset?}") "252" "emph" "")
#(index-entry "./objects.html#./objects:s294" ("enum-set->list") ("\\scheme{enum-set->list}") "252" "emph" "")
#(index-entry "./objects.html#./objects:s293" ("enum-set-universe") ("\\scheme{enum-set-universe}") "252" "emph" "")
#(index-entry "./objects.html#./objects:s292" ("enum-set-constructor") ("\\scheme{enum-set-constructor}") "251" "emph" "")
#(index-entry "./objects.html#./objects:s291" ("make-enumeration") ("\\scheme{make-enumeration}") "251" "emph" "")
#(index-entry "./objects.html#./objects:s290" ("define-enumeration") ("\\scheme{define-enumeration}") "250" "emph" "")
#(index-entry "./objects.html#./objects:s289" ("hashtable-entries") ("\\scheme{hashtable-entries}") "250" "emph" "")
#(index-entry "./objects.html#./objects:s288" ("hashtable-keys") ("\\scheme{hashtable-keys}") "249" "emph" "")
#(index-entry "./objects.html#./objects:s287" ("hashtable-clear!") ("\\scheme{hashtable-clear!}") "249" "emph" "")
#(index-entry "./objects.html#./objects:s287" ("hashtable-clear!") ("\\scheme{hashtable-clear!}") "249" "emph" "")
#(index-entry "./objects.html#./objects:s286" ("hashtable-copy") ("\\scheme{hashtable-copy}") "248" "emph" "")
#(index-entry "./objects.html#./objects:s286" ("hashtable-copy") ("\\scheme{hashtable-copy}") "248" "emph" "")
#(index-entry "./objects.html#./objects:s285" ("hashtable-size") ("\\scheme{hashtable-size}") "248" "emph" "")
#(index-entry "./objects.html#./objects:s284" ("hashtable-delete!") ("\\scheme{hashtable-delete!}") "248" "emph" "")
#(index-entry "./objects.html#./objects:s283" ("hashtable-update!") ("\\scheme{hashtable-update!}") "247" "emph" "")
#(index-entry "./objects.html#./objects:s282" ("hashtable-contains?") ("\\scheme{hashtable-contains?}") "246" "emph" "")
#(index-entry "./objects.html#./objects:s281" ("hashtable-ref") ("\\scheme{hashtable-ref}") "246" "emph" "")
#(index-entry "./objects.html#./objects:s280" ("hashtable-set!") ("\\scheme{hashtable-set!}") "246" "emph" "")
#(index-entry "./objects.html#./objects:s279" ("symbol-hash") ("\\scheme{symbol-hash}") "245" "emph" "")
#(index-entry "./objects.html#./objects:s279" ("string-ci-hash") ("\\scheme{string-ci-hash}") "245" "emph" "")
#(index-entry "./objects.html#./objects:s279" ("string-hash") ("\\scheme{string-hash}") "245" "emph" "")
#(index-entry "./objects.html#./objects:s279" ("equal-hash") ("\\scheme{equal-hash}") "245" "emph" "")
#(index-entry "./objects.html#./objects:s278" ("hashtable-equivalence-function") ("\\scheme{hashtable-equivalence-function}") "245" "emph" "")
#(index-entry "./objects.html#./objects:s278" ("hashtable-hash-function") ("\\scheme{hashtable-hash-function}") "245" "emph" "")
#(index-entry "./objects.html#./objects:s277" ("hashtable-mutable?") ("\\scheme{hashtable-mutable?}") "245" "emph" "")
#(index-entry "./objects.html#./objects:s276" ("make-hashtable") ("\\scheme{make-hashtable}") "244" "emph" "")
#(index-entry "./objects.html#./objects:s276" ("make-hashtable") ("\\scheme{make-hashtable}") "244" "emph" "")
#(index-entry "./objects.html#./objects:s275" ("make-eqv-hashtable") ("\\scheme{make-eqv-hashtable}") "244" "emph" "")
#(index-entry "./objects.html#./objects:s275" ("make-eqv-hashtable") ("\\scheme{make-eqv-hashtable}") "244" "emph" "")
#(index-entry "./objects.html#./objects:s274" ("make-eq-hashtable") ("\\scheme{make-eq-hashtable}") "243" "emph" "")
#(index-entry "./objects.html#./objects:s274" ("make-eq-hashtable") ("\\scheme{make-eq-hashtable}") "243" "emph" "")
#(index-entry "./objects.html#./objects:s273" ("association list") ("association list") "243" "" "")
#(index-entry "./objects.html#./objects:s272" ("hashtables") ("hashtables") "243" "" "")
#(index-entry "./objects.html#./objects:s271" ("boolean=?") ("\\scheme{boolean=?}") "243" "emph" "")
#(index-entry "./objects.html#./objects:s270" ("symbol->string") ("\\scheme{symbol->string}") "242" "emph" "")
#(index-entry "./objects.html#./objects:s269" ("string->symbol") ("\\scheme{string->symbol}") "242" "emph" "")
#(index-entry "./objects.html#./objects:s268" ("symbol=?") ("\\scheme{symbol=?}") "242" "emph" "")
#(index-entry "./objects.html#./objects:s267" ("symbol table") ("symbol table") "241" "" "")
#(index-entry "./objects.html#./objects:s266" ("symbols") ("symbols") "241" "" "")
#(index-entry "./objects.html#./objects:s265" ("bytevector-ieee-double-set!") ("\\scheme{bytevector-ieee-double-set!}") "240" "emph" "")
#(index-entry "./objects.html#./objects:s265" ("bytevector-ieee-single-set!") ("\\scheme{bytevector-ieee-single-set!}") "240" "emph" "")
#(index-entry "./objects.html#./objects:s264" ("bytevector-ieee-double-ref") ("\\scheme{bytevector-ieee-double-ref}") "240" "emph" "")
#(index-entry "./objects.html#./objects:s264" ("bytevector-ieee-single-ref") ("\\scheme{bytevector-ieee-single-ref}") "240" "emph" "")
#(index-entry "./objects.html#./objects:s263" ("bytevector-ieee-double-native-set!") ("\\scheme{bytevector-ieee-double-native-set!}") "239" "emph" "")
#(index-entry "./objects.html#./objects:s263" ("bytevector-ieee-single-native-set!") ("\\scheme{bytevector-ieee-single-native-set!}") "239" "emph" "")
#(index-entry "./objects.html#./objects:s262" ("bytevector-ieee-double-native-ref") ("\\scheme{bytevector-ieee-double-native-ref}") "239" "emph" "")
#(index-entry "./objects.html#./objects:s262" ("bytevector-ieee-single-native-ref") ("\\scheme{bytevector-ieee-single-native-ref}") "239" "emph" "")
#(index-entry "./objects.html#./objects:s261" ("sint-list->bytevector") ("\\scheme{sint-list->bytevector}") "239" "emph" "")
#(index-entry "./objects.html#./objects:s261" ("uint-list->bytevector") ("\\scheme{uint-list->bytevector}") "239" "emph" "")
#(index-entry "./objects.html#./objects:s260" ("bytevector->sint-list") ("\\scheme{bytevector->sint-list}") "238" "emph" "")
#(index-entry "./objects.html#./objects:s260" ("bytevector->uint-list") ("\\scheme{bytevector->uint-list}") "238" "emph" "")
#(index-entry "./objects.html#./objects:s259" ("bytevector-sint-set!") ("\\scheme{bytevector-sint-set!}") "238" "emph" "")
#(index-entry "./objects.html#./objects:s259" ("bytevector-uint-set!") ("\\scheme{bytevector-uint-set!}") "238" "emph" "")
#(index-entry "./objects.html#./objects:s258" ("bytevector-sint-ref") ("\\scheme{bytevector-sint-ref}") "237" "emph" "")
#(index-entry "./objects.html#./objects:s258" ("bytevector-uint-ref") ("\\scheme{bytevector-uint-ref}") "237" "emph" "")
#(index-entry "./objects.html#./objects:s257" ("bytevector-s64-set!") ("\\scheme{bytevector-s64-set!}") "236" "emph" "")
#(index-entry "./objects.html#./objects:s257" ("bytevector-u64-set!") ("\\scheme{bytevector-u64-set!}") "236" "emph" "")
#(index-entry "./objects.html#./objects:s257" ("bytevector-s32-set!") ("\\scheme{bytevector-s32-set!}") "236" "emph" "")
#(index-entry "./objects.html#./objects:s257" ("bytevector-u32-set!") ("\\scheme{bytevector-u32-set!}") "236" "emph" "")
#(index-entry "./objects.html#./objects:s257" ("bytevector-s16-set!") ("\\scheme{bytevector-s16-set!}") "236" "emph" "")
#(index-entry "./objects.html#./objects:s257" ("bytevector-u16-set!") ("\\scheme{bytevector-u16-set!}") "236" "emph" "")
#(index-entry "./objects.html#./objects:s256" ("bytevector-s64-ref") ("\\scheme{bytevector-s64-ref}") "235" "emph" "")
#(index-entry "./objects.html#./objects:s256" ("bytevector-u64-ref") ("\\scheme{bytevector-u64-ref}") "235" "emph" "")
#(index-entry "./objects.html#./objects:s256" ("bytevector-s32-ref") ("\\scheme{bytevector-s32-ref}") "235" "emph" "")
#(index-entry "./objects.html#./objects:s256" ("bytevector-u32-ref") ("\\scheme{bytevector-u32-ref}") "235" "emph" "")
#(index-entry "./objects.html#./objects:s256" ("bytevector-s16-ref") ("\\scheme{bytevector-s16-ref}") "235" "emph" "")
#(index-entry "./objects.html#./objects:s256" ("bytevector-u16-ref") ("\\scheme{bytevector-u16-ref}") "235" "emph" "")
#(index-entry "./objects.html#./objects:s255" ("bytevector-s64-native-set!") ("\\scheme{bytevector-s64-native-set!}") "233" "emph" "")
#(index-entry "./objects.html#./objects:s255" ("bytevector-u64-native-set!") ("\\scheme{bytevector-u64-native-set!}") "233" "emph" "")
#(index-entry "./objects.html#./objects:s255" ("bytevector-s32-native-set!") ("\\scheme{bytevector-s32-native-set!}") "233" "emph" "")
#(index-entry "./objects.html#./objects:s255" ("bytevector-u32-native-set!") ("\\scheme{bytevector-u32-native-set!}") "233" "emph" "")
#(index-entry "./objects.html#./objects:s255" ("bytevector-s16-native-set!") ("\\scheme{bytevector-s16-native-set!}") "233" "emph" "")
#(index-entry "./objects.html#./objects:s255" ("bytevector-u16-native-set!") ("\\scheme{bytevector-u16-native-set!}") "233" "emph" "")
#(index-entry "./objects.html#./objects:s254" ("bytevector-s64-native-ref") ("\\scheme{bytevector-s64-native-ref}") "232" "emph" "")
#(index-entry "./objects.html#./objects:s254" ("bytevector-u64-native-ref") ("\\scheme{bytevector-u64-native-ref}") "232" "emph" "")
#(index-entry "./objects.html#./objects:s254" ("bytevector-s32-native-ref") ("\\scheme{bytevector-s32-native-ref}") "232" "emph" "")
#(index-entry "./objects.html#./objects:s254" ("bytevector-u32-native-ref") ("\\scheme{bytevector-u32-native-ref}") "232" "emph" "")
#(index-entry "./objects.html#./objects:s254" ("bytevector-s16-native-ref") ("\\scheme{bytevector-s16-native-ref}") "232" "emph" "")
#(index-entry "./objects.html#./objects:s254" ("bytevector-u16-native-ref") ("\\scheme{bytevector-u16-native-ref}") "232" "emph" "")
#(index-entry "./objects.html#./objects:s253" ("u8-list->bytevector") ("\\scheme{u8-list->bytevector}") "232" "emph" "")
#(index-entry "./objects.html#./objects:s252" ("bytevector->u8-list") ("\\scheme{bytevector->u8-list}") "232" "emph" "")
#(index-entry "./objects.html#./objects:s251" ("bytevector-s8-set!") ("\\scheme{bytevector-s8-set!}") "231" "emph" "")
#(index-entry "./objects.html#./objects:s250" ("bytevector-u8-set!") ("\\scheme{bytevector-u8-set!}") "231" "emph" "")
#(index-entry "./objects.html#./objects:s249" ("bytevector-s8-ref") ("\\scheme{bytevector-s8-ref}") "231" "emph" "")
#(index-entry "./objects.html#./objects:s248" ("bytevector-u8-ref") ("\\scheme{bytevector-u8-ref}") "230" "emph" "")
#(index-entry "./objects.html#./objects:s247" ("bytevector-copy!") ("\\scheme{bytevector-copy!}") "230" "emph" "")
#(index-entry "./objects.html#./objects:s246" ("bytevector-copy") ("\\scheme{bytevector-copy}") "229" "emph" "")
#(index-entry "./objects.html#./objects:s245" ("bytevector-fill!") ("\\scheme{bytevector-fill!}") "229" "emph" "")
#(index-entry "./objects.html#./objects:s244" ("bytevector=?") ("\\scheme{bytevector=?}") "229" "emph" "")
#(index-entry "./objects.html#./objects:s243" ("bytevector-length") ("\\scheme{bytevector-length}") "229" "emph" "")
#(index-entry "./objects.html#./objects:s242" ("make-bytevector") ("\\scheme{make-bytevector}") "228" "emph" "")
#(index-entry "./objects.html#./objects:s242" ("make-bytevector") ("\\scheme{make-bytevector}") "228" "emph" "")
#(index-entry "./objects.html#./objects:s241" ("native-endianness") ("\\scheme{native-endianness}") "228" "emph" "")
#(index-entry "./objects.html#./objects:s240" ("endianness") ("\\scheme{endianness}") "228" "emph" "")
#(index-entry "./objects.html#./objects:s239" ("vector-sort!") ("\\scheme{vector-sort!}") "226" "emph" "")
#(index-entry "./objects.html#./objects:s239" ("vector-sort") ("\\scheme{vector-sort}") "226" "emph" "")
#(index-entry "./objects.html#./objects:s238" ("list->vector") ("\\scheme{list->vector}") "226" "emph" "")
#(index-entry "./objects.html#./objects:s237" ("vector->list") ("\\scheme{vector->list}") "225" "emph" "")
#(index-entry "./objects.html#./objects:s236" ("vector-fill!") ("\\scheme{vector-fill!}") "225" "emph" "")
#(index-entry "./objects.html#./objects:s235" ("vector-set!") ("\\scheme{vector-set!}") "225" "emph" "")
#(index-entry "./objects.html#./objects:s234" ("vector-ref") ("\\scheme{vector-ref}") "224" "emph" "")
#(index-entry "./objects.html#./objects:s233" ("vector-length") ("\\scheme{vector-length}") "224" "emph" "")
#(index-entry "./objects.html#./objects:s232" ("make-vector") ("\\scheme{make-vector}") "224" "emph" "")
#(index-entry "./objects.html#./objects:s232" ("make-vector") ("\\scheme{make-vector}") "224" "emph" "")
#(index-entry "./objects.html#./objects:s231" ("vector") ("\\scheme{vector}") "224" "emph" "")
#(index-entry "./objects.html#./objects:s230" ("vectors") ("vectors") "223" "" "")
#(index-entry "./objects.html#./objects:s229" ("list->string") ("\\scheme{list->string}") "223" "emph" "")
#(index-entry "./objects.html#./objects:s228" ("string->list") ("\\scheme{string->list}") "222" "emph" "")
#(index-entry "./objects.html#./objects:s227" ("string-normalize-nfkc") ("\\scheme{string-normalize-nfkc}") "222" "emph" "")
#(index-entry "./objects.html#./objects:s227" ("string-normalize-nfc") ("\\scheme{string-normalize-nfc}") "222" "emph" "")
#(index-entry "./objects.html#./objects:s227" ("string-normalize-nfkd") ("\\scheme{string-normalize-nfkd}") "222" "emph" "")
#(index-entry "./objects.html#./objects:s227" ("string-normalize-nfd") ("\\scheme{string-normalize-nfd}") "222" "emph" "")
#(index-entry "./objects.html#./objects:s226" ("string-titlecase") ("\\scheme{string-titlecase}") "221" "emph" "")
#(index-entry "./objects.html#./objects:s226" ("string-foldcase") ("\\scheme{string-foldcase}") "221" "emph" "")
#(index-entry "./objects.html#./objects:s226" ("string-downcase") ("\\scheme{string-downcase}") "221" "emph" "")
#(index-entry "./objects.html#./objects:s226" ("string-upcase") ("\\scheme{string-upcase}") "221" "emph" "")
#(index-entry "./objects.html#./objects:s225" ("string-fill!") ("\\scheme{string-fill!}") "220" "emph" "")
#(index-entry "./objects.html#./objects:s224" ("substring") ("\\scheme{substring}") "220" "emph" "")
#(index-entry "./objects.html#./objects:s223" ("string-append") ("\\scheme{string-append}") "219" "emph" "")
#(index-entry "./objects.html#./objects:s222" ("string-copy") ("\\scheme{string-copy}") "219" "emph" "")
#(index-entry "./objects.html#./objects:s221" ("string-set!") ("\\scheme{string-set!}") "219" "emph" "")
#(index-entry "./objects.html#./objects:s220" ("string-ref") ("\\scheme{string-ref}") "218" "emph" "")
#(index-entry "./objects.html#./objects:s219" ("string-length") ("\\scheme{string-length}") "218" "emph" "")
#(index-entry "./objects.html#./objects:s218" ("make-string") ("\\scheme{make-string}") "218" "emph" "")
#(index-entry "./objects.html#./objects:s218" ("make-string") ("\\scheme{make-string}") "218" "emph" "")
#(index-entry "./objects.html#./objects:s217" ("string") ("\\scheme{string}") "218" "emph" "")
#(index-entry "./objects.html#./objects:s216" ("string-ci>=?") ("\\scheme{string-ci>=?}") "217" "emph" "")
#(index-entry "./objects.html#./objects:s216" ("string-ci<=?") ("\\scheme{string-ci<=?}") "217" "emph" "")
#(index-entry "./objects.html#./objects:s216" ("string-ci>?") ("\\scheme{string-ci>?}") "217" "emph" "")
#(index-entry "./objects.html#./objects:s216" ("string-ci<?") ("\\scheme{string-ci<?}") "217" "emph" "")
#(index-entry "./objects.html#./objects:s216" ("string-ci=?") ("\\scheme{string-ci=?}") "217" "emph" "")
#(index-entry "./objects.html#./objects:s215" ("string>=?") ("\\scheme{string>=?}") "216" "emph" "")
#(index-entry "./objects.html#./objects:s215" ("string<=?") ("\\scheme{string<=?}") "216" "emph" "")
#(index-entry "./objects.html#./objects:s215" ("string>?") ("\\scheme{string>?}") "216" "emph" "")
#(index-entry "./objects.html#./objects:s215" ("string<?") ("\\scheme{string<?}") "216" "emph" "")
#(index-entry "./objects.html#./objects:s215" ("string=?") ("\\scheme{string=?}") "216" "emph" "")
#(index-entry "./objects.html#./objects:s214" ("double quotes") ("double quotes") "216" "" "")
#(index-entry "./objects.html#./objects:s213" ("\" (double quote)") ("\\scheme{\"} (double quote)") "216" "" "")
#(index-entry "./objects.html#./objects:s212" ("strings") ("strings") "216" "" "")
#(index-entry "./objects.html#./objects:s211" ("integer->char") ("\\scheme{integer->char}") "215" "emph" "")
#(index-entry "./objects.html#./objects:s210" ("char->integer") ("\\scheme{char->integer}") "215" "emph" "")
#(index-entry "./objects.html#./objects:s209" ("char-foldcase") ("\\scheme{char-foldcase}") "215" "emph" "")
#(index-entry "./objects.html#./objects:s208" ("char-titlecase") ("\\scheme{char-titlecase}") "214" "emph" "")
#(index-entry "./objects.html#./objects:s207" ("char-downcase") ("\\scheme{char-downcase}") "214" "emph" "")
#(index-entry "./objects.html#./objects:s206" ("char-upcase") ("\\scheme{char-upcase}") "214" "emph" "")
#(index-entry "./objects.html#./objects:s205" ("char-general-category") ("\\scheme{char-general-category}") "214" "emph" "")
#(index-entry "./objects.html#./objects:s204" ("char-title-case?") ("\\scheme{char-title-case?}") "213" "emph" "")
#(index-entry "./objects.html#./objects:s204" ("char-upper-case?") ("\\scheme{char-upper-case?}") "213" "emph" "")
#(index-entry "./objects.html#./objects:s204" ("char-lower-case?") ("\\scheme{char-lower-case?}") "213" "emph" "")
#(index-entry "./objects.html#./objects:s203" ("char-whitespace?") ("\\scheme{char-whitespace?}") "213" "emph" "")
#(index-entry "./objects.html#./objects:s203" ("char-numeric?") ("\\scheme{char-numeric?}") "213" "emph" "")
#(index-entry "./objects.html#./objects:s203" ("char-alphabetic?") ("\\scheme{char-alphabetic?}") "213" "emph" "")
#(index-entry "./objects.html#./objects:s202" ("char-ci>=?") ("\\scheme{char-ci>=?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s202" ("char-ci<=?") ("\\scheme{char-ci<=?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s202" ("char-ci>?") ("\\scheme{char-ci>?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s202" ("char-ci<?") ("\\scheme{char-ci<?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s202" ("char-ci=?") ("\\scheme{char-ci=?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s201" ("char>=?") ("\\scheme{char>=?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s201" ("char<=?") ("\\scheme{char<=?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s201" ("char>?") ("\\scheme{char>?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s201" ("char<?") ("\\scheme{char<?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s201" ("char=?") ("\\scheme{char=?}") "212" "emph" "")
#(index-entry "./objects.html#./objects:s200" ("#\\") ("\\scheme{\\#{\\schbackslash}}") "211" "" "")
#(index-entry "./objects.html#./objects:s199" ("characters") ("characters") "211" "" "")
#(index-entry "./objects.html#./objects:s198" ("real->flonum") ("\\scheme{real->flonum}") "211" "emph" "")
#(index-entry "./objects.html#./objects:s198" ("fixnum->flonum") ("\\scheme{fixnum->flonum}") "211" "emph" "")
#(index-entry "./objects.html#./objects:s197" ("flexpt") ("\\scheme{flexpt}") "210" "emph" "")
#(index-entry "./objects.html#./objects:s196" ("flsqrt") ("\\scheme{flsqrt}") "210" "emph" "")
#(index-entry "./objects.html#./objects:s195" ("flatan") ("\\scheme{flatan}") "210" "emph" "")
#(index-entry "./objects.html#./objects:s195" ("flatan") ("\\scheme{flatan}") "210" "emph" "")
#(index-entry "./objects.html#./objects:s195" ("flacos") ("\\scheme{flacos}") "210" "emph" "")
#(index-entry "./objects.html#./objects:s195" ("flasin") ("\\scheme{flasin}") "210" "emph" "")
#(index-entry "./objects.html#./objects:s194" ("fltan") ("\\scheme{fltan}") "210" "emph" "")
#(index-entry "./objects.html#./objects:s194" ("flcos") ("\\scheme{flcos}") "210" "emph" "")
#(index-entry "./objects.html#./objects:s194" ("flsin") ("\\scheme{flsin}") "210" "emph" "")
#(index-entry "./objects.html#./objects:s193" ("fllog") ("\\scheme{fllog}") "209" "emph" "")
#(index-entry "./objects.html#./objects:s193" ("fllog") ("\\scheme{fllog}") "209" "emph" "")
#(index-entry "./objects.html#./objects:s193" ("flexp") ("\\scheme{flexp}") "209" "emph" "")
#(index-entry "./objects.html#./objects:s192" ("flabs") ("\\scheme{flabs}") "209" "emph" "")
#(index-entry "./objects.html#./objects:s191" ("fldenominator") ("\\scheme{fldenominator}") "209" "emph" "")
#(index-entry "./objects.html#./objects:s191" ("flnumerator") ("\\scheme{flnumerator}") "209" "emph" "")
#(index-entry "./objects.html#./objects:s190" ("flceiling") ("\\scheme{flceiling}") "208" "emph" "")
#(index-entry "./objects.html#./objects:s190" ("flfloor") ("\\scheme{flfloor}") "208" "emph" "")
#(index-entry "./objects.html#./objects:s190" ("fltruncate") ("\\scheme{fltruncate}") "208" "emph" "")
#(index-entry "./objects.html#./objects:s190" ("flround") ("\\scheme{flround}") "208" "emph" "")
#(index-entry "./objects.html#./objects:s189" ("fldiv0-and-mod0") ("\\scheme{fldiv0-and-mod0}") "208" "emph" "")
#(index-entry "./objects.html#./objects:s189" ("flmod0") ("\\scheme{flmod0}") "208" "emph" "")
#(index-entry "./objects.html#./objects:s189" ("fldiv0") ("\\scheme{fldiv0}") "208" "emph" "")
#(index-entry "./objects.html#./objects:s188" ("fldiv-and-mod") ("\\scheme{fldiv-and-mod}") "207" "emph" "")
#(index-entry "./objects.html#./objects:s188" ("flmod") ("\\scheme{flmod}") "207" "emph" "")
#(index-entry "./objects.html#./objects:s188" ("fldiv") ("\\scheme{fldiv}") "207" "emph" "")
#(index-entry "./objects.html#./objects:s187" ("fl/") ("\\scheme{fl/}") "207" "emph" "")
#(index-entry "./objects.html#./objects:s187" ("fl/") ("\\scheme{fl/}") "207" "emph" "")
#(index-entry "./objects.html#./objects:s186" ("fl*") ("\\scheme{fl*}") "207" "emph" "")
#(index-entry "./objects.html#./objects:s185" ("fl-") ("\\scheme{fl-}") "206" "emph" "")
#(index-entry "./objects.html#./objects:s185" ("fl-") ("\\scheme{fl-}") "206" "emph" "")
#(index-entry "./objects.html#./objects:s184" ("fl+") ("\\scheme{fl+}") "206" "emph" "")
#(index-entry "./objects.html#./objects:s183" ("flmax") ("\\scheme{flmax}") "205" "emph" "")
#(index-entry "./objects.html#./objects:s183" ("flmin") ("\\scheme{flmin}") "205" "emph" "")
#(index-entry "./objects.html#./objects:s182" ("flodd?") ("\\scheme{flodd?}") "205" "emph" "")
#(index-entry "./objects.html#./objects:s182" ("fleven?") ("\\scheme{fleven?}") "205" "emph" "")
#(index-entry "./objects.html#./objects:s181" ("flnan?") ("\\scheme{flnan?}") "205" "emph" "")
#(index-entry "./objects.html#./objects:s181" ("flinfinite?") ("\\scheme{flinfinite?}") "205" "emph" "")
#(index-entry "./objects.html#./objects:s181" ("flfinite?") ("\\scheme{flfinite?}") "205" "emph" "")
#(index-entry "./objects.html#./objects:s180" ("flinteger?") ("\\scheme{flinteger?}") "204" "emph" "")
#(index-entry "./objects.html#./objects:s179" ("flnegative?") ("\\scheme{flnegative?}") "204" "emph" "")
#(index-entry "./objects.html#./objects:s179" ("flpositive?") ("\\scheme{flpositive?}") "204" "emph" "")
#(index-entry "./objects.html#./objects:s179" ("flzero?") ("\\scheme{flzero?}") "204" "emph" "")
#(index-entry "./objects.html#./objects:s178" ("fl>=?") ("\\scheme{fl>=?}") "203" "emph" "")
#(index-entry "./objects.html#./objects:s178" ("fl<=?") ("\\scheme{fl<=?}") "203" "emph" "")
#(index-entry "./objects.html#./objects:s178" ("fl>?") ("\\scheme{fl>?}") "203" "emph" "")
#(index-entry "./objects.html#./objects:s178" ("fl<?") ("\\scheme{fl<?}") "203" "emph" "")
#(index-entry "./objects.html#./objects:s178" ("fl=?") ("\\scheme{fl=?}") "203" "emph" "")
#(index-entry "./objects.html#./objects:s177" ("flonum?") ("\\scheme{flonum?}") "203" "emph" "")
#(index-entry "./objects.html#./objects:s176" ("flonum") ("flonum") "202" "" "")
#(index-entry "./objects.html#./objects:s175" ("fxreverse-bit-field") ("\\scheme{fxreverse-bit-field}") "202" "emph" "")
#(index-entry "./objects.html#./objects:s174" ("fxrotate-bit-field") ("\\scheme{fxrotate-bit-field}") "201" "emph" "")
#(index-entry "./objects.html#./objects:s173" ("fxarithmetic-shift") ("\\scheme{fxarithmetic-shift}") "201" "emph" "")
#(index-entry "./objects.html#./objects:s172" ("fxarithmetic-shift-left") ("\\scheme{fxarithmetic-shift-left}") "201" "emph" "")
#(index-entry "./objects.html#./objects:s172" ("fxarithmetic-shift-right") ("\\scheme{fxarithmetic-shift-right}") "201" "emph" "")
#(index-entry "./objects.html#./objects:s171" ("fxcopy-bit-field") ("\\scheme{fxcopy-bit-field}") "200" "emph" "")
#(index-entry "./objects.html#./objects:s170" ("fxbit-field") ("\\scheme{fxbit-field}") "200" "emph" "")
#(index-entry "./objects.html#./objects:s169" ("fxcopy-bit") ("\\scheme{fxcopy-bit}") "200" "emph" "")
#(index-entry "./objects.html#./objects:s168" ("fxbit-set?") ("\\scheme{fxbit-set?}") "199" "emph" "")
#(index-entry "./objects.html#./objects:s167" ("fxfirst-bit-set") ("\\scheme{fxfirst-bit-set}") "199" "emph" "")
#(index-entry "./objects.html#./objects:s166" ("fxlength") ("\\scheme{fxlength}") "198" "emph" "")
#(index-entry "./objects.html#./objects:s165" ("fxbit-count") ("\\scheme{fxbit-count}") "198" "emph" "")
#(index-entry "./objects.html#./objects:s164" ("fxif") ("\\scheme{fxif}") "198" "emph" "")
#(index-entry "./objects.html#./objects:s163" ("fxxor") ("\\scheme{fxxor}") "197" "emph" "")
#(index-entry "./objects.html#./objects:s163" ("fxior") ("\\scheme{fxior}") "197" "emph" "")
#(index-entry "./objects.html#./objects:s163" ("fxand") ("\\scheme{fxand}") "197" "emph" "")
#(index-entry "./objects.html#./objects:s163" ("fxnot") ("\\scheme{fxnot}") "197" "emph" "")
#(index-entry "./objects.html#./objects:s162" ("fx*/carry") ("\\scheme{fx*/carry}") "197" "emph" "")
#(index-entry "./objects.html#./objects:s162" ("fx-/carry") ("\\scheme{fx-/carry}") "197" "emph" "")
#(index-entry "./objects.html#./objects:s162" ("fx+/carry") ("\\scheme{fx+/carry}") "197" "emph" "")
#(index-entry "./objects.html#./objects:s161" ("fxdiv0-and-mod0") ("\\scheme{fxdiv0-and-mod0}") "196" "emph" "")
#(index-entry "./objects.html#./objects:s161" ("fxmod0") ("\\scheme{fxmod0}") "196" "emph" "")
#(index-entry "./objects.html#./objects:s161" ("fxdiv0") ("\\scheme{fxdiv0}") "196" "emph" "")
#(index-entry "./objects.html#./objects:s160" ("fxdiv-and-mod") ("\\scheme{fxdiv-and-mod}") "196" "emph" "")
#(index-entry "./objects.html#./objects:s160" ("fxmod") ("\\scheme{fxmod}") "196" "emph" "")
#(index-entry "./objects.html#./objects:s160" ("fxdiv") ("\\scheme{fxdiv}") "196" "emph" "")
#(index-entry "./objects.html#./objects:s159" ("fx*") ("\\scheme{fx*}") "195" "emph" "")
#(index-entry "./objects.html#./objects:s158" ("fx-") ("\\scheme{fx-}") "195" "emph" "")
#(index-entry "./objects.html#./objects:s158" ("fx-") ("\\scheme{fx-}") "195" "emph" "")
#(index-entry "./objects.html#./objects:s157" ("fx+") ("\\scheme{fx+}") "195" "emph" "")
#(index-entry "./objects.html#./objects:s156" ("fxmax") ("\\scheme{fxmax}") "195" "emph" "")
#(index-entry "./objects.html#./objects:s156" ("fxmin") ("\\scheme{fxmin}") "195" "emph" "")
#(index-entry "./objects.html#./objects:s155" ("fxodd?") ("\\scheme{fxodd?}") "194" "emph" "")
#(index-entry "./objects.html#./objects:s155" ("fxeven?") ("\\scheme{fxeven?}") "194" "emph" "")
#(index-entry "./objects.html#./objects:s154" ("fxnegative?") ("\\scheme{fxnegative?}") "194" "emph" "")
#(index-entry "./objects.html#./objects:s154" ("fxpositive?") ("\\scheme{fxpositive?}") "194" "emph" "")
#(index-entry "./objects.html#./objects:s154" ("fxzero?") ("\\scheme{fxzero?}") "194" "emph" "")
#(index-entry "./objects.html#./objects:s153" ("fx>=?") ("\\scheme{fx>=?}") "193" "emph" "")
#(index-entry "./objects.html#./objects:s153" ("fx<=?") ("\\scheme{fx<=?}") "193" "emph" "")
#(index-entry "./objects.html#./objects:s153" ("fx>?") ("\\scheme{fx>?}") "193" "emph" "")
#(index-entry "./objects.html#./objects:s153" ("fx<?") ("\\scheme{fx<?}") "193" "emph" "")
#(index-entry "./objects.html#./objects:s153" ("fx=?") ("\\scheme{fx=?}") "193" "emph" "")
#(index-entry "./objects.html#./objects:s152" ("fixnum-width") ("\\scheme{fixnum-width}") "193" "emph" "")
#(index-entry "./objects.html#./objects:s151" ("greatest-fixnum") ("\\scheme{greatest-fixnum}") "193" "emph" "")
#(index-entry "./objects.html#./objects:s151" ("least-fixnum") ("\\scheme{least-fixnum}") "193" "emph" "")
#(index-entry "./objects.html#./objects:s150" ("fixnum?") ("\\scheme{fixnum?}") "193" "emph" "")
#(index-entry "./objects.html#./objects:s149" ("fixnum") ("fixnum") "192" "" "")
#(index-entry "./objects.html#./objects:s148" ("number->string") ("\\scheme{number->string}") "191" "emph" "")
#(index-entry "./objects.html#./objects:s148" ("number->string") ("\\scheme{number->string}") "191" "emph" "")
#(index-entry "./objects.html#./objects:s148" ("number->string") ("\\scheme{number->string}") "191" "emph" "")
#(index-entry "./objects.html#./objects:s147" ("string->number") ("\\scheme{string->number}") "191" "emph" "")
#(index-entry "./objects.html#./objects:s147" ("string->number") ("\\scheme{string->number}") "191" "emph" "")
#(index-entry "./objects.html#./objects:s146" ("bitwise-reverse-bit-field") ("\\scheme{bitwise-reverse-bit-field}") "191" "emph" "")
#(index-entry "./objects.html#./objects:s145" ("bitwise-rotate-bit-field") ("\\scheme{bitwise-rotate-bit-field}") "190" "emph" "")
#(index-entry "./objects.html#./objects:s144" ("bitwise-arithmetic-shift") ("\\scheme{bitwise-arithmetic-shift}") "190" "emph" "")
#(index-entry "./objects.html#./objects:s143" ("bitwise-arithmetic-shift-left") ("\\scheme{bitwise-arithmetic-shift-left}") "189" "emph" "")
#(index-entry "./objects.html#./objects:s143" ("bitwise-arithmetic-shift-right") ("\\scheme{bitwise-arithmetic-shift-right}") "189" "emph" "")
#(index-entry "./objects.html#./objects:s142" ("bitwise-copy-bit-field") ("\\scheme{bitwise-copy-bit-field}") "189" "emph" "")
#(index-entry "./objects.html#./objects:s141" ("bitwise-bit-field") ("\\scheme{bitwise-bit-field}") "189" "emph" "")
#(index-entry "./objects.html#./objects:s140" ("bitwise-copy-bit") ("\\scheme{bitwise-copy-bit}") "188" "emph" "")
#(index-entry "./objects.html#./objects:s139" ("bitwise-bit-set?") ("\\scheme{bitwise-bit-set?}") "188" "emph" "")
#(index-entry "./objects.html#./objects:s138" ("bitwise-first-bit-set") ("\\scheme{bitwise-first-bit-set}") "187" "emph" "")
#(index-entry "./objects.html#./objects:s137" ("bitwise-length") ("\\scheme{bitwise-length}") "187" "emph" "")
#(index-entry "./objects.html#./objects:s136" ("bitwise-bit-count") ("\\scheme{bitwise-bit-count}") "187" "emph" "")
#(index-entry "./objects.html#./objects:s135" ("bitwise-if") ("\\scheme{bitwise-if}") "186" "emph" "")
#(index-entry "./objects.html#./objects:s134" ("bitwise-xor") ("\\scheme{bitwise-xor}") "186" "emph" "")
#(index-entry "./objects.html#./objects:s134" ("bitwise-ior") ("\\scheme{bitwise-ior}") "186" "emph" "")
#(index-entry "./objects.html#./objects:s134" ("bitwise-and") ("\\scheme{bitwise-and}") "186" "emph" "")
#(index-entry "./objects.html#./objects:s134" ("bitwise-not") ("\\scheme{bitwise-not}") "186" "emph" "")
#(index-entry "./objects.html#./objects:s133" ("atan") ("\\scheme{atan}") "185" "emph" "")
#(index-entry "./objects.html#./objects:s133" ("atan") ("\\scheme{atan}") "185" "emph" "")
#(index-entry "./objects.html#./objects:s132" ("acos") ("\\scheme{acos}") "185" "emph" "")
#(index-entry "./objects.html#./objects:s132" ("asin") ("\\scheme{asin}") "185" "emph" "")
#(index-entry "./objects.html#./objects:s131" ("tan") ("\\scheme{tan}") "185" "emph" "")
#(index-entry "./objects.html#./objects:s131" ("cos") ("\\scheme{cos}") "185" "emph" "")
#(index-entry "./objects.html#./objects:s131" ("sin") ("\\scheme{sin}") "185" "emph" "")
#(index-entry "./objects.html#./objects:s130" ("log") ("\\scheme{log}") "184" "emph" "")
#(index-entry "./objects.html#./objects:s130" ("log") ("\\scheme{log}") "184" "emph" "")
#(index-entry "./objects.html#./objects:s129" ("exp") ("\\scheme{exp}") "184" "emph" "")
#(index-entry "./objects.html#./objects:s128" ("exact-integer-sqrt") ("\\scheme{exact-integer-sqrt}") "184" "emph" "")
#(index-entry "./objects.html#./objects:s127" ("sqrt") ("\\scheme{sqrt}") "183" "emph" "")
#(index-entry "./objects.html#./objects:s126" ("abs") ("\\scheme{abs}") "183" "" "")
#(index-entry "./objects.html#./objects:s125" ("magnitude") ("\\scheme{magnitude}") "183" "emph" "")
#(index-entry "./objects.html#./objects:s124" ("angle") ("\\scheme{angle}") "183" "emph" "")
#(index-entry "./objects.html#./objects:s123" ("make-polar") ("\\scheme{make-polar}") "183" "emph" "")
#(index-entry "./objects.html#./objects:s122" ("make-rectangular") ("\\scheme{make-rectangular}") "182" "emph" "")
#(index-entry "./objects.html#./objects:s121" ("imag-part") ("\\scheme{imag-part}") "182" "emph" "")
#(index-entry "./objects.html#./objects:s120" ("real-part") ("\\scheme{real-part}") "182" "emph" "")
#(index-entry "./objects.html#./objects:s119" ("denominator") ("\\scheme{denominator}") "181" "emph" "")
#(index-entry "./objects.html#./objects:s118" ("numerator") ("\\scheme{numerator}") "181" "emph" "")
#(index-entry "./objects.html#./objects:s117" ("rationalize") ("\\scheme{rationalize}") "181" "emph" "")
#(index-entry "./objects.html#./objects:s116" ("inexact->exact") ("\\scheme{inexact->exact}") "181" "emph" "")
#(index-entry "./objects.html#./objects:s116" ("exact->inexact") ("\\scheme{exact->inexact}") "181" "emph" "")
#(index-entry "./objects.html#./objects:s115" ("exactness") ("exactness") "180" "" "")
#(index-entry "./objects.html#./objects:s114" ("exact") ("\\scheme{exact}") "180" "emph" "")
#(index-entry "./objects.html#./objects:s113" ("exactness") ("exactness") "180" "" "")
#(index-entry "./objects.html#./objects:s112" ("inexact") ("\\scheme{inexact}") "180" "emph" "")
#(index-entry "./objects.html#./objects:s111" ("expt") ("\\scheme{expt}") "179" "emph" "")
#(index-entry "./objects.html#./objects:s110" ("lcm") ("\\scheme{lcm}") "179" "emph" "")
#(index-entry "./objects.html#./objects:s109" ("gcd") ("\\scheme{gcd}") "179" "emph" "")
#(index-entry "./objects.html#./objects:s108" ("min") ("\\scheme{min}") "178" "emph" "")
#(index-entry "./objects.html#./objects:s107" ("max") ("\\scheme{max}") "178" "emph" "")
#(index-entry "./objects.html#./objects:s106" ("magnitude") ("\\scheme{magnitude}") "178" "" "")
#(index-entry "./objects.html#./objects:s105" ("abs") ("\\scheme{abs}") "178" "emph" "")
#(index-entry "./objects.html#./objects:s104" ("round") ("\\scheme{round}") "178" "emph" "")
#(index-entry "./objects.html#./objects:s103" ("ceiling") ("\\scheme{ceiling}") "177" "emph" "")
#(index-entry "./objects.html#./objects:s102" ("floor") ("\\scheme{floor}") "177" "emph" "")
#(index-entry "./objects.html#./objects:s101" ("truncate") ("\\scheme{truncate}") "177" "emph" "")
#(index-entry "./objects.html#./objects:s100" ("div0-and-mod0") ("\\scheme{div0-and-mod0}") "176" "emph" "")
#(index-entry "./objects.html#./objects:s100" ("mod0") ("\\scheme{mod0}") "176" "emph" "")
#(index-entry "./objects.html#./objects:s100" ("div0") ("\\scheme{div0}") "176" "emph" "")
#(index-entry "./objects.html#./objects:s99" ("div-and-mod") ("\\scheme{div-and-mod}") "175" "emph" "")
#(index-entry "./objects.html#./objects:s99" ("mod") ("\\scheme{mod}") "175" "emph" "")
#(index-entry "./objects.html#./objects:s99" ("div") ("\\scheme{div}") "175" "emph" "")
#(index-entry "./objects.html#./objects:s98" ("modulo") ("\\scheme{modulo}") "175" "emph" "")
#(index-entry "./objects.html#./objects:s98" ("remainder") ("\\scheme{remainder}") "175" "emph" "")
#(index-entry "./objects.html#./objects:s98" ("quotient") ("\\scheme{quotient}") "175" "emph" "")
#(index-entry "./objects.html#./objects:s97" ("nan?") ("\\scheme{nan?}") "174" "emph" "")
#(index-entry "./objects.html#./objects:s97" ("infinite?") ("\\scheme{infinite?}") "174" "emph" "")
#(index-entry "./objects.html#./objects:s97" ("finite?") ("\\scheme{finite?}") "174" "emph" "")
#(index-entry "./objects.html#./objects:s96" ("odd?") ("\\scheme{odd?}") "174" "emph" "")
#(index-entry "./objects.html#./objects:s96" ("even?") ("\\scheme{even?}") "174" "emph" "")
#(index-entry "./objects.html#./objects:s95" ("negative?") ("\\scheme{negative?}") "173" "emph" "")
#(index-entry "./objects.html#./objects:s94" ("positive?") ("\\scheme{positive?}") "173" "emph" "")
#(index-entry "./objects.html#./objects:s93" ("zero?") ("\\scheme{zero?}") "173" "emph" "")
#(index-entry "./objects.html#./objects:s92" ("/") ("\\scheme{/}") "172" "emph" "")
#(index-entry "./objects.html#./objects:s92" ("/") ("\\scheme{/}") "172" "emph" "")
#(index-entry "./objects.html#./objects:s91" ("*") ("\\scheme{*}") "172" "emph" "")
#(index-entry "./objects.html#./objects:s90" ("-") ("\\scheme{-}") "172" "emph" "")
#(index-entry "./objects.html#./objects:s90" ("-") ("\\scheme{-}") "172" "emph" "")
#(index-entry "./objects.html#./objects:s89" ("+") ("\\scheme{+}") "171" "emph" "")
#(index-entry "./objects.html#./objects:s88" (">=") ("\\scheme{>=}") "170" "emph" "")
#(index-entry "./objects.html#./objects:s88" ("<=") ("\\scheme{<=}") "170" "emph" "")
#(index-entry "./objects.html#./objects:s88" (">") ("\\scheme{>}") "170" "emph" "")
#(index-entry "./objects.html#./objects:s88" ("<") ("\\scheme{<}") "170" "emph" "")
#(index-entry "./objects.html#./objects:s88" ("=") ("\\scheme{=}") "170" "emph" "")
#(index-entry "./objects.html#./objects:s87" ("inexact?") ("\\scheme{inexact?}") "170" "emph" "")
#(index-entry "./objects.html#./objects:s86" ("exact?") ("\\scheme{exact?}") "170" "emph" "")
#(index-entry "./objects.html#./objects:s85" ("l (long)") ("\\scheme{l} (long)") "169" "" "")
#(index-entry "./objects.html#./objects:s84" ("d (double)") ("\\scheme{d} (double)") "169" "" "")
#(index-entry "./objects.html#./objects:s83" ("f (single)") ("\\scheme{f} (single)") "169" "" "")
#(index-entry "./objects.html#./objects:s82" ("s (short)") ("\\scheme{s} (short)") "169" "" "")
#(index-entry "./objects.html#./objects:s81" ("#x (hexadecimal)") ("\\scheme{\\#x} (hexadecimal)") "169" "" "")
#(index-entry "./objects.html#./objects:s80" ("#d (decimal)") ("\\scheme{\\#d} (decimal)") "169" "" "")
#(index-entry "./objects.html#./objects:s79" ("#o (octal)") ("\\scheme{\\#o} (octal)") "169" "" "")
#(index-entry "./objects.html#./objects:s78" ("#b (binary)") ("\\scheme{\\#b} (binary)") "169" "" "")
#(index-entry "./objects.html#./objects:s77" ("floating\npoint") ("floating\npoint") "167" "" "")
#(index-entry "./objects.html#./objects:s76" ("arbitrary precision") ("arbitrary precision") "167" "" "")
#(index-entry "./objects.html#./objects:s75" ("exactness preserving") ("exactness preserving") "167" "" "")
#(index-entry "./objects.html#./objects:s74" ("inexact?") ("\\scheme{inexact?}") "167" "" "")
#(index-entry "./objects.html#./objects:s73" ("exact?") ("\\scheme{exact?}") "167" "" "")
#(index-entry "./objects.html#./objects:s72" ("exactness") ("exactness") "167" "" "")
#(index-entry "./objects.html#./objects:s71" ("complex?") ("\\scheme{complex?}") "167" "" "")
#(index-entry "./objects.html#./objects:s70" ("real?") ("\\scheme{real?}") "167" "" "")
#(index-entry "./objects.html#./objects:s69" ("rational?") ("\\scheme{rational?}") "167" "" "")
#(index-entry "./objects.html#./objects:s68" ("integer?") ("\\scheme{integer?}") "167" "" "")
#(index-entry "./objects.html#./objects:s67" ("complex numbers") ("complex numbers") "167" "" "")
#(index-entry "./objects.html#./objects:s66" ("real numbers") ("real numbers") "167" "" "")
#(index-entry "./objects.html#./objects:s65" ("rational numbers") ("rational numbers") "167" "" "")
#(index-entry "./objects.html#./objects:s64" ("integers") ("integers") "167" "" "")
#(index-entry "./objects.html#./objects:s63" ("numbers") ("numbers") "167" "" "")
#(index-entry "./objects.html#./objects:s62" ("list-sort") ("\\scheme{list-sort}") "167" "emph" "")
#(index-entry "./objects.html#./objects:s61" ("association list") ("association list") "166" "" "")
#(index-entry "./objects.html#./objects:s60" ("assp") ("\\scheme{assp}") "166" "emph" "")
#(index-entry "./objects.html#./objects:s59" ("association list") ("association list") "165" "" "")
#(index-entry "./objects.html#./objects:s58" ("assoc") ("\\scheme{assoc}") "165" "emph" "")
#(index-entry "./objects.html#./objects:s58" ("assv") ("\\scheme{assv}") "165" "emph" "")
#(index-entry "./objects.html#./objects:s58" ("assq") ("\\scheme{assq}") "165" "emph" "")
#(index-entry "./objects.html#./objects:s57" ("find") ("\\scheme{find}") "165" "emph" "")
#(index-entry "./objects.html#./objects:s56" ("partition") ("\\scheme{partition}") "164" "emph" "")
#(index-entry "./objects.html#./objects:s55" ("filter") ("\\scheme{filter}") "164" "emph" "")
#(index-entry "./objects.html#./objects:s54" ("remp") ("\\scheme{remp}") "163" "emph" "")
#(index-entry "./objects.html#./objects:s53" ("remove") ("\\scheme{remove}") "163" "emph" "")
#(index-entry "./objects.html#./objects:s53" ("remv") ("\\scheme{remv}") "163" "emph" "")
#(index-entry "./objects.html#./objects:s53" ("remq") ("\\scheme{remq}") "163" "emph" "")
#(index-entry "./objects.html#./objects:s52" ("memp") ("\\scheme{memp}") "163" "emph" "")
#(index-entry "./objects.html#./objects:s51" ("member") ("\\scheme{member}") "161" "emph" "")
#(index-entry "./objects.html#./objects:s51" ("memv") ("\\scheme{memv}") "161" "emph" "")
#(index-entry "./objects.html#./objects:s51" ("memq") ("\\scheme{memq}") "161" "emph" "")
#(index-entry "./objects.html#./objects:s50" ("reverse") ("\\scheme{reverse}") "161" "emph" "")
#(index-entry "./objects.html#./objects:s49" ("append") ("\\scheme{append}") "160" "emph" "")
#(index-entry "./objects.html#./objects:s49" ("append") ("\\scheme{append}") "160" "emph" "")
#(index-entry "./objects.html#./objects:s48" ("list-tail") ("\\scheme{list-tail}") "160" "emph" "")
#(index-entry "./objects.html#./objects:s47" ("list-ref") ("\\scheme{list-ref}") "159" "emph" "")
#(index-entry "./objects.html#./objects:s46" ("length") ("\\scheme{length}") "159" "emph" "")
#(index-entry "./objects.html#./objects:s45" ("list?") ("\\scheme{list?}") "158" "emph" "")
#(index-entry "./objects.html#./objects:s44" ("cons*") ("\\scheme{cons*}") "158" "emph" "")
#(index-entry "./objects.html#./objects:s43" ("list") ("\\scheme{list}") "158" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cddddr") ("\\scheme{cddddr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cdddar") ("\\scheme{cdddar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cddadr") ("\\scheme{cddadr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cddaar") ("\\scheme{cddaar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cdaddr") ("\\scheme{cdaddr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cdadar") ("\\scheme{cdadar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cdaadr") ("\\scheme{cdaadr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cdaaar") ("\\scheme{cdaaar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cadddr") ("\\scheme{cadddr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("caddar") ("\\scheme{caddar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cadadr") ("\\scheme{cadadr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cadaar") ("\\scheme{cadaar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("caaddr") ("\\scheme{caaddr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("caadar") ("\\scheme{caadar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("caaadr") ("\\scheme{caaadr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("caaaar") ("\\scheme{caaaar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cdddr") ("\\scheme{cdddr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cddar") ("\\scheme{cddar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cdadr") ("\\scheme{cdadr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cdaar") ("\\scheme{cdaar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("caddr") ("\\scheme{caddr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cadar") ("\\scheme{cadar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("caadr") ("\\scheme{caadr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("caaar") ("\\scheme{caaar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cddr") ("\\scheme{cddr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cdar") ("\\scheme{cdar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("cadr") ("\\scheme{cadr}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s42" ("caar") ("\\scheme{caar}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s41" ("set-cdr!") ("\\scheme{set-cdr!}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s40" ("set-car!") ("\\scheme{set-car!}") "157" "emph" "")
#(index-entry "./objects.html#./objects:s39" ("cdr") ("\\scheme{cdr}") "156" "emph" "")
#(index-entry "./objects.html#./objects:s38" ("car") ("\\scheme{car}") "156" "emph" "")
#(index-entry "./objects.html#./objects:s37" ("cons") ("\\scheme{cons}") "156" "emph" "")
#(index-entry "./objects.html#./objects:s36" ("circular lists") ("circular lists") "156" "" "")
#(index-entry "./objects.html#./objects:s35" ("dotted pair") ("dotted pair") "155" "" "")
#(index-entry "./objects.html#./objects:s34" ("brackets (~[~]~)") ("brackets (~\\scheme{[}~\\scheme{]}~)") "155" "" "")
#(index-entry "./objects.html#./objects:s33" ("binary trees") ("binary trees") "155" "" "")
#(index-entry "./objects.html#./objects:s32" ("improper list") ("improper list") "155" "" "")
#(index-entry "./objects.html#./objects:s31" ("proper list") ("proper list") "155" "" "")
#(index-entry "./objects.html#./objects:s30" ("car") ("\\scheme{car}") "155" "" "")
#(index-entry "./objects.html#./objects:s29" ("cdr") ("\\scheme{cdr}") "155" "" "")
#(index-entry "./objects.html#./objects:s28" ("lists") ("lists") "155" "" "")
#(index-entry "./objects.html#./objects:s27" ("cons cell") ("cons cell") "155" "" "")
#(index-entry "./objects.html#./objects:s26" ("pairs") ("pairs") "155" "" "")
#(index-entry "./objects.html#./objects:s25" ("hashtable?") ("\\scheme{hashtable?}") "155" "emph" "")
#(index-entry "./objects.html#./objects:s24" ("bytevector?") ("\\scheme{bytevector?}") "155" "emph" "")
#(index-entry "./objects.html#./objects:s23" ("procedure?") ("\\scheme{procedure?}") "155" "emph" "")
#(index-entry "./objects.html#./objects:s22" ("symbol?") ("\\scheme{symbol?}") "154" "emph" "")
#(index-entry "./objects.html#./objects:s21" ("vector?") ("\\scheme{vector?}") "154" "emph" "")
#(index-entry "./objects.html#./objects:s20" ("string?") ("\\scheme{string?}") "154" "emph" "")
#(index-entry "./objects.html#./objects:s19" ("char?") ("\\scheme{char?}") "154" "emph" "")
#(index-entry "./objects.html#./objects:s18" ("integer-valued?") ("\\scheme{integer-valued?}") "153" "emph" "")
#(index-entry "./objects.html#./objects:s18" ("rational-valued?") ("\\scheme{rational-valued?}") "153" "emph" "")
#(index-entry "./objects.html#./objects:s18" ("real-valued?") ("\\scheme{real-valued?}") "153" "emph" "")
#(index-entry "./objects.html#./objects:s17" ("integer?") ("\\scheme{integer?}") "151" "emph" "")
#(index-entry "./objects.html#./objects:s17" ("rational?") ("\\scheme{rational?}") "151" "emph" "")
#(index-entry "./objects.html#./objects:s17" ("real?") ("\\scheme{real?}") "151" "emph" "")
#(index-entry "./objects.html#./objects:s17" ("complex?") ("\\scheme{complex?}") "151" "emph" "")
#(index-entry "./objects.html#./objects:s17" ("number?") ("\\scheme{number?}") "151" "emph" "")
#(index-entry "./objects.html#./objects:s16" ("pair?") ("\\scheme{pair?}") "151" "emph" "")
#(index-entry "./objects.html#./objects:s15" ("null?") ("\\scheme{null?}") "151" "emph" "")
#(index-entry "./objects.html#./objects:s14" ("boolean?") ("\\scheme{boolean?}") "150" "emph" "")
#(index-entry "./objects.html#./objects:s13" ("equal?") ("\\scheme{equal?}") "148" "emph" "")
#(index-entry "./objects.html#./objects:s12" ("eqv?") ("\\scheme{eqv?}") "146" "emph" "")
#(index-entry "./objects.html#./objects:s11" ("object identity") ("object identity") "144" "" "")
#(index-entry "./objects.html#./objects:s10" ("eq?") ("\\scheme{eq?}") "143" "emph" "")
#(index-entry "./objects.html#./objects:s9" ("equivalence predicates") ("equivalence predicates") "143" "" "")
#(index-entry "./objects.html#./objects:s8" ("#f") ("\\scheme{\\#f}") "143" "" "")
#(index-entry "./objects.html#./objects:s7" ("#t") ("\\scheme{\\#t}") "143" "" "")
#(index-entry "./objects.html#./objects:s6" ("predicates") ("predicates") "143" "" "")
#(index-entry "./objects.html#./objects:s5" (",@ (unquote-splicing)") ("\\scheme{,{\\schatsign}} (\\scheme{unquote-splicing})") "142" "emph" "")
#(index-entry "./objects.html#./objects:s5" ("unquote-splicing (~,@~)") ("\\scheme{unquote-splicing} (~\\scheme{,{\\schatsign}}~)") "142" "emph" "")
#(index-entry "./objects.html#./objects:s5" (", (unquote)") ("\\scheme{,} (\\scheme{unquote})") "142" "emph" "")
#(index-entry "./objects.html#./objects:s5" ("unquote (~,~)") ("\\scheme{unquote} (~\\scheme{,}~)") "142" "emph" "")
#(index-entry "./objects.html#./objects:s5" ("` (quasiquote)") ("\\scheme{`} (\\scheme{quasiquote})") "142" "emph" "")
#(index-entry "./objects.html#./objects:s5" ("quasiquote (~`~)") ("\\scheme{quasiquote} (~\\scheme{`}~)") "142" "emph" "")
#(index-entry "./objects.html#./objects:s4" ("constants") ("constants") "141" "" "")
#(index-entry "./objects.html#./objects:s3" ("data") ("data") "141" "" "")
#(index-entry "./objects.html#./objects:s2" ("' (quote)") ("\\scheme{'} (\\scheme{quote})") "141" "emph" "")
#(index-entry "./objects.html#./objects:s2" ("quote (~'~)") ("\\scheme{quote} (~\\scheme{'}~)") "141" "emph" "")
#(index-entry "./objects.html#./objects:s1" ("constant") ("constant") "141" "emph" "")
#(index-entry "./objects.html#./objects:s0" ("operations on objects") ("operations on objects") "141" "" "")
#(index-entry "./control.html#./control:s82" ("scheme-report-environment") ("\\scheme{scheme-report-environment}") "137" "emph" "")
#(index-entry "./control.html#./control:s82" ("null-environment") ("\\scheme{null-environment}") "137" "emph" "")
#(index-entry "./control.html#./control:s81" ("environment") ("\\scheme{environment}") "137" "emph" "")
#(index-entry "./control.html#./control:s80" ("eval") ("\\scheme{eval}") "136" "emph" "")
#(index-entry "./control.html#./control:s79" ("let*-values") ("\\scheme{let*-values}") "134" "" "")
#(index-entry "./control.html#./control:s78" ("let-values") ("\\scheme{let-values}") "134" "" "")
#(index-entry "./control.html#./control:s77" ("call/cc") ("\\scheme{call/cc}") "133" "" "")
#(index-entry "./control.html#./control:s76" ("split") ("\\scheme{split}") "133" "" "")
#(index-entry "./control.html#./control:s75" ("describe-segment") ("\\scheme{describe-segment}") "132" "" "")
#(index-entry "./control.html#./control:s74" ("segment-slope") ("\\scheme{segment-slope}") "132" "" "")
#(index-entry "./control.html#./control:s73" ("segment-length") ("\\scheme{segment-length}") "132" "" "")
#(index-entry "./control.html#./control:s72" ("dxdy") ("\\scheme{dxdy}") "131" "" "")
#(index-entry "./control.html#./control:s71" ("call-with-values") ("\\scheme{call-with-values}") "131" "emph" "")
#(index-entry "./control.html#./control:s70" ("values") ("\\scheme{values}") "131" "emph" "")
#(index-entry "./control.html#./control:s69" ("call-with-values") ("\\scheme{call-with-values}") "130" "" "")
#(index-entry "./control.html#./control:s68" ("values") ("\\scheme{values}") "130" "" "")
#(index-entry "./control.html#./control:s67" ("make-promise") ("\\scheme{make-promise}") "129" "" "")
#(index-entry "./control.html#./control:s66" ("streams") ("streams") "128" "" "")
#(index-entry "./control.html#./control:s65" ("force") ("\\scheme{force}") "128" "emph" "")
#(index-entry "./control.html#./control:s65" ("delay") ("\\scheme{delay}") "128" "emph" "")
#(index-entry "./control.html#./control:s64" ("lazy evaluation") ("lazy evaluation") "127" "" "")
#(index-entry "./control.html#./control:s63" ("winders") ("winders") "127" "see{\\scheme{dynamic-wind}}" "")
#(index-entry "./control.html#./control:s62" ("call/cc") ("\\scheme{call/cc}") "126" "" "")
#(index-entry "./control.html#./control:s61" ("fluid binding") ("fluid binding") "125" "" "")
#(index-entry "./control.html#./control:s60" ("nonlocal exits") ("nonlocal exits") "124" "" "")
#(index-entry "./control.html#./control:s59" ("unwind-protect (in Lisp)") ("unwind-protect (in Lisp)") "124" "" "")
#(index-entry "./control.html#./control:s58" ("thunk") ("thunk") "124" "" "")
#(index-entry "./control.html#./control:s57" ("continuations") ("continuations") "124" "" "")
#(index-entry "./control.html#./control:s56" ("dynamic-wind") ("\\scheme{dynamic-wind}") "124" "emph" "")
#(index-entry "./control.html#./control:s55" ("nonlocal exits") ("nonlocal exits") "123" "" "")
#(index-entry "./control.html#./control:s54" ("call-with-current-continuation") ("\\scheme{call-with-current-continuation}") "123" "emph" "")
#(index-entry "./control.html#./control:s54" ("call/cc") ("\\scheme{call/cc}") "123" "emph" "")
#(index-entry "./control.html#./control:s53" ("call/cc") ("\\scheme{call/cc}") "122" "" "")
#(index-entry "./control.html#./control:s52" ("iteration") ("iteration") "122" "" "")
#(index-entry "./control.html#./control:s51" ("mapping") ("mapping") "122" "" "")
#(index-entry "./control.html#./control:s50" ("string-for-each") ("\\scheme{string-for-each}") "122" "emph" "")
#(index-entry "./control.html#./control:s49" ("iteration") ("iteration") "122" "" "")
#(index-entry "./control.html#./control:s48" ("mapping") ("mapping") "122" "" "")
#(index-entry "./control.html#./control:s47" ("vector-for-each") ("\\scheme{vector-for-each}") "122" "emph" "")
#(index-entry "./control.html#./control:s46" ("iteration") ("iteration") "121" "" "")
#(index-entry "./control.html#./control:s45" ("mapping") ("mapping") "121" "" "")
#(index-entry "./control.html#./control:s44" ("vector-map") ("\\scheme{vector-map}") "121" "emph" "")
#(index-entry "./control.html#./control:s43" ("iteration") ("iteration") "121" "" "")
#(index-entry "./control.html#./control:s42" ("folding") ("folding") "121" "" "")
#(index-entry "./control.html#./control:s41" ("fold-right") ("\\scheme{fold-right}") "121" "emph" "")
#(index-entry "./control.html#./control:s40" ("iteration") ("iteration") "120" "" "")
#(index-entry "./control.html#./control:s39" ("folding") ("folding") "120" "" "")
#(index-entry "./control.html#./control:s38" ("fold-left") ("\\scheme{fold-left}") "120" "emph" "")
#(index-entry "./control.html#./control:s37" ("for-all") ("\\scheme{for-all}") "119" "emph" "")
#(index-entry "./control.html#./control:s36" ("exists") ("\\scheme{exists}") "119" "emph" "")
#(index-entry "./control.html#./control:s35" ("iteration") ("iteration") "118" "" "")
#(index-entry "./control.html#./control:s34" ("mapping") ("mapping") "118" "" "")
#(index-entry "./control.html#./control:s33" ("for-each") ("\\scheme{for-each}") "118" "emph" "")
#(index-entry "./control.html#./control:s32" ("iteration") ("iteration") "117" "" "")
#(index-entry "./control.html#./control:s31" ("mapping") ("mapping") "117" "" "")
#(index-entry "./control.html#./control:s30" ("map") ("\\scheme{map}") "117" "emph" "")
#(index-entry "./control.html#./control:s29" ("divisors") ("\\scheme{divisors}") "116" "" "")
#(index-entry "./control.html#./control:s28" ("fibonacci") ("\\scheme{fibonacci}") "116" "" "")
#(index-entry "./control.html#./control:s27" ("factorial") ("\\scheme{factorial}") "116" "" "")
#(index-entry "./control.html#./control:s26" ("iteration") ("iteration") "115" "" "")
#(index-entry "./control.html#./control:s25" ("do") ("\\scheme{do}") "115" "emph" "")
#(index-entry "./control.html#./control:s24" ("divisors") ("\\scheme{divisors}") "115" "" "")
#(index-entry "./control.html#./control:s23" ("recursion") ("recursion") "114" "" "")
#(index-entry "./control.html#./control:s22" ("iteration") ("iteration") "114" "" "")
#(index-entry "./control.html#./control:s21" ("named let") ("named \\scheme{let}") "114" "" "")
#(index-entry "./control.html#./control:s20" ("let") ("\\scheme{let}") "114" "emph" "")
#(index-entry "./control.html#./control:s19" ("else") ("\\scheme{else}") "113" "" "")
#(index-entry "./control.html#./control:s18" ("case") ("\\scheme{case}") "113" "emph" "")
#(index-entry "./control.html#./control:s17" ("unless") ("\\scheme{unless}") "112" "emph" "")
#(index-entry "./control.html#./control:s17" ("when") ("\\scheme{when}") "112" "emph" "")
#(index-entry "./control.html#./control:s16" ("=>") ("\\scheme{=>}") "112" "emph" "")
#(index-entry "./control.html#./control:s16" ("else") ("\\scheme{else}") "112" "emph" "")
#(index-entry "./control.html#./control:s15" ("else") ("\\scheme{else}") "111" "" "")
#(index-entry "./control.html#./control:s14" ("=>") ("\\scheme{=>}") "111" "" "")
#(index-entry "./control.html#./control:s13" ("cond") ("\\scheme{cond}") "111" "emph" "")
#(index-entry "./control.html#./control:s12" ("or") ("\\scheme{or}") "110" "emph" "")
#(index-entry "./control.html#./control:s11" ("and") ("\\scheme{and}") "110" "emph" "")
#(index-entry "./control.html#./control:s10" ("not") ("\\scheme{not}") "110" "emph" "")
#(index-entry "./control.html#./control:s9" ("conditionals") ("conditionals") "109" "" "")
#(index-entry "./control.html#./control:s8" ("if") ("\\scheme{if}") "109" "emph" "")
#(index-entry "./control.html#./control:s8" ("if") ("\\scheme{if}") "109" "emph" "")
#(index-entry "./control.html#./control:s7" ("implicit begin") ("implicit \\scheme{begin}") "109" "" "")
#(index-entry "./control.html#./control:s6" ("side effects") ("side effects") "108" "" "")
#(index-entry "./control.html#./control:s5" ("sequencing") ("sequencing") "108" "" "")
#(index-entry "./control.html#./control:s4" ("begin") ("\\scheme{begin}") "108" "emph" "")
#(index-entry "./control.html#./control:s3" ("apply") ("\\scheme{apply}") "107" "emph" "")
#(index-entry "./control.html#./control:s2" ("order of evaluation") ("order of evaluation") "107" "" "")
#(index-entry "./control.html#./control:s1" ("procedure application") ("procedure application") "107" "emph" "")
#(index-entry "./control.html#./control:s0" ("control structures") ("control structures") "107" "" "")
#(index-entry "./binding.html#./binding:s33" ("fibonacci") ("\\scheme{fibonacci}") "102" "" "")
#(index-entry "./binding.html#./binding:s32" ("Fibonacci numbers") ("Fibonacci numbers") "102" "" "")
#(index-entry "./binding.html#./binding:s31" ("flip-flop") ("\\scheme{flip-flop}") "102" "" "")
#(index-entry "./binding.html#./binding:s30" ("assignments") ("assignments") "102" "" "")
#(index-entry "./binding.html#./binding:s29" ("assignment") ("assignment") "102" "" "")
#(index-entry "./binding.html#./binding:s28" ("set!") ("\\scheme{set!}") "102" "emph" "")
#(index-entry "./binding.html#./binding:s27" ("top-level definitions") ("top-level definitions") "101" "" "")
#(index-entry "./binding.html#./binding:s26" ("begin") ("\\scheme{begin}") "101" "" "")
#(index-entry "./binding.html#./binding:s25" ("procedure definition") ("procedure definition") "100" "" "")
#(index-entry "./binding.html#./binding:s24" ("define") ("\\scheme{define}") "100" "emph" "")
#(index-entry "./binding.html#./binding:s24" ("define") ("\\scheme{define}") "100" "emph" "")
#(index-entry "./binding.html#./binding:s24" ("define") ("\\scheme{define}") "100" "emph" "")
#(index-entry "./binding.html#./binding:s24" ("define") ("\\scheme{define}") "100" "emph" "")
#(index-entry "./binding.html#./binding:s24" ("define") ("\\scheme{define}") "100" "emph" "")
#(index-entry "./binding.html#./binding:s23" ("let*-values") ("\\scheme{let*-values}") "99" "emph" "")
#(index-entry "./binding.html#./binding:s23" ("let-values") ("\\scheme{let-values}") "99" "emph" "")
#(index-entry "./binding.html#./binding:s22" ("letrec*") ("\\scheme{letrec*}") "98" "emph" "")
#(index-entry "./binding.html#./binding:s21" ("mutually recursive procedures") ("mutually recursive procedures") "97" "" "")
#(index-entry "./binding.html#./binding:s20" ("letrec") ("\\scheme{letrec}") "97" "emph" "")
#(index-entry "./binding.html#./binding:s19" ("nested let expressions") ("nested \\scheme{let} expressions") "96" "" "")
#(index-entry "./binding.html#./binding:s18" ("let*") ("\\scheme{let*}") "96" "emph" "")
#(index-entry "./binding.html#./binding:s17" ("local variable bindings") ("local variable bindings") "95" "" "")
#(index-entry "./binding.html#./binding:s16" ("let") ("\\scheme{let}") "95" "emph" "")
#(index-entry "./binding.html#./binding:s15" ("substring") ("\\scheme{substring}") "95" "" "")
#(index-entry "./binding.html#./binding:s14" ("make-list") ("\\scheme{make-list}") "94" "" "")
#(index-entry "./binding.html#./binding:s13" ("case-lambda") ("\\scheme{case-lambda}") "94" "emph" "")
#(index-entry "./binding.html#./binding:s12" ("lambda*") ("\\scheme{lambda*}") "94" "" "")
#(index-entry "./binding.html#./binding:s11" ("case-lambda") ("\\scheme{case-lambda}") "94" "" "")
#(index-entry "./binding.html#./binding:s10" ("optional arguments") ("optional arguments") "93" "" "")
#(index-entry "./binding.html#./binding:s9" ("lambda") ("\\scheme{lambda}") "93" "" "")
#(index-entry "./binding.html#./binding:s8" ("formal parameters") ("formal parameters") "92" "" "")
#(index-entry "./binding.html#./binding:s7" ("actual parameters") ("actual parameters") "92" "" "")
#(index-entry "./binding.html#./binding:s6" ("internal definitions") ("internal definitions") "92" "" "")
#(index-entry "./binding.html#./binding:s5" ("formal parameters") ("formal parameters") "92" "" "")
#(index-entry "./binding.html#./binding:s4" ("procedures") ("procedures") "92" "" "")
#(index-entry "./binding.html#./binding:s3" ("lambda") ("\\scheme{lambda}") "92" "emph" "")
#(index-entry "./binding.html#./binding:s2" ("variable reference") ("variable reference") "91" "emph" "")
#(index-entry "./binding.html#./binding:s1" ("procedures") ("procedures") "91" "" "")
#(index-entry "./binding.html#./binding:s0" ("variable binding") ("variable binding") "91" "" "")
#(index-entry "./further.html#./further:s85" ("list?") ("\\scheme{list?}") "81" "" "")
#(index-entry "./further.html#./further:s84" ("letrec") ("\\scheme{letrec}") "81" "" "")
#(index-entry "./further.html#./further:s83" ("odd?") ("\\scheme{odd?}") "81" "" "")
#(index-entry "./further.html#./further:s82" ("even?") ("\\scheme{even?}") "81" "" "")
#(index-entry "./further.html#./further:s81" ("internal definitions") ("internal definitions") "81" "" "")
#(index-entry "./further.html#./further:s80" ("define") ("\\scheme{define}") "81" "" "")
#(index-entry "./further.html#./further:s78" ("retry") ("\\scheme{retry}") "80" "" "")
#(index-entry "./further.html#./further:s76" ("reciprocal") ("\\scheme{reciprocal}") "80" "" "")
#(index-entry "./further.html#./further:s74" ("product") ("\\scheme{product}") "80" "" "")
#(index-entry "./further.html#./further:s73" ("integer-divide") ("\\scheme{integer-divide}") "79" "" "")
#(index-entry "./further.html#./further:s72" ("CPS") ("CPS") "78" "" "")
#(index-entry "./further.html#./further:s71" ("continuation-passing style") ("continuation-passing style") "78" "" "")
#(index-entry "./further.html#./further:s65" ("retry") ("\\scheme{retry}") "75" "" "")
#(index-entry "./further.html#./further:s64" ("factorial") ("\\scheme{factorial}") "75" "" "")
#(index-entry "./further.html#./further:s63" ("product") ("\\scheme{product}") "74" "" "")
#(index-entry "./further.html#./further:s62" ("call/cc") ("\\scheme{call/cc}") "74" "" "")
#(index-entry "./further.html#./further:s61" ("continuations") ("continuations") "73" "" "")
#(index-entry "./further.html#./further:s60" ("factor") ("\\scheme{factor}") "73" "" "")
#(index-entry "./further.html#./further:s54" ("factor") ("\\scheme{factor}") "72" "" "")
#(index-entry "./further.html#./further:s51" ("factor") ("\\scheme{factor}") "71" "" "")
#(index-entry "./further.html#./further:s50" ("named let") ("named \\scheme{let}") "71" "" "")
#(index-entry "./further.html#./further:s49" ("doubly recursive") ("doubly recursive") "70" "" "")
#(index-entry "./further.html#./further:s48" ("Fibonacci numbers") ("Fibonacci numbers") "69" "" "")
#(index-entry "./further.html#./further:s47" ("fibonacci") ("\\scheme{fibonacci}") "69" "" "")
#(index-entry "./further.html#./further:s46" ("factorial") ("\\scheme{factorial}") "68" "" "")
#(index-entry "./further.html#./further:s45" ("tail recursion") ("tail recursion") "68" "" "")
#(index-entry "./further.html#./further:s44" ("tail call") ("tail call") "68" "" "")
#(index-entry "./further.html#./further:s43" ("iteration") ("iteration") "68" "" "")
#(index-entry "./further.html#./further:s42" ("list?") ("\\scheme{list?}") "67" "" "")
#(index-entry "./further.html#./further:s41" ("named let") ("named \\scheme{let}") "67" "" "")
#(index-entry "./further.html#./further:s40" ("hare and tortoise") ("hare and tortoise") "66" "" "")
#(index-entry "./further.html#./further:s39" ("list?") ("\\scheme{list?}") "66" "" "")
#(index-entry "./further.html#./further:s38" ("odd?") ("\\scheme{odd?}") "66" "" "")
#(index-entry "./further.html#./further:s37" ("even?") ("\\scheme{even?}") "66" "" "")
#(index-entry "./further.html#./further:s36" ("mutually recursive procedures") ("mutually recursive procedures") "66" "" "")
#(index-entry "./further.html#./further:s35" ("letrec") ("\\scheme{letrec}") "65" "" "")
#(index-entry "./further.html#./further:s34" ("sum") ("sum") "65" "" "")
#(index-entry "./further.html#./further:s33" ("let") ("\\scheme{let}") "65" "" "")
#(index-entry "./further.html#./further:s32" ("recursion") ("recursion") "65" "" "")
#(index-entry "./further.html#./further:s31" ("unless") ("\\scheme{unless}") "64" "" "")
#(index-entry "./further.html#./further:s30" ("when") ("\\scheme{when}") "64" "" "")
#(index-entry "./further.html#./further:s28" ("let*") ("\\scheme{let*}") "64" "" "")
#(index-entry "./further.html#./further:s24" ("lexical scoping") ("lexical scoping") "63" "" "")
#(index-entry "./further.html#./further:s23" ("or") ("\\scheme{or}") "63" "" "")
#(index-entry "./further.html#./further:s22" ("and") ("\\scheme{and}") "62" "" "")
#(index-entry "./further.html#./further:s21" ("ellipsis (~...~)") ("ellipsis (~\\scheme{{\\schdot}{\\schdot}{\\schdot}}~)") "61" "" "")
#(index-entry "./further.html#./further:s20" ("...~(ellipsis)") ("\\scheme{{\\schdot}{\\schdot}{\\schdot}}~(ellipsis)") "61" "" "")
#(index-entry "./further.html#./further:s19" ("pattern variables") ("pattern variables") "61" "" "")
#(index-entry "./further.html#./further:s18" ("_ (underscore)") ("\\scheme{{\\schunderscore}} (underscore)") "61" "" "")
#(index-entry "./further.html#./further:s17" ("underscore (~_~)") ("underscore (~\\scheme{{\\schunderscore}}~)") "61" "" "")
#(index-entry "./further.html#./further:s16" ("auxiliary keywords") ("auxiliary keywords") "61" "" "")
#(index-entry "./further.html#./further:s15" ("keywords") ("keywords") "61" "" "")
#(index-entry "./further.html#./further:s14" ("transformer") ("transformer") "61" "" "")
#(index-entry "./further.html#./further:s13" ("define-syntax") ("\\scheme{define-syntax}") "61" "" "")
#(index-entry "./further.html#./further:s12" ("syntactic extensions") ("syntactic extensions") "60" "" "")
#(index-entry "./further.html#./further:s11" ("defining syntactic extensions") ("defining syntactic extensions") "60" "" "")
#(index-entry "./further.html#./further:s10" ("begin") ("\\scheme{begin}") "60" "" "")
#(index-entry "./further.html#./further:s9" ("defun syntax") ("defun syntax") "60" "" "")
#(index-entry "./further.html#./further:s8" ("set!") ("\\scheme{set!}") "59" "" "")
#(index-entry "./further.html#./further:s7" ("if") ("\\scheme{if}") "59" "" "")
#(index-entry "./further.html#./further:s6" ("lambda") ("\\scheme{lambda}") "59" "" "")
#(index-entry "./further.html#./further:s5" ("quote (~'~)") ("\\scheme{quote} (~\\scheme{'}~)") "59" "" "")
#(index-entry "./further.html#./further:s4" ("' (quote)") ("\\scheme{'} (\\scheme{quote})") "59" "" "")
#(index-entry "./further.html#./further:s3" ("expansion") ("expansion") "59" "" "")
#(index-entry "./further.html#./further:s2" ("syntactic extensions") ("syntactic extensions") "59" "" "")
#(index-entry "./further.html#./further:s1" ("syntactic forms") ("syntactic forms") "59" "" "")
#(index-entry "./further.html#./further:s0" ("core syntactic forms") ("core syntactic forms") "59" "" "")
#(index-entry "./start.html#./start:s202" ("hare and tortoise") ("hare and tortoise") "56" "" "")
#(index-entry "./start.html#./start:s201" ("proper list") ("proper list") "56" "" "")
#(index-entry "./start.html#./start:s200" ("list?") ("\\scheme{list?}") "56" "" "")
#(index-entry "./start.html#./start:s198" ("cyclic lists") ("cyclic lists") "56" "" "")
#(index-entry "./start.html#./start:s197" ("set-cdr!") ("\\scheme{set-cdr!}") "56" "" "")
#(index-entry "./start.html#./start:s193" ("vectors") ("vectors") "55" "" "")
#(index-entry "./start.html#./start:s190" ("make-stack") ("\\scheme{make-stack}") "55" "" "")
#(index-entry "./start.html#./start:s189" ("case") ("\\scheme{case}") "55" "" "")
#(index-entry "./start.html#./start:s187" ("make-counter") ("\\scheme{make-counter}") "54" "" "")
#(index-entry "./start.html#./start:s185" ("delq!") ("\\scheme{delq!}") "54" "" "")
#(index-entry "./start.html#./start:s184" ("getq") ("\\scheme{getq}") "54" "" "")
#(index-entry "./start.html#./start:s183" ("putq!") ("\\scheme{putq!}") "54" "" "")
#(index-entry "./start.html#./start:s182" ("make-queue") ("\\scheme{make-queue}") "54" "" "")
#(index-entry "./start.html#./start:s181" ("tconc") ("tconc") "53" "" "")
#(index-entry "./start.html#./start:s180" ("queue") ("queue") "53" "" "")
#(index-entry "./start.html#./start:s179" ("abstract objects") ("abstract objects") "53" "" "")
#(index-entry "./start.html#./start:s178" ("make-stack") ("\\scheme{make-stack}") "52" "" "")
#(index-entry "./start.html#./start:s177" ("messages") ("messages") "52" "" "")
#(index-entry "./start.html#./start:s176" ("stack objects") ("stack objects") "52" "" "")
#(index-entry "./start.html#./start:s175" ("if") ("\\scheme{if}") "51" "" "")
#(index-entry "./start.html#./start:s174" ("begin") ("\\scheme{begin}") "51" "" "")
#(index-entry "./start.html#./start:s173" ("thunk") ("thunk") "51" "" "")
#(index-entry "./start.html#./start:s172" ("lazy") ("\\scheme{lazy}") "51" "" "")
#(index-entry "./start.html#./start:s171" ("lazy evaluation") ("lazy evaluation") "51" "" "")
#(index-entry "./start.html#./start:s170" ("tell") ("\\scheme{tell}") "50" "" "")
#(index-entry "./start.html#./start:s169" ("shhh") ("\\scheme{shhh}") "50" "" "")
#(index-entry "./start.html#./start:s168" ("make-counter") ("\\scheme{make-counter}") "50" "" "")
#(index-entry "./start.html#./start:s167" ("internal state") ("internal state") "49" "" "")
#(index-entry "./start.html#./start:s166" ("quadratic-formula") ("\\scheme{quadratic-formula}") "48" "" "")
#(index-entry "./start.html#./start:s165" ("set!") ("\\scheme{set!}") "47" "" "")
#(index-entry "./start.html#./start:s164" ("variables") ("variables") "47" "" "")
#(index-entry "./start.html#./start:s163" ("assignments") ("assignments") "47" "" "")
#(index-entry "./start.html#./start:s162" ("map") ("\\scheme{map}") "47" "" "")
#(index-entry "./start.html#./start:s160" ("even?") ("\\scheme{even?}") "47" "" "")
#(index-entry "./start.html#./start:s159" ("odd?") ("\\scheme{odd?}") "47" "" "")
#(index-entry "./start.html#./start:s157" ("shorter?") ("\\scheme{shorter?}") "47" "" "")
#(index-entry "./start.html#./start:s156" ("shorter") ("\\scheme{shorter}") "47" "" "")
#(index-entry "./start.html#./start:s153" ("make-list") ("\\scheme{make-list}") "46" "" "")
#(index-entry "./start.html#./start:s151" ("append") ("\\scheme{append}") "46" "" "")
#(index-entry "./start.html#./start:s148" ("map1") ("\\scheme{map1}") "46" "" "")
#(index-entry "./start.html#./start:s147" ("map") ("\\scheme{map}") "45" "" "")
#(index-entry "./start.html#./start:s146" ("mapping") ("mapping") "45" "" "")
#(index-entry "./start.html#./start:s145" ("iteration") ("iteration") "45" "" "")
#(index-entry "./start.html#./start:s144" ("tree-copy") ("\\scheme{tree-copy}") "44" "" "")
#(index-entry "./start.html#./start:s143" ("remv") ("\\scheme{remv}") "44" "" "")
#(index-entry "./start.html#./start:s142" ("cond") ("\\scheme{cond}") "44" "" "")
#(index-entry "./start.html#./start:s141" ("memv") ("\\scheme{memv}") "43" "" "")
#(index-entry "./start.html#./start:s140" ("list-copy") ("\\scheme{list-copy}") "43" "" "")
#(index-entry "./start.html#./start:s139" ("ChezScheme") ("\\ChezScheme") "42" "" "")
#(index-entry "./start.html#./start:s138" ("trace") ("\\scheme{trace}") "42" "" "")
#(index-entry "./start.html#./start:s137" ("tracing") ("tracing") "42" "" "")
#(index-entry "./start.html#./start:s136" ("length") ("\\scheme{length}") "42" "" "")
#(index-entry "./start.html#./start:s135" ("recursion step") ("recursion step") "41" "" "")
#(index-entry "./start.html#./start:s134" ("base case") ("base case") "41" "" "")
#(index-entry "./start.html#./start:s133" ("goodbye") ("\\scheme{goodbye}") "41" "" "")
#(index-entry "./start.html#./start:s132" ("recursive procedure") ("recursive procedure") "41" "" "")
#(index-entry "./start.html#./start:s131" ("recursion") ("recursion") "41" "" "")
#(index-entry "./start.html#./start:s130" ("recursion") ("recursion") "41" "" "")
#(index-entry "./start.html#./start:s129" ("shorter") ("\\scheme{shorter}") "41" "" "")
#(index-entry "./start.html#./start:s127" ("atom?") ("\\scheme{atom?}") "41" "" "")
#(index-entry "./start.html#./start:s125" ("if") ("\\scheme{if}") "39" "" "")
#(index-entry "./start.html#./start:s124" ("cond") ("\\scheme{cond}") "39" "" "")
#(index-entry "./start.html#./start:s123" ("reciprocal") ("\\scheme{reciprocal}") "39" "" "")
#(index-entry "./start.html#./start:s122" ("pair?") ("\\scheme{pair?}") "38" "" "")
#(index-entry "./start.html#./start:s121" ("string?") ("\\scheme{string?}") "38" "" "")
#(index-entry "./start.html#./start:s120" ("number?") ("\\scheme{number?}") "38" "" "")
#(index-entry "./start.html#./start:s119" ("symbol?") ("\\scheme{symbol?}") "38" "" "")
#(index-entry "./start.html#./start:s118" ("pair?") ("\\scheme{pair?}") "38" "" "")
#(index-entry "./start.html#./start:s117" ("type predicates") ("type predicates") "38" "" "")
#(index-entry "./start.html#./start:s116" ("eqv?") ("\\scheme{eqv?}") "38" "" "")
#(index-entry "./start.html#./start:s115" ("lisp-cdr") ("\\scheme{lisp-cdr}") "38" "" "")
#(index-entry "./start.html#./start:s114" ("cdr") ("\\scheme{cdr}") "38" "" "")
#(index-entry "./start.html#./start:s113" ("null?") ("\\scheme{null?}") "37" "" "")
#(index-entry "./start.html#./start:s112" ("question mark (~?~)") ("question mark (~\\scheme{?}~)") "37" "" "")
#(index-entry "./start.html#./start:s111" ("? (question mark)") ("\\scheme{?} (question mark)") "37" "" "")
#(index-entry "./start.html#./start:s110" ("predicates") ("predicates") "37" "" "")
#(index-entry "./start.html#./start:s109" ("reciprocal") ("\\scheme{reciprocal}") "37" "" "")
#(index-entry "./start.html#./start:s108" ("and") ("\\scheme{and}") "37" "" "")
#(index-entry "./start.html#./start:s107" ("false") ("false") "36" "" "")
#(index-entry "./start.html#./start:s106" ("true") ("true") "36" "" "")
#(index-entry "./start.html#./start:s105" ("#f") ("\\scheme{\\#f}") "36" "" "")
#(index-entry "./start.html#./start:s104" ("#t") ("\\scheme{\\#t}") "36" "" "")
#(index-entry "./start.html#./start:s103" ("or") ("\\scheme{or}") "36" "" "")
#(index-entry "./start.html#./start:s102" ("if") ("\\scheme{if}") "36" "" "")
#(index-entry "./start.html#./start:s101" ("or") ("\\scheme{or}") "36" "" "")
#(index-entry "./start.html#./start:s100" ("not") ("\\scheme{not}") "36" "" "")
#(index-entry "./start.html#./start:s99" ("if") ("\\scheme{if}") "35" "" "")
#(index-entry "./start.html#./start:s98" ("abs") ("\\scheme{abs}") "34" "" "")
#(index-entry "./start.html#./start:s97" ("caar, cadr, \\dots, cddddr") ("\\scheme{caar,~cadr,~{\\dots},~cddddr}") "34" "" "")
#(index-entry "./start.html#./start:s95" ("compose") ("\\scheme{compose}") "34" "" "")
#(index-entry "./start.html#./start:s94" ("cddr") ("\\scheme{cddr}") "34" "" "")
#(index-entry "./start.html#./start:s93" ("cadr") ("\\scheme{cadr}") "34" "" "")
#(index-entry "./start.html#./start:s90" ("double-cons") ("\\scheme{double-cons}") "33" "" "")
#(index-entry "./start.html#./start:s89" ("double") ("\\scheme{double}") "33" "" "")
#(index-entry "./start.html#./start:s88" ("doubler") ("\\scheme{doubler}") "33" "" "")
#(index-entry "./start.html#./start:s87" ("defun syntax") ("defun syntax") "33" "" "")
#(index-entry "./start.html#./start:s86" ("list") ("\\scheme{list}") "32" "" "")
#(index-entry "./start.html#./start:s85" ("cadr") ("\\scheme{cadr}") "32" "" "")
#(index-entry "./start.html#./start:s84" ("cddr") ("\\scheme{cddr}") "31" "" "")
#(index-entry "./start.html#./start:s83" ("cadr") ("\\scheme{cadr}") "31" "" "")
#(index-entry "./start.html#./start:s82" ("list") ("\\scheme{list}") "31" "" "")
#(index-entry "./start.html#./start:s81" ("shadowing") ("shadowing") "31" "" "")
#(index-entry "./start.html#./start:s80" ("procedure definition") ("procedure definition") "31" "" "")
#(index-entry "./start.html#./start:s79" ("double-any") ("\\scheme{double-any}") "30" "" "")
#(index-entry "./start.html#./start:s78" ("define") ("\\scheme{define}") "30" "" "")
#(index-entry "./start.html#./start:s77" ("variables") ("variables") "30" "" "")
#(index-entry "./start.html#./start:s76" ("top-level definitions") ("top-level definitions") "30" "" "")
#(index-entry "./start.html#./start:s75" ("occur free") ("occur free") "30" "" "")
#(index-entry "./start.html#./start:s71" ("lambda") ("\\scheme{lambda}") "29" "" "")
#(index-entry "./start.html#./start:s70" ("formal parameters") ("formal parameters") "29" "" "")
#(index-entry "./start.html#./start:s69" ("let") ("\\scheme{let}") "28" "" "")
#(index-entry "./start.html#./start:s68" ("free variable") ("free variable") "28" "" "")
#(index-entry "./start.html#./start:s67" ("occur free") ("occur free") "28" "" "")
#(index-entry "./start.html#./start:s66" ("double-cons") ("\\scheme{double-cons}") "27" "" "")
#(index-entry "./start.html#./start:s65" ("double") ("\\scheme{double}") "27" "" "")
#(index-entry "./start.html#./start:s64" ("actual parameters") ("actual parameters") "27" "" "")
#(index-entry "./start.html#./start:s63" ("procedure application") ("procedure application") "27" "" "")
#(index-entry "./start.html#./start:s62" ("formal parameters") ("formal parameters") "26" "" "")
#(index-entry "./start.html#./start:s61" ("procedures") ("procedures") "26" "" "")
#(index-entry "./start.html#./start:s60" ("lambda") ("\\scheme{lambda}") "26" "" "")
#(index-entry "./start.html#./start:s56" ("lexical scoping") ("lexical scoping") "25" "" "")
#(index-entry "./start.html#./start:s55" ("scope") ("scope") "25" "" "")
#(index-entry "./start.html#./start:s54" ("shadowing") ("shadowing") "25" "" "")
#(index-entry "./start.html#./start:s53" ("let-bound variables") ("\\scheme{let}-bound variables") "23" "" "")
#(index-entry "./start.html#./start:s52" ("variable binding") ("variable binding") "23" "" "")
#(index-entry "./start.html#./start:s51" ("let") ("\\scheme{let}") "23" "" "")
#(index-entry "./start.html#./start:s50" ("variables") ("variables") "23" "" "")
#(index-entry "./start.html#./start:s48" ("order of evaluation") ("order of evaluation") "22" "" "")
#(index-entry "./start.html#./start:s47" ("core syntactic forms") ("core syntactic forms") "22" "" "")
#(index-entry "./start.html#./start:s46" ("syntactic extensions") ("syntactic extensions") "22" "" "")
#(index-entry "./start.html#./start:s45" ("quote (~'~)") ("\\scheme{quote} (~\\scheme{'}~)") "22" "" "")
#(index-entry "./start.html#./start:s44" ("' (quote)") ("\\scheme{'} (\\scheme{quote})") "22" "" "")
#(index-entry "./start.html#./start:s43" ("procedure application") ("procedure application") "21" "" "")
#(index-entry "./start.html#./start:s42" ("constants") ("constants") "21" "" "")
#(index-entry "./start.html#./start:s33" ("list") ("\\scheme{list}") "20" "" "")
#(index-entry "./start.html#./start:s32" ("dotted pair") ("dotted pair") "20" "" "")
#(index-entry "./start.html#./start:s31" ("dot (~.~)") ("dot (~\\scheme{{\\schdot}}~)") "19" "" "")
#(index-entry "./start.html#./start:s30" (". (dot)") ("\\scheme{{\\schdot}} (dot)") "19" "" "")
#(index-entry "./start.html#./start:s29" ("improper list") ("improper list") "19" "" "")
#(index-entry "./start.html#./start:s28" ("proper list") ("proper list") "19" "" "")
#(index-entry "./start.html#./start:s27" ("pairs") ("pairs") "19" "" "")
#(index-entry "./start.html#./start:s26" ("consing") ("consing") "19" "" "")
#(index-entry "./start.html#./start:s25" ("cons") ("\\scheme{cons}") "19" "" "")
#(index-entry "./start.html#./start:s24" ("empty list") ("empty list") "19" "" "")
#(index-entry "./start.html#./start:s23" ("()") ("\\scheme{()}") "19" "" "")
#(index-entry "./start.html#./start:s22" ("cdr") ("\\scheme{cdr}") "18" "" "")
#(index-entry "./start.html#./start:s21" ("car") ("\\scheme{car}") "18" "" "")
#(index-entry "./start.html#./start:s20" ("lists") ("lists") "18" "" "")
#(index-entry "./start.html#./start:s19" ("symbols") ("symbols") "18" "" "")
#(index-entry "./start.html#./start:s18" ("variables") ("variables") "18" "" "")
#(index-entry "./start.html#./start:s17" ("syntactic forms") ("syntactic forms") "18" "" "")
#(index-entry "./start.html#./start:s16" ("quote (~'~)") ("\\scheme{quote} (~\\scheme{'}~)") "17" "" "")
#(index-entry "./start.html#./start:s15" ("' (quote)") ("\\scheme{'} (\\scheme{quote})") "17" "" "")
#(index-entry "./start.html#./start:s14" ("procedure application") ("procedure application") "17" "" "")
#(index-entry "./start.html#./start:s13" ("lists") ("lists") "17" "" "")
#(index-entry "./start.html#./start:s12" ("operator precedence") ("operator precedence") "16" "" "")
#(index-entry "./start.html#./start:s11" ("prefix notation") ("prefix notation") "16" "" "")
#(index-entry "./start.html#./start:s10" ("procedure application") ("procedure application") "16" "" "")
#(index-entry "./start.html#./start:s9" ("/") ("\\scheme{/}") "16" "" "")
#(index-entry "./start.html#./start:s8" ("*") ("\\scheme{*}") "16" "" "")
#(index-entry "./start.html#./start:s7" ("-") ("\\scheme{-}") "16" "" "")
#(index-entry "./start.html#./start:s6" ("+") ("\\scheme{+}") "16" "" "")
#(index-entry "./start.html#./start:s5" ("numbers") ("numbers") "16" "" "")
#(index-entry "./start.html#./start:s4" ("reciprocal") ("\\scheme{reciprocal}") "15" "" "")
#(index-entry "./start.html#./start:s3" ("prefix notation") ("prefix notation") "15" "" "")
#(index-entry "./start.html#./start:s2" ("square") ("\\scheme{square}") "14" "" "")
#(index-entry "./start.html#./start:s1" ("strings") ("strings") "14" "" "")
#(index-entry "./start.html#./start:s0" ("load") ("\\scheme{load}") "13" "" "")
#(index-entry "./intro.html#./intro:s56" ("syntax violation") ("syntax violation") "9" "" "")
#(index-entry "./intro.html#./intro:s55" ("exceptions") ("exceptions") "9" "" "")
#(index-entry "./intro.html#./intro:s54" ("multiple values") ("multiple values") "9" "" "")
#(index-entry "./intro.html#./intro:s53" ("unspecified") ("unspecified") "9" "" "")
#(index-entry "./intro.html#./intro:s52" ("side effects") ("side effects") "8" "" "")
#(index-entry "./intro.html#./intro:s51" ("exclamation point (~!~)") ("exclamation point (~\\scheme{!}~)") "8" "" "")
#(index-entry "./intro.html#./intro:s50" ("! (exclamation point)") ("\\scheme{!} (exclamation point)") "8" "" "")
#(index-entry "./intro.html#./intro:s49" ("->") ("\\scheme{->}") "8" "" "")
#(index-entry "./intro.html#./intro:s48" ("predicates") ("predicates") "8" "" "")
#(index-entry "./intro.html#./intro:s47" ("question mark (~?~)") ("question mark (~\\scheme{?}~)") "8" "" "")
#(index-entry "./intro.html#./intro:s46" ("? (question mark)") ("\\scheme{?} (question mark)") "8" "" "")
#(index-entry "./intro.html#./intro:s45" ("naming conventions") ("naming conventions") "8" "" "")
#(index-entry "./intro.html#./intro:s44" ("semicolon (~;~)") ("semicolon (~\\scheme{;}~)") "7" "" "")
#(index-entry "./intro.html#./intro:s43" ("; (comment)") ("\\scheme{;} (comment)") "7" "" "")
#(index-entry "./intro.html#./intro:s42" ("comments") ("comments") "7" "" "")
#(index-entry "./intro.html#./intro:s41" ("whitespace characters") ("whitespace characters") "7" "" "")
#(index-entry "./intro.html#./intro:s40" ("expressions") ("expressions") "7" "" "")
#(index-entry "./intro.html#./intro:s39" ("#f") ("\\scheme{\\#f}") "7" "" "")
#(index-entry "./intro.html#./intro:s38" ("#t") ("\\scheme{\\#t}") "7" "" "")
#(index-entry "./intro.html#./intro:s37" ("false") ("false") "7" "" "")
#(index-entry "./intro.html#./intro:s36" ("true") ("true") "7" "" "")
#(index-entry "./intro.html#./intro:s35" ("boolean values") ("boolean values") "7" "" "")
#(index-entry "./intro.html#./intro:s34" ("brackets (~[~]~)") ("brackets (~\\scheme{[}~\\scheme{]}~)") "7" "" "")
#(index-entry "./intro.html#./intro:s33" ("()") ("\\scheme{()}") "7" "" "")
#(index-entry "./intro.html#./intro:s32" ("empty list") ("empty list") "7" "" "")
#(index-entry "./intro.html#./intro:s31" ("list constants") ("list constants") "7" "" "")
#(index-entry "./intro.html#./intro:s30" ("identifiers") ("identifiers") "6" "" "")
#(index-entry "./intro.html#./intro:s29" ("structured forms") ("structured forms") "6" "" "")
#(index-entry "./intro.html#./intro:s28" ("Common Lisp") ("Common Lisp") "6" "" "")
#(index-entry "./intro.html#./intro:s27" ("Algol 60") ("Algol 60") "6" "" "")
#(index-entry "./intro.html#./intro:s26" ("Lisp") ("Lisp") "6" "" "")
#(index-entry "./intro.html#./intro:s25" ("syntactic extensions") ("syntactic extensions") "5" "" "")
#(index-entry "./intro.html#./intro:s24" ("continuations") ("continuations") "5" "" "")
#(index-entry "./intro.html#./intro:s23" ("tail call") ("tail call") "5" "" "")
#(index-entry "./intro.html#./intro:s22" ("looping") ("looping") "5" "" "")
#(index-entry "./intro.html#./intro:s21" ("iteration") ("iteration") "5" "" "")
#(index-entry "./intro.html#./intro:s20" ("tail recursion") ("tail recursion") "5" "" "")
#(index-entry "./intro.html#./intro:s19" ("recursion") ("recursion") "5" "" "")
#(index-entry "./intro.html#./intro:s18" ("first-class procedures") ("first-class procedures") "5" "" "")
#(index-entry "./intro.html#./intro:s17" ("lexical scoping") ("lexical scoping") "5" "" "")
#(index-entry "./intro.html#./intro:s16" ("procedure definition") ("procedure definition") "5" "" "")
#(index-entry "./intro.html#./intro:s15" ("shadowing") ("shadowing") "4" "" "")
#(index-entry "./intro.html#./intro:s14" ("binding") ("binding") "4" "" "")
#(index-entry "./intro.html#./intro:s13" ("block structure") ("block structure") "4" "" "")
#(index-entry "./intro.html#./intro:s12" ("lexical scoping") ("lexical scoping") "4" "" "")
#(index-entry "./intro.html#./intro:s11" ("keywords") ("keywords") "4" "" "")
#(index-entry "./intro.html#./intro:s10" ("variables") ("variables") "4" "" "")
#(index-entry "./intro.html#./intro:s9" ("compiler") ("compiler") "4" "" "")
#(index-entry "./intro.html#./intro:s8" ("interpreter") ("interpreter") "4" "" "")
#(index-entry "./intro.html#./intro:s7" ("primitive procedures") ("primitive procedures") "4" "" "")
#(index-entry "./intro.html#./intro:s6" ("core syntactic forms") ("core syntactic forms") "4" "" "")
#(index-entry "./intro.html#./intro:s5" ("pointers") ("pointers") "4" "" "")
#(index-entry "./intro.html#./intro:s4" ("first-class data values") ("first-class data values") "3" "" "")
#(index-entry "./intro.html#./intro:s3" ("garbage collector") ("garbage collector") "3" "" "")
#(index-entry "./intro.html#./intro:s2" ("dynamic allocation") ("dynamic allocation") "3" "" "")
#(index-entry "./intro.html#./intro:s1" ("objects") ("objects") "3" "" "")
#(index-entry "./intro.html#./intro:s0" ("Revised Reports") ("Revised Reports") "3" "" "")
#(index-entry "./preface.html#./preface:s4" ("PetiteChezScheme") ("\\PetiteChezScheme") "ix" "" "")
#(index-entry "./preface.html#./preface:s3" ("ChezScheme") ("\\ChezScheme") "ix" "" "")
#(index-entry "./preface.html#./preface:s2" ("Revised Reports") ("Revised Reports") "ix" "" "")
#(index-entry "./preface.html#./preface:s1" ("Scheme standard") ("Scheme standard") "ix" "" "")
#(index-entry "./preface.html#./preface:s0" ("Lisp") ("Lisp") "ix" "" "")
)
