#lang zuo
(require (rename-in "makefiles/boot.zuo"
                    [boot-file-names boot:boot-file-names]
                    [cross-build-boot boot:cross-build-boot])
         (only-in "s/build.zuo"
                  [targets-at s-targets-at]
                  base-src-names
                  macro-src-names
                  other-src-names)
         (only-in "c/build.zuo"
                  [targets-at c-targets-at])
         "makefiles/lib.zuo")

(provide-targets targets-at)

;; This is the main entry point to the Chez Scheme build. A build
;; directory's "main.zuo" and a workarea directory's "main.zuo" both
;; call `targets-at` with an `at-dir` that points to the workarea
;; directory.

(define (targets-at at-dir [vars (hash)])
  (define Mf-config (at-dir "Mf-config"))
  (unless (file-exists? Mf-config)
    (error "no \"Mf-config\" - not running from a build directory?"))
  (define config (config-file->hash Mf-config vars))

  (define m (hash-ref config 'm))
  (define mboot (hash-ref config 'mboot m))

  ;; subdirectories where we create a "main.zuo" that bounce to
  ;; "build.zuo" in the source area
  (define bounce-dirs
    '("c" "s" "mats" "examples"))
  (define bounce-files
    (map (lambda (d) (at-dir d "main.zuo")) bounce-dirs))
  (define bounce-scripts
    (map (lambda (d)
           (~a "#lang zuo\n"
               (~s `(define config (config-file->hash (at-source ".." "Mf-config")))) "\n"
               (~s `(build/command-line* (dynamic-require (build-path ((make-at-dir (at-source ".." ".."))
                                                                       (hash-ref config 'srcdir))
                                                                      ,d
                                                                      "build.zuo")
                                                          'targets-at)
                                         at-source))))
         bounce-dirs))

  (define boot-src-dir
    (let ([here-dir (at-dir ".." "boot" mboot)])
      (if (directory-exists? here-dir)
          here-dir
          (at-source "boot" mboot))))

  (define boot-file-names
    (append
     boot:boot-file-names
     ;; extra boot files from source
     (let ([config-file (build-path boot-src-dir "Mf-config")])
       (if (file-exists? config-file)
           (shell->strings (hash-ref (config-file->hash config-file) 'extraBootFiles ""))
           '()))))

  (define boot-files
    (map (lambda (file) (at-dir "boot" m file)) boot-file-names))

  (define clean-links-stamp (at-dir ".no-links"))

  (define (build-kernel-only?)
    (string=? (hash-ref config 'buildKernelOnly "no") "yes"))
  (define (check-not-kernel-only)
    (when (build-kernel-only?)
      (error "target does not apply to a kernel-only configuration")))

  (define (parse-boot-args args k)
    (define host-scheme
      (and (pair? args)
           (equal? (car args) "--host-scheme")
           (pair? (cdr args))
           (cadr args)))
    (define host-workarea
      (and (not host-scheme)
           (pair? args)
           (equal? (car args) "--host-workarea")
           (pair? (cdr args))
           (cadr args)))
    (define rest-args (if (or host-workarea
                              host-scheme)
                          (cddr args)
                          args))
    (unless (<= (length rest-args) 1) (error "expected optional <machine>" args))
    (define xm (if (null? rest-args)
                   (hash-ref config 'defaultm m)
                   (car rest-args)))
    (k xm host-scheme host-workarea))

  ;; Cross-builds for a machine type that is specified as an argument;
  ;; the machine type defaults to the `defaultm` configuration entry, and
  ;; that default is normally useful if the current machine type is "pb"
  (define (cross-build-boot token args ccopts make-targets)
    (parse-boot-args
     args
     (lambda (xm host-scheme host-workarea)
       (boot:cross-build-boot token ccopts make-targets
                              xm host-scheme host-workarea
                              at-dir config vars m))))

  (define (cross-build-boot/safe+examples token args)
    (cross-build-boot token args (hash 'o "2" 'd "3" 'i "t") '("all" "examples")))

  (define (run-tests token name [vars vars])
    (check-not-kernel-only)
    (build (find-target name
                        ((dynamic-require (at-source "mats/build.zuo") 'targets-at)
                         (make-at-dir (at-dir "mats"))
                         vars))
           token))

  (define stexlib
    (let ((found (assoc "STEXLIB" (hash-ref (runtime-env) 'env))))
      (if found
          (cdr found)
          (at-source "stex"))))
  (define stex-sources
    (source-tree stexlib))

  (define doc-project-names
    ;; happily, the name of the subdirectory is the same as
    ;; value assigned to `x` in the corresponding makefile
    '("csug" "release_notes"))
  (define doc-install-dir-keys
    ;; in parallel to doc-project-names
    '(InstallCSUG InstallReleaseNotes))
  (define (targets-for-doc name install-dir-key)
    (define mf-in (at-source "makefiles" (~a "Makefile-" name ".in")))
    (define mf-out (at-dir name "Makefile"))
    (define name-sym (string->symbol name))
    (define (run-make target)
      (check-not-kernel-only)
      (define (->rel-shell pth)
        (string->shell (find-relative-path (at-dir name) pth)))
      (shell/wait "make"
                  (~a "m=" m)
                  (~a "srcdir=" (->rel-shell (at-source name)))
                  (~a "installdir="
                      (->rel-shell (hash-ref config install-dir-key)))
                  (~a "STEXLIB=" (->rel-shell stexlib))
                  target
                  (hash 'dir (at-dir name))))
    `([:target ,mf-out (,mf-in)
               ,(lambda (path token)
                  (mkdir-p (at-dir name))
                  (cp mf-in mf-out))]
      [:target ,name-sym (,mf-out
                          ,@(source-tree (at-source name))
                          ,@stex-sources)
               ,(lambda (token . args)
                  (run-make ""))]
      [:target ,(string->symbol (~a "install-" name)) (,name-sym)
               ,(lambda (token . args)
                  (run-make "install"))]))

  (define (check-boot-file-version)
    (define src-ver (source-version))
    (define boot-ver (boot-files-version (at-dir "boot" m)))
    (unless (equal? src-ver boot-ver)
      (error (~a "version " boot-ver " in boot and header files for "
                 m
                 " do not match source version " src-ver "; rebuild boot files"))))

  (define the-targets
    (make-targets
     `(;; Builds the kernel (C code) and boot files (Scheme code):
       [:target build (workarea kernel)
                ,(lambda (token)
                   (unless (build-kernel-only?)
                     (build (find-target "bootstrap" (s-targets-at (make-at-dir (at-dir "s")) vars))
                            token)))]

       ;; Builds just the kernel (C code):
       [:target kernel (workarea)
                ,(lambda (token)
                   (build (find-target "build" (c-targets-at (make-at-dir (at-dir "c")) vars))
                          token))]

       [:target install ()
                ,(lambda (token)
                   (check-not-kernel-only)
                   ((dynamic-require (at-source "makefiles/install.zuo") 'install)
                    at-dir))]

       [:target uninstall ()
                ,(lambda (token)
                   (check-not-kernel-only)
                   ((dynamic-require (at-source "makefiles/install.zuo") 'install)
                    at-dir
                    (hash)
                    #t))]

       [:target bintar ()
                ,(lambda (token)
                   ((dynamic-require (at-source "makefiles/bintar.zuo") 'make-bintar)
                    at-dir
                    m))]

       [:target run ()
                ,(lambda (token . args)
                   (cond
                     [(equal? (hash-ref config 'exeSuffix "") ".html")
                      ;; must be an Emscripten build...
                      (shell (build-shell "cd" (string->shell (at-dir "bin" m))
                                          "&& node scheme.js"))]
                     [else
                      (define t (find-target "run" (s-targets-at (make-at-dir (at-dir "s")) vars)))
                      (build (command-target->target t args)
                             token)]))
                :command]

       ;; See `cross-build-boot`: builds cross-compiler in unsafe mode, skips examples,
       ;; only rebuilds is needed
       [:target bootquick ()
                ,(lambda (token . args)
                   (check-not-kernel-only)
                   (parse-boot-args
                    args
                    (lambda (xm host-scheme host-workarea)
                      (unless (or host-scheme host-workarea)
                        (build/dep (find-target "kernel" the-targets) token))
                      (define (at-boot name) (at-dir "../boot" xm name))
                      (define host-boot-files
                        (cond
                          [host-workarea
                           (map (lambda (file) (build-path host-workarea "boot" m file)) boot-file-names)]
                          [host-scheme '()]
                          [else boot-files]))
                      (build (target (at-boot (car boot-file-names))
                                     (lambda (path token)
                                       (rule (append host-boot-files
                                                     (map (lambda (n) (at-source "s" n))
                                                          (append base-src-names
                                                                  macro-src-names
                                                                  other-src-names)))
                                             (lambda ()
                                               (cross-build-boot token args (hash) '("all")))))
                                     (hash 'co-outputs (map at-boot (cdr boot-file-names))))
                             token))))
                :command]

       ;; See `cross-build-boot`: builds cross-compiler in safe mode, includes examples
       [:target boot ()
                ,(lambda (token . args)
                   (check-not-kernel-only)
                   (cross-build-boot/safe+examples token args))
                :command]

       [:target bootfiles (build)
                ,(lambda (token)
                   (check-not-kernel-only)
                   (for-each (lambda (mach)
                               (cross-build-boot/safe+examples token (list mach)))
                             (unique (append (ls (at-source "boot"))
                                             (ls (at-dir "../boot"))))))]

       [:target bootpbchunk ()
                ,(lambda (token . args)
                   (build (command-target->target (find-target "bootpbchunk"
                                                               (s-targets-at (make-at-dir (at-dir "s")) vars))
                                                  args)
                          token))
                :command]

       [:target test-some (build) ,(lambda (token) (run-tests token "test-some"))]
       [:target test (build) ,(lambda (token) (run-tests token "test"))]
       [:target test-more (build) ,(lambda (token) (run-tests token "test-more"))]

       [:target coverage (kernel)
                ,(lambda (token)
                   (check-not-kernel-only)
                   (when (glob-match? "t*" m)
                     (error "coverage doesn't work with threads enabled"))
                   (let ([vars (hash-set vars 'c "t")])
                     (build (find-target "bootstrap" (s-targets-at (make-at-dir (at-dir "s"))
                                                                   (hash-set vars 'p "t")))
                            token)
                     (run-tests token "all" vars)
                     (run-tests token "coverage" vars)))]

       ;; The `reset` target discards the results in "boot" and puts back links to (or copies of)
       ;; to the versions that are used to seed the build
       [:target reset ()
                ,(lambda (token)
                   (for-each (lambda (f) (when (file-exists? f) (rm f))) boot-files)
                   (build (map (lambda (f) (find-target f the-targets)) boot-files)
                          token))]

       ,@(apply append (map targets-for-doc
                            doc-project-names
                            doc-install-dir-keys))
       [:target docs (csug release_notes)
                ,void]
       [:target install-docs (install-csug install-release_notes)
                ,void]


       [:target rpm ()
                ,(lambda (token)
                   (mkdir-p (at-dir "rpm"))
                   (cp/ln (at-source "rpm/Makefile") (at-dir "rpm/Makefile"))
                   (shell/wait (hash-ref config 'MAKE "make")
                               (hash 'dir (at-dir "rpm"))))]

       [:target pkg ()
                ,(lambda (token)
                   (mkdir-p (at-dir "pkg"))
                   (cp/ln (at-source "pkg/Makefile") (at-dir "pkg/Makefile"))
                   (cp/ln (at-source "pkg/rmpkg") (at-dir "pkg/rmpkg"))
                   (shell/wait (hash-ref config 'MAKE "make")
                               (hash 'dir (at-dir "pkg"))))]

       ,@(if (eq? 'windows (system-type))
             `([:target all-dlls (build)
                        ,(lambda (token)
                           (for-each*
                            '("dll" "static")
                            (lambda (runtimeAs)
                              (for-each*
                               '("dll" "exe")
                               (lambda (linkAs)
                                 (unless (and (equal? runtimeAs (hash-ref config 'runtimeAs #f))
                                              (equal? linkAs (hash-ref config 'linkAs #f)))
                                   (fd-write (fd-open-output 'stdout)
                                             (~a "Also buidling variant " runtimeAs " " linkAs "...\n"))
                                   (define var-dir (at-dir (~a "c-" runtimeAs "-" linkAs)))
                                   (mkdir-p var-dir)
                                   (build (find-target "lib" (c-targets-at (make-at-dir var-dir)
                                                                           (hash-set* vars
                                                                                      'runtimeAs runtimeAs
                                                                                      'linkAs linkAs)))
                                          token)))))))])
             '())

       [:target clean ()
                ,(lambda (token)
                   (define keeps '("Mf-config" "main.zuo"))
                   (for-each (lambda (name)
                               (unless (member name keeps)
                                 (rm* (at-dir name))))
                             (ls (at-dir "."))))]

       ;; Internal targets ----------------------------------------

       ;; Builds out an initial workarea, with links to book files
       [:target workarea (,@bounce-files ,@boot-files ,clean-links-stamp)
                ,(lambda (token)
                   (check-boot-file-version))
                :quiet]

       ,@(map (lambda (dir file script)
                `[:target ,file (,(input-data-target 'script script))
                          ,(lambda (path token)
                             (mkdir-p (at-dir dir))
                             (display-to-file script path :truncate))])
              bounce-dirs
              bounce-files
              bounce-scripts)

       ,@(map (lambda (name dest)
                (define src (build-path boot-src-dir name))
                ;; If `dest` doesn't exist, use `src`. If `dest` exists and `src` is newer
                ;; than when `dest` was first created, then use `src` in that case, too.
                ;; Otherwise, leave `dest` alone on the assumption that it's a newer
                ;; version bootstrapped from `src`.
                `[:target ,dest (,src)
                          ,(lambda (dest token)
                             (define orig-sha1-file (~a dest ".orig-hash"))
                             (define src-hash (file-sha256 src token))
                             (unless (and (file-exists? dest)
                                          (file-exists? orig-sha1-file)
                                          (equal? src-hash
                                                  (file->string orig-sha1-file)))
                               (mkdir-p (at-dir "boot" m))
                               (display-to-file src-hash orig-sha1-file :truncate)
                               (cp/ln src dest)))])
              boot-file-names
              boot-files)

       [:target ,clean-links-stamp ()
                ,(lambda (path token)
                   ;; clear out links from old build system that break the new build
                   (clean-links (at-dir))
                   (display-to-file "done" path :truncate))]

       ;; Needed to keep the initial-boot-file info here instead of in "boot"
       [:db-dir ,(at-dir ".")]

       #;(end-make-targets))))

  the-targets)
