;; This file was generated by makeexn
;;----------------------------------------------------------------------
;; record for static info produced by structs defined in c
(module kernstruct '#%kernel
  (#%require (for-syntax '#%kernel))
  (#%require "define.ss")
  (#%require (for-syntax "struct-info.ss"))
  (#%provide (all-defined))
  (define-syntax exn
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn)
        (quote-syntax make-exn)
        (quote-syntax exn?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        #t))))
  (define-syntax exn:fail
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail)
        (quote-syntax make-exn:fail)
        (quote-syntax exn:fail?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn)))))
  (define-syntax exn:fail:contract
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:contract)
        (quote-syntax make-exn:fail:contract)
        (quote-syntax exn:fail:contract?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail)))))
  (define-syntax exn:fail:contract:arity
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:contract:arity)
        (quote-syntax make-exn:fail:contract:arity)
        (quote-syntax exn:fail:contract:arity?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail:contract)))))
  (define-syntax exn:fail:contract:divide-by-zero
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:contract:divide-by-zero)
        (quote-syntax make-exn:fail:contract:divide-by-zero)
        (quote-syntax exn:fail:contract:divide-by-zero?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail:contract)))))
  (define-syntax exn:fail:contract:non-fixnum-result
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:contract:non-fixnum-result)
        (quote-syntax make-exn:fail:contract:non-fixnum-result)
        (quote-syntax exn:fail:contract:non-fixnum-result?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail:contract)))))
  (define-syntax exn:fail:contract:continuation
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:contract:continuation)
        (quote-syntax make-exn:fail:contract:continuation)
        (quote-syntax exn:fail:contract:continuation?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail:contract)))))
  (define-syntax exn:fail:contract:variable
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:contract:variable)
        (quote-syntax make-exn:fail:contract:variable)
        (quote-syntax exn:fail:contract:variable?)
        (list
         (quote-syntax exn:fail:contract:variable-id)
         (quote-syntax exn-continuation-marks)
         (quote-syntax exn-message))
        '(#f #f #f)
        (quote-syntax exn:fail:contract)))))
  (define-syntax exn:fail:syntax
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:syntax)
        (quote-syntax make-exn:fail:syntax)
        (quote-syntax exn:fail:syntax?)
        (list
         (quote-syntax exn:fail:syntax-exprs)
         (quote-syntax exn-continuation-marks)
         (quote-syntax exn-message))
        '(#f #f #f)
        (quote-syntax exn:fail)))))
  (define-syntax exn:fail:read
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:read)
        (quote-syntax make-exn:fail:read)
        (quote-syntax exn:fail:read?)
        (list
         (quote-syntax exn:fail:read-srclocs)
         (quote-syntax exn-continuation-marks)
         (quote-syntax exn-message))
        '(#f #f #f)
        (quote-syntax exn:fail)))))
  (define-syntax exn:fail:read:eof
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:read:eof)
        (quote-syntax make-exn:fail:read:eof)
        (quote-syntax exn:fail:read:eof?)
        (list
         (quote-syntax exn:fail:read-srclocs)
         (quote-syntax exn-continuation-marks)
         (quote-syntax exn-message))
        '(#f #f #f)
        (quote-syntax exn:fail:read)))))
  (define-syntax exn:fail:read:non-char
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:read:non-char)
        (quote-syntax make-exn:fail:read:non-char)
        (quote-syntax exn:fail:read:non-char?)
        (list
         (quote-syntax exn:fail:read-srclocs)
         (quote-syntax exn-continuation-marks)
         (quote-syntax exn-message))
        '(#f #f #f)
        (quote-syntax exn:fail:read)))))
  (define-syntax exn:fail:filesystem
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:filesystem)
        (quote-syntax make-exn:fail:filesystem)
        (quote-syntax exn:fail:filesystem?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail)))))
  (define-syntax exn:fail:filesystem:exists
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:filesystem:exists)
        (quote-syntax make-exn:fail:filesystem:exists)
        (quote-syntax exn:fail:filesystem:exists?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail:filesystem)))))
  (define-syntax exn:fail:filesystem:version
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:filesystem:version)
        (quote-syntax make-exn:fail:filesystem:version)
        (quote-syntax exn:fail:filesystem:version?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail:filesystem)))))
  (define-syntax exn:fail:network
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:network)
        (quote-syntax make-exn:fail:network)
        (quote-syntax exn:fail:network?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail)))))
  (define-syntax exn:fail:out-of-memory
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:out-of-memory)
        (quote-syntax make-exn:fail:out-of-memory)
        (quote-syntax exn:fail:out-of-memory?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail)))))
  (define-syntax exn:fail:unsupported
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:unsupported)
        (quote-syntax make-exn:fail:unsupported)
        (quote-syntax exn:fail:unsupported?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail)))))
  (define-syntax exn:fail:user
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:fail:user)
        (quote-syntax make-exn:fail:user)
        (quote-syntax exn:fail:user?)
        (list (quote-syntax exn-continuation-marks) (quote-syntax exn-message))
        '(#f #f)
        (quote-syntax exn:fail)))))
  (define-syntax exn:break
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:exn:break)
        (quote-syntax make-exn:break)
        (quote-syntax exn:break?)
        (list
         (quote-syntax exn:break-continuation)
         (quote-syntax exn-continuation-marks)
         (quote-syntax exn-message))
        '(#f #f #f)
        (quote-syntax exn)))))
  (define-syntax arity-at-least
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:arity-at-least)
        (quote-syntax make-arity-at-least)
        (quote-syntax arity-at-least?)
        (list (quote-syntax arity-at-least-value))
        '(#f)
        #t))))
  (define-syntax date
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:date)
        (quote-syntax make-date)
        (quote-syntax date?)
        (list
         (quote-syntax date-time-zone-offset)
         (quote-syntax date-dst?)
         (quote-syntax date-year-day)
         (quote-syntax date-week-day)
         (quote-syntax date-year)
         (quote-syntax date-month)
         (quote-syntax date-day)
         (quote-syntax date-hour)
         (quote-syntax date-minute)
         (quote-syntax date-second))
        '(#f #f #f #f #f #f #f #f #f #f)
        #t))))
  (define-syntax srcloc
    (make-struct-info
     (λ ()
       (list
        (quote-syntax struct:srcloc)
        (quote-syntax make-srcloc)
        (quote-syntax srcloc?)
        (list
         (quote-syntax srcloc-span)
         (quote-syntax srcloc-position)
         (quote-syntax srcloc-column)
         (quote-syntax srcloc-line)
         (quote-syntax srcloc-source))
        '(#f #f #f #f #f)
        #t)))))
