"GCALC"
#t
18
8
#f
#f
#f
(#f . #f)
((#f . #f) ("cons" lambda (var green) (lambda (var red) (lambda (var blue) (apply (apply (var blue) (var green)) (var red))))) ("zero" lambda (var green) (lambda (var red) (var red) #f) #f) ("zero?" lambda (var blue) (apply (apply (var blue) (lambda (var red) (lambda (var green) (lambda (var red) (var red))))) (lambda (var green) (lambda (var red) (var green))))) ("sub1" lambda (var dk-green) (apply (apply (apply (var dk-green) (lambda (var magenta) (lambda (var blue) (apply (apply (var blue) (apply (var magenta) (lambda (var green) (lambda (var red) (var red))))) (lambda (var green) (lambda (var red) (apply (var green) (apply (apply (apply (var magenta) (lambda (var green) (lambda (var red) (var red)))) (var green)) (var red))))))))) (lambda (var blue) (apply (apply (var blue) (lambda (var green) (lambda (var red) (var red)))) (lambda (var green) (lambda (var red) (var red)))))) (lambda (var green) (lambda (var red) (var green))))) ("false" lambda (var green) (lambda (var red) (var red) #f) #f) ("car" lambda (var blue) (apply (var blue) (lambda (var green) (lambda (var red) (var green))))) ("one" lambda (var green) (lambda (var red) (apply (var green) (var red)))) ("add1" lambda (var blue) (lambda (var green) (lambda (var red) (apply (var green) (apply (apply (var blue) (var green)) (var red)))))) ("minus" lambda (var green) (lambda (var red) (apply (apply (var red) (lambda (var dk-green) (apply (apply (apply (var dk-green) (lambda (var magenta) (lambda (var blue) (apply (apply (var blue) (apply (var magenta) (lambda (var green) (lambda (var red) (var red))))) (lambda (var green) (lambda (var red) (apply (var green) (apply (apply (apply (var magenta) (lambda (var green) (lambda (var red) (var red)))) (var green)) (var red))))))))) (lambda (var blue) (apply (apply (var blue) (lambda (var green) (lambda (var red) (var red)))) (lambda (var green) (lambda (var red) (var red)))))) (lambda (var green) (lambda (var red) (var green)))))) (var green)))) ("if" lambda (var dk-gray) (lambda (var gray) (lambda (var lt-gray) (apply (apply (var dk-gray) (var gray)) (var lt-gray))))) ("cdr" lambda (var blue) (apply (var blue) (lambda (var green) (lambda (var red) (var red))))) ("two" lambda (var green) (lambda (var red) (apply (var green) (apply (apply (lambda (var green) (lambda (var red) (apply (var green) (apply (apply (lambda (var green) (lambda (var red) (var red) #f) #f) (var green)) (var red))))) (var green)) (var red))))) ("plus" lambda (var green) (lambda (var red) (apply (apply (var green) (lambda (var blue) (lambda (var green) (lambda (var red) (apply (var green) (apply (apply (var blue) (var green)) (var red))))))) (var red)))) (#f . #f) ("and" lambda (var green) (lambda (var red) (apply (apply (var green) (var red)) (var green) #t) #t) #t) ("null" lambda (var green) (lambda (var green) (lambda (var red) (var green)))) ("three" lambda (var green) (lambda (var red) (apply (var green) (apply (apply (lambda (var green) (lambda (var red) (apply (var green) (apply (apply (lambda (var green) (lambda (var red) (apply (var green) (apply (apply (lambda (var green) (lambda (var red) (var red) #f) #f) (var green)) (var red))))) (var green)) (var red))))) (var green)) (var red))))) ("times" lambda (var green) (lambda (var red) (lambda (var blue) (apply (var green) (apply (var red) (var blue)))))) (#f . #f) ("or" lambda (var green) (lambda (var red) (apply (apply (var green) (var green)) (var red)))) ("null?" lambda (var green) (apply (var green) (lambda (var green) (lambda (var red) (lambda (var green) (lambda (var red) (var red))))))) ("Y-comb" lambda (var red) (apply (var red) (apply (lambda (var green) (apply (var red) (apply (var green) (var green)))) (lambda (var green) (apply (var red) (apply (var green) (var green))))) #t) #t) (#f . #f) (#f . #f) ("id" lambda (var white) (var white) #f) ("hole" lambda (var white) transparent #t) ("slicer" \| (\| (\| (\| (lambda (var white) (var white) #f) (lambda (var white) transparent #t)) (\| (lambda (var white) (var white) #f) (lambda (var white) transparent #t))) (\| (\| (lambda (var white) (var white) #f) (lambda (var white) transparent #t)) (\| (lambda (var white) (var white) #f) (lambda (var white) transparent #t)))) (\| (\| (\| (lambda (var white) (var white) #f) (lambda (var white) transparent #t)) (\| (lambda (var white) (var white) #f) (lambda (var white) transparent #t))) (\| (\| (lambda (var white) (var white) #f) (lambda (var white) transparent #t)) (\| (lambda (var white) (var white) #f) (lambda (var white) transparent #t))))) (#f . #f) (#f . #f) ("\\x.x1" lambda (var gray) (/ (- (\| red (var gray) #f) (\| (var gray) green #f) #f) (- (\| (var gray) yellow #f) (\| blue (var gray) #f) #f) #f) #f) ("x1" / (- (\| red gray) (\| gray green)) (- (\| gray yellow) (\| blue gray))) ("x2" / (- (\| green red) (\| red green)) (- (\| red green) (\| green red))) ("numtest (\\n.n(\\x.x1)trn)" lambda (var black) (apply (apply (var black) (lambda (var gray) (/ (- (\| red (var gray) #f) (\| (var gray) green #f) #f) (- (\| (var gray) yellow #f) (\| blue (var gray)))))) transparent)) (#f . #f) (#f . #f) (#f . #f) (#f . #f) (#f . #f) (#f . #f))
