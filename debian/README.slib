MzScheme and SLIB for DEBIAN
----------------------------

SLIB is a package of useful scheme routines that have been designed to
work with a wide range of Scheme implementations.  Until recently,
MzScheme's advanced module system and environment have made working
with SLIB somewhat difficult.

Recent versions of MzScheme (i.e., the 202-series) now include enhanced
support for working with SLIB.  Still, there are a few quirks that must
be recognized to provide the best results.  Many, many, thanks to
MJ Ray <markj@cloaked.freeserve.co.uk> for his work in identifying how
to make this work:

1.  Invoke the MzScheme gestures to load the SLIB-compatibility code:
        ; SCHEME_LIBRARY_PATH=/usr/share/slib mzscheme
        Welcome to MzScheme version 202.3, Copyright (c) 1995-2002 PLT
        > (require (lib "load.ss" "slibinit"))
2.  Test that SLIB is properly running:
        > (slib:report)
        slib "2d4" on |MzScheme| "202.3" on unix 
        (implementation-vicinity) is "/usr/bin/../lib/plt/bin/../" 
        (library-vicinity) is "/usr/share/slib" 
        (scheme-file-suffix) is ".scm" 
        *load-pathname* is "/usr/share/slib/mklibcat" 
        implementation *features* : 
                bignum complex real rational
                inexact vicinity source compiled
                rev4-report rev4-optional-procedures multiarg/and- multiarg-apply
                rationalize delay with-file string-port
                char-ready? macro eval values
                dynamic-wind ieee-floating-point full-continuation pretty-print
                system getenv program-arguments current-time
        implementation *catalog* : 
                (schelog . "/usr/share/slibschelog/schelog") 
                 ... 
3.  WARNING:  Importing the SLIB package means that 'require' will not
        work as expected.  Instead, require works as follows (taken from
        the slibinit/doc.txt file):

        SLIB is not integerated with MzScheme's module system.  Instead, SLIB
        works in the top-level environment, and it provides its own "feature"
        system using the function `require'. Unfortunately, that function name
        conflicts with MzScheme's own `require' form. In an attempt to work
        around this collision, "init.ss" re-defines `require' as syntax:
          
        >   require [not in app position]  -> slib:require
        >   (require '<something>)         -> (slib:require '<something>)
        >   (require <any> ...)            -> (mz:require <any> ...)
        >
        >   where `slib:require' is bound to SLIB's require function, and
        >   `mz:require' is bound to MzScheme's `require' syntax.

You should now be able to work with SLIB forms.  Note that no
"SCHEME_LIBRARY_PATH" is needed.  I strongly recommend that you review the
information in the slibinit collection's "doc.txt" file for further
information.

Brent A. Fulgham <bfulgham@debian.org>  Sat, 28 Sep 2002 21:43:51 -0700
