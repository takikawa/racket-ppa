From: David Bremner <bremner@debian.org>
Date: Wed, 15 Apr 2020 11:33:12 -0300
Subject: Revert "fix bignum quotient on 32-bit ARM"

This reverts commit 17bc6262938f3b29e7ec66d0e77eeb08807854cd.

This is an attempt to get racket building on armhf again.
---
 src/cfg-racket                   |  4 ---
 src/racket/configure.ac          |  4 ---
 src/racket/src/Makefile.in       |  3 --
 src/racket/src/gmp/gmp-impl.h    |  4 ---
 src/racket/src/gmp/gmplonglong.h | 68 +++++-----------------------------------
 5 files changed, 7 insertions(+), 76 deletions(-)

diff --git a/src/cfg-racket b/src/cfg-racket
index 8df7893..3e4f9b3 100755
--- a/src/cfg-racket
+++ b/src/cfg-racket
@@ -4879,10 +4879,6 @@ case "$host_os" in
        enable_parallel_by_default=yes
        check_for_unwind=REG_ESP
        ;;
-      arm*)
-       EXTRA_GMP_OBJ="gmp_arm_gcc.o"
-       EXTRA_GMP_DEP='$(EXTRA_GMP_DEP_FILE)'
-       ;;
       *)
        ;;
     esac
diff --git a/src/racket/configure.ac b/src/racket/configure.ac
index 00c5e65..7214cd4 100644
--- a/src/racket/configure.ac
+++ b/src/racket/configure.ac
@@ -620,10 +620,6 @@ case "$host_os" in
        enable_parallel_by_default=yes
        check_for_unwind=REG_ESP
        ;;
-      arm*)
-       EXTRA_GMP_OBJ="gmp_arm_gcc.o"
-       EXTRA_GMP_DEP='$(EXTRA_GMP_DEP_FILE)'
-       ;;
       *)
        ;;
     esac
diff --git a/src/racket/src/Makefile.in b/src/racket/src/Makefile.in
index 38b9d2c..873922c 100644
--- a/src/racket/src/Makefile.in
+++ b/src/racket/src/Makefile.in
@@ -209,7 +209,6 @@ fun.@LTO@: $(srcdir)/fun.c
 future.@LTO@: $(srcdir)/future.c
 	$(CC) $(ALL_CFLAGS) -c $(srcdir)/future.c -o future.@LTO@
 gmp.@LTO@: $(srcdir)/gmp/gmp.c $(srcdir)/gmp/gmplonglong.h \
-           $(srcdir)/gmp/gmp.h $(srcdir)/gmp/gmp-impl.h $(srcdir)/gmp/gmp-mparam.h \
            $(srcdir)/../include/schthread.h $(srcdir)/../sconfig.h
 	$(CC) $(ALL_CFLAGS) -c $(srcdir)/gmp/gmp.c -o gmp.@LTO@
 hash.@LTO@: $(srcdir)/hash.c $(srcdir)/hamt_subset.inc
@@ -301,8 +300,6 @@ vector.@LTO@: $(srcdir)/vector.c
 
 gmp_alpha_gcc.@LTO@: $(srcdir)/gmp/gmp_alpha_gcc.s
 	$(AS) -o gmp_alpha_gcc.@LTO@ $(srcdir)/gmp/gmp_alpha_gcc.s
-gmp_arm_gcc.@LTO@: $(srcdir)/gmp/gmp_arm_gcc.s
-	$(AS) -o gmp_arm_gcc.@LTO@ $(srcdir)/gmp/gmp_arm_gcc.s
 
 SCONFIG = $(srcdir)/../sconfig.h $(srcdir)/../uconfig.h ../mzconfig.h
 
diff --git a/src/racket/src/gmp/gmp-impl.h b/src/racket/src/gmp/gmp-impl.h
index 79f69af..1560a95 100644
--- a/src/racket/src/gmp/gmp-impl.h
+++ b/src/racket/src/gmp/gmp-impl.h
@@ -720,10 +720,6 @@ extern mp_size_t __gmp_default_fp_limb_precision;
 #define TARGET_REGISTER_STARVED 0
 #endif
 
-#if defined (__arm__)
-# define HAVE_NATIVE_mpn_invert_limb 1
-#endif
-
 /* Use a library function for invert_limb, if available. */
 #if ! defined (invert_limb) && HAVE_NATIVE_mpn_invert_limb
 #define mpn_invert_limb  __MPN(invert_limb)
diff --git a/src/racket/src/gmp/gmplonglong.h b/src/racket/src/gmp/gmplonglong.h
index 4ac9c40..acd71e6 100644
--- a/src/racket/src/gmp/gmplonglong.h
+++ b/src/racket/src/gmp/gmplonglong.h
@@ -221,63 +221,17 @@ extern UDItype __MPN(udiv_qrnnd) _PROTO ((UDItype, UDItype, UDItype, UDItype *))
 #define add_ssaaaa(sh, sl, ah, al, bh, bl) \
   __asm__ ("adds\t%1, %4, %5\n\tadc\t%0, %2, %3"			\
 	   : "=r" (sh), "=&r" (sl)					\
-	   : "r" (ah), "rI" (bh), "%r" (al), "rI" (bl) __CLOBBER_CC)
+	   : "%r" (ah), "rI" (bh), "%r" (al), "rI" (bl))
 #define sub_ddmmss(sh, sl, ah, al, bh, bl) \
-  do {									\
-    if (__builtin_constant_p (al))					\
-      {									\
-	if (__builtin_constant_p (ah))					\
-	  __asm__ ("rsbs\t%1, %5, %4\n\trsc\t%0, %3, %2"		\
-		   : "=r" (sh), "=&r" (sl)				\
-		   : "rI" (ah), "r" (bh), "rI" (al), "r" (bl) __CLOBBER_CC); \
-	else								\
-	  __asm__ ("rsbs\t%1, %5, %4\n\tsbc\t%0, %2, %3"		\
-		   : "=r" (sh), "=&r" (sl)				\
-		   : "r" (ah), "rI" (bh), "rI" (al), "r" (bl) __CLOBBER_CC); \
-      }									\
-    else if (__builtin_constant_p (ah))					\
-      {									\
-	if (__builtin_constant_p (bl))					\
-	  __asm__ ("subs\t%1, %4, %5\n\trsc\t%0, %3, %2"		\
-		   : "=r" (sh), "=&r" (sl)				\
-		   : "rI" (ah), "r" (bh), "r" (al), "rI" (bl) __CLOBBER_CC); \
-	else								\
-	  __asm__ ("rsbs\t%1, %5, %4\n\trsc\t%0, %3, %2"		\
-		   : "=r" (sh), "=&r" (sl)				\
-		   : "rI" (ah), "r" (bh), "rI" (al), "r" (bl) __CLOBBER_CC); \
-      }									\
-    else if (__builtin_constant_p (bl))					\
-      {									\
-	if (__builtin_constant_p (bh))					\
-	  __asm__ ("subs\t%1, %4, %5\n\tsbc\t%0, %2, %3"		\
-		   : "=r" (sh), "=&r" (sl)				\
-		   : "r" (ah), "rI" (bh), "r" (al), "rI" (bl) __CLOBBER_CC); \
-	else								\
-	  __asm__ ("subs\t%1, %4, %5\n\trsc\t%0, %3, %2"		\
-		   : "=r" (sh), "=&r" (sl)				\
-		   : "rI" (ah), "r" (bh), "r" (al), "rI" (bl) __CLOBBER_CC); \
-      }									\
-    else /* only bh might be a constant */				\
-      __asm__ ("subs\t%1, %4, %5\n\tsbc\t%0, %2, %3"			\
-	       : "=r" (sh), "=&r" (sl)					\
-	       : "r" (ah), "rI" (bh), "r" (al), "rI" (bl) __CLOBBER_CC);\
-    } while (0)
-#if 1 || defined (__arm_m__)	/* `M' series has widening multiply support */
+  __asm__ ("subs\t%1, %4, %5\n\tsbc\t%0, %2, %3"			\
+	   : "=r" (sh),	"=&r" (sl)					\
+	   : "r" (ah), "rI" (bh), "r" (al), "rI" (bl))
+#if 1 || defined (__arm_m__)		/* `M' series has widening multiply support */
 #define umul_ppmm(xh, xl, a, b) \
   __asm__ ("umull %0,%1,%2,%3" : "=&r" (xl), "=&r" (xh) : "r" (a), "r" (b))
-#define UMUL_TIME 5
 #define smul_ppmm(xh, xl, a, b) \
   __asm__ ("smull %0,%1,%2,%3" : "=&r" (xl), "=&r" (xh) : "r" (a), "r" (b))
-#ifndef LONGLONG_STANDALONE
-#define udiv_qrnnd(q, r, n1, n0, d) \
-  do { UWtype __di;							\
-    __di = __MPN(invert_limb) (d);					\
-    udiv_qrnnd_preinv (q, r, n1, n0, d, __di);				\
-  } while (0)
-#define UDIV_PREINV_ALWAYS  1
-#define UDIV_NEEDS_NORMALIZATION 1
-#define UDIV_TIME 70
-#endif /* LONGLONG_STANDALONE */
+#define UMUL_TIME 5
 #else
 #define umul_ppmm(xh, xl, a, b) \
   __asm__ ("%@ Inlined umul_ppmm\n"					\
@@ -297,16 +251,8 @@ extern UDItype __MPN(udiv_qrnnd) _PROTO ((UDItype, UDItype, UDItype, UDItype *))
 	   : "r" (a), "r" (b)						\
 	   : "r0", "r1", "r2")
 #define UMUL_TIME 20
-#ifndef LONGLONG_STANDALONE
-#define udiv_qrnnd(q, r, n1, n0, d) \
-  do { UWtype __r;							\
-    (q) = __MPN(udiv_qrnnd) (&__r, (n1), (n0), (d));			\
-    (r) = __r;								\
-  } while (0)
-extern UWtype __MPN(udiv_qrnnd) _PROTO ((UWtype *, UWtype, UWtype, UWtype));
-#define UDIV_TIME 200
-#endif /* LONGLONG_STANDALONE */
 #endif
+#define UDIV_TIME 100
 #endif /* __arm__ */
 
 #if defined (__clipper__) && W_TYPE_SIZE == 32
